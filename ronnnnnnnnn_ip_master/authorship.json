[{"path":"src/main/java/BadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class BadException extends Exception {","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    public BadException(String message) {","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"ronnnnnnnnn":5}},{"path":"src/main/java/BadGPT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.InputMismatchException;","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.List;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class BadGPT {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    private static final String NAME \u003d \"BadGPT\";","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    private static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Hello! I\u0027m \" + NAME + \".\\n\" + \"What can I do for you?\");","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"        while (true) {","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"            String cmd \u003d sc.next();","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"                // Cases","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"                // \"bye\": Exit the loop and the program.","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"                // \"list\": List out all currently stored tasks.","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"                // \"mark\": Mark the task corresponding to the number entered after as complete.","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"                // \"unmark\": Unmark the task corresponding to the number entered after.","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"                // Else, store the string entered as a new Task object.","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"                switch (cmd) {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"bye\": {","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"                        sc.close();","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"                        bye();","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"list\": {","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"                        list();","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"mark\": {","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"                        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"                            int taskNum \u003d sc.nextInt() - 1;","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"                            mark(taskNum);","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } catch (InputMismatchException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"                            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"                            sc.nextLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"                        }","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"unmark\": {","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"                        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"                            int taskNum \u003d sc.nextInt() - 1;","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"                            unmark(taskNum);","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } catch (InputMismatchException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"                            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"                            sc.nextLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"                        }","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"todo\": {","lastModifiedDate":"2024-01-27"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"                        String description \u003d sc.nextLine().stripLeading();","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"                        if (description.isEmpty()) {","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"                            line();","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"                            System.out.println(\"are you satisfied with that, todo aoi\");","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"                            line();","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"                            store(new ToDo(description));","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"                        }","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"deadline\": {","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"                        String[] taskInfo \u003d parser(sc.nextLine());","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"                        store(new Deadline(taskInfo[0], taskInfo[1]));","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-27"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"event\": {","lastModifiedDate":"2024-01-27"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"                        String[] taskInfo \u003d parser(sc.nextLine());","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"                        store(new Event(taskInfo[0], taskInfo[1]));","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-25"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-25"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"                    case \"delete\": {","lastModifiedDate":"2024-01-27"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"                        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"                            int taskNum \u003d sc.nextInt() - 1;","lastModifiedDate":"2024-01-27"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"                            delete(taskNum);","lastModifiedDate":"2024-01-27"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } catch (InputMismatchException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"                            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":86,"author":{"gitId":"ronnnnnnnnn"},"content":"                        } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":87,"author":{"gitId":"ronnnnnnnnn"},"content":"                            sc.nextLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":88,"author":{"gitId":"ronnnnnnnnn"},"content":"                        }","lastModifiedDate":"2024-01-30"},{"lineNumber":89,"author":{"gitId":"ronnnnnnnnn"},"content":"                        break;","lastModifiedDate":"2024-01-27"},{"lineNumber":90,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"ronnnnnnnnn"},"content":"                    default: {","lastModifiedDate":"2024-01-27"},{"lineNumber":92,"author":{"gitId":"ronnnnnnnnn"},"content":"                        line();","lastModifiedDate":"2024-01-27"},{"lineNumber":93,"author":{"gitId":"ronnnnnnnnn"},"content":"                        System.out.println(\"我不明白\");","lastModifiedDate":"2024-01-27"},{"lineNumber":94,"author":{"gitId":"ronnnnnnnnn"},"content":"                        sc.nextLine(); // Remove the entire line after the command","lastModifiedDate":"2024-01-30"},{"lineNumber":95,"author":{"gitId":"ronnnnnnnnn"},"content":"                        line();","lastModifiedDate":"2024-01-27"},{"lineNumber":96,"author":{"gitId":"ronnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-01-27"},{"lineNumber":97,"author":{"gitId":"ronnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-01-25"},{"lineNumber":98,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (TaskNotFoundException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":99,"author":{"gitId":"ronnnnnnnnn"},"content":"                System.err.println(e);","lastModifiedDate":"2024-01-30"},{"lineNumber":100,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":101,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":102,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":103,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":104,"author":{"gitId":"ronnnnnnnnn"},"content":"    // TODO: add following exceptions: command not found, missing description/date for tasks,","lastModifiedDate":"2024-01-30"},{"lineNumber":105,"author":{"gitId":"ronnnnnnnnn"},"content":"    // invalid format for task type,","lastModifiedDate":"2024-01-30"},{"lineNumber":106,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":107,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void line() {","lastModifiedDate":"2024-01-25"},{"lineNumber":108,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2024-01-25"},{"lineNumber":109,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":110,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":111,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void store(Task task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":112,"author":{"gitId":"ronnnnnnnnn"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":113,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":114,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Added task: \" + task);","lastModifiedDate":"2024-01-27"},{"lineNumber":115,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" task(s) in the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":116,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":117,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":118,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":119,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void list() {","lastModifiedDate":"2024-01-25"},{"lineNumber":120,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":121,"author":{"gitId":"ronnnnnnnnn"},"content":"        // TODO: add case where nothing is in list","lastModifiedDate":"2024-01-27"},{"lineNumber":122,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-01-25"},{"lineNumber":123,"author":{"gitId":"ronnnnnnnnn"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-01-25"},{"lineNumber":124,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2024-01-25"},{"lineNumber":125,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":126,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":127,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":128,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":129,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void mark(int taskNum) throws TaskNotFoundException {","lastModifiedDate":"2024-01-30"},{"lineNumber":130,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":131,"author":{"gitId":"ronnnnnnnnn"},"content":"            String msg;","lastModifiedDate":"2024-01-30"},{"lineNumber":132,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (!tasks.get(taskNum).isComplete()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":133,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasks.get(taskNum).complete();","lastModifiedDate":"2024-01-25"},{"lineNumber":134,"author":{"gitId":"ronnnnnnnnn"},"content":"                msg \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(taskNum);","lastModifiedDate":"2024-01-30"},{"lineNumber":135,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-01-30"},{"lineNumber":136,"author":{"gitId":"ronnnnnnnnn"},"content":"                msg \u003d tasks.get(taskNum) + \"\\nThis task has already been completed.\";","lastModifiedDate":"2024-01-30"},{"lineNumber":137,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":138,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-25"},{"lineNumber":139,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(msg);","lastModifiedDate":"2024-01-30"},{"lineNumber":140,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-25"},{"lineNumber":141,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":142,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":143,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":144,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":145,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":146,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void unmark(int taskNum) throws TaskNotFoundException {","lastModifiedDate":"2024-01-30"},{"lineNumber":147,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":148,"author":{"gitId":"ronnnnnnnnn"},"content":"            String msg;","lastModifiedDate":"2024-01-30"},{"lineNumber":149,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (tasks.get(taskNum).isComplete()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":150,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasks.get(taskNum).uncomplete();","lastModifiedDate":"2024-01-25"},{"lineNumber":151,"author":{"gitId":"ronnnnnnnnn"},"content":"                msg \u003d \"wyd bro\\n\" + tasks.get(taskNum);","lastModifiedDate":"2024-01-30"},{"lineNumber":152,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-01-30"},{"lineNumber":153,"author":{"gitId":"ronnnnnnnnn"},"content":"                msg \u003d tasks.get(taskNum) + \"\\nit\u0027s not even done yet lol\";","lastModifiedDate":"2024-01-30"},{"lineNumber":154,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":155,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-25"},{"lineNumber":156,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(msg);","lastModifiedDate":"2024-01-30"},{"lineNumber":157,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-25"},{"lineNumber":158,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":159,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":160,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":161,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":162,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":163,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static String[] parser(String in) {","lastModifiedDate":"2024-01-27"},{"lineNumber":164,"author":{"gitId":"ronnnnnnnnn"},"content":"        String taskInfo \u003d \"\", description \u003d \"\";","lastModifiedDate":"2024-01-27"},{"lineNumber":165,"author":{"gitId":"ronnnnnnnnn"},"content":"        String[] out \u003d new String[2];","lastModifiedDate":"2024-01-27"},{"lineNumber":166,"author":{"gitId":"ronnnnnnnnn"},"content":"        for (String next : in.split(\" \")) {","lastModifiedDate":"2024-01-27"},{"lineNumber":167,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (next.contains(\"/\")) {","lastModifiedDate":"2024-01-27"},{"lineNumber":168,"author":{"gitId":"ronnnnnnnnn"},"content":"                if (description.isEmpty()){","lastModifiedDate":"2024-01-27"},{"lineNumber":169,"author":{"gitId":"ronnnnnnnnn"},"content":"                    description \u003d taskInfo.trim();","lastModifiedDate":"2024-01-27"},{"lineNumber":170,"author":{"gitId":"ronnnnnnnnn"},"content":"                    taskInfo \u003d \"\";","lastModifiedDate":"2024-01-27"},{"lineNumber":171,"author":{"gitId":"ronnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-01-27"},{"lineNumber":172,"author":{"gitId":"ronnnnnnnnn"},"content":"                next \u003d next.substring(1);","lastModifiedDate":"2024-01-27"},{"lineNumber":173,"author":{"gitId":"ronnnnnnnnn"},"content":"                next +\u003d \":\";","lastModifiedDate":"2024-01-27"},{"lineNumber":174,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":175,"author":{"gitId":"ronnnnnnnnn"},"content":"            taskInfo +\u003d next + \" \";","lastModifiedDate":"2024-01-27"},{"lineNumber":176,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":177,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskInfo \u003d taskInfo.trim();","lastModifiedDate":"2024-01-27"},{"lineNumber":178,"author":{"gitId":"ronnnnnnnnn"},"content":"        out[0] \u003d description;","lastModifiedDate":"2024-01-27"},{"lineNumber":179,"author":{"gitId":"ronnnnnnnnn"},"content":"        out[1] \u003d taskInfo;","lastModifiedDate":"2024-01-27"},{"lineNumber":180,"author":{"gitId":"ronnnnnnnnn"},"content":"        return out;","lastModifiedDate":"2024-01-27"},{"lineNumber":181,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":182,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":183,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void delete(int taskNum) throws TaskNotFoundException {","lastModifiedDate":"2024-01-30"},{"lineNumber":184,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":185,"author":{"gitId":"ronnnnnnnnn"},"content":"            Task task \u003d tasks.remove(taskNum);","lastModifiedDate":"2024-01-27"},{"lineNumber":186,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-27"},{"lineNumber":187,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(\"This task has been removed: \" + task);","lastModifiedDate":"2024-01-27"},{"lineNumber":188,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" task(s) in the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":189,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(\"No, what are you waiting for? Do it! Just do it!\");","lastModifiedDate":"2024-01-27"},{"lineNumber":190,"author":{"gitId":"ronnnnnnnnn"},"content":"            line();","lastModifiedDate":"2024-01-27"},{"lineNumber":191,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":192,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-01-30"},{"lineNumber":193,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":194,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":195,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":196,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void bye() {","lastModifiedDate":"2024-01-25"},{"lineNumber":197,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":198,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Smell ya later\");","lastModifiedDate":"2024-01-25"},{"lineNumber":199,"author":{"gitId":"ronnnnnnnnn"},"content":"        line();","lastModifiedDate":"2024-01-25"},{"lineNumber":200,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.exit(0);","lastModifiedDate":"2024-01-25"},{"lineNumber":201,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":202,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"ronnnnnnnnn":202}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected String deadline;","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[D]\" + super.toString() + \" (\" + this.deadline + \")\";","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected String duration;","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Event(String description, String duration) {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.duration \u003d duration;","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[E]\" + super.toString() + \" (\" + this.duration + \")\";","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":13}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected String description;","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"]\"; // mark done task with X","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    public boolean isComplete() {","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"        return this.isDone;","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void complete() {","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void uncomplete() {","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"        return getStatusIcon() + \" \" + this.description;","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"ronnnnnnnnn":30}},{"path":"src/main/java/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    private int numTasks;","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"    public TaskNotFoundException(String message, int numTasks) {","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.numTasks \u003d numTasks;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"The requested task cannot be found. \" + (numTasks \u003d\u003d 0","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"                ? \"There are no tasks.\"","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"                : \"Please enter a number equal to or less than \" + numTasks + \".\");","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"ronnnnnnnnn":15}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"todo borrow book","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"mark 1","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"mark 3","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"unmark 3","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"bye","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"java -classpath ..\\bin BadGPT \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"ronnnnnnnnn":1}}]
