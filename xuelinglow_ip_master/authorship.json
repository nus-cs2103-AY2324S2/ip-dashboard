[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"checkstyle {","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    toolVersion \u003d \"10.2\"","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"    mainClass.set(\"tasklist.Duke\")","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xuelinglow":6,"-":41}},{"path":"src/main/java/taskList/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/** Main class of the chatbot application. Initializes the application */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"public class Duke {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"    /** constructor implementation */","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"        taskList \u003d storage.loadTasks();","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    /** Function to start running the chatbot */","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"    public void run() {","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"        ui.showWelcomeMessage();","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"        do { // continue the program until \u0027bye\u0027 command is inputted.","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"            String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"            Command c \u003d Parser.parseCommand(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"            c.execute(this.taskList, this.ui, this.storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"            this.storage.saveTasks(taskList);","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        } while (ui.isRunning);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"        scanner.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"    /** Main method to run the chatbot */","lastModifiedDate":"2024-02-10"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"    public static void main(String[] artodogs) {","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"        new Duke(\"./data/duke.ser\").run();","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":39}},{"path":"src/main/java/taskList/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.AddCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.Command;","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.DeleteCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.ExitCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.FindCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.HelpCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.InvalidCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.ListCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"import tasklist.commands.MarkCommand;","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":" * Handles all the parsing operations for input commands and text.","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":" * Parse user input to specific commands.","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"public class Parser {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    /** enum constants representing commands in the program */","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    public enum Commands {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"        MARK,","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"        UNMARK,","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"        TODO,","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"        DEADLINE,","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"        EVENT,","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"        DELETE,","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"        LIST,","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"        BYE,","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"        HELPG,","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"        ADD,","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        UNKNOWN, FIND","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    private static Commands getCommand(String commandString) {","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"            return Commands.valueOf(commandString.toUpperCase());","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"            return Commands.UNKNOWN;","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"    /** Parse input text to commands */","lastModifiedDate":"2024-02-10"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"    public static Command parseCommand(String userInput) {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"        String[] inputList \u003d userInput.split(\" \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"        if (inputList.length !\u003d 1) { // indicates one of the other commands","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"            switch (getCommand(inputList[0])) {","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"            case FIND:","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"                return new FindCommand(inputList[1]);","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"            case MARK:","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"                try {","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"                    return new MarkCommand(Integer.parseInt(inputList[1]), true);","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"                    return new InvalidCommand(\"Error: Input is not a valid numeric value.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"            case UNMARK:","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"                try {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"                    return new MarkCommand(Integer.parseInt(inputList[1]), false);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"                    return new InvalidCommand(\"Error: Input is not a valid numeric value.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"xuelinglow"},"content":"            case TODO:","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"xuelinglow"},"content":"                return new AddCommand(inputList[1], 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"xuelinglow"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"xuelinglow"},"content":"                return new AddCommand(inputList[1], 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"xuelinglow"},"content":"            case EVENT:","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"xuelinglow"},"content":"                return new AddCommand(inputList[1], 3);","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"xuelinglow"},"content":"            case DELETE:","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"xuelinglow"},"content":"                try {","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"xuelinglow"},"content":"                    return new DeleteCommand(Integer.parseInt(inputList[1]));","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"xuelinglow"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"xuelinglow"},"content":"                    return new InvalidCommand(\"Error: Input is not a valid numeric value.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"xuelinglow"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"xuelinglow"},"content":"            case ADD:","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"xuelinglow"},"content":"                return new AddCommand(inputList[1], 0);","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"xuelinglow"},"content":"            case BYE:","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"xuelinglow"},"content":"            case LIST:","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"xuelinglow"},"content":"            case HELPG:","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"xuelinglow"},"content":"                return new InvalidCommand(","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"xuelinglow"},"content":"                        \"The command \u0027\"","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"xuelinglow"},"content":"                                + userInput","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"xuelinglow"},"content":"                                + \"\u0027 is not recognized. \\nDid you mean: \"","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"xuelinglow"},"content":"                                + inputList[0]","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"xuelinglow"},"content":"                                + \"?\");","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"xuelinglow"},"content":"            default:","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"xuelinglow"},"content":"                return new InvalidCommand(\"Invalid command: \" + inputList[0] + \"\\nPlease try again.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"xuelinglow"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"xuelinglow"},"content":"            switch (getCommand(userInput)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":97,"author":{"gitId":"xuelinglow"},"content":"            case BYE:","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"xuelinglow"},"content":"                return new ExitCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":99,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":100,"author":{"gitId":"xuelinglow"},"content":"            case LIST:","lastModifiedDate":"2024-02-01"},{"lineNumber":101,"author":{"gitId":"xuelinglow"},"content":"                return new ListCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":102,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"xuelinglow"},"content":"            case HELPG:","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"xuelinglow"},"content":"                return new HelpCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"xuelinglow"},"content":"            default:","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"xuelinglow"},"content":"                return new InvalidCommand(\"Invalid command: \" + userInput + \"\\nPlease try again.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":111}},{"path":"src/main/java/taskList/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.io.EOFException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import java.io.FileInputStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"import java.io.ObjectInputStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"import java.io.ObjectOutputStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":" * Handles all the storage operations such as saving and loading data to/from a file.","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"public class Storage {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    private String filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"    /** Store current task list to filepath */","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"    public void saveTasks(TaskList theList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"        try (ObjectOutputStream objectOutputStream \u003d","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"                new ObjectOutputStream(new FileOutputStream(this.filePath))) {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"            objectOutputStream.writeObject(theList);","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    /** Load task list from file path to program */","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"    public TaskList loadTasks() {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"        if (!Files.exists(Paths.get(filePath))) {","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"                Files.createDirectories(Paths.get(filePath).getParent());","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"                Files.createFile(Paths.get(filePath));","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"                System.out.println(","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"                        \"An unexpected error has occurred. \\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"                                + e.getMessage()","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"                                + \"\\nPlease contact the admininstrator\");","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"        try (ObjectInputStream objectInputStream \u003d","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"                new ObjectInputStream(new FileInputStream(filePath))) {","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"            Object obj \u003d objectInputStream.readObject();","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"            if (obj instanceof TaskList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"                return (TaskList) obj;","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"        } catch (EOFException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"            // Expected when end of file is reached, no action needed.","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"        } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"        return new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":62}},{"path":"src/main/java/taskList/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.io.Serializable;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" * Collection of tasks. Provides methods to manage the tasks in the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":" *","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":" * \u003cp\u003eExample usage: Tasklist taskList \u003d new Tasklist(); Tasklist.addTask(new ToDo(\"read book\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    /** arraylist to store tasks */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    private ArrayList\u003cTask\u003e theTaskList;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"     * Initalize the TaskList.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"     * @param thelist list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    public TaskList(ArrayList\u003cTask\u003e thelist) {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"        this.theTaskList \u003d thelist;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"     * Add a task to the TaskList.","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"     * @param task task to be added.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"        theTaskList.add(task);","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"     * Delete a task from the TaskList.","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"     * @param taskNo task index to be deleted.","lastModifiedDate":"2024-02-10"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"    public Task deleteTask(int taskNo) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"            Task removedTask \u003d theTaskList.remove(taskNo - 1);","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"            return removedTask;","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"                \"Error: Index is out of bounds. The list currently has \"","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"                + theTaskList.size() + \" item(s)\");","lastModifiedDate":"2024-02-10"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"        return null;","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"     * Mark a task in the TaskList","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"     * @param taskNo index of the task to be marked","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"    public void markTask(int taskNo) {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"            theTaskList.get(taskNo - 1).markItem();","lastModifiedDate":"2024-02-09"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"            throw new IndexOutOfBoundsException(\"Error: Index is out of bounds. The list currently has \"","lastModifiedDate":"2024-02-10"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"            + theTaskList.size() + \" item(s)\");","lastModifiedDate":"2024-02-10"},{"lineNumber":63,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"xuelinglow"},"content":"     * Unmark a task in the TaskList","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"xuelinglow"},"content":"     * @param taskNo index of the task to be unmarked","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"xuelinglow"},"content":"    public void unmarkTask(int taskNo) {","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"xuelinglow"},"content":"            theTaskList.get(taskNo - 1).unmarkItem();","lastModifiedDate":"2024-02-09"},{"lineNumber":74,"author":{"gitId":"xuelinglow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"xuelinglow"},"content":"            throw new IndexOutOfBoundsException(\"Error: Index is out of bounds. The list currently has \"","lastModifiedDate":"2024-02-10"},{"lineNumber":76,"author":{"gitId":"xuelinglow"},"content":"            + theTaskList.size() + \" item(s)\");","lastModifiedDate":"2024-02-10"},{"lineNumber":77,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"xuelinglow"},"content":"     * Get the size of the tasklist.","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"xuelinglow"},"content":"     * @return the size of the tasklist.","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"xuelinglow"},"content":"    public int size() {","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"xuelinglow"},"content":"        return theTaskList.size();","lastModifiedDate":"2024-02-09"},{"lineNumber":87,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"xuelinglow"},"content":"     * Get a specific task from the tasklist.","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"xuelinglow"},"content":"     * @param i index of the task to be returned.","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"xuelinglow"},"content":"     * @return the task at the specified index.","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"xuelinglow"},"content":"    public Task getTask(int i) {","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":97,"author":{"gitId":"xuelinglow"},"content":"            return theTaskList.get(i);","lastModifiedDate":"2024-02-09"},{"lineNumber":98,"author":{"gitId":"xuelinglow"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":99,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"xuelinglow"},"content":"                \"Error: Index is out of bounds. The list currently has \"","lastModifiedDate":"2024-02-10"},{"lineNumber":101,"author":{"gitId":"xuelinglow"},"content":"                + theTaskList.size() + \" item(s)\");","lastModifiedDate":"2024-02-10"},{"lineNumber":102,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"xuelinglow"},"content":"        return null;","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"xuelinglow"},"content":"    /** Find a list of tasks from the input keywords */","lastModifiedDate":"2024-02-10"},{"lineNumber":107,"author":{"gitId":"xuelinglow"},"content":"    public ArrayList\u003cTask\u003e searchTask(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"xuelinglow"},"content":"        String[] inputWords \u003d input.split(\" \");","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"xuelinglow"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"xuelinglow"},"content":"        for (Task task : theTaskList) {","lastModifiedDate":"2024-02-09"},{"lineNumber":111,"author":{"gitId":"xuelinglow"},"content":"            if (task.matchItem(inputWords) !\u003d null) {","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"xuelinglow"},"content":"                matchedTasks.add(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"xuelinglow"},"content":"        return matchedTasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":118}},{"path":"src/main/java/taskList/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":" * User interface - handles interaction with the user","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":" * Provides methods to manage the user interface of the application.","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":" *","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" * Example usage:","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":" * Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":" * ui.showWelcomeMessage();","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":" *","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"public class Ui {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    /** keeps the user interface running. Set this variable to false to stop the program. */","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    protected boolean isRunning \u003d true;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    * Sets the value of the boolean variable.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"    * @param isRunning value to set the boolean variable to","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"    public void setRunning(boolean isRunning) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"        this.isRunning \u003d isRunning;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"    /** show Welcome Message */","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(\"Hello! I\u0027m MichelleBot! What can I do for you? (helpg for guide)\");","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"     * Show message after adding a task to the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"     * @param addedTask task to be added to","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"     * @param size size of the list","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"    public void showAddTaskMessage(Task addedTask, int size) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"        if (addedTask !\u003d null) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"Roger that! I\u0027ve added in this task:\\n \" + addedTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"     * Show message after deleting a task from the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"     * @param deletedTask task that was deleted","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"     * @param size size of the list","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"    public void showDeletedTaskMessage(Task deletedTask, int size) {","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"        if (deletedTask !\u003d null) {","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"                \"Roger that! I\u0027ve removed this task:\\n \"","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"                + deletedTask","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"                + \"\\nNow you have \"","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"                + size","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"                + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"xuelinglow"},"content":"     * Show message after task is marked.","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"xuelinglow"},"content":"     * @param markedTask Task that is marked.","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"xuelinglow"},"content":"    */","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"xuelinglow"},"content":"    public void showMarkMessage(Task markedTask) {","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"xuelinglow"},"content":"        if (markedTask !\u003d null) {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"I\u0027ve marked this task as done: \\n\" + markedTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"xuelinglow"},"content":"     * Show message after task is unmarked.","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"xuelinglow"},"content":"     * @param unmarkedTask Task that is marked.","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"xuelinglow"},"content":"    public void showUnmarkMessage(Task unmarkedTask) {","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"xuelinglow"},"content":"        if (unmarkedTask !\u003d null) {","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"I\u0027ve marked this task as not done yet: \\n\" + unmarkedTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"xuelinglow"},"content":"     * Show error message if an error occurs.","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"xuelinglow"},"content":"     * @param errorMessage message to be printed out","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"xuelinglow"},"content":"    public void showErrorMessage(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"xuelinglow"},"content":"    /** Show help message explaining the commands in the program. */","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"xuelinglow"},"content":"    public void showHelpMessage() {","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(\"Type in text to add in a task to your list\\n\"","lastModifiedDate":"2024-02-09"},{"lineNumber":97,"author":{"gitId":"xuelinglow"},"content":"            + \"Other commands:\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"xuelinglow"},"content":"            + \"add [task] - adds a task to the task list\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"xuelinglow"},"content":"            + \"mark [input number] - mark a task as done\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"xuelinglow"},"content":"            + \"unmark [input number] - unmark a task as undone\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"xuelinglow"},"content":"            + \"todo [task] - add a TODO task to your list\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"xuelinglow"},"content":"            + \"deadline [task] /by [deadline] - add a DEADLINE to your list\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"xuelinglow"},"content":"            + \"event [task] /from [date] /to [date] - add an EVENT to your list\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"xuelinglow"},"content":"            + \"delete [input number] - delete a task from task list\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"xuelinglow"},"content":"            + \"list - list out the current tasks you have\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"xuelinglow"},"content":"            + \"bye - exit the program\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"xuelinglow"},"content":"            + \"(NOTE: deadline should be in dd-mm-yyyy hhmm format)\");","lastModifiedDate":"2024-02-02"},{"lineNumber":108,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"xuelinglow"},"content":"    /** Show end message when program is exited. */","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"xuelinglow"},"content":"    public void showEndMessage() {","lastModifiedDate":"2024-02-01"},{"lineNumber":112,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(\"Bye. Hope to see you again soon! \\\\(^-^)/ \");","lastModifiedDate":"2024-02-01"},{"lineNumber":113,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":114,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":114}},{"path":"src/main/java/taskList/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Deadline;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.EmptyDateException;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Event;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.ToDo;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":" * Represents a command to add tasks of 4 different types - normal, todo, deadline and event","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":" * Implements the Command interface.","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"public class AddCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    protected Task addedTask;","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"     * constructor for the add command.","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"     * @param string the string of the task to be added","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"     * @param number the type of task","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"    public AddCommand(String string, int number) {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"        // 0 - normal task, 1 - todo, 2 - deadline , 3 - event","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"        switch (number) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        case 0:","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"            this.addedTask \u003d new Task(string);","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"        case 1:","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"            ToDo newToDo \u003d new ToDo(string);","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"            this.addedTask \u003d newToDo;","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"        case 2:","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"                String[] theParts \u003d string.split(\"/\", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"                if (theParts[1].trim().startsWith(\"by\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"                    try {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"                        Deadline newDeadline \u003d new Deadline(theParts[0].trim(), theParts[1].trim());","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"                        this.addedTask \u003d newDeadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"                    } catch (DateTimeException | EmptyDateException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"                        System.out.println(\"Error creating Deadline: \" + e.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"                    }","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"                } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"                    System.out.println(\"Error: /by cannot be found. Please try again\");","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"                System.out.println(\"Error creating Deadline: Please enter a deadline.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"        case 3:","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"                String[] theParts \u003d string.split(\"/\", 3);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"                if (theParts[1].trim().startsWith(\"from\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"                    if (theParts[2].trim().startsWith(\"to\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"                        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"                            Event newEvent \u003d new Event(theParts[0].trim(), theParts[1].trim(), theParts[2].trim());","lastModifiedDate":"2024-02-10"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"                            this.addedTask \u003d newEvent;","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"xuelinglow"},"content":"                        } catch (EmptyDateException | IllegalArgumentException | DateTimeException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"xuelinglow"},"content":"                            System.out.println(\"Error creating Event: \" + e.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"xuelinglow"},"content":"                        }","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"xuelinglow"},"content":"                    } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"xuelinglow"},"content":"                        System.out.println(\"Error: /to cannot be found. Please try again\");","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"xuelinglow"},"content":"                    }","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"xuelinglow"},"content":"                } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"xuelinglow"},"content":"                    System.out.println(\"Error: /from cannot be found. Please try again\");","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"xuelinglow"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"xuelinglow"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"xuelinglow"},"content":"                System.out.println(\"Error creating Event: Please format the input properly.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"xuelinglow"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"xuelinglow"},"content":"        default:","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(\"error creating Task. Please contact the adminstrator.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"xuelinglow"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"xuelinglow"},"content":"        if (addedTask !\u003d null) {","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"xuelinglow"},"content":"            taskList.addTask(addedTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"xuelinglow"},"content":"            ui.showAddTaskMessage(addedTask, taskList.size());","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":90}},{"path":"src/main/java/taskList/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":" * Implementations of this interface provide specific functions for different commands.","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"public interface Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":12}},{"path":"src/main/java/taskList/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"/** Represents a command to delete tasks. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    protected int indexNo;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    public DeleteCommand(int indexNo) {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"        this.indexNo \u003d indexNo;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"        Task deletedTask \u003d taskList.deleteTask(indexNo);","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"        ui.showDeletedTaskMessage(deletedTask, taskList.size());","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":21}},{"path":"src/main/java/taskList/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/** Represents a command to exit the chatbot. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"public class ExitCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"        ui.setRunning(false);","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"        ui.showEndMessage();","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":14}},{"path":"src/main/java/taskList/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"/** Represents a command to find tasks based on search text input. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    protected String input;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    public FindCommand(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"        this.input \u003d input;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d taskList.searchTask(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"        for (Task task : matchedTasks) {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"xuelinglow":25}},{"path":"src/main/java/taskList/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/** Represents a command to display help information. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"public class HelpCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"        ui.showHelpMessage();","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":13}},{"path":"src/main/java/taskList/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/** Represents invalid commands. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"public class InvalidCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    private String errorMessage;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"    public InvalidCommand(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"        // Implementation for handling the execution of an invalid command","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"        ui.showErrorMessage(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":20}},{"path":"src/main/java/taskList/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import tasklist.tasks.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"/** Represents a command to list all tasks in the tasklist. Implements the Command interface. */","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"        System.out.println(\"Here are your current tasks:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"            int itemNumber \u003d i + 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"            Task listItem \u003d taskList.getTask(i);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"            System.out.println(itemNumber + \". \" + listItem);","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":19}},{"path":"src/main/java/taskList/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import tasklist.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import tasklist.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":" * Represents a command to mark/unmark a task. Implements the Command interface.","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"    protected int indexNo;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    protected boolean isMark;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"     * construct for mark/unmark command.","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"     * @param indexNo index number of the task to be marked/unmarked","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"     * @param isMark boolean to indicate whether a task should be marked/unmarked","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    public MarkCommand(int indexNo, boolean isMark) {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"        this.indexNo \u003d indexNo;","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"        this.isMark \u003d isMark;","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"        if (isMark) {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"                taskList.markTask(indexNo);","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"                ui.showMarkMessage(taskList.getTask(indexNo - 1));","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"                taskList.unmarkTask(indexNo);","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"                ui.showUnmarkMessage(taskList.getTask(indexNo - 1));","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"xuelinglow":43}},{"path":"src/main/java/taskList/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":" * Represents a Deadline Task that needs to be completed. It is an extension of the Task class.","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" * Contains \u0027by\u0027 date to specify the deadline of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    /** deadline of the task in LocalDateTime format */","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"    protected LocalDateTime deadlineDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    /** deadline of the task in String format */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    protected String byDateString;","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"     * Initalize a Deadline.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"     * @param item the task to be completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"     * @param byDate the deadline of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"    public Deadline(String item, String byDate) {","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"        super(item);","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"            String byDateString \u003d byDate.substring(byDate.indexOf(\"/to\") + 3, byDate.length());","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"            if (byDateString.trim() \u003d\u003d \"\") {","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"                throw new EmptyDateException();","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"            LocalDateTime deadlineDate \u003d LocalDateTime.parse(byDateString.trim(), formatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"            this.deadlineDate \u003d deadlineDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"            this.byDateString \u003d byDateString.trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-22"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"            throw new ArrayIndexOutOfBoundsException(\"Please enter a date\");","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"        } catch (DateTimeParseException dte) {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"            throw new DateTimeParseException(","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"                    \"Date format is incorrect, please try again\", byDate, 0, dte);","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + byDateString + \")\";","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":47}},{"path":"src/main/java/taskList/tasks/EmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"/** Custom exception to indicate that the date param is empty. */","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"public class EmptyDateException extends RuntimeException {","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"    /** Constructs the exception with a message about the error. */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"    public EmptyDateException() {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"        super(\"Please enter a date.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"xuelinglow":10}},{"path":"src/main/java/taskList/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":" * Represents a Event Task that needs to be completed. It is an extension of the Task class.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":" * Contains \u0027from\u0027 and \u0027to\u0027 date to specify the start and end of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"    // from date as LocalDateTime format.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    protected LocalDateTime fromDateLdt;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    // to date as LocalDateTime format.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"    protected LocalDateTime toDateLdt;","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    // from date as String format.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"    protected String fromDateString;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    // to date as String format.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    protected String toDateString;","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"     * Initialize an Event.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"     * @param item the event to be completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"     * @param fromDate start date and time of the event","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"     * @param toDate end date and time of the event","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"    public Event(String item, String fromDate, String toDate) {","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"        super(item);","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"            String fromDateString \u003d fromDate.substring(fromDate.indexOf(\"/from\") + 5, fromDate.length());","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"            String toDateString \u003d toDate.substring(toDate.indexOf(\"/to\") + 3, toDate.length());","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"            if (fromDateString.trim() \u003d\u003d \"\" | toDateString.trim() \u003d\u003d \"\") {","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"                throw new EmptyDateException();","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"            LocalDateTime fromDateLdt \u003d LocalDateTime.parse(fromDateString.trim(), formatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"            LocalDateTime toDateLdt \u003d LocalDateTime.parse(toDateString.trim(), formatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"            if (fromDateLdt.isAfter(toDateLdt)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"                throw new IllegalArgumentException(\"Start date must be before end date\");","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"            this.fromDateLdt \u003d fromDateLdt;","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"            this.fromDateString \u003d fromDateString.trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"            this.toDateLdt \u003d toDateLdt;","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"xuelinglow"},"content":"            this.toDateString \u003d toDateString.trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"xuelinglow"},"content":"        } catch (DateTimeException dte) {","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"xuelinglow"},"content":"            throw new DateTimeParseException(\"Date format is incorrect, please try again\", item, 0, dte);","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":56,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":57,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":58,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":59,"author":{"gitId":"xuelinglow"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":60,"author":{"gitId":"xuelinglow"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + fromDateString + \" to: \" + toDateString + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":62,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":62}},{"path":"src/main/java/taskList/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import java.io.Serializable;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"/** Represents a Task that needs to be completed. */","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"public class Task implements Serializable {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"    // the task that needs to be completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"    protected String item;","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    // an indicator of whether the task is completed or not.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"     * Initialize the Task.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"     * @param item the task that needs to be completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    public Task(String item) {","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"        this.item \u003d item;","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    // retrieve task status","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-22"},{"lineNumber":24,"author":{"gitId":"xuelinglow"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":27,"author":{"gitId":"xuelinglow"},"content":"    // mark the item as completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"xuelinglow"},"content":"    public void markItem() {","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"xuelinglow"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"xuelinglow"},"content":"    // unmark the item as not completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"xuelinglow"},"content":"    public void unmarkItem() {","lastModifiedDate":"2024-01-22"},{"lineNumber":34,"author":{"gitId":"xuelinglow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":35,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":36,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"xuelinglow"},"content":"    /** Find list of item based on input by matching the keywords */","lastModifiedDate":"2024-02-10"},{"lineNumber":38,"author":{"gitId":"xuelinglow"},"content":"    public String matchItem(String[] matches) {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"xuelinglow"},"content":"        for (String match: matches) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"xuelinglow"},"content":"            if (item.contains(match)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"xuelinglow"},"content":"                return item;","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"xuelinglow"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"xuelinglow"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"xuelinglow"},"content":"        return null;","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"xuelinglow"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":48,"author":{"gitId":"xuelinglow"},"content":"        return \"[\" + getStatusIcon() + \"] \" + item;","lastModifiedDate":"2024-01-22"},{"lineNumber":49,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":50,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":50}},{"path":"src/main/java/taskList/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"/** Represents a Todo Task that needs to be completed. It is an extension of the Task class. */","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"     * intialize the ToDo task.","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"     * @param item the task to be completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"    public ToDo(String item) {","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"        super(item);","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":18}},{"path":"src/test/java/taskList/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"public class EventTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"        Event event \u003d new Event(\"career event\", \"/from 20-11-2020 0000\", \"/to 1-12-2021 1100\");","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"        assertEquals(\"[E][ ] career event (from: 20-11-2020 0000 to: 1-12-2021 1100)\", event.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"    public void testDateTimeError() {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"xuelinglow"},"content":"        Event event \u003d new Event(\"career event\", \"/from something 20-11-2020 0000\", \"/to 1-12-2021 1100\");","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"xuelinglow"},"content":"        assertEquals(\"Error creating Event: Date format is incorrect, please try again\", event.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"xuelinglow"},"content":"    public void invalidDateOrderError() {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"xuelinglow"},"content":"        Event event \u003d new Event(\"career event\", \"/from something 21-11-2020 0000\", \"/to 20-11-2020 1100\");","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"        assertEquals(\"Error creating Event: Start date must be before end date\", event.toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"xuelinglow":23}},{"path":"src/test/java/taskList/tasks/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"package tasklist.tasks;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"public class ToDoTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"        ToDo event \u003d new ToDo(\"read book\");","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"        assertEquals(\"[T][ ] read book\", event.toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"xuelinglow":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xuelinglow"},"content":"add read book","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"xuelinglow"},"content":"todo borrow book","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"xuelinglow"},"content":"deadline return book /by 20-11-2020 1200","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"xuelinglow"},"content":"event project meeting /from 20-11-2023 1200 /to 21-11-2023 2359","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"xuelinglow"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":6,"author":{"gitId":"xuelinglow"},"content":"mark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"xuelinglow"},"content":"mark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"xuelinglow"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"xuelinglow"},"content":"unmark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"delete 1","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"helpg","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"xuelinglow"},"content":"bye","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"xuelinglow":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"xuelinglow"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasklist\\commands\\*.java","lastModifiedDate":"2024-02-10"},{"lineNumber":11,"author":{"gitId":"xuelinglow"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasklist\\tasks\\*.java","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"xuelinglow"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\tasklist\\*.java","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"xuelinglow"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"xuelinglow"},"content":"java -classpath ..\\bin tasklist.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"xuelinglow":5,"-":19}}]
