[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"# IreneAI project template","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"This is a project template for a greenfield Java project. It\u0027s formatted after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"minghowC":3,"-":13}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"enum Command{","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"    TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, BYE, DELETE, INVALID;","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"    public static Command getCommand(String command) {","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":"            return valueOf(command.toUpperCase());","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"            return INVALID;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"minghowC":11}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":"    protected String deadline;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"        super(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"\t\ttry{","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"\t\t\tthis.deadline \u003d LocalDate.parse(deadline);","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"minghowC"},"content":"\t\t} catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"minghowC"},"content":"\t\t\tSystem.out.println(\"Invalid date format. Please use yyyy--mm-dd.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"minghowC"},"content":"\t\t\tthis.deadline \u003d null;","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"minghowC"},"content":"\t\t}","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"minghowC"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"minghowC"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"minghowC"},"content":"        return \"D\";","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"minghowC"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"minghowC"},"content":"    public String toString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"minghowC"},"content":"        return super.toString() + \" (by \" + deadline + \")\";","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"minghowC":27}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"class DukeException extends Exception{","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"        super(message);","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"minghowC":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"    protected String start;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"    protected String end;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":"        super(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"        this.end \u003d end;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"minghowC"},"content":"    public String getTaskIcon(){","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"minghowC"},"content":"        return \"E\";","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"minghowC"},"content":"    public String toString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"minghowC"},"content":"        return super.toString() + \" (from \" + start + \" to \" + end + \")\";","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"minghowC":20}},{"path":"src/main/java/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"import java.io.*;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"import java.util.List;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"public class FileManager {","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":"    private final String filePath;","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"    public FileManager(String filePath) {","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"minghowC"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException {","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"minghowC"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"minghowC"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"minghowC"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"minghowC"},"content":"            file.createNewFile();","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"minghowC"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"minghowC"},"content":"            String line;","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"minghowC"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"minghowC"},"content":"                tasks.add(parseTask(line));","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"minghowC"},"content":"            }","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"minghowC"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":27,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"File not found: \" + filePath);","lastModifiedDate":"2024-02-15"},{"lineNumber":28,"author":{"gitId":"minghowC"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"Error reading from file: \" + filePath);","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"minghowC"},"content":"        return tasks;","lastModifiedDate":"2024-02-15"},{"lineNumber":33,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":34,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":35,"author":{"gitId":"minghowC"},"content":"    public void saveTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-15"},{"lineNumber":36,"author":{"gitId":"minghowC"},"content":"        try (BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath))) {","lastModifiedDate":"2024-02-15"},{"lineNumber":37,"author":{"gitId":"minghowC"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-15"},{"lineNumber":38,"author":{"gitId":"minghowC"},"content":"                bw.write(task.toFileFormat() + \"\\n\");","lastModifiedDate":"2024-02-15"},{"lineNumber":39,"author":{"gitId":"minghowC"},"content":"            }","lastModifiedDate":"2024-02-15"},{"lineNumber":40,"author":{"gitId":"minghowC"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":41,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"Error writing to file: \" + filePath);","lastModifiedDate":"2024-02-15"},{"lineNumber":42,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":43,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":44,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":45,"author":{"gitId":"minghowC"},"content":"    private Task parseTask(String line) {","lastModifiedDate":"2024-02-15"},{"lineNumber":46,"author":{"gitId":"minghowC"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-15"},{"lineNumber":47,"author":{"gitId":"minghowC"},"content":"        String type \u003d parts[0];","lastModifiedDate":"2024-02-15"},{"lineNumber":48,"author":{"gitId":"minghowC"},"content":"        boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2024-02-15"},{"lineNumber":49,"author":{"gitId":"minghowC"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2024-02-15"},{"lineNumber":50,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":51,"author":{"gitId":"minghowC"},"content":"        switch (type) {","lastModifiedDate":"2024-02-15"},{"lineNumber":52,"author":{"gitId":"minghowC"},"content":"            case \"T\":","lastModifiedDate":"2024-02-15"},{"lineNumber":53,"author":{"gitId":"minghowC"},"content":"                return new ToDo(description, isDone);","lastModifiedDate":"2024-02-15"},{"lineNumber":54,"author":{"gitId":"minghowC"},"content":"            case \"D\":","lastModifiedDate":"2024-02-15"},{"lineNumber":55,"author":{"gitId":"minghowC"},"content":"                String by \u003d parts[3];","lastModifiedDate":"2024-02-15"},{"lineNumber":56,"author":{"gitId":"minghowC"},"content":"                return new Deadline(description, isDone, by);","lastModifiedDate":"2024-02-15"},{"lineNumber":57,"author":{"gitId":"minghowC"},"content":"            case \"E\":","lastModifiedDate":"2024-02-15"},{"lineNumber":58,"author":{"gitId":"minghowC"},"content":"                String at \u003d parts[3];","lastModifiedDate":"2024-02-15"},{"lineNumber":59,"author":{"gitId":"minghowC"},"content":"                return new Event(description, isDone, at);","lastModifiedDate":"2024-02-15"},{"lineNumber":60,"author":{"gitId":"minghowC"},"content":"            default:","lastModifiedDate":"2024-02-15"},{"lineNumber":61,"author":{"gitId":"minghowC"},"content":"                return null;","lastModifiedDate":"2024-02-15"},{"lineNumber":62,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":63,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":64,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"minghowC":64}},{"path":"src/main/java/IreneAI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"/**","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":" * The IreneAI program implements a simple chat application that","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":" * provides simple feedbacks to the user\u0027s inputs","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":" *","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":" * @author Chai Ming How","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":" * @since 2024-02-01","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":" */","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"minghowC"},"content":"public class IreneAI {","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"minghowC"},"content":"    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"minghowC"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"minghowC"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"minghowC"},"content":"        String chatbotName \u003d \"IreneAI\";","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"minghowC"},"content":"        System.out.println(\" Hello! I\u0027m \" + chatbotName);","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"minghowC"},"content":"        System.out.println(\" What can I do for you?\");","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"minghowC"},"content":"        while (true) {","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"You: \");","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"minghowC"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"minghowC"},"content":"            String[] splitInputs \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"minghowC"},"content":"            Command command \u003d Command.getCommand(splitInputs[0]);","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"minghowC"},"content":"            String argument \u003d splitInputs.length \u003e 1 ? splitInputs[1] : \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"minghowC"},"content":"            dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"minghowC"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"minghowC"},"content":"                switch (command) {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"minghowC"},"content":"                    case BYE:","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"minghowC"},"content":"                        System.out.println(\" Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"minghowC"},"content":"                        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"minghowC"},"content":"                        return;","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"minghowC"},"content":"                    case TODO:","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"minghowC"},"content":"                        if (argument.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"minghowC"},"content":"                        handleTodo(argument);","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"minghowC"},"content":"                    case DEADLINE:","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"minghowC"},"content":"                        // Checks command contains \"/by\"","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"minghowC"},"content":"                        boolean hasBy \u003d userInput.split(\" /by \").length \u003e 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"minghowC"},"content":"                        // Makes sure arguments are at least 3 (e.g. command, subject, deadline)","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"minghowC"},"content":"                        boolean isValid \u003d hasBy \u0026\u0026 splitInputs.length \u003e 2;","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"minghowC"},"content":"                        if (!isValid) {","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"The deadline command requires both description and time inputs, separated by \u0027 /by \u0027\");","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"minghowC"},"content":"                        handleDeadline(userInput);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"minghowC"},"content":"                    case EVENT:","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"minghowC"},"content":"                        // Checks command contains \u0027/from\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"minghowC"},"content":"                        boolean hasFrom \u003d userInput.split(\" /from \").length \u003e 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"minghowC"},"content":"                        // Checks command contains \u0027/to\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"minghowC"},"content":"                        boolean hasTo \u003d userInput.split(\" /to \").length \u003e 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"minghowC"},"content":"                        isValid \u003d hasTo \u0026\u0026 hasFrom \u0026\u0026 splitInputs.length \u003e 3;","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"minghowC"},"content":"                        if (!isValid) {","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"The event command requires a description, from when, and to when\"","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"minghowC"},"content":"                                    + \".\\n\" + \"For example, event project meeting /from Mon 2pm /to 4pm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"minghowC"},"content":"                        handleEvent(userInput);","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"minghowC"},"content":"                    case LIST:","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"minghowC"},"content":"                        listTasks();","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"minghowC"},"content":"                    case UNMARK:","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"minghowC"},"content":"                        if (argument.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"You must specific which task to unmark (in number).\");","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"minghowC"},"content":"                        handleUnmark(userInput);","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"minghowC"},"content":"                    case MARK:","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"minghowC"},"content":"                        // future works: index out of bound cases","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"minghowC"},"content":"                        if (argument.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"You must specific which task to mark (in number).\");","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"minghowC"},"content":"                        handleMark(userInput);","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"minghowC"},"content":"                    case DELETE:","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"minghowC"},"content":"                        if (argument.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"minghowC"},"content":"                            throw new DukeException(\"You must specific which task to mark (in number).\");","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"minghowC"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"minghowC"},"content":"                        handleDelete(userInput);","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"minghowC"},"content":"                        break;","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"minghowC"},"content":"                    case INVALID:","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"minghowC"},"content":"                        //Default error handling","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"minghowC"},"content":"                    default:","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"minghowC"},"content":"                        throw new DukeException(\"I don\u0027t get what you mean.. (╥﹏╥)\");","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"minghowC"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"minghowC"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"minghowC"},"content":"                dividingLine(LINE);","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"minghowC"},"content":"                System.out.println(\"OOPS!! \" + e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"minghowC"},"content":"                dividingLine(LINE);","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"minghowC"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"minghowC"},"content":"    private static void handleTodo(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"minghowC"},"content":"        tasks.add(new ToDo(userInput));","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Okie. I\u0027ve added this task: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"minghowC"},"content":"    private static void handleDeadline(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"minghowC"},"content":"        String[] parts \u003d userInput.split(\" /by \");","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"minghowC"},"content":"        String description \u003d parts[0].substring(9);","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"minghowC"},"content":"        String deadline \u003d parts[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"minghowC"},"content":"        tasks.add(new Deadline(description, deadline));","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":115,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Okie. I\u0027ve added this task: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":118,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"minghowC"},"content":"    private static void handleEvent(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"minghowC"},"content":"        String[] parts \u003d userInput.split(\" /from \");","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"minghowC"},"content":"        String description \u003d parts[0].substring(6);","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"minghowC"},"content":"        String[] from_to \u003d parts[1].split(\" /to \");","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"minghowC"},"content":"        String from \u003d from_to[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"minghowC"},"content":"        String to \u003d from_to[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"minghowC"},"content":"        tasks.add(new Event(description, from, to));","lastModifiedDate":"2024-02-02"},{"lineNumber":127,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Okie. I\u0027ve added this task: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":129,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"  \" + tasks.get(tasks.size() - 1));","lastModifiedDate":"2024-02-02"},{"lineNumber":130,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":131,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"minghowC"},"content":"    private static void listTasks() {","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Documented tasks: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"minghowC"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"minghowC"},"content":"            System.out.println((i + 1) + \": \" + tasks.get(i));","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":139,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":140,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"minghowC"},"content":"    private static void handleUnmark(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"minghowC"},"content":"        int index \u003d Integer.parseInt(userInput.substring(7)) - 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"minghowC"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":145,"author":{"gitId":"minghowC"},"content":"        task.markAsNotDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":146,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":147,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Meow ~ I\u0027ve marked \" + task.getDescription() + \" as not done : (\");","lastModifiedDate":"2024-02-02"},{"lineNumber":148,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2024-02-02"},{"lineNumber":149,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":150,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":151,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"minghowC"},"content":"    private static void handleMark(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"minghowC"},"content":"        // Index in an ArrayList starts from 0, therefore deducts 1 from actual counting","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"minghowC"},"content":"        int index \u003d Integer.parseInt(userInput.substring(5)) - 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"minghowC"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"minghowC"},"content":"        task.markAsDone();","lastModifiedDate":"2024-02-05"},{"lineNumber":157,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-05"},{"lineNumber":158,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"Brilliant! I\u0027ve marked \" + task.getDescription() + \" as done : )\");","lastModifiedDate":"2024-02-05"},{"lineNumber":159,"author":{"gitId":"minghowC"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"minghowC"},"content":"        dividingLine(LINE);","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":162,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"minghowC"},"content":"    private static void handleDelete(String userInput) {","lastModifiedDate":"2024-02-05"},{"lineNumber":164,"author":{"gitId":"minghowC"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"minghowC"},"content":"            int index \u003d Integer.parseInt(userInput.substring((7))) - 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"minghowC"},"content":"            Task removedTask \u003d tasks.remove(index);","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"Success! I have removed this task: \" + removedTask + \".\");","lastModifiedDate":"2024-02-05"},{"lineNumber":168,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"Now you still have \" + tasks.size() + \" tasks remaining.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":169,"author":{"gitId":"minghowC"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"minghowC"},"content":"            System.out.println(\"OOPS!! I cannot delete the task! It does not exist.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"minghowC"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"minghowC"},"content":"    private static void dividingLine(String line){","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"minghowC"},"content":"        System.out.println(line);","lastModifiedDate":"2024-01-26"},{"lineNumber":176,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":177,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"minghowC":177}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":" * The Task class is an abstraction for representing tasks in real life,","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":" * where a task could either be done or not done.","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":" *","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":" * @author Chai Ming How","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":" * @since 2024-02-01","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"    protected String description;","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"minghowC"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"minghowC"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"minghowC"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"minghowC"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"minghowC"},"content":"    public abstract String getTaskIcon();","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"minghowC"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"minghowC"},"content":"        isDone \u003d true;","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"minghowC"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"minghowC"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"minghowC"},"content":"    public String getDescription(){","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"minghowC"},"content":"        return this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"minghowC"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"minghowC"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"minghowC"},"content":"    public String toString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"minghowC"},"content":"        return \"[\" + getTaskIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"minghowC":37}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"minghowC"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"minghowC"},"content":"    public ToDo(String description){","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"minghowC"},"content":"        super(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"minghowC"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"minghowC"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"minghowC"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"minghowC"},"content":"        return \"T\";","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"minghowC"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"minghowC"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"minghowC":10}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"minghowC"},"content":"java -classpath ../bin IreneAI \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"minghowC":1,"-":37}}]
