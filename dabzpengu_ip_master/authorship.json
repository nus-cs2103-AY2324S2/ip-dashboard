[{"path":"docs/gandalfData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"1. [D][ ] go to mordor (Tuesday, April 2, 2024 2:00PM)","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"2. [E][X] breakdance (from: Tuesday, April 2, 2024 6:00PM to: Tuesday, April 2, 2024 8:00PM)","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"3. [T][ ] go to mordor","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"dabzpengu":3}},{"path":"src/main/java/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"public class Deadlines extends Task{","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"dabzpengu"},"content":"    String deadlineDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"dabzpengu"},"content":"    LocalDateTime formattedDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"dabzpengu"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"dabzpengu"},"content":"    public Deadlines(String nameOfTask, String deadlineDate){","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"        super(nameOfTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"dabzpengu"},"content":"        this.deadlineDate \u003d deadlineDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"dabzpengu"},"content":"        this.formattedDate \u003d LocalDateTime.parse(deadlineDate, formatter);","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"dabzpengu"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"dabzpengu"},"content":"    public String toString(){","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"dabzpengu"},"content":"        if(status){","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"dabzpengu"},"content":"            return \"[D][X] \" + nameOfTask + \" \" + \"(\" + formattedDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"dabzpengu"},"content":"        else{","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"dabzpengu"},"content":"            return \"[D][ ] \" + nameOfTask + \" \" + \"(\" + formattedDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":24}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"public class Events extends Task{","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"    String startDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"dabzpengu"},"content":"    String endDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"dabzpengu"},"content":"    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"dabzpengu"},"content":"    LocalDateTime formattedStartDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"dabzpengu"},"content":"    LocalDateTime formattedEndDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"    public Events(String nameOfTask, String startDate, String endDate){","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"dabzpengu"},"content":"        super(nameOfTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"dabzpengu"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"dabzpengu"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"dabzpengu"},"content":"        this.formattedStartDate \u003d LocalDateTime.parse(startDate.trim(), formatter);","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"dabzpengu"},"content":"        this.formattedEndDate \u003d LocalDateTime.parse(endDate.trim(), formatter);","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"dabzpengu"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"dabzpengu"},"content":"    public String toString(){","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"dabzpengu"},"content":"        if(status){","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"dabzpengu"},"content":"            return \"[E][X] \" + nameOfTask + \" \" + \"(from: \" + formattedStartDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\"))","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"dabzpengu"},"content":"                    + \" to: \" + formattedEndDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"dabzpengu"},"content":"        else{","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"dabzpengu"},"content":"            return \"[E][ ] \" + nameOfTask + \" \" + \"(from: \" + formattedStartDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\"))","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"dabzpengu"},"content":"                    + \" to: \" + formattedEndDate.format(DateTimeFormatter.ofPattern(\"EEEE, MMMM d, yyyy h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":28}},{"path":"src/main/java/Gandalf.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"import java.io.File;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"dabzpengu"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"dabzpengu"},"content":"public class Gandalf {","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"dabzpengu"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"     * Writes the contents of an ArrayList of Task objects to a text file.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"dabzpengu"},"content":"     * Creates the file if it does not exist in the filepath","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"dabzpengu"},"content":"     * @param list","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"dabzpengu"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"dabzpengu"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e list){","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"dabzpengu"},"content":"        File docsFolder \u003d new File(\"docs\");","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"dabzpengu"},"content":"        if (!docsFolder.exists()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"dabzpengu"},"content":"            docsFolder.mkdir();","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"dabzpengu"},"content":"        String filePath \u003d \"docs/gandalfData.txt\";","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"dabzpengu"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"dabzpengu"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath))){","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"dabzpengu"},"content":"            for(int i \u003d 0; i \u003c list.size(); i++){","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"dabzpengu"},"content":"                Task action \u003d list.get(i);","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"dabzpengu"},"content":"                writer.write((i + 1) + \". \" + action);","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"dabzpengu"},"content":"                writer.newLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"dabzpengu"},"content":"        catch(IOException e){","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"dabzpengu"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"dabzpengu"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"dabzpengu"},"content":"     * Checks and validates a command based on the provided task information and the existing task data.","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"dabzpengu"},"content":"     * Throws a GandalfException with an appropriate message if the command is invalid.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"dabzpengu"},"content":"     * @param taskInfo","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"dabzpengu"},"content":"     * @param data","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"dabzpengu"},"content":"     * @throws GandalfException","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"dabzpengu"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"dabzpengu"},"content":"    public static void checkCommand(String[] taskInfo, ArrayList\u003cTask\u003e data) throws GandalfException{","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"dabzpengu"},"content":"        if(!taskInfo[0].equals(\"todo\") \u0026\u0026 !taskInfo[0].equals(\"deadline\") \u0026\u0026 !taskInfo[0].equals(\"event\") \u0026\u0026 !taskInfo[0].equals(\"delete\") \u0026\u0026 !taskInfo[0].equals(\"mark\")\u0026\u0026 !taskInfo[0].equals(\"unmark\")){","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"dabzpengu"},"content":"            throw new GandalfException(\"Please forgive me for I do not understand. They are spoken in a tongue lost in time.\");","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"dabzpengu"},"content":"        else if(taskInfo[0].equals(\"mark\") || taskInfo[0].equals(\"unmark\") || taskInfo[0].equals(\"delete\")){","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"dabzpengu"},"content":"            try{","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"dabzpengu"},"content":"                data.get(Integer.parseInt(taskInfo[1]) - 1);","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"dabzpengu"},"content":"            catch (IndexOutOfBoundsException e){","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"dabzpengu"},"content":"                throw new GandalfException(\"There are no such tasks my old friend\");","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"dabzpengu"},"content":"        else if(taskInfo.length \u003d\u003d 1){","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"dabzpengu"},"content":"            throw new GandalfException(\"I cannot add \" + taskInfo[0] + \" without a description\");","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"dabzpengu"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"dabzpengu"},"content":"        ArrayList\u003cTask\u003e faster_list \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"dabzpengu"},"content":"        writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"dabzpengu"},"content":"        int numOfActions \u003d -1; //follows 0 indexing","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"dabzpengu"},"content":"        System.out.println(\"Through fire and shadow, I\u0027m Gandalf\");","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"dabzpengu"},"content":"        System.out.println(\"What can I do for you?\\n\");","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"dabzpengu"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"dabzpengu"},"content":"        while(true) {","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"dabzpengu"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"dabzpengu"},"content":"            StringBuilder taskType \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"dabzpengu"},"content":"            StringBuilder taskName \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"dabzpengu"},"content":"            StringBuilder date1 \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"dabzpengu"},"content":"            StringBuilder date2 \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"dabzpengu"},"content":"            StringBuilder[] parsedInput \u003d {taskType, taskName, date1, date2};","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"dabzpengu"},"content":"            int curr_info \u003d 0;","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"dabzpengu"},"content":"            if(input.length() \u003d\u003d 0){ //ignore accidental new lines from user","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"dabzpengu"},"content":"                continue;","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"dabzpengu"},"content":"            for(int i \u003d 0; i \u003c input.length(); i++){","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"dabzpengu"},"content":"                char curr_char \u003d input.charAt(i);","lastModifiedDate":"2024-02-06"},{"lineNumber":76,"author":{"gitId":"dabzpengu"},"content":"                if(curr_char \u003d\u003d \u0027 \u0027){","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"dabzpengu"},"content":"                    if(input.charAt(i - 1) \u003d\u003d \u0027 \u0027){","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"dabzpengu"},"content":"                        curr_info++;","lastModifiedDate":"2024-02-06"},{"lineNumber":79,"author":{"gitId":"dabzpengu"},"content":"                        continue;","lastModifiedDate":"2024-02-06"},{"lineNumber":80,"author":{"gitId":"dabzpengu"},"content":"                    }","lastModifiedDate":"2024-02-06"},{"lineNumber":81,"author":{"gitId":"dabzpengu"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":82,"author":{"gitId":"dabzpengu"},"content":"                parsedInput[curr_info].append(curr_char);","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":84,"author":{"gitId":"dabzpengu"},"content":"            if (taskType.toString().equals(\"bye\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"dabzpengu"},"content":"                scanner.close();","lastModifiedDate":"2024-01-25"},{"lineNumber":86,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"So here at last, comes the end of our fellowship. I will not say: Do not weep. For not all tears are an evil.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":87,"author":{"gitId":"dabzpengu"},"content":"                break;","lastModifiedDate":"2024-01-25"},{"lineNumber":88,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":89,"author":{"gitId":"dabzpengu"},"content":"            if(taskType.toString().equals(\"list\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"dabzpengu"},"content":"                for(int i \u003d 0; i \u003c faster_list.size(); i++){","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"dabzpengu"},"content":"                    Task action \u003d faster_list.get(i);","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"dabzpengu"},"content":"                    System.out.println((i + 1) + \". \" + action);","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"dabzpengu"},"content":"                }","lastModifiedDate":"2024-01-25"},{"lineNumber":94,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"Total number of tasks so far: \" + (numOfActions + 1));","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"dabzpengu"},"content":"                continue;","lastModifiedDate":"2024-01-25"},{"lineNumber":96,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":97,"author":{"gitId":"dabzpengu"},"content":"            if(taskType.toString().trim().equals(\"delete\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":98,"author":{"gitId":"dabzpengu"},"content":"                int deleteNumber \u003d Integer.parseInt(taskName.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":99,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"removed task: \" + faster_list.get(deleteNumber - 1));","lastModifiedDate":"2024-01-28"},{"lineNumber":100,"author":{"gitId":"dabzpengu"},"content":"                faster_list.remove(deleteNumber - 1);","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"dabzpengu"},"content":"                numOfActions--;","lastModifiedDate":"2024-01-28"},{"lineNumber":102,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"Total number of tasks so far: \" + (numOfActions + 1));","lastModifiedDate":"2024-01-28"},{"lineNumber":103,"author":{"gitId":"dabzpengu"},"content":"                writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"dabzpengu"},"content":"                continue;","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"dabzpengu"},"content":"            if(taskType.toString().trim().equals(\"mark\") || taskType.toString().trim().equals(\"unmark\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":107,"author":{"gitId":"dabzpengu"},"content":"                int taskNumber \u003d Integer.parseInt(taskName.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":108,"author":{"gitId":"dabzpengu"},"content":"                Task correspondingTask \u003d faster_list.get(taskNumber - 1);","lastModifiedDate":"2024-01-28"},{"lineNumber":109,"author":{"gitId":"dabzpengu"},"content":"                if(taskType.toString().trim().equals(\"mark\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":110,"author":{"gitId":"dabzpengu"},"content":"                    correspondingTask.markStatus(true);","lastModifiedDate":"2024-01-25"},{"lineNumber":111,"author":{"gitId":"dabzpengu"},"content":"                    System.out.println(\"The task is done, humans truly are remarkable creatures\");","lastModifiedDate":"2024-01-25"},{"lineNumber":112,"author":{"gitId":"dabzpengu"},"content":"                }","lastModifiedDate":"2024-01-25"},{"lineNumber":113,"author":{"gitId":"dabzpengu"},"content":"                else{","lastModifiedDate":"2024-01-25"},{"lineNumber":114,"author":{"gitId":"dabzpengu"},"content":"                    correspondingTask.markStatus(false);","lastModifiedDate":"2024-01-25"},{"lineNumber":115,"author":{"gitId":"dabzpengu"},"content":"                    System.out.println(\"The task is undone, fret not, for it is not about how much you\u0027ve missed but about how much you\u0027ve done.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":116,"author":{"gitId":"dabzpengu"},"content":"                }","lastModifiedDate":"2024-01-25"},{"lineNumber":117,"author":{"gitId":"dabzpengu"},"content":"                writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(correspondingTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":119,"author":{"gitId":"dabzpengu"},"content":"                continue;","lastModifiedDate":"2024-01-25"},{"lineNumber":120,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":121,"author":{"gitId":"dabzpengu"},"content":"            //if reach this point assume task is new (and recognized) and does not exist in current array and must further breakdown the array","lastModifiedDate":"2024-01-28"},{"lineNumber":122,"author":{"gitId":"dabzpengu"},"content":"            numOfActions++;","lastModifiedDate":"2024-01-25"},{"lineNumber":123,"author":{"gitId":"dabzpengu"},"content":"            if(taskType.toString().trim().equals(\"todo\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":124,"author":{"gitId":"dabzpengu"},"content":"                Task currentTask \u003d new ToDos(taskName.toString().trim());","lastModifiedDate":"2024-02-06"},{"lineNumber":125,"author":{"gitId":"dabzpengu"},"content":"                faster_list.add(currentTask);","lastModifiedDate":"2024-01-28"},{"lineNumber":126,"author":{"gitId":"dabzpengu"},"content":"                writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"added new task: \" + currentTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":128,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":129,"author":{"gitId":"dabzpengu"},"content":"            else if(taskType.toString().trim().equals(\"deadline\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":130,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(date1.toString().trim());","lastModifiedDate":"2024-02-06"},{"lineNumber":131,"author":{"gitId":"dabzpengu"},"content":"                Task currentTask \u003d new Deadlines(taskName.toString().trim(), date1.toString().trim());","lastModifiedDate":"2024-02-06"},{"lineNumber":132,"author":{"gitId":"dabzpengu"},"content":"                faster_list.add(currentTask);","lastModifiedDate":"2024-01-28"},{"lineNumber":133,"author":{"gitId":"dabzpengu"},"content":"                writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":134,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"added new task: \" + currentTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":135,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":136,"author":{"gitId":"dabzpengu"},"content":"            else if(taskType.toString().trim().equals(\"event\")){","lastModifiedDate":"2024-02-06"},{"lineNumber":137,"author":{"gitId":"dabzpengu"},"content":"                Task currentTask \u003d new Events(taskName.toString().trim(), date1.toString().trim(), date2.toString().trim());","lastModifiedDate":"2024-02-06"},{"lineNumber":138,"author":{"gitId":"dabzpengu"},"content":"                faster_list.add(currentTask);","lastModifiedDate":"2024-01-28"},{"lineNumber":139,"author":{"gitId":"dabzpengu"},"content":"                writeToFile(faster_list);","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"dabzpengu"},"content":"                System.out.println(\"added new task: \" + currentTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":141,"author":{"gitId":"dabzpengu"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":142,"author":{"gitId":"dabzpengu"},"content":"            System.out.println(\"Total number of tasks so far: \" + (numOfActions + 1));","lastModifiedDate":"2024-01-28"},{"lineNumber":143,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":144,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":145,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":145}},{"path":"src/main/java/GandalfException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"public class GandalfException extends Exception{","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"    public GandalfException(String message){","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"        super(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"dabzpengu":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"    String nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"    boolean status;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"    public Task(){}","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"dabzpengu"},"content":"    public Task(String nameOfTask){","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"dabzpengu"},"content":"        this.nameOfTask \u003d nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"dabzpengu"},"content":"        this.status \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"    public void markStatus(boolean status){","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"dabzpengu"},"content":"        this.status \u003d status;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"dabzpengu"},"content":"    public boolean getStatus(){","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"dabzpengu"},"content":"        return this.status;","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"dabzpengu"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"dabzpengu"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"dabzpengu"},"content":"    public String toString(){","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"dabzpengu"},"content":"        if(status){","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"dabzpengu"},"content":"            return \"[X] \" + nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"dabzpengu"},"content":"        else{","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"dabzpengu"},"content":"            return \"[ ] \" + nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":27}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"public class ToDos extends Task{","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"    public ToDos(String nameOfTask){","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"dabzpengu"},"content":"        super(nameOfTask);","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"dabzpengu"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"dabzpengu"},"content":"    public String toString(){","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"dabzpengu"},"content":"        if(status){","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"dabzpengu"},"content":"            return \"[T][X] \" + nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"        else{","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"dabzpengu"},"content":"            return \"[T][ ] \" + nameOfTask;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"dabzpengu"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"dabzpengu"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"dabzpengu"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dabzpengu"},"content":"todo read a book","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"dabzpengu"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"dabzpengu":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"dabzpengu"},"content":"javac  -cp C:\\repos\\ip\\src -Xlint:none -d C:\\repos\\ip\\bin C:\\repos\\ip\\src\\main\\java\\*.java","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dabzpengu"},"content":"java -classpath C:\\repos\\ip\\bin Gandalf \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"dabzpengu":2,"-":19}}]
