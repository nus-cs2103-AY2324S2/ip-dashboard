[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    mainClassName\u003d\"gui.Launcher\"","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"    archiveFileName \u003d \u0027JerryGPT.jar\u0027","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"    archiveBaseName \u003d \"JerryGPT\"","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"JerryWang0000":19,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"# JerryGPT User Guide","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"![](/docs/Ui.png)","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"Although not as powerful as ChatGPT, this application does manage your tasks with ease and unlike other programs which","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"have a strict limit on input format, users have the freedom of input format to some extent.","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"## Adding tasks","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"This allows you to add a new task to the program.","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"Example run: `todo Homework`","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    Got it. I\u0027ve added this task:","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"      [T][] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"You can add a task called deadline or event by changing the \"todo\" in the sample code. A deadline should have a deadline timestamp.","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"It is specified by a date followed a time point in a day. You have the freedom to specify the timestamp in a format you like,","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"as the product supports a lot of mainstream formats in English. Use `/by` to specify the deadline.","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"An Event is specified by two timestamps: a starting time and ending time. Use `/from` and `/to` to specify the both.","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"## Deleting a task","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"This allows you to delete a task you don\u0027t need to care anymore.","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"Example run: `delete 1`","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"    Noted. I\u0027ve removed the task.","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"      [T][] Homework // from the previous run in \"add\"","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"Note that an index is needed to specify which task you wish to delete. If you type in an illegal index(smaller than 0 or larger than the number of tasks you have right now),","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"You will be notified, and your current existing tasks are safely stored.","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"## Exit","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"This tells you how to quit the program.","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"Example run: `bye` or type in `quit` or `goodbye`","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"  Bye! Please click the \"X\" on the upper right to exit. I\u0027m happy to answer to your requests if you keep typing in!","lastModifiedDate":"2024-02-23"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"## Find a task using a given keyword","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"With a given keyword, you can find the tasks that contain the certain keyword.","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"Example run: `find work` or `search work`","lastModifiedDate":"2024-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"    Ok! The search results are as follows:","lastModifiedDate":"2024-02-23"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"      [T][] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"The more you type in, the more likely you can find fewer tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"## list all tasks","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"Example run: `list`","lastModifiedDate":"2024-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"    The results are as follows:","lastModifiedDate":"2024-02-23"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"      [T][] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"This allows you to view the tasks you have right now.","lastModifiedDate":"2024-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"## Marking and unmarking tasks","lastModifiedDate":"2024-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"You can mark one event as done or undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"Example run: `mark 1`","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"    Noted. I\u0027ve marked this task as done:","lastModifiedDate":"2024-02-23"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"      [T][X] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"Now we unmark it again as undone: `unmark 1`","lastModifiedDate":"2024-02-23"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"    Noted. I\u0027ve marked this task as not done yet:","lastModifiedDate":"2024-02-23"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"      [T][] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"## Search the schedule on s specific date","lastModifiedDate":"2024-02-23"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"You can view your schedule on a specific date by entering the command `view 2024-01-01`:","lastModifiedDate":"2024-02-23"},{"lineNumber":99,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":100,"author":{"gitId":"JerryWang0000"},"content":"And you will see:","lastModifiedDate":"2024-02-23"},{"lineNumber":101,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":102,"author":{"gitId":"JerryWang0000"},"content":"    OK! The search results are as follows:","lastModifiedDate":"2024-02-23"},{"lineNumber":103,"author":{"gitId":"JerryWang0000"},"content":"    [T][] Homework","lastModifiedDate":"2024-02-23"},{"lineNumber":104,"author":{"gitId":"JerryWang0000"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":106,"author":{"gitId":"JerryWang0000"},"content":"There are only Todo tasks now. Since they do not have a specific ending time, they will be added to the search results without further information.","lastModifiedDate":"2024-02-23"},{"lineNumber":107,"author":{"gitId":"JerryWang0000"},"content":"For other events that have timestamp(s), they are organized in chronological order by the starting time or deadline, not in the order they are added.","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"JerryWang0000":91,"-":16}},{"path":"src/main/java/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.Deadline;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import duke.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import duke.Todo;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import duke.Event;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that adds a new task to the tasklist and inserts it in the storage file","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    private final String prompt;","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new command that creates a task.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     * @param prompt Adjusted by the Parser","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    public AddTaskCommand(String prompt) {","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"        this.prompt \u003d prompt;","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"    private Task createTask() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"        String[] order \u003d prompt.split(\" \", 2);","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"        String taskType \u003d order[0];","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. It seems this todo task has no content at all!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"            return new Todo(order[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. It seems this deadline task has no content at all!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"            String[] deadline \u003d order[1].split(\" /by \", 2);","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"                assert deadline.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. The description of the deadline task is of incompatible format!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"            return new Deadline(deadline[0], deadline[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"        case \"event\":","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. It seems this event has no content at all!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"            String[] start \u003d order[1].split(\" /from \", 2);","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"                assert start.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. The starting time of this event is not described in correct format\");","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"            String[] end \u003d start[1].split(\" /to \", 2);","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"                assert end.length \u003e 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Sorry. The ending time of this event is not described in correct format\");","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"            return new Event(start[0], end[0], end[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"        default:","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"            throw new DukeException(\"Sorry. I don\u0027t see what you mean by that...\");","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are adding the same task.","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if 2 are of the same prompt","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof AddTaskCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"            return ((AddTaskCommand) other).prompt.equals(prompt);","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"     * Adds a new task to the taskList and write it into the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells that the task-adding is successful","lastModifiedDate":"2024-02-22"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":99,"author":{"gitId":"JerryWang0000"},"content":"        Task task \u003d createTask();","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"JerryWang0000"},"content":"        storage.addTask(task);","lastModifiedDate":"2024-02-08"},{"lineNumber":101,"author":{"gitId":"JerryWang0000"},"content":"        return taskList.add(task);","lastModifiedDate":"2024-02-16"},{"lineNumber":102,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":103,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":103}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" * Executes certain requests given by the user. Prints results on the screen, interacts with file management and","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" * tasklist control","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * Executes the task prompted by the user, prints certain results on the screen, and makes modification","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * to the storage files and internal task list to have better control of the storage of tasks","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that answers the user","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    public abstract String execute(Storage storage, TaskList taskList) throws DukeException;","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":23}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import duke.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that deletes a task","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"    private final int num;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new DeleteCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param num The index of the task that is to be deleted","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    public DeleteCommand(int num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"        this.num \u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are deleting the same index in the taskList.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if the indices are the same","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof DeleteCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"            return ((DeleteCommand) other).num \u003d\u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     * Deletes a task. Deletes the task from the file and the task list.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells that task removal is successful","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"        Task task \u003d taskList.remove(num);","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        String result \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"        result +\u003d \"  \" + task + \"\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"        result +\u003d taskList.countSize();","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"        storage.deleteLine(num);","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"        return result;","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":54}},{"path":"src/main/java/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that exits the execution of user interaction","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if the other command is also exit command.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if both are ExitCommands","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"        return other instanceof ExitCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"     * Leaves a farewell message.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells the user the exection is complete","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        return \"Bye! Please click the \\\"X\\\" on the upper right to exit. I\u0027m happy to answer to your\" +","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"                \" requests if you keep typing in!\\n\";","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":33}},{"path":"src/main/java/command/FindKeywordCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that searches certain keywords in all the commands","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"public class FindKeywordCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    private final String keyword;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs the FindKeywordCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     * @param keyword The keyword typed in by the user","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    public FindKeywordCommand(String keyword) {","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are searching the same keyword.","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if another command is also searching the same keyword","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof FindKeywordCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"            return keyword.equals(((FindKeywordCommand) other).keyword);","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"     * Search all the content of the tasks and list all that contain the keywords.","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the program execution","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all matching tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the execution is unsuccessful","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"        return taskList.searchKeyword(keyword);","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":48}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that lists all currently recorded tasks","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if another command is also a ListCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if another command is also ListCommand","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"        return other instanceof ListCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"     * Prints currently recorded tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all the tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        return taskList.print();","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":33}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import duke.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that marks a task as finished","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"    private final int num;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new MarkCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param num The index of the task that is to be marked finished","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    public MarkCommand(int num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"        this.num \u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are marking the same indexed command.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if 2 commands are marking the same indexed task","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof MarkCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"            return ((MarkCommand) other).num \u003d\u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     * Marks one task as done. Rewrite the corresponding part in the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells that the task has been marked","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"        Task task \u003d taskList.retrieve(num);","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        if (task.isDone()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"            return \"Already done. No need to mark again.\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"            task.mark();","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"            String result \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"            result +\u003d \"  \" + task.toString();","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"            storage.editLine(num, task);","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"            return result;","lastModifiedDate":"2024-02-16"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":58}},{"path":"src/main/java/command/SearchDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import duke.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that lists search results given a date","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"public class SearchDateCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    private final String date;","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new SearchDateCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * @param date A string representing the date","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    public SearchDateCommand(String date) {","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are searching the same date.","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another Command","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"     * @return true if the 2 commands are searching the same date, false otherwise.","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof SearchDateCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"                return Task.parseDate(((SearchDateCommand) other).date).isEqual(Task.parseDate(date));","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"                return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     * Searches tasks that match the searching date, and lists all of them.","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all matching tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"        LocalDate localDate \u003d Task.parseDate(date);","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"        return taskList.searchDate(localDate);","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":56}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package command;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import duke.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" * Represents a command that marks a task as unfinished","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"    private final int num;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new unMarkCommand.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param num The index of the task that is to be marked unfinished","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    public UnmarkCommand(int num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"        this.num \u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     * Judges if 2 commands are unmarking the same indexed command.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * @param other Another command","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if 2 commands are unmarking the same indexed task","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        if (other instanceof UnmarkCommand) {","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"            return ((UnmarkCommand) other).num \u003d\u003d num;","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     * Marks one task as unfinished. Rewrite the corresponding part in the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @param storage  Involved in file management","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     * @param taskList Active during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells that the task has been unmarked","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    public String execute(Storage storage, TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"        Task task \u003d taskList.retrieve(num);","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        if (!task.isDone()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"            return \"Not done in the first place.\";","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"            task.unmark();","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"            String result \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"            result +\u003d \"  \" + task.toString();","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"            storage.editLine(num, task);","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"            return result;","lastModifiedDate":"2024-02-16"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":58}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" * Represents a task with a deadline","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"public class Deadline extends Task implements TaskWithTime{","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Deadline.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     * @param name     The content of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param deadline A string representing the deadline","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the time parsing is unsuccessful","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    public Deadline(String name, String deadline) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"        super(name);","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"        this.deadline \u003d Task.parse(deadline);","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"     * Returns a timestamp to compare the order of events.","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     * @return a LocalDateTime object to represent the timestamp of the task","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    public LocalDateTime getTimestamp() {","lastModifiedDate":"2024-02-22"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        return deadline;","lastModifiedDate":"2024-02-22"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"    String taskToLine() {","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"        return \"D | \" + super.taskToLine() + \" | \" + deadline.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"                .ofPattern(\"yyyy-MM-dd HH:mm:ss\"));","lastModifiedDate":"2024-02-07"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"     * Checks if the deadline is on the same date as the searching date.","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"     * @param localDate The given date that the user wishes to check","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if the searching date is the same as the date of the deadline","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"    boolean canMatchDate(LocalDate localDate) {","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"        return deadline.toLocalDate().equals(localDate);","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task and the deadline.","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"        return \"[D]\" + super.toString() + String.format(\" (by: %s) \", deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"                .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":64}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import command.Command;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" * Represents the whole program that handles the user interaction, user prompt parsing, task list and file management,","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" * and executions on the tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"public class Duke {","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    private final Ui ui;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"    private final Storage storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Duke Program.","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * @param name       The name given by the user to the bot program","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * @param fileFolder The location where the file of tasks needs to be stored","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     * @param fileName   The name of the file storing all tasks","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    private Duke(String name, String fileFolder, String fileName) {","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"        ui \u003d new Ui(name);","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"        storage \u003d new Storage(fileFolder, fileName);","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"        taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Duke Program.","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if initialization is unsuccessful","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"    public Duke() {","lastModifiedDate":"2024-02-15"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"        this(\"Jerry\", \"./data\", \"duke.txt\");","lastModifiedDate":"2024-02-15"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     * Generates a string that answers the prompt given by the user.","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that represents the answer","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"            return command.execute(storage, taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"            return e.toString();","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"JerryWang0000":48,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":" * Handles all the exception during the execution of the program","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"    private final String errorMessage;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new DukeException.","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     * @param errorMessage The error message","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * Prints the error message.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     * @return errorMessage","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"        return errorMessage;","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":27}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":" * Represents a task with a starting time and ending time","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"public class Event extends Task implements TaskWithTime{","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    private final LocalDateTime startTime;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"    private final LocalDateTime endTime;","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Event.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * @param name      The content of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * @param startTime The starting time of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * @param endTime   The endting time of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the time parsing is unsuccessful or the event ends before it starts","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    public Event(String name, String startTime, String endTime) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"        super(name);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"        this.startTime \u003d Task.parse(startTime);","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"        this.endTime \u003d Task.parse(endTime);","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"            assert this.startTime.isBefore(this.endTime);","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"            throw new DukeException(\"Oops! It seems the event ends before it starts!\");","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"     * Returns a timestamp to compare the order of events.","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"     * @return a LocalDateTime object to represent the timestamp of the task","lastModifiedDate":"2024-02-22"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"    public LocalDateTime getTimestamp() {","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"        return startTime;","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"    String taskToLine() {","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        return \"E | \" + super.taskToLine() + \" | \" + startTime.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"                .ofPattern(\"yyyy-MM-dd HH:mm:ss\")) + \" | \" + endTime.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"                .ofPattern(\"yyyy-MM-dd HH:mm:ss\"));","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"     * Checks if the searching date is between the starting time and ending time.","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"     * @param localDate The given date that the user wishes to check","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if the searching date is between the starting time and ending time","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"    boolean canMatchDate(LocalDate localDate) {","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"        return startTime.toLocalDate().equals(localDate) ||","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"                endTime.toLocalDate().equals(localDate) ||","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"                (startTime.toLocalDate().isBefore(localDate) \u0026\u0026","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"                        endTime.toLocalDate().isAfter(localDate));","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task, the starting time and ending time.","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"     * If the event is happening on the same day, the output string is simplified.","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"        if (startTime.toLocalDate().equals(endTime.toLocalDate())) {","lastModifiedDate":"2024-02-07"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"            return \"[E]\" + super.toString() + String.format(\" (from: %s to: %s) \", startTime.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"                    .ofPattern(\"yyyy-MM-dd HH:mm\")), endTime.toLocalTime()","lastModifiedDate":"2024-02-07"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"                    .format(DateTimeFormatter.ofPattern(\"HH:mm\")));","lastModifiedDate":"2024-02-07"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"            return \"[E]\" + super.toString() + String.format(\" (from: %s to: %s) \", startTime.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"                    .ofPattern(\"yyyy-MM-dd HH:mm\")), endTime.format(DateTimeFormatter","lastModifiedDate":"2024-02-07"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"                    .ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2024-02-07"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":84}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import command.Command;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import command.AddTaskCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import command.ListCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import command.ExitCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import command.MarkCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import command.SearchDateCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"import command.DeleteCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"import command.FindKeywordCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":" * Represents the process of understanding user\u0027s prompts, and convert them into certain commands","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"abstract class Parser {","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * Converts the user\u0027s prompt into commands that can be executed.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     * @param prompt The user input.","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"     * @return Certain meaningful commands.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the prompt is meaningless or of incompatible format.","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    static Command parse(String prompt) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"        String adjustedPrompt \u003d prompt.replaceAll(\"\\\\s+\", \" \");","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"        String[] order \u003d adjustedPrompt.split(\" \");","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"        DukeException e \u003d new DukeException(\"Sorry! The prompt has ambiguious meanings...\");","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"        switch (order[0]) {","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        case \"list\":","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"            return new ListCommand();","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"        case \"mark\":","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 2;","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"                return new MarkCommand(Integer.parseInt(order[1]));","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"            } catch (NumberFormatException f) {","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        case \"unmark\":","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 2;","lastModifiedDate":"2024-02-22"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"                return new UnmarkCommand(Integer.parseInt(order[1]));","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"            } catch (NumberFormatException f) {","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"        case \"delete\":","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 2;","lastModifiedDate":"2024-02-22"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"                return new DeleteCommand(Integer.parseInt(order[1]));","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"            } catch (NumberFormatException f) {","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"        case \"view\":","lastModifiedDate":"2024-02-22"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 2;","lastModifiedDate":"2024-02-22"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"            return new SearchDateCommand(order[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"        case \"search\":","lastModifiedDate":"2024-02-22"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"        case \"find\":","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 2;","lastModifiedDate":"2024-02-22"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"            return new FindKeywordCommand(order[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"        case \"bye\":","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"        case \"goodbye\":","lastModifiedDate":"2024-02-23"},{"lineNumber":87,"author":{"gitId":"JerryWang0000"},"content":"        case \"quit\":","lastModifiedDate":"2024-02-23"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"                assert order.length \u003c\u003d 1;","lastModifiedDate":"2024-02-22"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e1) {","lastModifiedDate":"2024-02-22"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"                throw e;","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"        default:","lastModifiedDate":"2024-02-08"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"            return new AddTaskCommand(adjustedPrompt);","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":98}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.io.File;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":" * Represents the part of the program taht handles the file management.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"public class Storage {","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    private final File file;","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     * Initialize the file using the given folder and file name. If there is an existing file, just use it.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * If the folder or file does not exist, create them.","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     * @param fileFolder The directory of the file","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"     * @param fileName   Name of the file","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    Storage(String fileFolder, String fileName) {","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"        File directory \u003d new File(fileFolder);","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"            boolean isDirMade \u003d directory.mkdirs();","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"            if (!isDirMade) {","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"                System.out.println(\"Oops! Something is wrong with directory creation!\");","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        file \u003d new File(fileFolder + \"/\" + fileName);","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"                boolean isCreated \u003d file.createNewFile();","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"                if (!isCreated) {","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"                    System.out.println(\"Oops! Something is wrong with file creation!\");","lastModifiedDate":"2024-02-15"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"                System.out.println(\"Oops! Something is wrong with file creation!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"     * Loads the tasks from an existing file, and sends the tasks to the initialization stage of the program.","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"     * @return An ArrayList of the lines in the file","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"    ArrayList\u003cString\u003e load() {","lastModifiedDate":"2024-02-15"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"                String line \u003d sc.nextLine();","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"                result.add(line);","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"            return result;","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"            System.out.println(\"Oops! No file in the directory!\");","lastModifiedDate":"2024-02-15"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"            return result;","lastModifiedDate":"2024-02-15"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"     * Rewrites a certain line in the file using the latest information of the task.","lastModifiedDate":"2024-02-22"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"     * @param num  the index of the task that needs to be updated","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"     * @param task The task with latest updated information","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"    public void editLine(int num, Task task) {","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"            int i \u003d 1;","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"                String newLine \u003d sc.nextLine();","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"                if (i !\u003d num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"                    lines.add(newLine);","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"                } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"                    lines.add(task.taskToLine());","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"                i++;","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"            for (String line : lines) {","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"                fw.write(line + \"\\n\");","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"            fw.close();","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"            System.out.println(\"Oops! Something is wrong with the file management!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"     * Deletes a line from the file if the task on that line is deleted.","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"     * @param num The index of the task to be deleted","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":99,"author":{"gitId":"JerryWang0000"},"content":"    public void deleteLine(int num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":101,"author":{"gitId":"JerryWang0000"},"content":"            int i \u003d 1;","lastModifiedDate":"2024-02-08"},{"lineNumber":102,"author":{"gitId":"JerryWang0000"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":103,"author":{"gitId":"JerryWang0000"},"content":"            Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2024-02-08"},{"lineNumber":104,"author":{"gitId":"JerryWang0000"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":105,"author":{"gitId":"JerryWang0000"},"content":"                String newLine \u003d sc.nextLine();","lastModifiedDate":"2024-02-08"},{"lineNumber":106,"author":{"gitId":"JerryWang0000"},"content":"                if (i !\u003d num) {","lastModifiedDate":"2024-02-08"},{"lineNumber":107,"author":{"gitId":"JerryWang0000"},"content":"                    lines.add(newLine);","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"JerryWang0000"},"content":"                i++;","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":111,"author":{"gitId":"JerryWang0000"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"JerryWang0000"},"content":"            for (String line : lines) {","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"JerryWang0000"},"content":"                fw.write(line + \"\\n\");","lastModifiedDate":"2024-02-08"},{"lineNumber":114,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"JerryWang0000"},"content":"            fw.close();","lastModifiedDate":"2024-02-08"},{"lineNumber":116,"author":{"gitId":"JerryWang0000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":117,"author":{"gitId":"JerryWang0000"},"content":"            System.out.println(\"Oops! Something is wrong with the file management!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":118,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":119,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":120,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":121,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":122,"author":{"gitId":"JerryWang0000"},"content":"     * Adds a new task to the file when a new task is created.","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"JerryWang0000"},"content":"     * @param task The new task added","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"JerryWang0000"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-08"},{"lineNumber":127,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":128,"author":{"gitId":"JerryWang0000"},"content":"            FileWriter fw \u003d new FileWriter(file, true);","lastModifiedDate":"2024-02-08"},{"lineNumber":129,"author":{"gitId":"JerryWang0000"},"content":"            fw.write(task.taskToLine() + \"\\n\");","lastModifiedDate":"2024-02-08"},{"lineNumber":130,"author":{"gitId":"JerryWang0000"},"content":"            fw.close();","lastModifiedDate":"2024-02-08"},{"lineNumber":131,"author":{"gitId":"JerryWang0000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":132,"author":{"gitId":"JerryWang0000"},"content":"            System.out.println(\"Oops! unable to write to the file!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":133,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":134,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":135,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":135}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import java.util.List;","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" * Represents a task given by the user that is needs to be stored","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"abstract public class Task {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    private static final List\u003cString\u003e DATE_FORMATS \u003d List.of(","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"            \"yyyy-MM-dd\",","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"            \"yyyy-M-d\",","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"            \"dd-MM-yyyy\",","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"            \"yyyy-MM-d\",","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"            \"d-MM-yyyy\",","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"            \"d/MM/yyyy\",","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"            \"dd/MM/yyyy\",","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"            \"yyyy/MM/dd\",","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"            \"yyyy/MM/d\"","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    );","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    private static final List\u003cString\u003e TIME_FORMATS \u003d List.of(","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"            \"HH[:mm[:ss[.SSS]]]\",","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"            \"H[:mm[:ss[.SSS]]]\",","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"            \"HH[mm[ss]]\",","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"            \"hh[:mm[:ss]] a\",","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"            \"h[:mm[:ss]] a\",","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"            \"hh[mm[ss]] a\"","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    );","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"    private final String name;","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-07"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Task.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"     * @param name The content of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"    Task(String name) {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"     * Checks if a task is marked as done.","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"     * @return Whether the task is marked done","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"        return isDone;","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"     * Marks a task as done.","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"    public void mark() {","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"     * Marks a task as unfinished.","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"    public void unmark() {","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"     * Converts the task into a string of certain format as to be written in the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"     * @return The formatted string that is suitable to be written in the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"    String taskToLine() {","lastModifiedDate":"2024-02-07"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"        String mark \u003d \"X\";","lastModifiedDate":"2024-02-07"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"        if (isDone) {","lastModifiedDate":"2024-02-07"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"            mark \u003d \"O\";","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"        return mark + \" | \" + name;","lastModifiedDate":"2024-02-07"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"     * Converts a string representing the dateTime into a LocalDateTime object.","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"     * @param string a string that represents the dateTime","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"JerryWang0000"},"content":"     * @return The LocalDateTime object that contains the same information as the string","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the conversion is unsuccessful","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"    static LocalDateTime parse(String string) throws DukeException {","lastModifiedDate":"2024-02-07"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"        for (String date : DATE_FORMATS) {","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"            for (String time : TIME_FORMATS) {","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"                String format \u003d date + \" \" + time;","lastModifiedDate":"2024-02-07"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"                try {","lastModifiedDate":"2024-02-07"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"                    return LocalDateTime.parse(string, DateTimeFormatter.ofPattern(format));","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"                    continue;","lastModifiedDate":"2024-02-07"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-07"},{"lineNumber":99,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":100,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":101,"author":{"gitId":"JerryWang0000"},"content":"        throw new DukeException(\"Oops! Unable to extract time from the prompt!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":102,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":103,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":104,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":105,"author":{"gitId":"JerryWang0000"},"content":"     * Converts a string representing the date into a LocalDate object.","lastModifiedDate":"2024-02-08"},{"lineNumber":106,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":107,"author":{"gitId":"JerryWang0000"},"content":"     * @param string a string that represents the dateTime","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"JerryWang0000"},"content":"     * @return The LocalDate object that contains the same information as the string","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the conversion is unsuccessful","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":111,"author":{"gitId":"JerryWang0000"},"content":"    public static LocalDate parseDate(String string) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"JerryWang0000"},"content":"        for (String date : DATE_FORMATS) {","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-07"},{"lineNumber":114,"author":{"gitId":"JerryWang0000"},"content":"                return LocalDate.parse(string, DateTimeFormatter.ofPattern(date));","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"JerryWang0000"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":116,"author":{"gitId":"JerryWang0000"},"content":"                continue;","lastModifiedDate":"2024-02-07"},{"lineNumber":117,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":118,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":119,"author":{"gitId":"JerryWang0000"},"content":"        throw new DukeException(\"Oops! Cannot understand the input date!\");","lastModifiedDate":"2024-02-07"},{"lineNumber":120,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":121,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":122,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"JerryWang0000"},"content":"     * Checks if the given date matches own date.","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"JerryWang0000"},"content":"     * @param localDate The given date that the user wishes to check","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"JerryWang0000"},"content":"     * @return False by default.","lastModifiedDate":"2024-02-08"},{"lineNumber":127,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":128,"author":{"gitId":"JerryWang0000"},"content":"    boolean canMatchDate(LocalDate localDate) {","lastModifiedDate":"2024-02-08"},{"lineNumber":129,"author":{"gitId":"JerryWang0000"},"content":"        return false;","lastModifiedDate":"2024-02-07"},{"lineNumber":130,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":131,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":132,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":133,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":134,"author":{"gitId":"JerryWang0000"},"content":"     * Checks if a keyword is contained in the content of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":135,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":136,"author":{"gitId":"JerryWang0000"},"content":"     * @param keyword The keyword typed in by the user","lastModifiedDate":"2024-02-08"},{"lineNumber":137,"author":{"gitId":"JerryWang0000"},"content":"     * @return True if the keyword is contained in the content","lastModifiedDate":"2024-02-08"},{"lineNumber":138,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":139,"author":{"gitId":"JerryWang0000"},"content":"    boolean isContaining(String keyword) {","lastModifiedDate":"2024-02-08"},{"lineNumber":140,"author":{"gitId":"JerryWang0000"},"content":"        return this.name.contains(keyword);","lastModifiedDate":"2024-02-08"},{"lineNumber":141,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":142,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":143,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":144,"author":{"gitId":"JerryWang0000"},"content":"     * Prints the task with certain information.","lastModifiedDate":"2024-02-08"},{"lineNumber":145,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":146,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string with the content and whether it is done or not","lastModifiedDate":"2024-02-08"},{"lineNumber":147,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":148,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":149,"author":{"gitId":"JerryWang0000"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":150,"author":{"gitId":"JerryWang0000"},"content":"        if (isDone) {","lastModifiedDate":"2024-02-07"},{"lineNumber":151,"author":{"gitId":"JerryWang0000"},"content":"            return \"[X] \" + name;","lastModifiedDate":"2024-02-01"},{"lineNumber":152,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":153,"author":{"gitId":"JerryWang0000"},"content":"            return \"[ ] \" + name;","lastModifiedDate":"2024-02-01"},{"lineNumber":154,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":155,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":156,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":156}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import java.util.HashMap;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":" * Represents the part of the program that stores all currently available tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"public class TaskList {","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new TaskList using the extracted tasks from the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * @param load The ArrayLisst provided by the file","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the initialization is unsuccessful.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    TaskList(ArrayList\u003cString\u003e load) {","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"            for (String task : load) {","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"                tasks.add(lineToTask(task));","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"            System.out.println(e);","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"     * Prints all tasks in the list.","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    public String print() {","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"            return \"No tasks yet...\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"            String result \u003d \"The tasks as as follows:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"                result +\u003d (i + 1) + \".\" + tasks.get(i) + \"\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"            return result;","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"     * Gets a certain task according to the index","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"     * @param num Index of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"     * @return The task that needs to be retrieved","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the index is invalid","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"    public Task retrieve(int num) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"            assert num \u003e 0 \u0026\u0026 num \u003c\u003d tasks.size();","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"            throw new DukeException(\"OOPS! Invalid Index!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"        return tasks.get(num - 1);","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"JerryWang0000"},"content":"     * Removes a certain task according to the index","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"JerryWang0000"},"content":"     * @param num Index of the task","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"JerryWang0000"},"content":"     * @return The task that needs to be removed","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"JerryWang0000"},"content":"     * @throws DukeException if the index is invalid","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"JerryWang0000"},"content":"    public Task remove(int num) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"JerryWang0000"},"content":"            assert num \u003e 0 \u0026\u0026 num \u003c\u003d tasks.size();","lastModifiedDate":"2024-02-22"},{"lineNumber":75,"author":{"gitId":"JerryWang0000"},"content":"        } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":76,"author":{"gitId":"JerryWang0000"},"content":"            throw new DukeException(\"OOPS! Invalid Index!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"JerryWang0000"},"content":"        return tasks.remove(num - 1);","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"JerryWang0000"},"content":"     * Counts the number of available tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":84,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains the number of tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":85,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"JerryWang0000"},"content":"    public String countSize() {","lastModifiedDate":"2024-02-16"},{"lineNumber":87,"author":{"gitId":"JerryWang0000"},"content":"        if (tasks.size() \u003d\u003d 1) {","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"JerryWang0000"},"content":"            return \"Now you have 1 task in the list\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":89,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"JerryWang0000"},"content":"            return String.format(\"Now you have %d tasks in the list\\n\", tasks.size());","lastModifiedDate":"2024-02-16"},{"lineNumber":91,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"JerryWang0000"},"content":"    private Task lineToTask(String line) throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":95,"author":{"gitId":"JerryWang0000"},"content":"        String[] lineSplit \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"JerryWang0000"},"content":"        switch (lineSplit[0]) {","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"JerryWang0000"},"content":"        case \"T\":","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"JerryWang0000"},"content":"            Task newTask \u003d new Todo(lineSplit[2]);","lastModifiedDate":"2024-02-08"},{"lineNumber":99,"author":{"gitId":"JerryWang0000"},"content":"            if (lineSplit[1].equals(\"O\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"JerryWang0000"},"content":"                newTask.mark();","lastModifiedDate":"2024-02-08"},{"lineNumber":101,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":102,"author":{"gitId":"JerryWang0000"},"content":"            return newTask;","lastModifiedDate":"2024-02-08"},{"lineNumber":103,"author":{"gitId":"JerryWang0000"},"content":"        case \"D\":","lastModifiedDate":"2024-02-08"},{"lineNumber":104,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":105,"author":{"gitId":"JerryWang0000"},"content":"                assert lineSplit.length \u003e\u003d 4;","lastModifiedDate":"2024-02-22"},{"lineNumber":106,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":107,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Oops! The file format is wrong!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"JerryWang0000"},"content":"            newTask \u003d new Deadline(lineSplit[2], lineSplit[3]);","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"JerryWang0000"},"content":"            if (lineSplit[1].equals(\"O\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":111,"author":{"gitId":"JerryWang0000"},"content":"                newTask.mark();","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"JerryWang0000"},"content":"            return newTask;","lastModifiedDate":"2024-02-08"},{"lineNumber":114,"author":{"gitId":"JerryWang0000"},"content":"        case \"E\":","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"JerryWang0000"},"content":"            try {","lastModifiedDate":"2024-02-22"},{"lineNumber":116,"author":{"gitId":"JerryWang0000"},"content":"                assert lineSplit.length \u003e\u003d 5;","lastModifiedDate":"2024-02-22"},{"lineNumber":117,"author":{"gitId":"JerryWang0000"},"content":"            } catch (AssertionError e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":118,"author":{"gitId":"JerryWang0000"},"content":"                throw new DukeException(\"Oops! The file format is wrong!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":119,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":120,"author":{"gitId":"JerryWang0000"},"content":"            newTask \u003d new Event(lineSplit[2], lineSplit[3], lineSplit[4]);","lastModifiedDate":"2024-02-08"},{"lineNumber":121,"author":{"gitId":"JerryWang0000"},"content":"            if (lineSplit[1].equals(\"O\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":122,"author":{"gitId":"JerryWang0000"},"content":"                newTask.mark();","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"JerryWang0000"},"content":"            return newTask;","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"JerryWang0000"},"content":"        default:","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"JerryWang0000"},"content":"            throw new DukeException(\"Oops! The file format is wrong!\");","lastModifiedDate":"2024-02-08"},{"lineNumber":127,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":128,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":129,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":130,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":131,"author":{"gitId":"JerryWang0000"},"content":"     * Searches all tasks with the given date. If there is a match, print it out.","lastModifiedDate":"2024-02-08"},{"lineNumber":132,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":133,"author":{"gitId":"JerryWang0000"},"content":"     * @param localDate The searching date","lastModifiedDate":"2024-02-08"},{"lineNumber":134,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all matching tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":135,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":136,"author":{"gitId":"JerryWang0000"},"content":"    public String searchDate(LocalDate localDate) {","lastModifiedDate":"2024-02-16"},{"lineNumber":137,"author":{"gitId":"JerryWang0000"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":138,"author":{"gitId":"JerryWang0000"},"content":"        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-22"},{"lineNumber":139,"author":{"gitId":"JerryWang0000"},"content":"        HashMap\u003cTask, LocalDateTime\u003e pairs \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2024-02-22"},{"lineNumber":140,"author":{"gitId":"JerryWang0000"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-08"},{"lineNumber":141,"author":{"gitId":"JerryWang0000"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2024-02-22"},{"lineNumber":142,"author":{"gitId":"JerryWang0000"},"content":"                result.add(task);","lastModifiedDate":"2024-02-08"},{"lineNumber":143,"author":{"gitId":"JerryWang0000"},"content":"            } else {","lastModifiedDate":"2024-02-22"},{"lineNumber":144,"author":{"gitId":"JerryWang0000"},"content":"                if (task.canMatchDate(localDate)) {","lastModifiedDate":"2024-02-22"},{"lineNumber":145,"author":{"gitId":"JerryWang0000"},"content":"                    pairs.put(task, ((TaskWithTime) task).getTimestamp());","lastModifiedDate":"2024-02-22"},{"lineNumber":146,"author":{"gitId":"JerryWang0000"},"content":"                    temp.add(task);","lastModifiedDate":"2024-02-22"},{"lineNumber":147,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-22"},{"lineNumber":148,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-22"},{"lineNumber":149,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-22"},{"lineNumber":150,"author":{"gitId":"JerryWang0000"},"content":"        for (int i \u003d 0; i \u003c temp.size(); i++) {","lastModifiedDate":"2024-02-22"},{"lineNumber":151,"author":{"gitId":"JerryWang0000"},"content":"            for (int j \u003d i + 1; j \u003c temp.size(); j++) {","lastModifiedDate":"2024-02-22"},{"lineNumber":152,"author":{"gitId":"JerryWang0000"},"content":"                if (!pairs.get(temp.get(i)).isBefore(pairs.get(temp.get(j)))) {","lastModifiedDate":"2024-02-22"},{"lineNumber":153,"author":{"gitId":"JerryWang0000"},"content":"                    Task t \u003d temp.get(i);","lastModifiedDate":"2024-02-22"},{"lineNumber":154,"author":{"gitId":"JerryWang0000"},"content":"                    temp.set(i, temp.get(j));","lastModifiedDate":"2024-02-22"},{"lineNumber":155,"author":{"gitId":"JerryWang0000"},"content":"                    temp.set(j, t);","lastModifiedDate":"2024-02-22"},{"lineNumber":156,"author":{"gitId":"JerryWang0000"},"content":"                }","lastModifiedDate":"2024-02-22"},{"lineNumber":157,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":158,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":159,"author":{"gitId":"JerryWang0000"},"content":"        result.addAll(temp);","lastModifiedDate":"2024-02-22"},{"lineNumber":160,"author":{"gitId":"JerryWang0000"},"content":"        if (result.isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":161,"author":{"gitId":"JerryWang0000"},"content":"            return \"Sorry! No tasks can satisfy your query conditions...\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":162,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":163,"author":{"gitId":"JerryWang0000"},"content":"            String output \u003d \"OK! The search results are as follows:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":164,"author":{"gitId":"JerryWang0000"},"content":"            for (int i \u003d 1; i \u003c\u003d result.size(); i++) {","lastModifiedDate":"2024-02-08"},{"lineNumber":165,"author":{"gitId":"JerryWang0000"},"content":"                output +\u003d String.format(\"  %d. %s\\n\", i, result.get(i - 1));","lastModifiedDate":"2024-02-16"},{"lineNumber":166,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":167,"author":{"gitId":"JerryWang0000"},"content":"            return output;","lastModifiedDate":"2024-02-16"},{"lineNumber":168,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":169,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":170,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":171,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":172,"author":{"gitId":"JerryWang0000"},"content":"     * Searches all tasks that contain the certain keyword and print them all.","lastModifiedDate":"2024-02-08"},{"lineNumber":173,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":174,"author":{"gitId":"JerryWang0000"},"content":"     * @param keyword The keyword typed in by the user","lastModifiedDate":"2024-02-08"},{"lineNumber":175,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that contains all matching tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":176,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":177,"author":{"gitId":"JerryWang0000"},"content":"    public String searchKeyword(String keyword) {","lastModifiedDate":"2024-02-16"},{"lineNumber":178,"author":{"gitId":"JerryWang0000"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-08"},{"lineNumber":179,"author":{"gitId":"JerryWang0000"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-08"},{"lineNumber":180,"author":{"gitId":"JerryWang0000"},"content":"            if (task.isContaining(keyword)) {","lastModifiedDate":"2024-02-08"},{"lineNumber":181,"author":{"gitId":"JerryWang0000"},"content":"                result.add(task);","lastModifiedDate":"2024-02-08"},{"lineNumber":182,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":183,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":184,"author":{"gitId":"JerryWang0000"},"content":"        if (result.isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":185,"author":{"gitId":"JerryWang0000"},"content":"            return \"Sorry! No tasks can satisfy your query conditions...\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":186,"author":{"gitId":"JerryWang0000"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":187,"author":{"gitId":"JerryWang0000"},"content":"            String output \u003d \"OK! The search results are as follows:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":188,"author":{"gitId":"JerryWang0000"},"content":"            for (int i \u003d 1; i \u003c\u003d result.size(); i++) {","lastModifiedDate":"2024-02-08"},{"lineNumber":189,"author":{"gitId":"JerryWang0000"},"content":"                output +\u003d String.format(\"  %d. %s\\n\", i, result.get(i - 1));","lastModifiedDate":"2024-02-16"},{"lineNumber":190,"author":{"gitId":"JerryWang0000"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":191,"author":{"gitId":"JerryWang0000"},"content":"            return output;","lastModifiedDate":"2024-02-16"},{"lineNumber":192,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":193,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":194,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":195,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":196,"author":{"gitId":"JerryWang0000"},"content":"     * Adds a new Task to the list.","lastModifiedDate":"2024-02-08"},{"lineNumber":197,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":198,"author":{"gitId":"JerryWang0000"},"content":"     * @param task The task that needs to be added","lastModifiedDate":"2024-02-08"},{"lineNumber":199,"author":{"gitId":"JerryWang0000"},"content":"     * @return A string that tells that the task-adding is successful","lastModifiedDate":"2024-02-22"},{"lineNumber":200,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":201,"author":{"gitId":"JerryWang0000"},"content":"    public String add(Task task) {","lastModifiedDate":"2024-02-16"},{"lineNumber":202,"author":{"gitId":"JerryWang0000"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-08"},{"lineNumber":203,"author":{"gitId":"JerryWang0000"},"content":"        String result \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":204,"author":{"gitId":"JerryWang0000"},"content":"        result +\u003d \"  \" + task + \"\\n\";","lastModifiedDate":"2024-02-16"},{"lineNumber":205,"author":{"gitId":"JerryWang0000"},"content":"        return result + countSize();","lastModifiedDate":"2024-02-16"},{"lineNumber":206,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":207,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":207}},{"path":"src/main/java/duke/TaskWithTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":" * Represents a task that has a timestamp","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"interface TaskWithTime {","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"     * Returns a timestamp to compare the order of events.","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     * @return a LocalDateTime object to represent the timestamp of the task","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    LocalDateTime getTimestamp();","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"JerryWang0000":15}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":" * Represents a task of type Todo","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"     * Constructs a new Todo.","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"     * @param name The Content of the Todo","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"    public Todo(String name) {","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"        super(name);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    String taskToLine() {","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"        return \"T | \" + super.taskToLine();","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"     * {@inheritDoc}","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"     * Specifies the type of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":34}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":" * Represents the part of the program that handles user interaction","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"class Ui {","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"    private final String name;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"     * Initializes the Ui with the name given by the user.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"     * @param name The name of the bot","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    Ui(String name) {","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":19}},{"path":"src/main/java/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package gui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-15"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-15"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-15"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-15"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-15"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-15"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-15"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"        displayPicture.setClip(new Circle(50, 45, 41));","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-15"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-15"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-15"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    private void flip() {","lastModifiedDate":"2024-02-15"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-15"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-15"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-15"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-15"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-15"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-15"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":56,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":57,"author":{"gitId":"JerryWang0000"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-15"},{"lineNumber":58,"author":{"gitId":"JerryWang0000"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-15"},{"lineNumber":59,"author":{"gitId":"JerryWang0000"},"content":"        db.flip();","lastModifiedDate":"2024-02-15"},{"lineNumber":60,"author":{"gitId":"JerryWang0000"},"content":"        return db;","lastModifiedDate":"2024-02-15"},{"lineNumber":61,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":62,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":62}},{"path":"src/main/java/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package gui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"public class Launcher {","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":12}},{"path":"src/main/java/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package gui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    @Override","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"        try {","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2024-02-15"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"            stage.setTitle(\"JerryGPT\");","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"            stage.show();","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":33}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package gui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"/**","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":" */","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"    private void greeting() {","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"Welcome to JerryGPT! What can I do for you?\",","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"                dukeImage));","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"JerryWang0000"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-15"},{"lineNumber":33,"author":{"gitId":"JerryWang0000"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-15"},{"lineNumber":34,"author":{"gitId":"JerryWang0000"},"content":"        greeting();","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":36,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":37,"author":{"gitId":"JerryWang0000"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2024-02-15"},{"lineNumber":38,"author":{"gitId":"JerryWang0000"},"content":"        duke \u003d d;","lastModifiedDate":"2024-02-15"},{"lineNumber":39,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":40,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":41,"author":{"gitId":"JerryWang0000"},"content":"    /**","lastModifiedDate":"2024-02-15"},{"lineNumber":42,"author":{"gitId":"JerryWang0000"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-15"},{"lineNumber":43,"author":{"gitId":"JerryWang0000"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-15"},{"lineNumber":44,"author":{"gitId":"JerryWang0000"},"content":"     */","lastModifiedDate":"2024-02-15"},{"lineNumber":45,"author":{"gitId":"JerryWang0000"},"content":"    @FXML","lastModifiedDate":"2024-02-15"},{"lineNumber":46,"author":{"gitId":"JerryWang0000"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-15"},{"lineNumber":47,"author":{"gitId":"JerryWang0000"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-15"},{"lineNumber":48,"author":{"gitId":"JerryWang0000"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2024-02-15"},{"lineNumber":49,"author":{"gitId":"JerryWang0000"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-15"},{"lineNumber":50,"author":{"gitId":"JerryWang0000"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-15"},{"lineNumber":51,"author":{"gitId":"JerryWang0000"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2024-02-15"},{"lineNumber":52,"author":{"gitId":"JerryWang0000"},"content":"        );","lastModifiedDate":"2024-02-15"},{"lineNumber":53,"author":{"gitId":"JerryWang0000"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-15"},{"lineNumber":54,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":55,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":55}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight \u003d \"-Infinity\"\u003e","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"            \u003cfont\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"                \u003cFont name\u003d\"Times New Roman\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"            \u003c/font\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"gui.MainWindow\"\u003e","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #f5f5dc;\" /\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"JerryWang0000":19}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"public class EventTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"    public void matchdate_testCase_1() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"        LocalDate localDate \u003d LocalDate.of(2024, 1, 1);","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"        assertTrue(new Event(\"concert\", \"2023-12-31 19:00\", \"2024-01-01 1:00\")","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"                .canMatchDate(localDate));","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"    public void matchdate_testCase_2() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"        LocalDate localDate \u003d LocalDate.of(2019, 1, 1);","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"        assertFalse(new Event(\"concert\", \"2023-12-31 19:00\", \"2024-01-01 1:00\")","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"                .canMatchDate(localDate));","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    public void taskToLine_test() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"        assertEquals(\"E | X | concert | 2023-12-31 19:00:00 | 2024-01-01 01:00:00\",","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"                new Event(\"concert\", \"2023-12-31 19:00\", \"2024-01-01 1:00\")","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"                        .taskToLine());","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":30}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"import command.AddTaskCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"import command.ExitCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"import command.SearchDateCommand;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"JerryWang0000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"JerryWang0000"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"JerryWang0000"},"content":"    public void parse_AddTaskCommandCreated_successfully() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"JerryWang0000"},"content":"        assertEquals(new AddTaskCommand(\"todo return book\"),Parser.parse(\"todo return book\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"JerryWang0000"},"content":"    public void parse_ExitCommandCreated_successfully() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"JerryWang0000"},"content":"        assertEquals(new ExitCommand(),Parser.parse(\"bye\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"JerryWang0000"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"JerryWang0000"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"JerryWang0000"},"content":"    public void parse_SearchDateCommandCreated_successfully() throws DukeException {","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"JerryWang0000"},"content":"        assertEquals(new SearchDateCommand(\"2019-12-02\"),Parser.parse(\"view 2-12-2019\"));","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"JerryWang0000"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"JerryWang0000"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"JerryWang0000":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JerryWang0000"},"content":"todo borrow book","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"JerryWang0000"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"JerryWang0000"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"JerryWang0000"},"content":"list","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"JerryWang0000"},"content":"mark 2","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"JerryWang0000"},"content":"mark 1","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"JerryWang0000"},"content":"unmark 2","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"JerryWang0000"},"content":"list","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"JerryWang0000"},"content":"bye","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"JerryWang0000":9}}]
