[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"checkstyle {","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    toolVersion \u003d \"10.2\"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    ","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2024-02-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bachletuankhai":21,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.command.Command;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.command.CommandParser;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.configuration.Info;","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import duke.storage.StorageLoadException;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import duke.storage.StorageSaveException;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"import duke.ui.ErrorResponse;","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"import duke.ui.Response;","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"import duke.ui.UI;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":" * Represents the main class of the bot.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    private static final String DATA_FILE_PATH \u003d Info.DATA_FILE_PATH;","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    private TaskList list;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    private UI ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    private ProgramState state;","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    private CommandParser parser;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new chatbot instance. The chatbot will load data from the","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     * default data file. If the data file does not exist, a new data file will be","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * created.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     * @param ui The user interface controller of the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    public Duke(UI ui) {","lastModifiedDate":"2024-02-17"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        this.state \u003d new ProgramState();","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        this.storage \u003d new Storage(DATA_FILE_PATH);","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"            list \u003d storage.load();","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        } catch (StorageLoadException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"            ui.showBotError(e);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"            list \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"     * Runs a command and returns the response from the bot.","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"     * @param commandString The command to run.","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response from the bot.","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"    public Response runCommand(String commandString) {","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        Command command;","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"            command \u003d Command.parse(commandString, parser);","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"            String response \u003d command.execute(list, state);","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"            if (state.isExit()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"                ui.exit();","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"            return new Response(response);","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"            return new ErrorResponse(e.getBotMessage());","lastModifiedDate":"2024-02-17"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"     * Exits the bot. The data will be saved to the data file.","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"    public void exit() {","lastModifiedDate":"2024-02-17"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"bachletuankhai"},"content":"            storage.save(list);","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"bachletuankhai"},"content":"        } catch (StorageSaveException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"bachletuankhai"},"content":"            ui.showBotError(e);","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"bachletuankhai":74,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception thrown by the chatbot.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    private String botMessage;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new exception with the given message and bot message.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"     * @param message    The message of the exception.","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     * @param botMessage The message to be shown to the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    public DukeException(String message, String botMessage) {","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"        super(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"        this.botMessage \u003d botMessage;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public String getBotMessage() {","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        return botMessage;","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":23}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * A launcher class to launch the application.","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class Launcher {","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.ui.MainWindow;","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.ui.UI;","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":" * The main class to start the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    private UI ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"            // set up the stage","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-17"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"            stage.show();","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"            // set up the UI controller and start the bot","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"            MainWindow mw \u003d fxmlLoader.\u003cMainWindow\u003egetController();","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"            ui \u003d new UI(mw);","lastModifiedDate":"2024-02-17"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"            duke \u003d new Duke(ui);","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"            mw.setDuke(duke);","lastModifiedDate":"2024-02-17"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"            ui.showWelcomeMessage();","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"            Platform.exit();","lastModifiedDate":"2024-02-17"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"    public void stop() {","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        ui.showExitMessage();","lastModifiedDate":"2024-02-17"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        duke.exit();","lastModifiedDate":"2024-02-17"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":48}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command that can be executed by the chatbot.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public abstract class Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    private String body;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    protected Command(String body) {","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"        this.body \u003d body;","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    protected String getBody() {","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        return body;","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    public static Command parse(String input, CommandParser parser) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        return parser.parse(input);","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command.","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    public abstract String execute(TaskList list, ProgramState state) throws DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":34}},{"path":"src/main/java/duke/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command parser that can parse user input into a command.","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class CommandParser {","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"     * Parses the given input into a command.","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     * @param input The input to be parsed.","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * @return The parsed command.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the input is invalid.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    public Command parse(String input) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        String[] tokens \u003d input.split(\" \", 2);","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"        String name \u003d tokens[0];","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d tokens.length \u003e 1 ? tokens[1] : \"\";","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        switch (name) {","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        case \"list\":","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"            return new ListCommand();","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"            return new MarkCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"            return new UnmarkCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        case \"bye\":","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"            return new TodoCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"            return new DeadlineCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"        case \"event\":","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"            return new EventCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"            return new DeleteCommand(body);","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        case \"find\":","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"            return new FindCommand(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        default:","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"            throw new UnknownCommandException(\"Unknown command: \" + name + \" \" + body,","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"                    \"I\u0027m sorry, but I don\u0027t know what that means :\u003c\");","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":45}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to add a task with a deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    private String taskDescription;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    private String dueTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new deadline command.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     * @param body The body of the command.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    public DeadlineCommand(String body) {","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        String[] parts \u003d body.split(\"/by\", 2);","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        this.taskDescription \u003d parts[0].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        this.dueTime \u003d parts.length \u003e 1 ? parts[1].trim() : \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command adds a task with a deadline to the task","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * list. The program state is set to normal after the command is executed, even","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * if the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the user input is invalid, or if the command fails","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     *                       to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        if (taskDescription.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyTaskDescriptionException(\"The description of a deadline cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"                    \"The description of a deadline cannot be empty.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        } else if (dueTime.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyDateTimeException(\"The due time of a deadline cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"                    \"The due time of a deadline cannot be empty.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        Task task \u003d new Deadline(taskDescription, dueTime);","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        list.addTask(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Added: \" + task + \"\\nYou now have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":54}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to delete a task.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    private int index;","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new delete command.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @param body The body of the command.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the body is invalid.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public DeleteCommand(String body) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"            this.index \u003d Integer.parseInt(body);","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"            if (body \u003d\u003d null || body.equals(\"\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"                throw new EmptyTaskDescriptionException(\"The index of a task cannot be empty.\",","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"                        \"Sorry, but I don\u0027t understand what you mean by task number \\\"\" + body + \"\\\".\");","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(\"The index of a task must be an integer.\",","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but I don\u0027t understand what you mean by task number \\\"\" + body + \"\\\".\");","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command deletes a task from the task list. The","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * program state is set to normal after the command is executed, even if the","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the index provided falls outside the range of the","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     *                       task list, or if the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"                    \"The index of a task cannot be less than 1 or greater than the number of tasks.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but task number \" + index + \" does not exist. You only have \" + list.size() + \" tasks.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        Task task \u003d list.deleteTask(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Deleted: \" + task + \"\\nYou now have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":56}},{"path":"src/main/java/duke/command/EmptyDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the user does not provide a date and","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * time for a deadline or event.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class EmptyDateTimeException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public EmptyDateTimeException(String message, String botMessage) {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/command/EmptyKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the keyword of a command is empty.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class EmptyKeywordException extends DukeException {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public EmptyKeywordException(String message, String botMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":12}},{"path":"src/main/java/duke/command/EmptyTaskDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the user does not provide a date and","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * time for a deadline or event.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class EmptyTaskDescriptionException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public EmptyTaskDescriptionException(String message, String botMessage) {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Event;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to add a task with a starting time and an ending time.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    private String taskDescription;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    private String startTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    private String endTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new event command.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     * @param body The body of the command.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    public EventCommand(String body) {","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        String[] parts \u003d body.split(\"/from|/to\", 3);","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        this.taskDescription \u003d parts[0].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        this.startTime \u003d parts.length \u003e 1 ? parts[1].trim() : \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        this.endTime \u003d parts.length \u003e 2 ? parts[2].trim() : \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command adds a task with a starting time and an","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     * ending time to the task list. The program state is set to normal after the","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     * command is executed, even if the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the user input is invalid (empty task","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     *                       description/starting time/ending time), or if the","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"     *                       command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        if (taskDescription.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyTaskDescriptionException(\"The description of an event cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"                    \"The description of an event cannot be empty.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        } else if (startTime.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyDateTimeException(\"The start time of an event cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"                    \"The start time of an event cannot be empty.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        } else if (endTime.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyDateTimeException(\"The end time of an event cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"                    \"The end time of an event cannot be empty.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"        Task task \u003d new Event(taskDescription, startTime, endTime);","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        list.addTask(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Added: \" + task + \"\\nYou now have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":59}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.configuration.Info;","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to exit the program.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    public ExitCommand() {","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"        super(\"\");","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command sets the program state to exit.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d Info.EXIT_MESSAGE;","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        state.setExit();","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":27}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to find tasks by keyword.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    public FindCommand(String body) {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. The command finds all tasks that contain the keyword in","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * the list. The state is set to normal.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  the list of tasks","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     * @param state the program state","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     * @return the response","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     * @throws EmptyKeywordException if the keyword is empty","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws EmptyKeywordException {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d getBody();","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        if (body.equals(\"\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"            throw new EmptyKeywordException(\"Keyword cannot be empty.\",","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"                    \"I\u0027m sorry, but I cannot find anything if you don\u0027t tell me what to look for.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"            Task task \u003d list.get(i);","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"            if (task.contains(body)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"                response +\u003d i + 1 + \". \" + task + \"\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"                count++;","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"            response \u003d \"No matching tasks found.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":46}},{"path":"src/main/java/duke/command/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the index provided by the user is","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * invalid.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class InvalidTaskIndexException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public InvalidTaskIndexException(String message, String botMessage) {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to list all tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public ListCommand() {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(\"\");","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command sets the program state to normal.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"            return \"You have no tasks in the list.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        return list.toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":28}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    private int index;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new mark command.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * @param body The body of the command.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the body cannot be parsed as an integer.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    public MarkCommand(String body) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"            this.index \u003d Integer.parseInt(body);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(\"The index of a task must be an integer.\",","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but I don\u0027t know which task you want to mark as done.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command marks a task as done. The program state is","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * set to normal after the command is executed, even if the command fails to","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     * execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the index provided falls outside the range of the","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     *                       task list, or if the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"                    \"The index of a task cannot be less than 1 or greater than the number of tasks.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but task number \" + index + \" does not exist. You only have \" + list.size() + \" tasks.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        list.markTaskAsDone(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Done: \" + list.get(index - 1));","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":51}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to add a simple todo.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    public TodoCommand(String body) {","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command adds a todo to the task list and sets the","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     * program state to normal after the command is executed, even if the command","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     * fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the body of the command is empty, or if the command","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     *                       fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d getBody();","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        if (body.isEmpty()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, you need to tell me what you want to add. I can\u0027t add empty tasks.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"        Task task \u003d new Todo(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        list.addTask(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Added: \" + task + \"\\nYou now have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":40}},{"path":"src/main/java/duke/command/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the user enters an unparsable","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * command.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class UnknownCommandException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public UnknownCommandException(String message, String botMessage) {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents a command to mark a task as not done.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    private int index;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new command to mark a task as not done.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * @param body The body of the command.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the body cannot be parsed as an integer.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    public UnmarkCommand(String body) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        super(body);","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"            this.index \u003d Integer.parseInt(body);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(\"The index of a task must be an integer.\",","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but I don\u0027t know which task you want to mark as undone.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * Executes the command. This command marks a task as not done. The program","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * state is set to normal after the command is executed, even if the command","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     * fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"     * @param list  The task list to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     * @param state The program state to be modified.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * @return The response to be displayed to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeException If the index provided falls outside the range of the","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     *                       task list, or if the command fails to execute.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    public String execute(TaskList list, ProgramState state) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        if (index \u003c 1 || index \u003e list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidTaskIndexException(","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"                    \"The index of a task cannot be less than 1 or greater than the number of tasks.\",","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"                    \"Sorry, but task number \" + index + \" does not exist. You only have \" + list.size() + \" tasks.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        list.unmarkTaskAsDone(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d (\"Undone: \" + list.get(index - 1));","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        state.setNormal();","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":51}},{"path":"src/main/java/duke/configuration/Info.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.configuration;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Contains default information about the chatbot.","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public final class Info {","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    public static final String CHATBOT_NAME \u003d \"Sylvia\";","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"    public static final String DATA_FILE_PATH \u003d \"data/duke.txt\";","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m \" + CHATBOT_NAME + \". What do you want to do today?\";","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public static final String EXIT_MESSAGE \u003d \"Cya!!\";","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":11}},{"path":"src/main/java/duke/state/ProgramState.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.state;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents the state of the program. There are three possible states: normal,","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" * exit, and error.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"public class ProgramState {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"     * Represents the possible states of the program.","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    public static enum State {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"        NORMAL, EXIT, ERROR","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    private State state;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new program state. The initial state is normal.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public ProgramState() {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        this.state \u003d State.NORMAL;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    public void setState(State newState) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        state \u003d newState;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    public void setNormal() {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        state \u003d State.NORMAL;","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"    public boolean isNormal() {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        return state \u003d\u003d State.NORMAL;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    public void setExit() {","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        state \u003d State.EXIT;","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        return state \u003d\u003d State.EXIT;","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"bachletuankhai":43}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import java.io.File;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskListParser;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":" * Represents a storage for loading and saving the task list.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"public class Storage {","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    private String filePath;","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     * Loads the task list from the file.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     * @return The task list loaded from the file.","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     * @throws StorageLoadException If the task list fails to load.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    public TaskList load() throws StorageLoadException {","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"            if (!file.exists()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"                file.createNewFile();","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"            TaskList data \u003d TaskListParser.parse(file);","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"            return data;","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        } catch (DukeException | IOException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"            throw new StorageLoadException(\"Failed to load data from file: \" + filePath,","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"                    \"Cannot load data from file: \" + filePath + \"\\n\" + \"Sylvia will start with an empty task list.\");","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     * Saves the task list to the file.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"     * @param list The task list to be saved.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"     * @throws StorageSaveException If the task list fails to save.","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"    public void save(TaskList list) throws StorageSaveException {","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"            if (!file.exists()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"                file.createNewFile();","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"            FileWriter writer \u003d new FileWriter(file, false);","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"            writer.write(TaskListParser.serialize(list));","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"            writer.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"            throw new StorageSaveException(\"Failed to save data to file: \" + filePath,","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"                    \"Cannot save data to file: \" + filePath);","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":63}},{"path":"src/main/java/duke/storage/StorageLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the storage file cannot be loaded.","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class StorageLoadException extends DukeException {","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public StorageLoadException(String message, String botMessage) {","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":12}},{"path":"src/main/java/duke/storage/StorageSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception that occurs when the storage file cannot be saved.","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class StorageSaveException extends DukeException {","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public StorageSaveException(String message, String botMessage) {","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":12}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    private TaskDateTime dueTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new deadline with the given description and due time.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     * @param due         The due time of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the due time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    public Deadline(String description, String due) throws DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        super(description);","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"        this.dueTime \u003d new TaskDateTime(due);","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new deadline with the given description, due time and done status.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     * @param due         The due time of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"     * @param isDone      The done status of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the due time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"    public Deadline(String description, String due, boolean isDone) throws DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        this.dueTime \u003d new TaskDateTime(due);","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        return \"[D]\" + super.toString() + \" (due: \" + dueTime + \")\";","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the serialized string of this task. The serialized string will be","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     * stored in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string of the deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"    public String serialize() {","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        // assuming that the dueTime does not contain \"|\"","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        return \"D | \" + super.serialize() + \" | \" + dueTime.serialize();","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":52}},{"path":"src/main/java/duke/task/DukeDateTimeParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception thrown when the date and time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * format.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class DukeDateTimeParseException extends DukeException {","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public DukeDateTimeParseException(String message, String response) {","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, response);","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents a task with a starting time and an ending time.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    private TaskDateTime startTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"    private TaskDateTime endTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new event with the given description, starting time and ending","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"     * time.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * @param startTime   The starting time of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * @param endTime     The ending time of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the starting time or ending time is not","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     *                                    in the correct format.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public Event(String description, String startTime, String endTime) throws DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        super(description);","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        this.startTime \u003d new TaskDateTime(startTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        this.endTime \u003d new TaskDateTime(endTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"     * Creates a new event with the given description, starting time, ending time","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     * and done status.","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * @param startTime   The starting time of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     * @param endTime     The ending time of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"     * @param isDone      The done status of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the starting time or ending time is not","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"     *                                    in the correct format.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"    public Event(String description, String startTime, String endTime, boolean isDone)","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"            throws DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        this.startTime \u003d new TaskDateTime(startTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        this.endTime \u003d new TaskDateTime(endTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + startTime + \" - \" + endTime + \")\";","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the serialized string of this task. The serialized string will be","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"     * stored in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string of the event.","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"    public String serialize() {","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"        return \"E | \" + super.serialize() + \" | \" + startTime.serialize() + \" | \" + endTime.serialize();","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":59}},{"path":"src/main/java/duke/task/InvalidDataFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":" * Represents an exception thrown when the data file is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * format.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class InvalidDataFormatException extends DukeException {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public InvalidDataFormatException(String message, String botMessage) {","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        super(message, botMessage);","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"bachletuankhai":13}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents a task.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    private String description;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    private String escapedDescription;","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new task. By default, the task is not done.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"        this.escapedDescription \u003d escapeDescription(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new task with the given done status.","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"     * @param isDone      The done status of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"        this.escapedDescription \u003d escapeDescription(description);","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the escaped description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    protected static String escapeDescription(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        return description.replace(\"|\", \"\\\\|\");","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        String status \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"        return \"[\" + status + \"] \" + description;","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the serialized string of this task. The serialized string will be","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"     * stored in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"    public String serialize() {","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"        return (isDone ? \"1\" : \"0\") + \" | \" + escapedDescription;","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"    public boolean contains(String keyword) {","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"        return description.contains(keyword);","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":71}},{"path":"src/main/java/duke/task/TaskDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * Represents a date and time used by tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class TaskDateTime {","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    /** The format of the date and time used by the tasks. */","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    private static final String INPUT_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     * The format of the date and time used when displaying the tasks to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"EEE, MMM d yyyy HH:mm\");","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     * Parses the given string into a date and time.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     * @param dateTime The date and time string.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the date and time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    public TaskDateTime(String dateTime) throws DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            this.dateTime \u003d LocalDateTime.parse(dateTime, INPUT_FORMATTER);","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"            throw new DukeDateTimeParseException(\"Wrong date and time format: \" + dateTime,","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"                    \"Please enter the date and time in the format: \" + INPUT_FORMAT);","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        return OUTPUT_FORMATTER.format(dateTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the serialized string of this date and time. The serialized string","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     * will be stored in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string of the date and time.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    public String serialize() {","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        return INPUT_FORMATTER.format(dateTime);","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"bachletuankhai":50}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import java.util.List;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":" * Represents a list of tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"public class TaskList {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    public boolean addTask(Task task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"        return list.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        return list.remove(index - 1);","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"            sb.append(i + 1 + \". \" + list.get(i) + \"\\n\");","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        return sb.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    public void markTaskAsDone(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"        list.get(index - 1).markAsDone();","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"    public void unmarkTaskAsDone(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        list.get(index - 1).unmarkAsDone();","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    public Task get(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"        return list.get(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    public int size() {","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        return list.size();","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":48}},{"path":"src/main/java/duke/task/TaskListParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import java.io.File;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" * Represents a parser that parses a task list from a file.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"public class TaskListParser {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     * Parses a task list from a file.","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * @param file The file to parse from.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     * @return The parsed task list.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @throws IOException                If an I/O error occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     * @throws InvalidDataFormatException If the data file is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the date and time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    public static TaskList parse(File file) throws IOException, InvalidDataFormatException, DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        FileReader fr \u003d new FileReader(file);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        BufferedReader reader \u003d new BufferedReader(fr);","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        String line;","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            list.addTask(parseTask(line));","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"        fr.close();","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        reader.close();","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        return list;","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * Parses a task from a line in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"     * @param line The line to parse from.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"     * @return The parsed task.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"     * @throws InvalidDataFormatException If the line is not in the correct format.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"     * @throws DukeDateTimeParseException If the date and time is not in the correct","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     *                                    format.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    private static Task parseTask(String line) throws InvalidDataFormatException, DukeDateTimeParseException {","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        String[] words \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"        if (words.length \u003c 3) {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidDataFormatException(\"Invalid task format: \" + line, \"Invalid task format: \" + line);","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        boolean isDone \u003d words[1].equals(\"1\");","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        switch (words[0]) {","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        case \"T\":","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"            return new Todo(words[2], isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        case \"D\":","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"            if (words.length \u003c 4) {","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"                throw new InvalidDataFormatException(\"Invalid task format: \" + line, \"Invalid task format: \" + line);","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"            return new Deadline(words[2], words[3], isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"        case \"E\":","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"            if (words.length \u003c 5) {","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"                throw new InvalidDataFormatException(\"Invalid task format: \" + line, \"Invalid task format: \" + line);","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"            return new Event(words[2], words[3], words[4], isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"        default:","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"            throw new InvalidDataFormatException(\"Unknown task type: \" + words[0], \"Unknown task type: \" + words[0]);","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"     * Serializes a task list into a string. The serialized string will be stored in","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"     * the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"bachletuankhai"},"content":"     * @param list The task list to serialize.","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string.","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"bachletuankhai"},"content":"    public static String serialize(TaskList list) {","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"bachletuankhai"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"bachletuankhai"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"bachletuankhai"},"content":"            sb.append(serializeTask(list.get(i)) + \"\\n\");","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"bachletuankhai"},"content":"        return sb.toString();","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"bachletuankhai"},"content":"    private static String serializeTask(Task task) {","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"bachletuankhai"},"content":"        return task.serialize();","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"bachletuankhai":87}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents a todo task.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"        super(description);","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"     * Returns the serialized string of this task. The serialized string will be","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"     * stored in the data file.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"     * @return The serialized string of the todo.","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    public String serialize() {","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        return \"T | \" + super.serialize();","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":30}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":" * face and a label containing text from the speaker.","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-17"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        try {","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-17"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-17"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-17"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"     * Returns a dialog box representing the user\u0027s input.","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     * @param text The user\u0027s input.","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"     * @param img  The user\u0027s image.","lastModifiedDate":"2024-02-17"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"     * @return The dialog box representing the user\u0027s input.","lastModifiedDate":"2024-02-17"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-17"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-17"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"     * right.","lastModifiedDate":"2024-02-17"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"    private void flip() {","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-17"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-17"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"     * Returns a dialog box representing the bot\u0027s response.","lastModifiedDate":"2024-02-17"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-17"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"     * @param text The bot\u0027s response.","lastModifiedDate":"2024-02-17"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"     * @param img  The bot\u0027s image.","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"     * @return The dialog box representing the bot\u0027s response.","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-17"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-17"},{"lineNumber":72,"author":{"gitId":"bachletuankhai"},"content":"        db.flip();","lastModifiedDate":"2024-02-17"},{"lineNumber":73,"author":{"gitId":"bachletuankhai"},"content":"        return db;","lastModifiedDate":"2024-02-17"},{"lineNumber":74,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":75,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":75}},{"path":"src/main/java/duke/ui/ErrorResponse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents the response from the bot when an error occurs.","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class ErrorResponse extends Response {","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    public ErrorResponse(String response) {","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"        super(response);","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":10}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":" * Represents the main window of the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-17"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/image/userimg.jpg\"));","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/image/sylviaimg.jpg\"));","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     * Initializes the main window.","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-17"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        duke \u003d d;","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    private String getUserInput() {","lastModifiedDate":"2024-02-17"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(userInput.getText(), userImage));","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        return userInput.getText();","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"    @FXML","lastModifiedDate":"2024-02-17"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-17"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        String input \u003d getUserInput();","lastModifiedDate":"2024-02-17"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        Response response \u003d duke.runCommand(input);","lastModifiedDate":"2024-02-17"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        showResponse(response);","lastModifiedDate":"2024-02-17"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-17"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"     * Shows the response from the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"     * @param response The response from the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"    public void showResponse(Response response) {","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response.toString(), dukeImage));","lastModifiedDate":"2024-02-17"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":62}},{"path":"src/main/java/duke/ui/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.ui;","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":" * Represents the response from the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"public class Response {","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"    private String response;","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new response.","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"     * @param response The response from the bot.","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    public Response(String response) {","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"        this.response \u003d response;","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"    @Override","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    public String toString() {","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        return response;","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":22}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import duke.configuration.Info;","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":" * Represents the user interface of the bot.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class UI {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    /** The main window to take input and show output */","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"     * Constructs a new user interface.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"     * @param name The name of the bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    public UI(MainWindow mainWindow) {","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        this.mainWindow \u003d mainWindow;","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"    public void exit() {","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        Platform.exit();","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"     * Shows an error message from the bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"     * @param e The exception that caused the error.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"    public void showBotError(DukeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        showResponse(new ErrorResponse(e.getBotMessage()));","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"     * Shows the welcome message from the bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        showResponse(new Response(Info.WELCOME_MESSAGE));","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"     * Shows the response from the bot. If the response is null, nothing will be","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"     * shown.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"     * @param response The response from the bot.","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"    public void showResponse(Response response) {","lastModifiedDate":"2024-02-17"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        if (response \u003d\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"            return;","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"        mainWindow.showResponse(response);","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"    public void showExitMessage() {","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"        showResponse(new Response(Info.EXIT_MESSAGE));","lastModifiedDate":"2024-02-17"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"bachletuankhai":59}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"  \u003c/children\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"  \u003cpadding\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"  \u003c/padding\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"  \u003cchildren\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"      \u003ccontent\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"      \u003c/content\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"  \u003c/children\u003e","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"bachletuankhai":19}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_validIndex_returnsCorrectResponse() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"        ProgramState programState \u003d new ProgramState();","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        Task task \u003d new Todo(\"Sample Task\");","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        taskList.addTask(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(Integer.toString(index));","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d deleteCommand.execute(taskList, programState);","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"Deleted: \" + task + \"\\nYou now have 0 tasks in the list.\", response);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        assertTrue(() -\u003e programState.isNormal());","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_invalidIndex_throwsInvalidTaskIndexException() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        ProgramState programState \u003d new ProgramState();","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"        int index \u003d 5;","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(Integer.toString(index));","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(InvalidTaskIndexException.class, () -\u003e deleteCommand.execute(taskList, programState));","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        assertTrue(() -\u003e programState.isNormal());","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_emptyIndex_throwsEmptyTaskDescriptionException() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        String index \u003d \"\";","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(EmptyTaskDescriptionException.class, () -\u003e new DeleteCommand(index));","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_nonIntegerIndex_throwsInvalidTaskIndexException() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"        String index \u003d \"abc\";","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(InvalidTaskIndexException.class, () -\u003e new DeleteCommand(index));","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":64}},{"path":"src/test/java/duke/command/EventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"public class EventCommandTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"    private EventCommand eventCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    private ProgramState programState;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    @BeforeEach","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public void setUp() {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        eventCommand \u003d new EventCommand(\"\");","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        programState \u003d new ProgramState();","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_validEventCommand_addsEventToTaskList() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d \"Event description /from 2022-01-01 10:00 /to 2022-01-01 12:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        eventCommand \u003d new EventCommand(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d eventCommand.execute(taskList, programState);","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"        assertTrue(response.contains(\"Added:\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        assertTrue(response.contains(\"Event description\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        assertTrue(programState.isNormal());","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_emptyTaskDescription_throwsEmptyTaskDescriptionException() {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d \"/from 2022-01-01 10:00 /to 2022-01-01 12:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"        eventCommand \u003d new EventCommand(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(EmptyTaskDescriptionException.class, () -\u003e eventCommand.execute(taskList, programState));","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_emptyStartTime_throwsEmptyDateTimeException() {","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d \"Event description /to 2022-01-01 12:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"        eventCommand \u003d new EventCommand(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(EmptyDateTimeException.class, () -\u003e eventCommand.execute(taskList, programState));","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_emptyEndTime_throwsEmptyDateTimeException() {","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"        String body \u003d \"Event description /from 2022-01-01 10:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"        eventCommand \u003d new EventCommand(body);","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(EmptyDateTimeException.class, () -\u003e eventCommand.execute(taskList, programState));","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":71}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import duke.state.ProgramState;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"public class ExitCommandTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"    public void execute_exitCommand_setsProgramStateToExit() {","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"        ExitCommand exitCommand \u003d new ExitCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"        ProgramState programState \u003d new ProgramState();","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"        String response \u003d exitCommand.execute(taskList, programState);","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"Cya!!\", response);","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(true, programState.isExit());","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":25}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    public void toString_validTimeFormat_success() throws DukeDateTimeParseException {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"        // normal time, not done","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"[D][ ] return book (due: Thu, Feb 1 2024 12:30)\",","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"                new Deadline(\"return book\", \"2024-02-01 12:30\").toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"        // normal time, done","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"[D][X] return book (due: Thu, Feb 1 2024 12:30)\",","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"                new Deadline(\"return book\", \"2024-02-01 12:30\", true).toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"    public void serialize_validTimeFormat_success() throws DukeDateTimeParseException {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        // normal time, not done","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"D | 0 | return book | 2024-02-01 12:30\",","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"                new Deadline(\"return book\", \"2024-02-01 12:30\").serialize());","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        // normal time, done","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"D | 1 | return book | 2024-02-01 12:30\",","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"                new Deadline(\"return book\", \"2024-02-01 12:30\", true).serialize());","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":29}},{"path":"src/test/java/duke/task/TaskDateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"public class TaskDateTimeTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"    public void parse_validDateTime_returnsTaskDateTime() throws DukeDateTimeParseException {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"        String dateTimeString \u003d \"2020-08-25 18:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"        TaskDateTime dateTime \u003d new TaskDateTime(dateTimeString);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"Tue, Aug 25 2020 18:00\", dateTime.toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"    public void parse_invalidDateTime_throwsDukeDateTimeParseException() {","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        String dateTimeString \u003d \"2020-08-25 18:00:00\";","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(DukeDateTimeParseException.class, () -\u003e new TaskDateTime(dateTimeString));","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"    public void serialize_validTaskDateTime_returnsSerializedString() throws DukeDateTimeParseException {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        TaskDateTime dateTime \u003d new TaskDateTime(\"2020-08-25 18:00\");","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        String serializedString \u003d dateTime.serialize();","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"2020-08-25 18:00\", serializedString);","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":41}},{"path":"src/test/java/duke/task/TaskListParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"import java.io.File;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"bachletuankhai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"bachletuankhai"},"content":"public class TaskListParserTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"bachletuankhai"},"content":"    public void parse_validFile_returnsTaskList()","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"bachletuankhai"},"content":"            throws IOException, InvalidDataFormatException, DukeDateTimeParseException {","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"bachletuankhai"},"content":"        File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"bachletuankhai"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"bachletuankhai"},"content":"            file.createNewFile();","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"bachletuankhai"},"content":"        // Add some tasks to the file","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"bachletuankhai"},"content":"        FileWriter writer \u003d new FileWriter(file, false);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"T | 0 | read book\\n\");","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"D | 0 | return book | 2024-02-01 18:00\\n\");","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"E | 0 | project meeting | 2024-02-01 14:00 | 2024-02-01 16:00\\n\");","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"        writer.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"bachletuankhai"},"content":"        TaskList taskList \u003d TaskListParser.parse(file);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(3, taskList.size());","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"[T][ ] read book\", taskList.get(0).toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"[D][ ] return book (due: Thu, Feb 1 2024 18:00)\", taskList.get(1).toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"[E][ ] project meeting (at: Thu, Feb 1 2024 14:00 - Thu, Feb 1 2024 16:00)\",","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"bachletuankhai"},"content":"                taskList.get(2).toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    public void parse_invalidFile_throwsInvalidDataFormatException() throws IOException {","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"bachletuankhai"},"content":"        File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"bachletuankhai"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"            file.createNewFile();","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"bachletuankhai"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"bachletuankhai"},"content":"        // Add some tasks to the file","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"        FileWriter writer \u003d new FileWriter(file, false);","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"E | 0 | project meeting | 2020-08-26 14:00 | 2020-08-26 16:00\\n\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"E | 0 | project meeting | 2020-08-26 14:00\\n\"); // Missing end time","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"D | 0 | return book \\n\"); // Missing due time","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"bachletuankhai"},"content":"        writer.write(\"T \\n\"); // Random invalid line","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"bachletuankhai"},"content":"        writer.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"bachletuankhai"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"bachletuankhai"},"content":"        assertThrows(InvalidDataFormatException.class, () -\u003e TaskListParser.parse(file));","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"bachletuankhai"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"bachletuankhai"},"content":"    public void serialize_validTaskList_returnsSerializedString() throws DukeDateTimeParseException {","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"bachletuankhai"},"content":"        // Arrange","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"bachletuankhai"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"bachletuankhai"},"content":"        // Add tasks to the task list","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"bachletuankhai"},"content":"        taskList.addTask(new Todo(\"read book\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"bachletuankhai"},"content":"        taskList.addTask(new Deadline(\"return book\", \"2020-08-25 18:00\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"bachletuankhai"},"content":"        taskList.addTask(new Event(\"project meeting\", \"2020-08-26 14:00\", \"2020-08-26 16:00\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"bachletuankhai"},"content":"        // Act","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"bachletuankhai"},"content":"        String serializedString \u003d TaskListParser.serialize(taskList);","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"bachletuankhai"},"content":"        // Assert","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"bachletuankhai"},"content":"        assertEquals(\"T | 0 | read book\\n\" + \"D | 0 | return book | 2020-08-25 18:00\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"bachletuankhai"},"content":"                + \"E | 0 | project meeting | 2020-08-26 14:00 | 2020-08-26 16:00\\n\", serializedString);","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"bachletuankhai"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"bachletuankhai"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"bachletuankhai":76}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bachletuankhai"},"content":"todo sleep","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"deadline cs2103 /by 2023-09-01 23:59","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"event cs2101 meeting /from 2024-09-12 14:00 /to 2024-09-12 15:00","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"bachletuankhai"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"bachletuankhai"},"content":"hi","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"bachletuankhai"},"content":"bruh","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"bachletuankhai"},"content":"delete 1","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"bachletuankhai"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"bachletuankhai"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"bachletuankhai":9}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"bachletuankhai"},"content":"# Change the current directory to the directory of this script","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"bachletuankhai"},"content":"pushd \"$(dirname \"$0\")\" \u003e/dev/null","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bachletuankhai"},"content":"if ! F:/Misc/jdk-11.0.17/bin/javac.exe -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"bachletuankhai"},"content":"F:/Misc/jdk-11.0.17/bin/java.exe -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"bachletuankhai"},"content":"# copy generated data and delete the generated data folder","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"bachletuankhai"},"content":"mv ./data/duke.txt ./OUT-DATA.txt","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"bachletuankhai"},"content":"rm -r ./data","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"bachletuankhai"},"content":"    # Change back to the original directory","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"bachletuankhai"},"content":"    popd \u003e /dev/null","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"bachletuankhai"},"content":"    # Change back to the original directory","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"bachletuankhai"},"content":"    popd \u003e /dev/null","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"bachletuankhai"},"content":"","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"bachletuankhai":12,"-":37}}]
