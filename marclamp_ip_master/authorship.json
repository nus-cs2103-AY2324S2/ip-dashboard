[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"# Chaterpillar project template","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"3. After that, locate the `src/main/java/Chaterpillar.java` file, right-click it, and choose `Run Chaterpillar.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marclamp":2,"-":22}},{"path":"data/history.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"T|true|read book","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":"D|false|return book |June 6th","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":"E|false|project meeting |Aug 6th 2pm |4pm","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":"T|true|join sports club","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"marclamp":4}},{"path":"src/main/java/Chaterpillar.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"marclamp"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"marclamp"},"content":" * Main class for Chaterpillar chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"marclamp"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"public class Chaterpillar {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"marclamp"},"content":"    public static boolean hasExited \u003d false;","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"marclamp"},"content":"    public static final String CHATBOT_PATH_NAME \u003d \"./data\";","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"marclamp"},"content":"    public static final String CHATBOT_FILE_NAME \u003d \"history.txt\";","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"marclamp"},"content":"     * Prints the greeting message by the Chaterpillar chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"marclamp"},"content":"     * It also prints the horizontal lines as dividers before and after the message.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"marclamp"},"content":"    public static void greet() {","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"marclamp"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"marclamp"},"content":"        System.out.println(\"Hello! I\u0027m Chaterpillar\");","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"marclamp"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"marclamp"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"marclamp"},"content":"     * Exits the program.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"marclamp"},"content":"     * It sets the exited flag to true, and prints the exit message.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"marclamp"},"content":"    public static void exit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"marclamp"},"content":"        hasExited \u003d true;","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"marclamp"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"marclamp"},"content":"     * Prints out the message given in the String argument.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"marclamp"},"content":"     * @param s the message to be printed","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"marclamp"},"content":"    public static void echo(String s) {","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"marclamp"},"content":"        System.out.println(s);","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"marclamp"},"content":"     * Prints out a horizontal line, typically used to segment","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"marclamp"},"content":"     * the start and end of a message by the chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"marclamp"},"content":"    public static void printHorizontalLine() {","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"marclamp"},"content":"        String line \u003d \"-\".repeat(50);","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"marclamp"},"content":"        System.out.println(line);","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"marclamp"},"content":"     * Parses the input from the user, then calls the respective","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"marclamp"},"content":"     * methods to deal with the various actions of the chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"marclamp"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"marclamp"},"content":"     * @param reader used to read from System.in","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"marclamp"},"content":"     * @return","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"marclamp"},"content":"     * @throws IOException if there are any input/output errors","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"marclamp"},"content":"     * @see IOException","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"marclamp"},"content":"    public static Task parseInput(BufferedReader reader) throws IOException {","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"marclamp"},"content":"        String input \u003d reader.readLine();","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"marclamp"},"content":"        String[] inputSplit \u003d input.split(\" \");","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"marclamp"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":67,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"marclamp"},"content":"        int num;","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"marclamp"},"content":"        Task currTask \u003d null;","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"marclamp"},"content":"        String name;","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"marclamp"},"content":"        String[] temp;","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"marclamp"},"content":"        switch(inputSplit[0]) {","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"marclamp"},"content":"        case \"list\":","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"marclamp"},"content":"            // ToDo: Fix Null Pointer Exception","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"marclamp"},"content":"            echo(\"Here are the tasks in your list: \");","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"marclamp"},"content":"            int i \u003d 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"marclamp"},"content":"            for (Task eachTask : tasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"marclamp"},"content":"                echo(i++ + \". \" + eachTask);","lastModifiedDate":"2024-01-30"},{"lineNumber":79,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"marclamp"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"marclamp"},"content":"            echo(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"marclamp"},"content":"            num \u003d Integer.parseInt(inputSplit[1]);","lastModifiedDate":"2024-01-30"},{"lineNumber":84,"author":{"gitId":"marclamp"},"content":"            currTask \u003d tasks.get(num-1);","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"marclamp"},"content":"            currTask.mark();","lastModifiedDate":"2024-01-30"},{"lineNumber":86,"author":{"gitId":"marclamp"},"content":"            echo(currTask.toString());","lastModifiedDate":"2024-01-30"},{"lineNumber":87,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":88,"author":{"gitId":"marclamp"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-26"},{"lineNumber":89,"author":{"gitId":"marclamp"},"content":"            echo(\"Ok, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"marclamp"},"content":"            num \u003d Integer.parseInt(inputSplit[1]);","lastModifiedDate":"2024-01-30"},{"lineNumber":91,"author":{"gitId":"marclamp"},"content":"            currTask \u003d tasks.get(num-1);","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"marclamp"},"content":"            currTask.unmark();","lastModifiedDate":"2024-01-30"},{"lineNumber":93,"author":{"gitId":"marclamp"},"content":"            echo(currTask.toString());","lastModifiedDate":"2024-01-30"},{"lineNumber":94,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"marclamp"},"content":"        case \"bye\":","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"marclamp"},"content":"            // exits the program","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"marclamp"},"content":"            exit();","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"marclamp"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"marclamp"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"marclamp"},"content":"                name \u003d input.substring(5);","lastModifiedDate":"2024-01-26"},{"lineNumber":102,"author":{"gitId":"marclamp"},"content":"                currTask \u003d new TodoTask(name);","lastModifiedDate":"2024-01-30"},{"lineNumber":103,"author":{"gitId":"marclamp"},"content":"                addTask(currTask);","lastModifiedDate":"2024-01-30"},{"lineNumber":104,"author":{"gitId":"marclamp"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":105,"author":{"gitId":"marclamp"},"content":"                echo(\"Sorry, the name of the task todo cannot be empty.\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":106,"author":{"gitId":"marclamp"},"content":"                        \"The way to use the command is as such: todo taskname\");","lastModifiedDate":"2024-01-26"},{"lineNumber":107,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":108,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":109,"author":{"gitId":"marclamp"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"marclamp"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":111,"author":{"gitId":"marclamp"},"content":"                temp \u003d input.split(\"/\");","lastModifiedDate":"2024-01-26"},{"lineNumber":112,"author":{"gitId":"marclamp"},"content":"                name \u003d temp[0].substring(9);","lastModifiedDate":"2024-01-26"},{"lineNumber":113,"author":{"gitId":"marclamp"},"content":"                String date \u003d temp[1].substring(3);","lastModifiedDate":"2024-01-26"},{"lineNumber":114,"author":{"gitId":"marclamp"},"content":"                currTask \u003d new DeadlineTask(name, date);","lastModifiedDate":"2024-01-30"},{"lineNumber":115,"author":{"gitId":"marclamp"},"content":"                addTask(currTask);","lastModifiedDate":"2024-01-30"},{"lineNumber":116,"author":{"gitId":"marclamp"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":117,"author":{"gitId":"marclamp"},"content":"                echo(\"Sorry, this command is in the wrong format.\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"marclamp"},"content":"                        \"The way to use the command is: deadline taskname /by date_and_time\");","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":120,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":121,"author":{"gitId":"marclamp"},"content":"        case \"event\":","lastModifiedDate":"2024-01-26"},{"lineNumber":122,"author":{"gitId":"marclamp"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":123,"author":{"gitId":"marclamp"},"content":"                temp \u003d input.split(\"/\");","lastModifiedDate":"2024-01-26"},{"lineNumber":124,"author":{"gitId":"marclamp"},"content":"                name \u003d temp[0].substring(6);","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"marclamp"},"content":"                String date1 \u003d temp[1].substring(5);","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"marclamp"},"content":"                String date2 \u003d temp[2].substring(3);","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"marclamp"},"content":"                currTask \u003d new EventTask(name, date1, date2);","lastModifiedDate":"2024-01-30"},{"lineNumber":128,"author":{"gitId":"marclamp"},"content":"                addTask(currTask);","lastModifiedDate":"2024-01-30"},{"lineNumber":129,"author":{"gitId":"marclamp"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":130,"author":{"gitId":"marclamp"},"content":"                echo(\"Sorry, this command is in the wrong format.\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":131,"author":{"gitId":"marclamp"},"content":"                        \"The way to use the command is: event taskname /from date_and_time /to date_and_time\");","lastModifiedDate":"2024-01-26"},{"lineNumber":132,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":133,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":134,"author":{"gitId":"marclamp"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-26"},{"lineNumber":135,"author":{"gitId":"marclamp"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":136,"author":{"gitId":"marclamp"},"content":"                temp \u003d input.split(\" \");","lastModifiedDate":"2024-01-26"},{"lineNumber":137,"author":{"gitId":"marclamp"},"content":"                int index \u003d Integer.parseInt(temp[1])-1;","lastModifiedDate":"2024-01-26"},{"lineNumber":138,"author":{"gitId":"marclamp"},"content":"                deleteTask(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":139,"author":{"gitId":"marclamp"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":140,"author":{"gitId":"marclamp"},"content":"                echo(\"Sorry, there is no number detected.\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":141,"author":{"gitId":"marclamp"},"content":"                        \"The correct way to use the command is: delete number\");","lastModifiedDate":"2024-01-26"},{"lineNumber":142,"author":{"gitId":"marclamp"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":143,"author":{"gitId":"marclamp"},"content":"                echo(\"Sorry, the format for this command is wrong.\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":144,"author":{"gitId":"marclamp"},"content":"                        \"The correct way to use the command is: delete number\");","lastModifiedDate":"2024-01-26"},{"lineNumber":145,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":146,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":147,"author":{"gitId":"marclamp"},"content":"        case \"help\":","lastModifiedDate":"2024-01-26"},{"lineNumber":148,"author":{"gitId":"marclamp"},"content":"            String helpMessage \u003d \"Hi! Here are the list of commands I recognise: \\n\\n\" +","lastModifiedDate":"2024-01-30"},{"lineNumber":149,"author":{"gitId":"marclamp"},"content":"                    \"\u0027list\u0027 - lists the tasks registered in the list\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":150,"author":{"gitId":"marclamp"},"content":"                    \"\u0027todo\u0027 - adds an item that has no due date\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":151,"author":{"gitId":"marclamp"},"content":"                    \"\u0027deadline\u0027 - adds an item with a due date\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":152,"author":{"gitId":"marclamp"},"content":"                    \"\u0027event\u0027 - adds an item that has a duration\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":153,"author":{"gitId":"marclamp"},"content":"                    \"\u0027mark\u0027 - marks the task as completed\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":154,"author":{"gitId":"marclamp"},"content":"                    \"\u0027unmark\u0027 - marks the task as not completed\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":155,"author":{"gitId":"marclamp"},"content":"                    \"\u0027help\u0027 - opens the list of commands available\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":156,"author":{"gitId":"marclamp"},"content":"                    \"\u0027bye\u0027 - exits the chatbot\";","lastModifiedDate":"2024-01-26"},{"lineNumber":157,"author":{"gitId":"marclamp"},"content":"            echo(helpMessage);","lastModifiedDate":"2024-01-30"},{"lineNumber":158,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":159,"author":{"gitId":"marclamp"},"content":"        default:","lastModifiedDate":"2024-01-26"},{"lineNumber":160,"author":{"gitId":"marclamp"},"content":"            String unrecognised \u003d \"Oops, I have no idea what that means. \" +","lastModifiedDate":"2024-01-26"},{"lineNumber":161,"author":{"gitId":"marclamp"},"content":"                    \"Use \u0027help\u0027 for a list of commands I recognise.\";","lastModifiedDate":"2024-01-26"},{"lineNumber":162,"author":{"gitId":"marclamp"},"content":"            echo(unrecognised);","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"marclamp"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":164,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":165,"author":{"gitId":"marclamp"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":166,"author":{"gitId":"marclamp"},"content":"        return currTask;","lastModifiedDate":"2024-02-02"},{"lineNumber":167,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":168,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":169,"author":{"gitId":"marclamp"},"content":"     * Adds the specified task (in the argument) to the","lastModifiedDate":"2024-02-02"},{"lineNumber":170,"author":{"gitId":"marclamp"},"content":"     * static ArrayList to be tracked by the chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":171,"author":{"gitId":"marclamp"},"content":"     * @param task object containing the specified task","lastModifiedDate":"2024-02-02"},{"lineNumber":172,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":173,"author":{"gitId":"marclamp"},"content":"    public static void addTask(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":174,"author":{"gitId":"marclamp"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":175,"author":{"gitId":"marclamp"},"content":"        echo(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-01-26"},{"lineNumber":176,"author":{"gitId":"marclamp"},"content":"        echo(task.toString());","lastModifiedDate":"2024-01-26"},{"lineNumber":177,"author":{"gitId":"marclamp"},"content":"        echo(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":178,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":179,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":180,"author":{"gitId":"marclamp"},"content":"     * Deletes the task at the specified index,","lastModifiedDate":"2024-02-02"},{"lineNumber":181,"author":{"gitId":"marclamp"},"content":"     * then shifts all the tasks in the index behind it up by 1.","lastModifiedDate":"2024-02-02"},{"lineNumber":182,"author":{"gitId":"marclamp"},"content":"     * @param index integer specifying the number of the task to be deleted","lastModifiedDate":"2024-02-02"},{"lineNumber":183,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":184,"author":{"gitId":"marclamp"},"content":"    public static void deleteTask(int index) {","lastModifiedDate":"2024-02-06"},{"lineNumber":185,"author":{"gitId":"marclamp"},"content":"        Task task \u003d tasks.remove(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":186,"author":{"gitId":"marclamp"},"content":"        echo(\"Got it. I\u0027ve removed this task:\");","lastModifiedDate":"2024-01-26"},{"lineNumber":187,"author":{"gitId":"marclamp"},"content":"        echo(task.toString());","lastModifiedDate":"2024-01-26"},{"lineNumber":188,"author":{"gitId":"marclamp"},"content":"        echo(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":189,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":190,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":191,"author":{"gitId":"marclamp"},"content":"     * Gets the path of the file that stores the list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":192,"author":{"gitId":"marclamp"},"content":"     * Creates the directory if it is not found.","lastModifiedDate":"2024-02-02"},{"lineNumber":193,"author":{"gitId":"marclamp"},"content":"     * Creates the file if it does not exist.","lastModifiedDate":"2024-02-02"},{"lineNumber":194,"author":{"gitId":"marclamp"},"content":"     * @return \u003ccode\u003ePath\u003c/code\u003e of the file","lastModifiedDate":"2024-02-02"},{"lineNumber":195,"author":{"gitId":"marclamp"},"content":"     * @throws IOException if there are any input/output errors","lastModifiedDate":"2024-02-02"},{"lineNumber":196,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":197,"author":{"gitId":"marclamp"},"content":"    public static Path getHistoryFilePath() throws IOException {","lastModifiedDate":"2024-02-02"},{"lineNumber":198,"author":{"gitId":"marclamp"},"content":"        Path chatbotDataFilePath \u003d Paths.get(CHATBOT_PATH_NAME);","lastModifiedDate":"2024-02-02"},{"lineNumber":199,"author":{"gitId":"marclamp"},"content":"        if (!Files.exists(chatbotDataFilePath)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":200,"author":{"gitId":"marclamp"},"content":"            Files.createDirectory(chatbotDataFilePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":201,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":202,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":203,"author":{"gitId":"marclamp"},"content":"        Path chatbotFilePath \u003d chatbotDataFilePath.resolve(CHATBOT_FILE_NAME);","lastModifiedDate":"2024-02-02"},{"lineNumber":204,"author":{"gitId":"marclamp"},"content":"        if (!Files.exists(chatbotFilePath)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":205,"author":{"gitId":"marclamp"},"content":"            Files.createFile(chatbotFilePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":206,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":207,"author":{"gitId":"marclamp"},"content":"        return chatbotFilePath;","lastModifiedDate":"2024-02-02"},{"lineNumber":208,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":209,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":210,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":211,"author":{"gitId":"marclamp"},"content":"     * Loads the contents of the file and inputs it into the listOfTasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":212,"author":{"gitId":"marclamp"},"content":"     * @return An \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e objects.","lastModifiedDate":"2024-02-02"},{"lineNumber":213,"author":{"gitId":"marclamp"},"content":"     * @throws IOException if there are any input/output errors.","lastModifiedDate":"2024-02-02"},{"lineNumber":214,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":215,"author":{"gitId":"marclamp"},"content":"    public static ArrayList\u003cTask\u003e loadFromFile() throws IOException {","lastModifiedDate":"2024-02-02"},{"lineNumber":216,"author":{"gitId":"marclamp"},"content":"        Path path \u003d getHistoryFilePath();","lastModifiedDate":"2024-02-02"},{"lineNumber":217,"author":{"gitId":"marclamp"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":218,"author":{"gitId":"marclamp"},"content":"        try (BufferedReader reader \u003d Files.newBufferedReader(path)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":219,"author":{"gitId":"marclamp"},"content":"            String str;","lastModifiedDate":"2024-02-02"},{"lineNumber":220,"author":{"gitId":"marclamp"},"content":"            while ((str \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-02"},{"lineNumber":221,"author":{"gitId":"marclamp"},"content":"                try {","lastModifiedDate":"2024-02-02"},{"lineNumber":222,"author":{"gitId":"marclamp"},"content":"                    String[] eachLine \u003d str.split(\"\\\\|\");","lastModifiedDate":"2024-02-02"},{"lineNumber":223,"author":{"gitId":"marclamp"},"content":"                    String taskType \u003d eachLine[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":224,"author":{"gitId":"marclamp"},"content":"                    boolean isMarked \u003d Boolean.parseBoolean(eachLine[1]);","lastModifiedDate":"2024-02-02"},{"lineNumber":225,"author":{"gitId":"marclamp"},"content":"                    String taskName \u003d eachLine[2];","lastModifiedDate":"2024-02-02"},{"lineNumber":226,"author":{"gitId":"marclamp"},"content":"                    switch (taskType) {","lastModifiedDate":"2024-02-02"},{"lineNumber":227,"author":{"gitId":"marclamp"},"content":"                    case \"T\": {","lastModifiedDate":"2024-02-02"},{"lineNumber":228,"author":{"gitId":"marclamp"},"content":"                        Task task \u003d new TodoTask(taskName, isMarked);","lastModifiedDate":"2024-02-02"},{"lineNumber":229,"author":{"gitId":"marclamp"},"content":"                        newList.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":230,"author":{"gitId":"marclamp"},"content":"                        break;","lastModifiedDate":"2024-02-02"},{"lineNumber":231,"author":{"gitId":"marclamp"},"content":"                    }","lastModifiedDate":"2024-02-02"},{"lineNumber":232,"author":{"gitId":"marclamp"},"content":"                    case \"D\": {","lastModifiedDate":"2024-02-02"},{"lineNumber":233,"author":{"gitId":"marclamp"},"content":"                        String dueDate \u003d eachLine[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":234,"author":{"gitId":"marclamp"},"content":"                        Task task \u003d new DeadlineTask(taskName, isMarked, dueDate);","lastModifiedDate":"2024-02-02"},{"lineNumber":235,"author":{"gitId":"marclamp"},"content":"                        newList.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":236,"author":{"gitId":"marclamp"},"content":"                        break;","lastModifiedDate":"2024-02-02"},{"lineNumber":237,"author":{"gitId":"marclamp"},"content":"                    }","lastModifiedDate":"2024-02-02"},{"lineNumber":238,"author":{"gitId":"marclamp"},"content":"                    case \"E\": {","lastModifiedDate":"2024-02-02"},{"lineNumber":239,"author":{"gitId":"marclamp"},"content":"                        String startDate \u003d eachLine[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":240,"author":{"gitId":"marclamp"},"content":"                        String endDate \u003d eachLine[4];","lastModifiedDate":"2024-02-02"},{"lineNumber":241,"author":{"gitId":"marclamp"},"content":"                        Task task \u003d new EventTask(taskName, isMarked, startDate, endDate);","lastModifiedDate":"2024-02-02"},{"lineNumber":242,"author":{"gitId":"marclamp"},"content":"                        newList.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":243,"author":{"gitId":"marclamp"},"content":"                        break;","lastModifiedDate":"2024-02-02"},{"lineNumber":244,"author":{"gitId":"marclamp"},"content":"                    }","lastModifiedDate":"2024-02-02"},{"lineNumber":245,"author":{"gitId":"marclamp"},"content":"                    default:","lastModifiedDate":"2024-02-02"},{"lineNumber":246,"author":{"gitId":"marclamp"},"content":"                        System.out.println(\"Error in type of task of this line: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":247,"author":{"gitId":"marclamp"},"content":"                        System.out.println(str);","lastModifiedDate":"2024-02-02"},{"lineNumber":248,"author":{"gitId":"marclamp"},"content":"                        break;","lastModifiedDate":"2024-02-02"},{"lineNumber":249,"author":{"gitId":"marclamp"},"content":"                    }","lastModifiedDate":"2024-02-02"},{"lineNumber":250,"author":{"gitId":"marclamp"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":251,"author":{"gitId":"marclamp"},"content":"                    System.out.println(\"Error in formatting of this line: \");","lastModifiedDate":"2024-02-02"},{"lineNumber":252,"author":{"gitId":"marclamp"},"content":"                    System.out.println(str);","lastModifiedDate":"2024-02-02"},{"lineNumber":253,"author":{"gitId":"marclamp"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":254,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":255,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":256,"author":{"gitId":"marclamp"},"content":"        return newList;","lastModifiedDate":"2024-02-02"},{"lineNumber":257,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":258,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":259,"author":{"gitId":"marclamp"},"content":"     * Saves the entire list of Tasks into the file, by first clearing its contents.","lastModifiedDate":"2024-02-02"},{"lineNumber":260,"author":{"gitId":"marclamp"},"content":"     * @throws IOException if there are any input/output errors.","lastModifiedDate":"2024-02-02"},{"lineNumber":261,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":262,"author":{"gitId":"marclamp"},"content":"    public static void saveAllToFile() throws IOException {","lastModifiedDate":"2024-02-02"},{"lineNumber":263,"author":{"gitId":"marclamp"},"content":"        Path path \u003d getHistoryFilePath();","lastModifiedDate":"2024-02-02"},{"lineNumber":264,"author":{"gitId":"marclamp"},"content":"        try (BufferedWriter writer \u003d Files.newBufferedWriter(path, Charset.defaultCharset())) {","lastModifiedDate":"2024-02-02"},{"lineNumber":265,"author":{"gitId":"marclamp"},"content":"            writer.write(\"\");   // clears the file","lastModifiedDate":"2024-02-02"},{"lineNumber":266,"author":{"gitId":"marclamp"},"content":"            StringBuilder strBdr \u003d new StringBuilder();","lastModifiedDate":"2024-02-02"},{"lineNumber":267,"author":{"gitId":"marclamp"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":268,"author":{"gitId":"marclamp"},"content":"                String str \u003d task.stringForSaving();","lastModifiedDate":"2024-02-02"},{"lineNumber":269,"author":{"gitId":"marclamp"},"content":"                strBdr.append(str).append(\"\\n\");","lastModifiedDate":"2024-02-02"},{"lineNumber":270,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":271,"author":{"gitId":"marclamp"},"content":"            writer.write(strBdr.toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":272,"author":{"gitId":"marclamp"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":273,"author":{"gitId":"marclamp"},"content":"            // ToDo: Handle IOException","lastModifiedDate":"2024-02-02"},{"lineNumber":274,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":275,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":276,"author":{"gitId":"marclamp"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2024-02-02"},{"lineNumber":277,"author":{"gitId":"marclamp"},"content":"        greet();","lastModifiedDate":"2024-01-26"},{"lineNumber":278,"author":{"gitId":"marclamp"},"content":"        tasks \u003d loadFromFile();","lastModifiedDate":"2024-02-06"},{"lineNumber":279,"author":{"gitId":"marclamp"},"content":"        BufferedReader reader \u003d new BufferedReader(","lastModifiedDate":"2024-01-26"},{"lineNumber":280,"author":{"gitId":"marclamp"},"content":"                new InputStreamReader((System.in)));","lastModifiedDate":"2024-01-26"},{"lineNumber":281,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":282,"author":{"gitId":"marclamp"},"content":"        while (!hasExited) {","lastModifiedDate":"2024-02-02"},{"lineNumber":283,"author":{"gitId":"marclamp"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":284,"author":{"gitId":"marclamp"},"content":"                Task task \u003d parseInput(reader);","lastModifiedDate":"2024-02-02"},{"lineNumber":285,"author":{"gitId":"marclamp"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-02-02"},{"lineNumber":286,"author":{"gitId":"marclamp"},"content":"                    saveAllToFile();","lastModifiedDate":"2024-02-02"},{"lineNumber":287,"author":{"gitId":"marclamp"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":288,"author":{"gitId":"marclamp"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":289,"author":{"gitId":"marclamp"},"content":"                System.out.println(\"IOException occurred.\");","lastModifiedDate":"2024-01-26"},{"lineNumber":290,"author":{"gitId":"marclamp"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":291,"author":{"gitId":"marclamp"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":292,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":293,"author":{"gitId":"marclamp"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":293}},{"path":"src/main/java/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":" * Represents a task with a deadline. A \u003ccode\u003eDeadlineTask\u003c/code\u003e","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":" * object contains its description or name, represented by a String,","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":" * a boolean indicating whether the task is marked, and","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":" * a String representing the date and/or time of deadline.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"    public String dateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"     * Basic constructor","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"marclamp"},"content":"     * @param taskName name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"marclamp"},"content":"    public DeadlineTask(String taskName, String dateTime) {","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"marclamp"},"content":"        super(taskName);","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"marclamp"},"content":"     * Overloaded Constructor with date/time specified","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"marclamp"},"content":"     * and marked status","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"marclamp"},"content":"     * @param taskname name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"marclamp"},"content":"     * @param date_time Date and/or Time of deadline","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"marclamp"},"content":"     * @param marked status of task (marked or unmarked)","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"marclamp"},"content":"    public DeadlineTask(String taskname, Boolean marked, String date_time) {","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"marclamp"},"content":"        super(taskname, marked);","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"marclamp"},"content":"        this.dateTime \u003d date_time;","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"marclamp"},"content":"    public String stringForSaving() {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"marclamp"},"content":"        return \"D|\" + super.stringForSaving() + \"|\" + this.dateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"marclamp"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"marclamp"},"content":"        return \"[D]\" + super.toString() +","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"marclamp"},"content":"                String.format(\"(by: %s)\", this.dateTime);","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"marclamp"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":38}},{"path":"src/main/java/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":" * Represents a task which is an event. A \u003ccode\u003eEventTask\u003c/code\u003e","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":" * object contains its description or name, represented by a String,","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":" * a boolean indicating whether the task is marked,","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":" * a String representing the start date and/or time of the event, and","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":" * a String representing the end date and/or time of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"public class EventTask extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"    public String dateTimeFrom;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"    public String dateTimeTo;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"marclamp"},"content":"     * Basic Constructor","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"marclamp"},"content":"     * @param taskname name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"    public EventTask(String taskname) {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"marclamp"},"content":"        super(taskname);","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"        this.dateTimeFrom \u003d \"\";","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"marclamp"},"content":"        this.dateTimeTo \u003d \"\";","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"marclamp"},"content":"     * Overloaded Constructor with event start and end","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"marclamp"},"content":"     * date and/or time specified","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"marclamp"},"content":"     * @param taskname name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"marclamp"},"content":"     * @param dateTimeFrom start date and/or time of the event","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"marclamp"},"content":"     * @param dateTimeTo end date and/or time of the event","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"marclamp"},"content":"    public EventTask(String taskname, String dateTimeFrom, String dateTimeTo) {","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"marclamp"},"content":"        super(taskname);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"marclamp"},"content":"        this.dateTimeFrom \u003d dateTimeFrom;","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"marclamp"},"content":"        this.dateTimeTo \u003d dateTimeTo;","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"marclamp"},"content":"     * Overloaded Constructor with event start and end","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"marclamp"},"content":"     * date and/or time specified, and marked status","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"marclamp"},"content":"     * @param taskname name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"marclamp"},"content":"     * @param date_time_from start date and/or time of the event","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"marclamp"},"content":"     * @param date_time_to end date and/or time of the event","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"marclamp"},"content":"    public EventTask(String taskname, Boolean marked, String date_time_from, String date_time_to) {","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"marclamp"},"content":"        super(taskname,marked);","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"marclamp"},"content":"        this.dateTimeFrom \u003d date_time_from;","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"marclamp"},"content":"        this.dateTimeTo \u003d date_time_to;","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"marclamp"},"content":"    public String stringForSaving() {","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"marclamp"},"content":"        return \"E|\" + super.stringForSaving() + \"|\"","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"marclamp"},"content":"                + this.dateTimeFrom + \"|\"","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"marclamp"},"content":"                + this.dateTimeTo;","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"marclamp"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"marclamp"},"content":"        return \"[D]\" + super.toString()","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"marclamp"},"content":"                + String.format(\"(from: %sto: %s)\", this.dateTimeFrom, this.dateTimeTo);","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"marclamp"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":57}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object contains its","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":" * description or name, represented by a String, and a boolean","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":" * indicating whether the task is marked.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":"public class Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":"    public String taskName;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"    public boolean isMarked;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"     * Basic constructor","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"marclamp"},"content":"     * @param taskName name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"marclamp"},"content":"    public Task(String taskName) {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"marclamp"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"marclamp"},"content":"     * Overloaded constructor with marked status","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"marclamp"},"content":"     * @param taskName name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"marclamp"},"content":"     * @param isMarked status of task (marked or unmarked)","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"marclamp"},"content":"    public Task(String taskName, Boolean isMarked) {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"marclamp"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"marclamp"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"marclamp"},"content":"     * Sets this task as marked, by setting the","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"marclamp"},"content":"     * boolean flag to be true.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"marclamp"},"content":"    public void mark() {","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"marclamp"},"content":"        this.isMarked \u003d true;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"marclamp"},"content":"     * Sets this task as unmarked, by setting the","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"marclamp"},"content":"     * boolean flag to be false.","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"marclamp"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"marclamp"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"marclamp"},"content":"     * Returns a formatted string meant for saving into the","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"marclamp"},"content":"     * text file.","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"marclamp"},"content":"     * @return formatted String, consisting of isMarked status and taskname","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"marclamp"},"content":"    public String stringForSaving() {","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"marclamp"},"content":"        return this.isMarked + \"|\" + this.taskName;","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"marclamp"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"marclamp"},"content":"        return (this.isMarked ? \"[X] \" : \"[ ] \") + this.taskName;","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"marclamp"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":53}},{"path":"src/main/java/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"/**","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":" * Represents a task to be done. A \u003ccode\u003eToDoTask\u003c/code\u003e","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":" * object contains its description or name, represented by a String, and","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":" * a boolean indicating whether the task is marked.","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":" */","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"     * Basic Constructor","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"     * @param taskName name of task to be tracked","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"    public TodoTask(String taskName) {","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"marclamp"},"content":"        super(taskName);","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"marclamp"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"marclamp"},"content":"     * Overloaded Constructor with isMarked status","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"marclamp"},"content":"     * @param taskname name of task to be tracked","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"marclamp"},"content":"     * @param isMarked status of task (marked or unmarked)","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"marclamp"},"content":"    public TodoTask(String taskname, Boolean isMarked) {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"marclamp"},"content":"        super(taskname, isMarked);","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"marclamp"},"content":"    public String stringForSaving() {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"marclamp"},"content":"        return \"T|\" + super.stringForSaving();","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"marclamp"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"marclamp"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"marclamp"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"marclamp"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"marclamp"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"marclamp"},"content":"todo read book","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"marclamp"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"marclamp"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"marclamp"},"content":"todo join sports club","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"marclamp"},"content":"todo borrow book","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"marclamp"},"content":"mark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"marclamp"},"content":"mark 2","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"marclamp"},"content":"mark 4","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"marclamp"},"content":"list","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"marclamp"},"content":"delete 3","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"marclamp"},"content":"list","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"marclamp":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"marclamp"},"content":"java -classpath ..\\bin Chaterpillar \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"marclamp":1,"-":20}}]
