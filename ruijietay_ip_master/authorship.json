[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"# Capone project template","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"3. After that, locate the `src/main/java/Capone.java` file, right-click it, and choose `Run Capone.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"   ░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"   ░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"   ░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":5,"-":17}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    implementation group: \u0027org.json\u0027, name: \u0027json\u0027, version: \u002720231013\u0027","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    mainClass.set(\"capone.Capone\")","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    archiveBaseName \u003d \"capone\"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":3,"-":40}},{"path":"src/main/java/capone/Capone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import capone.commands.Command;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.TaskListCorruptedException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" * The main class responsible for running the application and handling user commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"public class Capone {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    private final TaskList tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    private final Storage storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    private final Ui ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     * Constructs a Capone instance with the specified task list path and name.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * @param taskListPath The path where the task list is stored.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * @param taskListName The name of the task list file.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    public Capone(String taskListPath, String taskListName) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"        this.storage \u003d new Storage(taskListPath, taskListName);","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"     * Runs the instance, displaying a welcome message and reading tasks from storage.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"     * Continuously processes user commands in a loop till user exits.","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    public void run() {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"        this.ui.printWelcomeMsg();","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"            this.storage.readTasksFromJsonFile(this.tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        } catch (TaskListCorruptedException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        while (true) {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"            Command command \u003d Parser.processInputs();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"                command.execute(tasks, ui, storage);","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"            } catch (CaponeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"     * The main method to start the Capone application.","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        new Capone(\"./data/\", \"tasks.json\").run();","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":62}},{"path":"src/main/java/capone/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"import capone.commands.ByeCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"import capone.commands.Command;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"import capone.commands.DeadlineCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"import capone.commands.DeleteCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"import capone.commands.EventCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"import capone.commands.FindCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"import capone.commands.HelpCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"import capone.commands.InvalidCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"import capone.commands.ListCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"import capone.commands.MarkCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"import capone.commands.TodoCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"import capone.commands.UnmarkCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidDateException;","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidTimeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":" * This class is responsible for processing user inputs and generating","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":" * corresponding command objects. It also provides methods for reading","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":" * and splitting user inputs, and checking date and time formats.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"public class Parser {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"    private static ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    private static final Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * Splits the user input into a list of strings.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"     * @param input The user input to be split.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * @return ArrayList of tokens obtained by splitting the input.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"    public static ArrayList\u003cString\u003e splitInput(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(input.split(\"\\\\s+\")));","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"     * Reads a line of user input from the console.","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"     * @return The user input as a String.","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"    public static String readUserInput() {","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        return Parser.scanner.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"     * Processes user inputs and returns the appropriate","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"     * Command instance based on the first word of the input.","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"     * @return Command object corresponding to the user input.","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"    public static Command processInputs() {","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"        Parser.inputList \u003d Parser.splitInput(Parser.readUserInput());","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"        String firstWord \u003d inputList.get(0);","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        if (firstWord.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"            return new ListCommand();","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"            return new MarkCommand(Parser.inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"            return new UnmarkCommand(Parser.inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"            return new TodoCommand(Parser.inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"            return new DeadlineCommand(inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"            return new EventCommand(inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"            return new DeleteCommand(inputList);","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"            return new FindCommand(inputList);","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"            return new ByeCommand(scanner);","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"        } else if (firstWord.equalsIgnoreCase(\"help\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"            return new HelpCommand();","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"            return new InvalidCommand();","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"     * Checks if the given input string follows the date format \u0027YYYY-MM-DD\u0027.","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"     * @return True if the input matches the date format, false otherwise.","lastModifiedDate":"2024-02-01"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"    public static boolean isDateFormat(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"        String dateFormatRegex \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"        return input.matches(dateFormatRegex);","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"     * Checks if the given input string follows the time","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"     * format \u0027HHmm\u0027 (24-hour format).","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"     * @param input The input string to be checked.","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"     * @return True if the input matches the time format, false otherwise.","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"    public static boolean isTimeFormat(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"        String timeFormatRegex \u003d \"(\\\\d{4})\";","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"        return input.matches(timeFormatRegex);","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":116,"author":{"gitId":"ruijietay"},"content":"     * Processes the date and time components and returns a LocalDateTime object.","lastModifiedDate":"2024-02-01"},{"lineNumber":117,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"ruijietay"},"content":"     * @param date The LocalDate object representing the date.","lastModifiedDate":"2024-02-01"},{"lineNumber":119,"author":{"gitId":"ruijietay"},"content":"     * @param time The LocalTime object representing the time.","lastModifiedDate":"2024-02-01"},{"lineNumber":120,"author":{"gitId":"ruijietay"},"content":"     * @return LocalDateTime object combining the date and time.","lastModifiedDate":"2024-02-01"},{"lineNumber":121,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":122,"author":{"gitId":"ruijietay"},"content":"    public static LocalDateTime processDateTime(LocalDate date, LocalTime time) {","lastModifiedDate":"2024-01-31"},{"lineNumber":123,"author":{"gitId":"ruijietay"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":124,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":125,"author":{"gitId":"ruijietay"},"content":"                return date.atTime(time);","lastModifiedDate":"2024-01-31"},{"lineNumber":126,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":127,"author":{"gitId":"ruijietay"},"content":"                return date.atStartOfDay();","lastModifiedDate":"2024-01-31"},{"lineNumber":128,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":129,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":130,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":131,"author":{"gitId":"ruijietay"},"content":"                return LocalDate.now().plusDays(1).atTime(time);","lastModifiedDate":"2024-01-31"},{"lineNumber":132,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":133,"author":{"gitId":"ruijietay"},"content":"                return null;","lastModifiedDate":"2024-01-31"},{"lineNumber":134,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":135,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":136,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":137,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":138,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"ruijietay"},"content":"     * Parses the input string into a LocalDate object.","lastModifiedDate":"2024-02-01"},{"lineNumber":140,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":141,"author":{"gitId":"ruijietay"},"content":"     * @param date The input string representing the date.","lastModifiedDate":"2024-02-01"},{"lineNumber":142,"author":{"gitId":"ruijietay"},"content":"     * @return LocalDate object parsed from the input.","lastModifiedDate":"2024-02-01"},{"lineNumber":143,"author":{"gitId":"ruijietay"},"content":"     * @throws InvalidDateException If the input string is not a valid date.","lastModifiedDate":"2024-02-01"},{"lineNumber":144,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":145,"author":{"gitId":"ruijietay"},"content":"    public static LocalDate parseDate(String date) throws InvalidDateException {","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"ruijietay"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-01-31"},{"lineNumber":147,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":148,"author":{"gitId":"ruijietay"},"content":"            return LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":149,"author":{"gitId":"ruijietay"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":150,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidDateException(\"Oops! You have entered an invalid date. Please try again.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":151,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":152,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":153,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":154,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":155,"author":{"gitId":"ruijietay"},"content":"     * Parses the input string into a LocalTime object.","lastModifiedDate":"2024-02-01"},{"lineNumber":156,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":157,"author":{"gitId":"ruijietay"},"content":"     * @param time The input string representing the time.","lastModifiedDate":"2024-02-01"},{"lineNumber":158,"author":{"gitId":"ruijietay"},"content":"     * @return LocalTime object parsed from the input.","lastModifiedDate":"2024-02-01"},{"lineNumber":159,"author":{"gitId":"ruijietay"},"content":"     * @throws InvalidTimeException If the input string is not a valid time.","lastModifiedDate":"2024-02-01"},{"lineNumber":160,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":161,"author":{"gitId":"ruijietay"},"content":"    public static LocalTime parseTime(String time) throws InvalidTimeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":162,"author":{"gitId":"ruijietay"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":163,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":164,"author":{"gitId":"ruijietay"},"content":"            return LocalTime.parse(time, timeFormatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":165,"author":{"gitId":"ruijietay"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":166,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidTimeException(\"Oops! You have entered an invalid time. Please try again.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":167,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":168,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":169,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":169}},{"path":"src/main/java/capone/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONArray;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONObject;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.TaskListCorruptedException;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Event;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.ToDo;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":" * The Storage class is responsible for reading and writing tasks","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":" * to a JSON file. It provides methods to initialize the file if","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":" * it doesn\u0027t exist, read and writes tasks to the file.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":" * The file is stored in a specified folder with a given filename.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"public class Storage {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    private final String jsonFilename;","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    private final String jsonFilepath;","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"     * Constructor for the Storage class.","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * @param path The path where the JSON file is stored.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     * @param name The name of the JSON file.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"    public Storage(String path, String name) {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"        this.jsonFilepath \u003d path;","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        this.jsonFilename \u003d name;","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * Gets the full path of the JSON file,","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     * including the folder path and filename.","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"     * @return The full path of the JSON file.","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"    private String getFullPath() {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"        return this.jsonFilepath + this.jsonFilename;","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"     * Gets the filename of the JSON file.","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"     * @return The filename of the JSON file.","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    private String getFileName() {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        return this.jsonFilename;","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"     * Gets the folder path where the JSON file is stored.","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"     * @return The folder path where the JSON file is stored.","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"    private String getFilePath() {","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        return this.jsonFilepath;","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"     * Writes tasks from the task list to the JSON file.","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList containing tasks to be written to the file.","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"    public void writeTasksToJsonFile(TaskList taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"        JSONArray jsonArray \u003d new JSONArray();","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"            JSONObject jsonTask \u003d new JSONObject();","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"taskType\", task.getTaskType());","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"description\", task.getDescription());","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"status\", task.getStatus());","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"            // Add type-specific information for Deadline and Event tasks","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"deadline\", ((Deadline) task).getDeadline());","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"fromDate\", ((Event) task).getFromDateTime());","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"toDate\", ((Event) task).getToDateTime());","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"            jsonArray.put(jsonTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(this.getFullPath())) {","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"            jsonArray.write(fileWriter);","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"     * Reads tasks from the JSON file and adds them to the task list.","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList where tasks will be added.","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"     * @throws TaskListCorruptedException If the JSON file is corrupted or has an invalid format.","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"    public void readTasksFromJsonFile(TaskList taskList) throws TaskListCorruptedException {","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"            this.initFileIfNotExist();","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"            String jsonContent \u003d new String(Files.readAllBytes(Paths.get(this.getFullPath())));","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"            JSONArray jsonArray \u003d new JSONArray(jsonContent);","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"ruijietay"},"content":"            for (int i \u003d 0; i \u003c jsonArray.length(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":116,"author":{"gitId":"ruijietay"},"content":"                JSONObject jsonTask \u003d jsonArray.getJSONObject(i);","lastModifiedDate":"2024-01-31"},{"lineNumber":117,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":118,"author":{"gitId":"ruijietay"},"content":"                String type \u003d jsonTask.getString(\"taskType\");","lastModifiedDate":"2024-01-31"},{"lineNumber":119,"author":{"gitId":"ruijietay"},"content":"                String description \u003d jsonTask.getString(\"description\");","lastModifiedDate":"2024-01-31"},{"lineNumber":120,"author":{"gitId":"ruijietay"},"content":"                boolean status \u003d jsonTask.getBoolean(\"status\");","lastModifiedDate":"2024-01-31"},{"lineNumber":121,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":122,"author":{"gitId":"ruijietay"},"content":"                if (type.equals(\"todo\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":123,"author":{"gitId":"ruijietay"},"content":"                    taskList.addTask(new ToDo(description, status));","lastModifiedDate":"2024-01-31"},{"lineNumber":124,"author":{"gitId":"ruijietay"},"content":"                } else if (type.equals(\"deadline\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":125,"author":{"gitId":"ruijietay"},"content":"                    String deadline \u003d jsonTask.getString(\"deadline\");","lastModifiedDate":"2024-01-31"},{"lineNumber":126,"author":{"gitId":"ruijietay"},"content":"                    taskList.addTask(new Deadline(description, status, deadline));","lastModifiedDate":"2024-01-31"},{"lineNumber":127,"author":{"gitId":"ruijietay"},"content":"                } else if (type.equals(\"event\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":128,"author":{"gitId":"ruijietay"},"content":"                    String fromDate \u003d jsonTask.getString(\"fromDate\");","lastModifiedDate":"2024-01-31"},{"lineNumber":129,"author":{"gitId":"ruijietay"},"content":"                    String toDate \u003d jsonTask.getString(\"toDate\");","lastModifiedDate":"2024-01-31"},{"lineNumber":130,"author":{"gitId":"ruijietay"},"content":"                    taskList.addTask(new Event(description, status, fromDate, toDate));","lastModifiedDate":"2024-01-31"},{"lineNumber":131,"author":{"gitId":"ruijietay"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":132,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":133,"author":{"gitId":"ruijietay"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":134,"author":{"gitId":"ruijietay"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":135,"author":{"gitId":"ruijietay"},"content":"        } catch (JSONException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":136,"author":{"gitId":"ruijietay"},"content":"            initFileIfNotExist();","lastModifiedDate":"2024-01-31"},{"lineNumber":137,"author":{"gitId":"ruijietay"},"content":"            throw new TaskListCorruptedException(\"Detected corrupted task list file.\"","lastModifiedDate":"2024-02-01"},{"lineNumber":138,"author":{"gitId":"ruijietay"},"content":"                    + \" New file will be created when new tasks are created.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":140,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":141,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":142,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":143,"author":{"gitId":"ruijietay"},"content":"     * Initializes the JSON file if it does not exist.","lastModifiedDate":"2024-02-01"},{"lineNumber":144,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":145,"author":{"gitId":"ruijietay"},"content":"    public void initFileIfNotExist() {","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"ruijietay"},"content":"        // Create the folder if it doesn\u0027t exist","lastModifiedDate":"2024-01-31"},{"lineNumber":147,"author":{"gitId":"ruijietay"},"content":"        File folder \u003d new File(this.getFilePath());","lastModifiedDate":"2024-01-31"},{"lineNumber":148,"author":{"gitId":"ruijietay"},"content":"        if (!folder.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":149,"author":{"gitId":"ruijietay"},"content":"            folder.mkdir();","lastModifiedDate":"2024-01-31"},{"lineNumber":150,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":151,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":152,"author":{"gitId":"ruijietay"},"content":"        // Create the file within the folder","lastModifiedDate":"2024-01-31"},{"lineNumber":153,"author":{"gitId":"ruijietay"},"content":"        File file \u003d new File(folder, this.getFileName());","lastModifiedDate":"2024-01-31"},{"lineNumber":154,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":155,"author":{"gitId":"ruijietay"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":156,"author":{"gitId":"ruijietay"},"content":"            try (FileWriter fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":157,"author":{"gitId":"ruijietay"},"content":"                fileWriter.write(\"[]\");","lastModifiedDate":"2024-01-31"},{"lineNumber":158,"author":{"gitId":"ruijietay"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":159,"author":{"gitId":"ruijietay"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":160,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":161,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":162,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":163,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":163}},{"path":"src/main/java/capone/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" * The TaskList class represents a list of tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * It provides methods to manage and iterate through tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * Constructs a TaskList with the specified list of tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The list of tasks to be added to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    public int getSize() {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.size();","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * Gets the task at the specified index in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"     * @param ndx The index of the task to retrieve.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"    public Task getTask(int ndx) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.get(ndx);","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"     * Gets the last task in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"     * @return The last task in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    public Task getLastTask() {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.get(this.getSize() - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"     * Removes and returns the task at the specified index in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"     * @param ndx The index of the task to remove.","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"     * @return The removed task.","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"    public Task removeTask(int ndx) {","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.remove(ndx);","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"     * @return true if the task is added successfully, false otherwise.","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"    public boolean addTask(Task task) {","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.add(task);","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"     * Returns an iterator over the tasks in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"     * @return An iterator over the tasks in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.iterator();","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"        return this.taskList.isEmpty();","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":94}},{"path":"src/main/java/capone/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * The Ui class handles user interface-related operations.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * It includes methods for printing welcome messages and","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" * sending messages to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"public class Ui {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     * Prints a welcome message with the Capone logo.","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    public void printWelcomeMsg() {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"        String logo \u003d \"░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"                + \"░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"                + \"░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░\";","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Hello! I\u0027m\\n%s\\nWhat can I do for you?\\n%n\", logo);","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     * Sends a message to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * @param message The message to be sent.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    public void sendMessage(String message) {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(message);","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":30}},{"path":"src/main/java/capone/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" * Represents a command to terminate the application. Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"    /** Scanner used for handling user input. */","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    private final Scanner scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * Constructs a ByeCommand with the specified scanner.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     * @param scanner The scanner for user input.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    public ByeCommand(Scanner scanner) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"        this.scanner \u003d scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"     * Executes the ByeCommand, displaying a farewell message and terminating the application.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        ui.sendMessage(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"        scanner.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"        System.exit(0);","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":43}},{"path":"src/main/java/capone/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" * An abstract class representing a command in the Capone application.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * All concrete command classes must extend this class and implement the execute method.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"public abstract class Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     * Executes the command with the specified TaskList, Ui, and Storage.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":25}},{"path":"src/main/java/capone/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.Parser;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * Represents a command to add a deadline task to TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for DeadlineCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     * Constructs a DeadlineCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the DeadlineCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    public DeadlineCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * Executes the DeadlineCommand, adding a new deadline task to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Insufficient arguments!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        // Find the index of the /by command.","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        int byNdx \u003d inputList.indexOf(\"/by\");","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"        // Catch potential errors from date entry.","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"        if (byNdx \u003d\u003d inputList.size() - 1 || byNdx \u003d\u003d -1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter a date for this deadline task!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"        // Combine description of task into one string.","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c byNdx; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d byNdx - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"        if (description.toString().equalsIgnoreCase(\"\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Insufficient arguments!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"        LocalTime time \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"        StringBuilder byDate \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d byNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"                date \u003d Parser.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"                time \u003d Parser.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"                byDate.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"                byDate.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"        LocalDateTime deadlineDateTime \u003d Parser.processDateTime(date, time);","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"        if (deadlineDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"            taskList.addTask(new Deadline(description.toString(), false, deadlineDateTime));","lastModifiedDate":"2024-01-31"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"            taskList.addTask(new Deadline(description.toString(), false, byDate.toString()));","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"        storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"        ui.sendMessage(String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"                + \"Now you have %d task(s) in the list.\\n\",","lastModifiedDate":"2024-02-01"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"                taskList.getLastTask().toString(), taskList.getSize()));","lastModifiedDate":"2024-02-01"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":114}},{"path":"src/main/java/capone/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidIndexException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" * Represents a command to delete a task from the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for DeleteCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * Constructs a DeleteCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the DeleteCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public DeleteCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * Executes the DeleteCommand, removing a task from the TaskList based on the provided index.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has more than two arguments, throw exception.","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter an index of a task you\u0027d like to delete.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: delete [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidIndexException(\"Please enter only one index you would like to delete.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: delete [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"            // Remove the task from the tasks ArrayList.","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"            Task removedTask \u003d taskList.removeTask(Integer.parseInt(inputList.get(1)) - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"            storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"            ui.sendMessage(String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\\n\",","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"                    removedTask.toString(), taskList.getSize()));","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidIndexException(\"Sorry, you have entered an invalid index.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"                    + \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":67}},{"path":"src/main/java/capone/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.Parser;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Event;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" * Represents a command to add an event task to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for EventCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"     * Constructs an EventCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the EventCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    public EventCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * Executes the EventCommand, adding a new event task to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Insufficient arguments!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        int fromNdx \u003d inputList.indexOf(\"/from\");","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        int toNdx \u003d inputList.indexOf(\"/to\");","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"        // If /to is specified before /from, throw error.","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"        if (toNdx \u003c fromNdx) {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidCommandException(\"Please input from date followed by to date!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"        // Catch potential errors from date entry.","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        if (fromNdx \u003d\u003d -1 || toNdx \u003d\u003d -1 || toNdx - fromNdx \u003d\u003d 1 || fromNdx - toNdx \u003d\u003d 1","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"                || fromNdx \u003d\u003d inputList.size() - 1 || toNdx \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter a start and end date!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"        // Combine the task description into a single string.","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c fromNdx; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d fromNdx - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"        if (description.toString().equalsIgnoreCase(\"\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Insufficient arguments!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"        LocalDate fromDate \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"        LocalTime fromTime \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"        StringBuilder fromDateString \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d fromNdx + 1; i \u003c toNdx; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"                fromDate \u003d Parser.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"                fromTime \u003d Parser.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"                fromDateString.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"                fromDateString.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"        LocalDate toDate \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"        LocalTime toTime \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"        StringBuilder toDateString \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d toNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"                toDate \u003d Parser.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":116,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":117,"author":{"gitId":"ruijietay"},"content":"            if (Parser.isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":118,"author":{"gitId":"ruijietay"},"content":"                toTime \u003d Parser.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":119,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":120,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":121,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":122,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":123,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":124,"author":{"gitId":"ruijietay"},"content":"                toDateString.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":125,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":126,"author":{"gitId":"ruijietay"},"content":"                toDateString.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":127,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":128,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":129,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":130,"author":{"gitId":"ruijietay"},"content":"        LocalDateTime fromDateTime \u003d Parser.processDateTime(fromDate, fromTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":131,"author":{"gitId":"ruijietay"},"content":"        LocalDateTime toDateTime \u003d Parser.processDateTime(toDate, toTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":132,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":133,"author":{"gitId":"ruijietay"},"content":"        if (fromDateTime !\u003d null \u0026\u0026 toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":134,"author":{"gitId":"ruijietay"},"content":"            taskList.addTask(new Event(description.toString(), false, fromDateTime, toDateTime));","lastModifiedDate":"2024-01-31"},{"lineNumber":135,"author":{"gitId":"ruijietay"},"content":"        } else if (fromDateTime !\u003d null || toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":136,"author":{"gitId":"ruijietay"},"content":"            // If either fromDateTime or toDateTime is null but the other is not.","lastModifiedDate":"2024-01-31"},{"lineNumber":137,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidCommandException(\"Oops! It seems like there is a format mismatch between\"","lastModifiedDate":"2024-02-01"},{"lineNumber":138,"author":{"gitId":"ruijietay"},"content":"                    + \"your start and dates and end dates.\\nMake sure you enter both of them in the accepted \"","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"ruijietay"},"content":"                    + \"date format!\\nAlternatively, you can specify a string for both your start and end dates.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":140,"author":{"gitId":"ruijietay"},"content":"                    + \"Use the \u0027help\u0027 command for more information.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":141,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":142,"author":{"gitId":"ruijietay"},"content":"            taskList.addTask(new Event(description.toString(), false,","lastModifiedDate":"2024-01-31"},{"lineNumber":143,"author":{"gitId":"ruijietay"},"content":"                    fromDateString.toString(), toDateString.toString()));","lastModifiedDate":"2024-01-31"},{"lineNumber":144,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":145,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"ruijietay"},"content":"        storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":147,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":148,"author":{"gitId":"ruijietay"},"content":"        ui.sendMessage(String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":149,"author":{"gitId":"ruijietay"},"content":"                + \"Now you have %d task(s) in the list.\\n\", taskList.getLastTask().toString(), taskList.getSize()));","lastModifiedDate":"2024-02-01"},{"lineNumber":150,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":151,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":152,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":152}},{"path":"src/main/java/capone/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" * Represents a command to find tasks containing a specific keyword.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" * Inherits from the Command class.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /** The list of input strings provided by the user for the find command. */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * Constructs a FindCommand instance with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list of input strings provided by the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public FindCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * Executes the find command, searching for tasks containing a specific keyword.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The list of tasks to search within.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param ui The user interface for displaying messages.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @param storage The storage to handle data storage operations.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If there is an issue executing the find command.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"        if (this.inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Insufficient arguments!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        } else if (this.inputList.size() \u003e 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidCommandException(\"Too many arguments entered - Please only enter one keyword:\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: find [keyword]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"        String keyword \u003d inputList.get(1);","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        TaskList filteredList \u003d new TaskList();","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"                filteredList.addTask(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"        if (filteredList.isEmpty()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"            ui.sendMessage(String.format(\"No results found for the given keyword %s\\n\", keyword));","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"            new ListCommand().execute(filteredList, ui, storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"ruijietay":68}},{"path":"src/main/java/capone/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" * Represents a command to display a list of supported commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     * Executes the HelpCommand, displaying a list of supported commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"        ui.sendMessage(\"Commands I understand:\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"                + \"1. list - Lists the tasks entered.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"                + \"2. todo [description] - Creates a new capone.tasks.ToDo task. Remember to enter the description!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"                + \"3. deadline [description] /by [date] - Creates a new capone.tasks.Deadline task.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"                + \"   Remember to enter the description and date!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"                + \"   Dates are recognised in the following format - \u0027yyyy-mm-dd HHmm\u0027 (24-hour).\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"                + \"4. event [description] /from [date] /to [date] - Creates a new capone.tasks.Event task.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"                + \"   Remember to enter the description, as well as the start and end date!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"                + \"   Dates are recognised in the following format - \u0027yyyy-mm-dd HHmm\u0027 (24-hour).\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"                + \"5. mark [index] - Marks a task as completed. Use this in conjunction with the \u0027list\u0027 command!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"                + \"6. unmark [index] - Unmarks a task. Use this in conjunction with the \u0027list\u0027 command!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"                + \"7. delete [index] - Deletes a task. Use this in conjunction with the \u0027list\u0027 command!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"                + \"8. find [keyword] - Finds all tasks that matches the given input keyword.\\n\");","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":40}},{"path":"src/main/java/capone/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidCommandException;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" * Represents a command to handle invalid user commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     * Executes the InvalidCommand, throwing an InvalidCommandException with a helpful message.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * @throws InvalidCommandException If an invalid command is encountered.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidCommandException {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"        throw new InvalidCommandException(\"I\u0027m sorry, I don\u0027t understand what you just said.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"                + \"Use \u0027help\u0027 to display the list of valid commands\");","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":29}},{"path":"src/main/java/capone/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" * Represents a command to list all tasks in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"     * Executes the ListCommand, displaying the list of tasks to the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be displayed.","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data (not used in this command).","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"            ui.sendMessage(String.format(\"%d. %s\\n\", i + 1, taskList.getTask(i).toString()));","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":28}},{"path":"src/main/java/capone/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidIndexException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" * Represents a command to mark a task as completed in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for MarkCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * Constructs a MarkCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the MarkCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public MarkCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * Executes the MarkCommand, marking a task as completed in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter an index of a task you\u0027d like to mark.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: mark [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidIndexException(\"Please enter only one index you would like to mark.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: mark [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        // Mark task as done.","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"            Task markedTask \u003d taskList.getTask(Integer.parseInt(inputList.get(1)) - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"            markedTask.markTask();","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"            storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"            // Inform the user that the task has been marked.","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"            ui.sendMessage(\"Nice! I\u0027ve marked this task as done:\\n\" + markedTask + \"\\n\");","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidIndexException(\"Sorry, you have entered an invalid index.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"                    + \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":66}},{"path":"src/main/java/capone/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.ToDo;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":" * Represents a command to create a new ToDo task and add it to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for TodoCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     * Constructs a TodoCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the TodoCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    public TodoCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     * Executes the TodoCommand, creating a new ToDo task and adding it to the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw an error (insufficient args).","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter a description for this capone.tasks.ToDo task!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: todo [description]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        // Combine the remaining words into a single string.","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        ToDo newTodo \u003d new ToDo(description.toString(), false);","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"        taskList.addTask(newTodo);","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"        ui.sendMessage(String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"                + \"Now you have %d task(s) in the list.\\n\", newTodo.toString(), taskList.getSize()));","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":65}},{"path":"src/main/java/capone/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidIndexException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.tasks.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":" * Represents a command to unmark a completed task in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" * Extends the abstract class Command.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /** List containing input parameters for UnmarkCommand. */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    private final ArrayList\u003cString\u003e inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * Constructs an UnmarkCommand with the specified input list.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param inputList The list containing input parameters for the UnmarkCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public UnmarkCommand(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        this.inputList \u003d inputList;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * Executes the UnmarkCommand, unmarking a completed task in the TaskList.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param taskList The TaskList to be updated.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param ui       The Ui to interact with the user.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @param storage  The Storage for saving data.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @throws CaponeException If any Capone-related exception occurs.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter an index of a task you\u0027d like to unmark.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: unmark [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"            throw new InsufficientArgumentException(\"Please enter only one index you would like to unmark.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"                    + \"You can view all tasks using the \u0027list\u0027 command.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                    + \"Usage: unmark [index]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"            Task unmarkedTask \u003d taskList.getTask(Integer.parseInt(inputList.get(1)) - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"            unmarkedTask.unmarkTask();","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"            storage.writeTasksToJsonFile(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"            // Inform the user that the task has been marked.","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"            ui.sendMessage(\"OK, I\u0027ve marked this task as not done yet:\\n\" + unmarkedTask + \"\\n\");","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"            throw new InvalidIndexException(\"Sorry, you have entered an invalid index.\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"                    + \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":65}},{"path":"src/main/java/capone/exceptions/CaponeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling task-related exceptions.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the Java built-in Exception class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public abstract class CaponeException extends Exception {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new CaponeException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public CaponeException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/InsufficientArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling insufficient arguments in commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class InsufficientArgumentException extends CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new InsufficientArgumentException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the insufficient argument exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public InsufficientArgumentException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling invalid commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class InvalidCommandException extends CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new InvalidCommandException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the invalid command exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling invalid date format in commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class InvalidDateException extends CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new InvalidDateException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the invalid date exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public InvalidDateException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling invalid indices in commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class InvalidIndexException extends CaponeException {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new InvalidIndexException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the invalid index exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public InvalidIndexException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/InvalidTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling invalid time format in commands.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class InvalidTimeException extends CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new InvalidTimeException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the invalid time exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public InvalidTimeException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/exceptions/TaskListCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.exceptions;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Custom exception class for handling corrupted task lists.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Extends the CaponeException class.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class TaskListCorruptedException extends CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a new TaskListCorruptedException with the specified error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param errorMessage The error message associated with the task list corruption exception.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public TaskListCorruptedException(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":19}},{"path":"src/main/java/capone/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" * Extends the Task class.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     * The deadline in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"     * Used when deadline is not provided in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    private String deadlineString;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    /** The deadline in LocalDateTime format. */","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     * Constructs a Deadline task with the specified description,","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     * status, and deadline in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"     * @param status      The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"     * @param deadline    The deadline of the task in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    public Deadline(String description, boolean status, String deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.DEADLINE, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"        this.deadlineString \u003d deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * Constructs a Deadline task with the specified description, status,","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * and deadline in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"     * @param status      The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * @param deadline    The deadline of the task in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"    public Deadline(String description, boolean status, LocalDateTime deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.DEADLINE, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"     * Gets the formatted deadline as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"     * @return The formatted deadline string.","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"    public String getDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"        if (this.deadline !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"            return this.deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        return this.deadlineString;","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"     * Overrides the toString method to represent the Deadline task as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"     * @return A formatted string representation of the Deadline task.","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDeadline() + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":70}},{"path":"src/main/java/capone/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * Represents an event task with a from and to date entry.","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" * Extends the Task class.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     * The start date and time of the event in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"     * Used when fromDate is not provided in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    protected String fromDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"     * The end date and time of the event in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * Used when toDate is not provided in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    protected String toDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    /** The start date and time of the event in LocalDateTime format. */","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    /** The end date and time of the event in LocalDateTime format. */","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     * Constructs an Event task with the specified description,","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * status, start date, and end date in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"     * @param status      The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"     * @param fromDate    The start date and time of the event in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"     * @param toDate      The end date and time of the event in string format.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    public Event(String description, boolean status, String fromDate, String toDate) {","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.EVENT, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        this.fromDateTimeString \u003d fromDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"        this.toDateTimeString \u003d toDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"     * Constructs an Event task with the specified description, status,","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"     * start date, and end date in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"     * @param status      The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"     * @param fromDate    The start date and time of the event in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"     * @param toDate      The end date and time of the event in LocalDateTime format.","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"    public Event(String description, boolean status, LocalDateTime fromDate, LocalDateTime toDate) {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.EVENT, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        this.fromDateTime \u003d fromDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"        this.toDateTime \u003d toDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"     * Gets the formatted start date and time of the event as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"     * @return The formatted start date and time string.","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"    public String getFromDateTime() {","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"        if (this.fromDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"            return this.fromDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"        return this.fromDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"     * Gets the formatted end date and time of the event as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"     * @return The formatted end date and time string.","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"    public String getToDateTime() {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"        if (this.toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"            return this.toDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"        return this.toDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"     * Overrides the toString method to represent the Event task as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"     * @return A formatted string representation of the Event task.","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.getFromDateTime()","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"                + \" to: \" + this.getToDateTime() + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":96}},{"path":"src/main/java/capone/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Represents an abstract task.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Contains common attributes and methods shared by various types of tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Enumeration representing the type of task","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     * (TODO, DEADLINE, EVENT).","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    protected enum TaskType {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"        TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\");","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"        private String taskName;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"        TaskType(String name) {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"            this.taskName \u003d name;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"        @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"        public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"            return this.taskName;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    /** The type of the task */","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    protected TaskType taskType;","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    /** The description of the task. */","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    /** The completion status of the task */","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"     * Constructs a task with the specified type, description, and completion status.","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * @param type     The type of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     * @param status   The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    public Task(TaskType type, String description, boolean status) {","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        this.taskType \u003d type;","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"     * Gets the type of the task as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"     * @return The type of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    public String getTaskType() {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        return this.taskType.toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"     * Gets the description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        return this.description;","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"     * Gets the completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"     * @return The completion status of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"    public Boolean getStatus() {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"        return this.isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"    public void markTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-24"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"     * Unmarks the task as done.","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"    public void unmarkTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-24"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"     * Gets the status icon for the task (X if done, empty if not).","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"     * @return The status icon for the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"        return (this.isDone ? \"X\" : \" \");","lastModifiedDate":"2024-02-01"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"     * Overrides the toString method to represent the task as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"     * @return A formatted string representation of the task.","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-24"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"ruijietay":111}},{"path":"src/main/java/capone/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":" * Represents a ToDo task.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":" * Inherits from the Task class and provides specific implementation for ToDo tasks.","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"     * Constructs a ToDo task with the specified description and completion status.","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"     * @param status      The completion status of the ToDo task.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"    public ToDo(String description, boolean status) {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.TODO, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * Overrides the toString method to represent the ToDo task as a string.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     * @return A formatted string representation of the ToDo task.","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":30}},{"path":"src/test/java/capone/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidDateException;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InvalidTimeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":" * Test class for the Parser utility class.","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"public class ParserTest {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseDate when an invalid date format is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"     * Expects an InvalidDateException to be thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    public void parseDate_invalidDate1_throwsInvalidDateException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"            Parser.parseDate(\"this is not a valid date\");","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseDate when an invalid date","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"     * (with incorrect month and day format) is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"     * Expects an InvalidDateException to be thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    public void parseDate_invalidDate2_throwsInvalidDateException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"            Parser.parseDate(\"2023-2-2\");","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseDate with a valid date.","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"     * Expects the parsed LocalDate to match the expected value.","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"     * @throws InvalidDateException if the date is invalid (which is not expected in this test).","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"    public void parseDate_validDate_success() throws InvalidDateException {","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"        LocalDate expectedDate \u003d LocalDate.of(2001, 9, 26);","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        LocalDate actualDate \u003d Parser.parseDate(\"2001-09-26\");","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        assertEquals(expectedDate, actualDate);","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseTime when an invalid time format is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"     * Expects an InvalidTimeException to be thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"    public void parseTime_invalidTime1_throwsInvalidTimeException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        assertThrows(InvalidTimeException.class, () -\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"            Parser.parseTime(\"this is not a valid time\");","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseTime when an invalid time","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"     * (with incorrect hour) is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"     * Expects an InvalidTimeException to be thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"    public void parseTime_invalidTime2_throwsInvalidTimeException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"        assertThrows(InvalidTimeException.class, () -\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"            Parser.parseTime(\"2395\");","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of parseTime with a valid time.","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"     * Expects the parsed LocalTime to match the expected value.","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"     * @throws InvalidTimeException if the time is invalid (which is not expected in this test).","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"    public void parseTime_validTime_success() throws InvalidTimeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"        LocalTime expectedTime \u003d LocalTime.of(23, 59);","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"        LocalTime actualTime \u003d Parser.parseTime(\"2359\");","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"        assertEquals(expectedTime, actualTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":92}},{"path":"src/test/java/capone/commands/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"package capone.commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"import capone.Parser;","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"import capone.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"import capone.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"import capone.Ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.CaponeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"import capone.exceptions.InsufficientArgumentException;","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":" * Test class for the DeadlineCommand.","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":" *","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":" * @author Tay Rui-Jie","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    private Ui ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    private final ByteArrayOutputStream stdoutMsg \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"     * Initializes the components needed for each test.","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    public void initializeComponents() {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"        this.storage \u003d new Storage(\"./data/\", \"test.json\");","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"        System.setOut(new PrintStream(stdoutMsg));","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of the DeadlineCommand when no description is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"     * Expects an InsufficientArgumentException to be thrown with the correct error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    public void execute_noDescription_throwsInsufficientArgumentException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        Command deadlineCommand \u003d new DeadlineCommand(Parser.splitInput(\"deadline /by 2023-12-12 1800\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"        InsufficientArgumentException exception \u003d assertThrows(InsufficientArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"            deadlineCommand.execute(this.taskList, this.ui, this.storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"        String expectedMsg \u003d \"Insufficient arguments!\\nUsage: deadline [description] /by [date]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        assertEquals(expectedMsg, exception.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of the DeadlineCommand when no date/time is provided.","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"     * Expects an InsufficientArgumentException to be thrown with the correct error message.","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"    public void execute_noDateTime_throwsInsufficientArgumentException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        Command deadlineCommand \u003d new DeadlineCommand(Parser.splitInput(\"deadline do iP /by\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"        InsufficientArgumentException exception \u003d assertThrows(InsufficientArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"            deadlineCommand.execute(this.taskList, this.ui, this.storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"        String expectedMsg \u003d \"Please enter a date for this deadline task!\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"                + \"Usage: deadline [description] /by [date]\";","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"        assertEquals(expectedMsg, exception.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"     * Tests the behavior of the DeadlineCommand with valid input.","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"     * Expects the command to execute successfully and the correct message to be printed.","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"    public void execute_validInput_success() throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"        Command deadlineCommand \u003d new DeadlineCommand(Parser.splitInput(\"deadline clean room /by 2024-01-31 1800\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"        deadlineCommand.execute(this.taskList, this.ui, this.storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"        String expectedMsg \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"                + \"Now you have %d task(s) in the list.\\n\", taskList.getLastTask().toString(), taskList.getSize());","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"        assertEquals(expectedMsg, stdoutMsg.toString());","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":90}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"-h","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"todo make cake","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"thisisaninvalidinput","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"deadline submit weekly report /by friday 26 Jan 2023","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"event party at home /from saturday, 27 jan 2023 /to 28 jan 2023, sunday","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"mark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"delete asdf","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"delete 333","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"unmark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"delete 1","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"deadline ps1 /by 2024-02-01 2359","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"deadline ps2 /by 2024-02-01 9999","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"deadline ps1 /by 2069-02-01 2359","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 1300 /to 2024-02-10 2200","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 1300 /to thisisnotadate","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 9999 /to 2024-02-10 2200","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"REM run the program, feed capone.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"java -classpath ..\\bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"# run the program, feed capone.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"java -classpath ../bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":3,"-":35}}]
