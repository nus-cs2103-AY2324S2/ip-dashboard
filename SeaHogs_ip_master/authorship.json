[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"# Duke.main.Duke project template","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"3. After that, locate the `src/main/java/Duke.main.Duke.java` file, right-click it, and choose `Run Duke.main.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"SeaHogs":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    mainClass.set(\"Duke.main.Duke\")","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"SeaHogs":1}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"T | X | get a life","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"D | âˆš | return book | 2-12-2019 1800","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"D | X | return book | 02-12-2019 1800","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"E | X | live | 02-03-2024 2019 | 02-03-2070 2019","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":4}},{"path":"src/main/java/Duke/activityAndUtility/Activity.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":" * The {@code Activity} interface defines the structure for activities that can be managed within the Duke application.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":" * It provides methods for printing details about an activity, retrieving the name of the activity, and marking an activity","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":" * with a specific input, potentially to track completion or progress.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"public interface Activity {","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"     * Prints the details about the activity. This could include information such as the activity\u0027s name,","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"     * status (completed or not), and any other relevant details specific to the implementation.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"    public void printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     * Retrieves the name of the activity.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * @return A {@code String} representing the name of the activity.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    public String getName();","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"     * Marks the activity with a given input. The interpretation of the input is implementation-specific","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"     * and could be used to mark the activity as completed, set its priority, or any other relevant action.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"     * @param input A {@code String} input that affects the activity\u0027s state or properties.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    public void mark(String input);","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":29}},{"path":"src/main/java/Duke/activityAndUtility/DateTimeFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" * The {@code DateTimeFormat} class provides static utility methods for parsing {@link LocalDate} and {@link LocalTime}","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" * from strings. It supports multiple date formats for flexibility in parsing dates and a specific time format.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"class DateTimeFormat {","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"     * Parses a {@link LocalDate} from the provided input string. The method supports two date formats: \"yyyy-MM-dd\" and \"dd-MM-yyyy\".","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"     * It attempts to parse the date using the first format and falls back to the second format if the first attempt fails.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * @param input The input string containing the date to be parsed. The date is expected to be the first part of the input,","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     *              separated by a space from any other information.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     * @return The parsed {@link LocalDate}, or {@code null} if neither format can parse the input successfully.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    static public LocalDate getDate(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"        String[] dateString \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"        //checking if it fit either format","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"            return LocalDate.parse(dateString[0], formatter1);","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        } catch (DateTimeParseException ignored) {","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"            return LocalDate.parse(dateString[0], formatter2);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"        } catch (DateTimeParseException format) {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"            return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"     * Parses a {@link LocalTime} from the provided input string. The method supports the time format \"HHmm\",","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"     * expecting the time to be the second part of the input, separated by a space from any other information.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     * @param input The input string containing the time to be parsed. The time is expected to be the second part of the input,","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"     *              separated by a space from the date part.","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"     * @return The parsed {@link LocalTime}, or {@code null} if the format cannot parse the input successfully.","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    static public LocalTime getTime(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"        String[] timeString \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"            return LocalTime.parse(timeString[1], formatter);","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        } catch (DateTimeParseException format) {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"            return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":55}},{"path":"src/main/java/Duke/activityAndUtility/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" * The {@code Deadline} class represents a deadline activity, implementing the {@link Activity} interface. It encapsulates","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":" * the status, name, and due date and time of a task. This class is designed to manage deadlines, allowing for them to be","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":" * printed, named, and marked as complete or incomplete.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"public class Deadline implements Activity {","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"    List\u003cString\u003e act;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    LocalDate date;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"    LocalTime time;","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a new {@code Deadline} instance from the given status, name, and date and time string.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"     * The date and time string is parsed to set the {@code LocalDate} and {@code LocalTime} fields.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"     * @param status     The initial status of the deadline (e.g., completed or not).","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     * @param name       The name or description of the deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"     * @param dateAndTime The combined date and time string for the deadline, which will be parsed to set the deadline\u0027s date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    public Deadline(String status, String name, String dateAndTime) {","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        act \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"        act.add(status); // Status","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"        act.add(name); // Task name","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"        act.add(dateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"        LocalDate date \u003d DateTimeFormat.getDate(dateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        LocalTime time \u003d DateTimeFormat.getTime(dateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        this.date \u003d date;","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        this.time \u003d time;","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"     * Prints the activity\u0027s details, including its status, name, and due date and time. If the date and time are not null,","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     * they are formatted and printed; otherwise, the raw input string is printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"    public void printActivity() {","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"        if (date !\u003d null \u0026\u0026 time !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"            String dateOutput \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"            String timeOutput \u003d time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"            System.out.format(\"\\t\\t [D][%s]%s(by: %s, %s)%n\", act.get(0), act.get(1), dateOutput, timeOutput);","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"            System.out.format(\"\\t\\t [D][%s]%s(by: %s)%n\", act.get(0), act.get(1), act.get(2));","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"     * Returns the name or description of the deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"     * @return A {@code String} representing the name of the deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"    public String getName() {","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        return act.get(1);","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"     * Marks the deadline as complete or incomplete based on the input. If the input is \"mark\", the status is set to a","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"     * checkmark (indicating completion). If the input is \"unmark\", the status is set to \"X\" (indicating not completed).","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"     * After marking, the updated activity details are printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"     * @param input A {@code String} indicating whether to mark the deadline as completed (\"mark\")","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"     *              or not completed (\"unmark\").","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"    public void mark(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"        if (Objects.equals(input, \"mark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"âˆš\");","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"        } else if (Objects.equals(input, \"unmark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"X\");","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"        System.out.format(\"\\t%sed:%n\", input);","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"        printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":82}},{"path":"src/main/java/Duke/activityAndUtility/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" * The {@code Event} class represents an event activity, implementing the {@link Activity} interface. It encapsulates","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":" * the status, name, start date and time, and end date and time of an event. This class is designed to manage events,","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":" * allowing for them to be printed, named, and marked as complete or incomplete. It ensures that the event\u0027s start","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":" * date and time are logically before its end date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"public class Event implements Activity {","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    List\u003cString\u003e act;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"    LocalDate startDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"    LocalDate endDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    LocalTime startTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    LocalTime endTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a new {@code Event} instance with the given status, name, start date and time, and end date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"     * Parses the start and end date,time strings to set the corresponding {@code LocalDate} and {@code LocalTime} fields.","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"     * Validates that the start date and time are before the end, throwing a {@code RuntimeException} if not.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"     * @param status            The initial status of the event (e.g., completed or not).","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"     * @param name              The name or description of the event.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"     * @param startDateAndTime  The start date and time string for the event, to be parsed.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     * @param endDateAndTime    The end date and time string for the event, to be parsed.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * @throws RuntimeException if the end date is before the start date.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    public Event(String status, String name, String startDateAndTime, String endDateAndTime) {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        act \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        act.add(status); // Status","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        act.add(name); // Event name","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"        act.add(startDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"        act.add(endDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        LocalDate startDate \u003d DateTimeFormat.getDate(startDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"        LocalTime startTime \u003d DateTimeFormat.getTime(startDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"        LocalDate endDate \u003d DateTimeFormat.getDate(endDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        LocalTime endTime \u003d DateTimeFormat.getTime(endDateAndTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"        if (startDate !\u003d null \u0026\u0026 endDate !\u003d null) {","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"            if (startDate.isAfter(endDate)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"                throw new RuntimeException(\"Finish date ahead of start date\");","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"            } else if (startDate.isEqual(endDate)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"                if (startTime !\u003d null \u0026\u0026 endTime !\u003d null \u0026\u0026 startTime.isAfter(endTime)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"                    throw new RuntimeException (\"Finish time ahead of start time\");","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"                }","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"     * Prints the event\u0027s details, including its status, name, and start and end dates and times.","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"     * If the start and end dates and times are not null, they are formatted and printed; otherwise,","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"     * the raw input strings are printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"    public void printActivity() {","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"        if (startDate !\u003d null \u0026\u0026 startTime !\u003d null \u0026\u0026 endDate !\u003d null \u0026\u0026 endTime !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"            String startDateOutput \u003d startDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"            String startTimeOutput \u003d startTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"            String endDateOutput \u003d endDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"            String endTimeOutput \u003d endTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"            System.out.format(\"\\t\\t [E][%s]%s(from: %s %s to: %s %s)%n\",","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"                    act.get(0), act.get(1), startDateOutput, startTimeOutput, endDateOutput, endTimeOutput);","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"            System.out.format(\"\\t\\t [E][%s]%s(%s %s)%n\",","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"                    act.get(0), act.get(1), act.get(2), act.get(3));","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"     * Returns the name or description of the event.","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"     * @return A {@code String} representing the name of the event.","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"    public String getName() {","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"        return act.get(1);","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"     * Marks the event as complete or incomplete based on the input. If the input is \"mark\", the status is set to a","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"SeaHogs"},"content":"     * checkmark (indicating completion). If the input is \"unmark\", the status is set to an \"X\" (indicating not completed).","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"SeaHogs"},"content":"     * After marking, the updated event details are printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"SeaHogs"},"content":"     * @param input A {@code String} indicating whether to mark the event as completed (\"mark\") or not completed (\"unmark\").","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"SeaHogs"},"content":"    public void mark(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"SeaHogs"},"content":"        if (Objects.equals(input, \"mark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"âˆš\");","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"SeaHogs"},"content":"        } else if (Objects.equals(input, \"unmark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"X\");","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"SeaHogs"},"content":"        System.out.format(\"\\t%sed:%n\", input);","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"SeaHogs"},"content":"        printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":109}},{"path":"src/main/java/Duke/activityAndUtility/LocalList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.io.File;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" * The {@code LocalList} class is responsible for managing the persistence of {@link Activity} objects to a local file.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" * It supports loading activities from a specified file and saving activities back to that file. This class enables","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":" * the application to maintain state across sessions by reading from and writing to a file system.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"public class LocalList {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"    private final String filePath;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a {@code LocalList} instance with the specified file path for loading and saving activities.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     * @param filePath the path to the file used for storing activity data.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    public LocalList(String filePath) {","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"     * Loads the list of {@link Activity} objects from the file specified by {@code filePath}. This method parses","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"     * the file line by line, creating instances of {@code Todo}, {@code Deadline}, and {@code Event} based on the","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"     * information in each line. It expects lines to be formatted with parts separated by \" | \".","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     * @return an {@code ArrayList\u003cActivity\u003e} containing all activities loaded from the file. If the file is not found","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * or is corrupted, it prints an error message and returns an empty list.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    public ArrayList\u003cActivity\u003e load() {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        ArrayList\u003cActivity\u003e loadedActivities \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"                Activity activity \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"                switch (parts[0]) {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"                    case \"T\":","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"                        activity \u003d new Todo(parts[1], parts[2]);","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"                        break;","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"                    case \"D\":","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"                        activity \u003d new Deadline(parts[1], parts[2], parts[3]);","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"                        break;","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"                    case \"E\":","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"                        activity \u003d new Event(parts[1], parts[2], parts[3], parts[4]);","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"                        break;","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"                loadedActivities.add(activity);","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"            scanner.close();","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"File is not there or has been corrupted\");","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        return loadedActivities;","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"     * Saves the provided list of {@link Activity} objects to the file specified by {@code filePath}. It formats","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"     * each activity into a string according to its type (Todo, Deadline, Event) and writes each one as a line","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"     * in the file. If an error occurs during the save operation, it prints an error message.","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"     * @param activities the list of {@link Activity} objects to be saved to the file.","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    public void save(ArrayList\u003cActivity\u003e activities) {","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"            FileWriter writer \u003d new FileWriter(filePath);","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"            for (Activity activity : activities) {","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"                if (activity instanceof Todo) {","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"                    writer.write(\"T | \" + ((Todo) activity).act.get(0) + \" | \" + ((Todo) activity).act.get(1) + \"\\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"                } else if (activity instanceof Deadline) {","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"                    writer.write(\"D | \" + ((Deadline) activity).act.get(0) + \" | \" + ((Deadline) activity).act.get(1)","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"                            + \" | \" + ((Deadline) activity).act.get(2) + \"\\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"                } else if (activity instanceof Event) {","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"                    writer.write(\"E | \" + ((Event) activity).act.get(0) + \" | \" + ((Event) activity).act.get(1)","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"                            + \" | \" + ((Event) activity).act.get(2) + \" | \" + ((Event) activity).act.get(3) + \"\\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"            writer.close();","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"An error occurred while saving the activities.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":89}},{"path":"src/main/java/Duke/activityAndUtility/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":" * The {@code Todo} class represents a to-do task, implementing the {@link Activity} interface. It encapsulates","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" * a simple task with a status indicating whether the task is completed or not, and a name describing the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"public class Todo implements Activity {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"    List\u003cString\u003e act;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"     * Constructs a new {@code Todo} instance with the specified status and name.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * @param status The initial status of the to-do task, typically indicating completion (e.g., \"âˆš\" for done, \"X\" for not done).","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * @param name The name or description of the to-do task.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"    public Todo(String status, String name) {","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"        act \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"        act.add(status); // Status","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        act.add(name); // Task name","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"     * Prints the to-do task\u0027s details, including its status and name.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"     * The task is displayed in a formatted string that highlights its completion status and description.","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"    public void printActivity() {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"        System.out.format(\"\\t\\t [T][%s]%s%n\", act.get(0), act.get(1));","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"     * Returns the name or description of the to-do task.","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"     * @return A {@code String} representing the name of the to-do task.","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    public String getName() {","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"        return act.get(1);","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"     * Marks the to-do task as complete or incomplete based on the input. If the input is \"mark\", the status is set to a","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"     * checkmark (indicating completion). If the input is \"unmark\", the status is set to an \"X\" (indicating not completed).","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"     * After marking, the updated task details are printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"     * @param input A {@code String} indicating whether to mark the to-do task as completed (\"mark\") or not completed (\"unmark\").","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"    public void mark(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"        if (Objects.equals(input, \"mark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"âˆš\");","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"        } else if (Objects.equals(input, \"unmark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"            act.set(0, \"X\");","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        System.out.format(\"\\t%sed:%n\", input);","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"        printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"SeaHogs":62}},{"path":"src/main/java/Duke/activityAndUtility/searchList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import java.util.List;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":" * Provides utility methods to search within a list of strings and to print","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":" * activities from another list based on search results.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"public class searchList {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"     * Finds and returns the indices of all strings in a list that contain a given substring.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"     * @param list   The ArrayList of strings to search through.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"     * @param substr The substring to search for within each string of the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"     * @return A List of integers representing the indices of strings that contain the substring.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"    public static List\u003cInteger\u003e findIndicesOfSubstring(ArrayList\u003cString\u003e list, String substr) {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"            if (list.get(i).contains(substr)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"                indices.add(i); // Add index to the list if the string contains the substring","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"        return indices;","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"     * Prints activities from an activity list that match a given substring search in a parallel search table.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     * This method utilizes {@code findIndicesOfSubstring} to identify matching indices and then prints","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * corresponding activities.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"     * @param searchTable  An ArrayList of strings used as a search table, typically containing searchable","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"     *                     attributes of activities.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"     * @param activityList An ArrayList of Activity objects from which matched activities will be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"     * @param substr       The substring to search for within the searchTable.","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"    public static void printList(ArrayList\u003cString\u003e searchTable, ArrayList\u003cActivity\u003e activityList, String substr) {","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"        List\u003cInteger\u003e indices \u003d findIndicesOfSubstring(searchTable, substr); //get the index of required string","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"        if (!indices.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"            System.out.format(\"\\tHere\u0027s where I have: \\n\");","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"            for (int i : indices) {","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"                activityList.get(i).printActivity();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\tNothing can be found.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"SeaHogs":54}},{"path":"src/main/java/Duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.main;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import Duke.activityAndUtility.*;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" * The {@code Duke} class serves as the entry point for the Duke application, a text-based task management system.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" * This class handles user input, allowing users to add, delete, mark, unmark tasks, and list all tasks. It interacts","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":" * with the {@link ActivityList} class to perform these operations and maintains a simple command-line interface for","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":" * user interaction.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"public class Duke {","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * The main method serves as the application\u0027s entry point. It initializes the application, displays a welcome","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     * message, and enters a loop to accept and process user commands until the \"bye\" command is entered.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"     * @param args Command line arguments passed to the application (not used).","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"        ActivityList list \u003d new ActivityList();","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\tHello! I\u0027m Dad\\n\\tWhat can I do for you?\");","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"        while (true) {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"            //extracting first word before space","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"            String firstWord \u003d input.split(\" \")[0];","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"            if (Objects.equals(firstWord, \"list\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"                list.printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"            } else if (Objects.equals(firstWord, \"delete\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"                list.deleteActivity(input.substring(input.indexOf(\" \") + 1));","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"            } else if (Objects.equals(firstWord, \"bye\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"            } else if (Objects.equals(firstWord, \"mark\") || Objects.equals(firstWord, \"unmark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"                list.markActivity(firstWord, input.substring(input.indexOf(\" \") + 1));","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"            } else if (Objects.equals(firstWord, \"find\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"                //extracting second word for search","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"                String substr \u003d input.split(\" \", 2)[1];","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"                list.findActivity(substr);","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"            } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"                list.addActivity(firstWord, input);","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\tLater\");","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"     * The {@code ActivityList} class manages a list of {@link Activity} objects. It supports adding, printing,","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"     * marking, and deleting activities. This class interacts with a local file system through {@link LocalList}","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"     * to persist activities across sessions.","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"    static class ActivityList {","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        private final ArrayList\u003cActivity\u003e activities;","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"        private final ArrayList\u003cString\u003e searchTable;","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"        private final LocalList localList;","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"         * Constructs an {@code ActivityList} instance. It initializes the activity list by loading stored activities","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"         * from a file, and prepares a search table for quick access to activities by name.","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"        public ActivityList() {","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"            String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"            this.localList \u003d new LocalList(filePath);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"            this.activities \u003d localList.load();","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"            this.searchTable \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"            for (Activity activity : activities) {","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"                searchTable.add(activity.getName());","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"         * Adds a new activity of the specified type with the given input to the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"         * It supports adding todos, deadlines, and events, parsing the input accordingly.","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"         * After adding an activity, it saves the updated list to the file.","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"         *","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"         * @param type  The type of activity to add (\"todo\", \"deadline\", or \"event\").","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"         * @param input The detailed input string for creating the activity, including its description and, if applicable,","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"         *              its deadline or event timings.","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"         * @throws RuntimeException If the input format is invalid or the activity type is unknown.","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"        public void addActivity(String type, String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"            Activity activity;","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"            int index \u003d input.indexOf(\" \") + 1;","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"            String subStr \u003d input.substring(index);","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"SeaHogs"},"content":"            switch (type) {","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"SeaHogs"},"content":"                case \"todo\":","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"SeaHogs"},"content":"                    activity \u003d new Todo(\"X\", subStr); // Pass only the relevant substring","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"SeaHogs"},"content":"                    break;","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"SeaHogs"},"content":"                case \"deadline\":","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"SeaHogs"},"content":"                    String[] deadlineParts \u003d subStr.split(\" /\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"SeaHogs"},"content":"                    if (deadlineParts.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"SeaHogs"},"content":"                        activity \u003d new Deadline(\"X\", deadlineParts[0], deadlineParts[1]);","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"SeaHogs"},"content":"                    } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"SeaHogs"},"content":"                        throw new RuntimeException(\"Invalid deadline format\");","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"SeaHogs"},"content":"                    }","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"SeaHogs"},"content":"                    break;","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"SeaHogs"},"content":"                case \"event\":","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"SeaHogs"},"content":"                    String[] eventParts \u003d subStr.split(\" /\", 3);","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"SeaHogs"},"content":"                    if (eventParts.length \u003d\u003d 3) {","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"SeaHogs"},"content":"                        activity \u003d new Event(\"X\", eventParts[0], eventParts[1], eventParts[2]);","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"SeaHogs"},"content":"                    } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":112,"author":{"gitId":"SeaHogs"},"content":"                        throw new RuntimeException(\"Invalid event format\");","lastModifiedDate":"2024-02-03"},{"lineNumber":113,"author":{"gitId":"SeaHogs"},"content":"                    }","lastModifiedDate":"2024-02-03"},{"lineNumber":114,"author":{"gitId":"SeaHogs"},"content":"                    break;","lastModifiedDate":"2024-02-03"},{"lineNumber":115,"author":{"gitId":"SeaHogs"},"content":"                default:","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"SeaHogs"},"content":"                    throw new RuntimeException(\"Unknown activity type: \" + type);","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":118,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"SeaHogs"},"content":"            this.searchTable.add(activity.getName());","lastModifiedDate":"2024-02-03"},{"lineNumber":120,"author":{"gitId":"SeaHogs"},"content":"            this.activities.add(activity);","lastModifiedDate":"2024-02-03"},{"lineNumber":121,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":123,"author":{"gitId":"SeaHogs"},"content":"            System.out.print(\"\\tadded: \");","lastModifiedDate":"2024-02-03"},{"lineNumber":124,"author":{"gitId":"SeaHogs"},"content":"            activity.printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":126,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"SeaHogs"},"content":"            localList.save(activities);","lastModifiedDate":"2024-02-04"},{"lineNumber":128,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":131,"author":{"gitId":"SeaHogs"},"content":"         * Prints all activities in the list. Each activity is printed with its index in the list, followed by its details.","lastModifiedDate":"2024-02-04"},{"lineNumber":132,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":133,"author":{"gitId":"SeaHogs"},"content":"        public void printActivity() {","lastModifiedDate":"2024-02-03"},{"lineNumber":134,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":135,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\tList: \");","lastModifiedDate":"2024-02-03"},{"lineNumber":136,"author":{"gitId":"SeaHogs"},"content":"            for (int i \u003d 0; i \u003c activities.size(); i++) {","lastModifiedDate":"2024-02-03"},{"lineNumber":137,"author":{"gitId":"SeaHogs"},"content":"                System.out.format(\"%s. \", i + 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":138,"author":{"gitId":"SeaHogs"},"content":"                activities.get(i).printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":139,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":140,"author":{"gitId":"SeaHogs"},"content":"            System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":141,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":142,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":143,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":144,"author":{"gitId":"SeaHogs"},"content":"         * Marks an activity identified by a key as complete or incomplete based on the input command.","lastModifiedDate":"2024-02-04"},{"lineNumber":145,"author":{"gitId":"SeaHogs"},"content":"         * It searches for the activity in the list and applies the mark operation.","lastModifiedDate":"2024-02-04"},{"lineNumber":146,"author":{"gitId":"SeaHogs"},"content":"         *","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"SeaHogs"},"content":"         * @param input The command indicating whether to mark the activity as complete (\"mark\") or incomplete (\"unmark\").","lastModifiedDate":"2024-02-04"},{"lineNumber":148,"author":{"gitId":"SeaHogs"},"content":"         * @param key   The name or identifier of the activity to be marked.","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"SeaHogs"},"content":"         * @throws RuntimeException If the activity cannot be found in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"SeaHogs"},"content":"        public void markActivity(String input, String key) {","lastModifiedDate":"2024-02-03"},{"lineNumber":152,"author":{"gitId":"SeaHogs"},"content":"            if (searchTable.contains(key)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":153,"author":{"gitId":"SeaHogs"},"content":"                int index \u003d this.searchTable.indexOf(key);","lastModifiedDate":"2024-02-03"},{"lineNumber":154,"author":{"gitId":"SeaHogs"},"content":"                this.activities.get(index).mark(input);","lastModifiedDate":"2024-02-03"},{"lineNumber":155,"author":{"gitId":"SeaHogs"},"content":"            } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":156,"author":{"gitId":"SeaHogs"},"content":"                throw new RuntimeException(\"can\u0027t find activity\");","lastModifiedDate":"2024-02-03"},{"lineNumber":157,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":158,"author":{"gitId":"SeaHogs"},"content":"            localList.save(activities);","lastModifiedDate":"2024-02-04"},{"lineNumber":159,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":160,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":161,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":162,"author":{"gitId":"SeaHogs"},"content":"         * Deletes an activity from the list based on its index.","lastModifiedDate":"2024-02-04"},{"lineNumber":163,"author":{"gitId":"SeaHogs"},"content":"         * The method also handles invalid indices or input formats gracefully.","lastModifiedDate":"2024-02-04"},{"lineNumber":164,"author":{"gitId":"SeaHogs"},"content":"         *","lastModifiedDate":"2024-02-04"},{"lineNumber":165,"author":{"gitId":"SeaHogs"},"content":"         * @param input The string representation of the index (1-based) of the activity to delete.","lastModifiedDate":"2024-02-04"},{"lineNumber":166,"author":{"gitId":"SeaHogs"},"content":"         * @throws RuntimeException If the input is not a valid integer or the index is out of bounds.","lastModifiedDate":"2024-02-04"},{"lineNumber":167,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":168,"author":{"gitId":"SeaHogs"},"content":"        public void deleteActivity(String input) {","lastModifiedDate":"2024-02-03"},{"lineNumber":169,"author":{"gitId":"SeaHogs"},"content":"            try {","lastModifiedDate":"2024-02-03"},{"lineNumber":170,"author":{"gitId":"SeaHogs"},"content":"                int index \u003d Integer.parseInt(input);","lastModifiedDate":"2024-02-03"},{"lineNumber":171,"author":{"gitId":"SeaHogs"},"content":"                Activity removed \u003d activities.remove(index - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":172,"author":{"gitId":"SeaHogs"},"content":"                searchTable.remove(index - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":173,"author":{"gitId":"SeaHogs"},"content":"                System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":174,"author":{"gitId":"SeaHogs"},"content":"                System.out.format(\"\\tI have removed: \");","lastModifiedDate":"2024-02-03"},{"lineNumber":175,"author":{"gitId":"SeaHogs"},"content":"                removed.printActivity();","lastModifiedDate":"2024-02-03"},{"lineNumber":176,"author":{"gitId":"SeaHogs"},"content":"                System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":177,"author":{"gitId":"SeaHogs"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":178,"author":{"gitId":"SeaHogs"},"content":"                System.out.println(\"The string does not contain a valid integer.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":179,"author":{"gitId":"SeaHogs"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":180,"author":{"gitId":"SeaHogs"},"content":"                System.out.println(\"to long or too short won\u0027t do the job\");","lastModifiedDate":"2024-02-03"},{"lineNumber":181,"author":{"gitId":"SeaHogs"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":182,"author":{"gitId":"SeaHogs"},"content":"            localList.save(activities);","lastModifiedDate":"2024-02-04"},{"lineNumber":183,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":184,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":185,"author":{"gitId":"SeaHogs"},"content":"        /**","lastModifiedDate":"2024-02-04"},{"lineNumber":186,"author":{"gitId":"SeaHogs"},"content":"         * Searches for and prints activities that match a given substring.","lastModifiedDate":"2024-02-04"},{"lineNumber":187,"author":{"gitId":"SeaHogs"},"content":"         * Utilizes the {@code searchList.printList} method to find and display","lastModifiedDate":"2024-02-04"},{"lineNumber":188,"author":{"gitId":"SeaHogs"},"content":"         * activities from a list that contain the specified substring.","lastModifiedDate":"2024-02-04"},{"lineNumber":189,"author":{"gitId":"SeaHogs"},"content":"         *","lastModifiedDate":"2024-02-04"},{"lineNumber":190,"author":{"gitId":"SeaHogs"},"content":"         * @param substr The substring to search for within the activity names or descriptions.","lastModifiedDate":"2024-02-04"},{"lineNumber":191,"author":{"gitId":"SeaHogs"},"content":"         */","lastModifiedDate":"2024-02-04"},{"lineNumber":192,"author":{"gitId":"SeaHogs"},"content":"        public void findActivity(String substr) {","lastModifiedDate":"2024-02-04"},{"lineNumber":193,"author":{"gitId":"SeaHogs"},"content":"            searchList.printList(searchTable, activities, substr);","lastModifiedDate":"2024-02-04"},{"lineNumber":194,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":195,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":196,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-03"},{"lineNumber":197,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":198,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"SeaHogs":198}},{"path":"src/test/java/Duke/activityAndUtility/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":" * The {@code EventTest} class contains unit tests for the {@code Event} class to verify its functionality.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":" * It tests the behavior of marking an event as completed or not completed, and checks the handling of invalid event dates.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"public class EventTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"    private Event event;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"     * Sets up a test environment with a valid event before each test method is executed.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"     * This method initializes an {@code Event} object with predefined start and end date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":"    @BeforeEach","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":"    public void setUp() {","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":"        // Assuming DateTimeFormat.getDate and .getTime are correctly parsing date and time respectively","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"        event \u003d new Event(\"X\", \"Test Event\",","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"                \"2022-10-01 14:00\", \"2022-10-01 16:00\");","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"     * Tests marking an event as done. It verifies that the status of the event is correctly updated to \"âˆš\".","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"    void testMarkAsDone() {","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"        event.mark(\"mark\");","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(\"âˆš\", event.act.get(0), \"Event should be marked as done\");","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"     * Tests marking an event as not done. It verifies that the status of the event is correctly updated to \"X\".","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"    void testMarkAsUndone() {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"        event.mark(\"unmark\");","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(\"X\", event.act.get(0), \"Event should be marked as undone\");","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"     * Tests the exception thrown when an event\u0027s end date is set before its start date.","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"     * It verifies that the correct exception and message are thrown.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"    void testExceptionMessage() {","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        String expectedMessage \u003d \"Finish date ahead of start date\";","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"        RuntimeException thrown \u003d assertThrows(RuntimeException.class, () -\u003e {","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"            Event event \u003d new Event(\"X\", \"Test Event\",","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"                    \"2024-10-02 14:00\", \"2024-10-01 16:00\");","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"            throw new RuntimeException(\"Finish date ahead of start date\");","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        }, \"The expected exception was not thrown.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"        // Verify if the exception message is what you expect","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        assertEquals(expectedMessage, thrown.getMessage(), \"The error message is not as expected.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"SeaHogs":64}},{"path":"src/test/java/Duke/activityAndUtility/LocalListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SeaHogs"},"content":"package Duke.activityAndUtility;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"SeaHogs"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"SeaHogs"},"content":"import java.io.File;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"SeaHogs"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"SeaHogs"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"SeaHogs"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"SeaHogs"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"SeaHogs"},"content":"import java.util.List;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"SeaHogs"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"SeaHogs"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"SeaHogs"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"SeaHogs"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"SeaHogs"},"content":" * The {@code LocalListTest} class contains unit tests for the {@code LocalList} class, verifying its ability to","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"SeaHogs"},"content":" * correctly save and load {@link Activity} objects to and from a file. It tests the functionality with valid data","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"SeaHogs"},"content":" * and also checks the behavior when encountering invalid file paths.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"SeaHogs"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"SeaHogs"},"content":"public class LocalListTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"SeaHogs"},"content":"    private LocalList localList;","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"SeaHogs"},"content":"    private ArrayList\u003cActivity\u003e activities;","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"SeaHogs"},"content":"    String tempDir;","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"SeaHogs"},"content":"     * Sets up the test environment before each test. This includes creating a {@code LocalList} instance","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"SeaHogs"},"content":"     * with a temporary directory for testing file operations.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"SeaHogs"},"content":"    @BeforeEach","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"SeaHogs"},"content":"    public void setUp() {","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"SeaHogs"},"content":"        tempDir \u003d \"duke.txt\";","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"SeaHogs"},"content":"        localList \u003d new LocalList(tempDir);","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"SeaHogs"},"content":"     * Tests the ability of the {@code LocalList} to save a list of activities to a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"SeaHogs"},"content":"     * Verifies that the file contains the correct representations of the activities after saving.","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"SeaHogs"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"SeaHogs"},"content":"     * @throws IOException if an I/O error occurs during file writing or reading.","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"SeaHogs"},"content":"    public void testSaveActivities() throws IOException {","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"SeaHogs"},"content":"        activities \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"SeaHogs"},"content":"        activities.add(new Todo(\"âˆš\", \"Todo task\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"SeaHogs"},"content":"        activities.add(new Deadline(\"X\", \"Deadline task\", \"2024-10-01 1400\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"SeaHogs"},"content":"        activities.add(new Event(\"X\", \"Event task\", \"2024-10-01 1400\", \"2024-10-01 1600\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"SeaHogs"},"content":"        // Save activities to file","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"SeaHogs"},"content":"        localList.save(activities);","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"SeaHogs"},"content":"        // Read file content","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"SeaHogs"},"content":"        File file \u003d new File(tempDir);","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"SeaHogs"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"SeaHogs"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"SeaHogs"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"SeaHogs"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"SeaHogs"},"content":"            lines.add(line);","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"SeaHogs"},"content":"        // Verify the file content","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"SeaHogs"},"content":"        assertTrue(lines.contains(\"T | âˆš | Todo task\"),","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"SeaHogs"},"content":"                \"File should contain the marked saved Todo task.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"SeaHogs"},"content":"        assertTrue(lines.contains(\"D | X | Deadline task | 2024-10-01 1400\"),","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"SeaHogs"},"content":"                \"File should contain the saved Deadline task.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"SeaHogs"},"content":"        assertTrue(lines.contains(\"E | X | Event task | 2024-10-01 1400 | 2024-10-01 1600\"),","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"SeaHogs"},"content":"                \"File should contain the saved Event task.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"SeaHogs"},"content":"     * Tests the behavior of the {@code LocalList} when attempting to load activities from an invalid file path.","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"SeaHogs"},"content":"     * Expects an {@code IOException} to be thrown to indicate the file cannot be accessed.","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"SeaHogs"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"SeaHogs"},"content":"    public void testInvalidFile() {","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"SeaHogs"},"content":"        activities \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"SeaHogs"},"content":"        String expectedMessage \u003d \"Finish date ahead of start date\";","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"SeaHogs"},"content":"        IOException thrown \u003d assertThrows(IOException.class, ()-\u003e {","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"SeaHogs"},"content":"            new LocalList(\"./smw/ImNotThere.txt\").load();","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"SeaHogs"},"content":"            throw new IOException(\"File is not there or has been corrupted\");","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"SeaHogs"},"content":"        }, \"The expected exception was not thrown.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"SeaHogs"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"SeaHogs"},"content":"     * Cleans up the test environment after each test. This includes clearing the list of activities and ensuring","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"SeaHogs"},"content":"     * the test file is reset, preventing test data persistence between tests.","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"SeaHogs"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"SeaHogs"},"content":"    @AfterEach","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"SeaHogs"},"content":"    public void tearDown() {","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"SeaHogs"},"content":"        if (!activities.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"SeaHogs"},"content":"            activities.clear();","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"SeaHogs"},"content":"            localList.save(activities);","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"SeaHogs"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"SeaHogs"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"SeaHogs"},"content":"}","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"SeaHogs"},"content":"","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"SeaHogs":98}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"SeaHogs"},"content":"java -classpath ..\\bin Duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"SeaHogs":1}}]
