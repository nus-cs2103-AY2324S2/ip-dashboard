{"authorDailyContributionsMap":{"hjungwoo01":[{"date":"2024-01-22","commitResults":[{"hash":"203b4e00ba3ae88df971ce76e3ba0f104cfde3d0","isMergeCommit":false,"messageTitle":"Rename chatbot, add user greeting, and implement program exit feature","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":6}}},{"hash":"26766681c1e073f18a137f69887ab4996f1b0a2f","isMergeCommit":false,"messageTitle":"Add echo feature to the chatbot program","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":1}}},{"hash":"2cccd575f704130cd3d0c152b83cc75a8d6dc6dd","isMergeCommit":false,"messageTitle":"Add \u0027list\u0027 feature to display previously entered user responses","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":8}}}]},{"date":"2024-01-23","commitResults":[{"hash":"79fae651dc7379caacd0a82dffa21a725064e6d1","isMergeCommit":false,"messageTitle":"Implemented Task class and added mark/unmark task functionality","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":44,"deletions":7}}},{"hash":"5a2133a14d748393a0018b1dedea804342322f3b","isMergeCommit":false,"messageTitle":"Implemented Todo, Event, Deadline functionalities","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":62,"deletions":5}}},{"hash":"4e6031cd2153099b9a8ac962e2b99ec9d6404cbd","isMergeCommit":false,"messageTitle":"Added automated text UI testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":11,"deletions":0}}},{"hash":"3a8c2fdb31fd8d230233149b6aee897120a980e8","isMergeCommit":false,"messageTitle":"Added custom DukeException handler class for handling unusual user inputs","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":118,"deletions":40}}}]},{"date":"2024-01-24","commitResults":[{"hash":"73b527ba6ffe48b929a05d55587c6970d49309e4","isMergeCommit":false,"messageTitle":"Added task deletion feature","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":1}}}]},{"date":"2024-01-26","commitResults":[{"hash":"30c489f6ef6516d84f46751de68f4bc8138a5922","isMergeCommit":false,"messageTitle":"Implemented task history saving and loading from previous sessions","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":2}}},{"hash":"19a4f434dcda8edf1d899b4add019265d6b2f173","isMergeCommit":true,"messageTitle":"Merge Level 7 Implementation into master","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}}]},{"date":"2024-01-28","commitResults":[{"hash":"518a4cb0141d396bbd21be8e5120739a0707cde9","isMergeCommit":false,"messageTitle":"Implement LocalDateTime in Deadline and Event classes","messageBody":"Enhance Deadline and Event classes for date-time handling\n\nBoth Deadline and Event classes were previously using String types\nfor date and time management. This was inconsistent and inefficient\nfor handling date-time operations.\n\nThis commit:\n- Modifies the Deadline class to parse and store dates as LocalDateTime\n  objects instead of strings, aligning with Java\u0027s modern date-time API.\n- Updates the Event class similarly, handling both start and end\n  times as LocalDateTime instances.\n- Refactors the loadTasks method in FileHandler to parse date-time strings\n  into LocalDateTime objects for creating Deadline and Event instances.\n\nThese changes ensure a consistent and reliable approach to date-time\nhandling across the application.\n","fileTypesAndContributionMap":{"java":{"insertions":117,"deletions":37}}},{"hash":"cb1efb92c1a205dabd7418174ec27484f823dc32","isMergeCommit":true,"messageTitle":"Merge branch-Level-8 into master","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"c7e305075ef66398fbd631a8fc0064e9a963625c","isMergeCommit":false,"messageTitle":"Refactor codebase for enhanced OOP structure","messageBody":"Implement more OOP principles in project architecture\n\nThe previous implementation had intermingled functionalities in a few classes, which made the code less modular and harder to maintain.\n\nThis commit:\n- Introduces the Ui class to handle all user interactions, encapsulating all UI-related logic.\n- Creates the Storage class to manage file operations, specifically for loading and saving tasks. This separation of concerns improves the readability and maintainability of file handling logic.\n- Develops the Parser class to interpret user commands, making the command parsing logic more modular and testable.\n- Establishes the TaskList class containing and managing the task list, providing a more focused approach to task management.\n- Revises the Duke main class to utilize these new classes, significantly decluttering its structure and improving overall code quality.\n\nFurthermore, as part of the stretch goal:\n- Command classes such as AddCommand, DeleteCommand, and ExitCommand are extracted. These classes inherit from an abstract Command class, allowing for a more scalable and extensible command handling system in the application.\n\nThese modifications align the project more closely with Object-Oriented Programming principles, enhancing code readability, maintainability, and scalability.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":406,"deletions":202}}},{"hash":"488300dbc471e4a9b00e234f1a2244eed1a446dd","isMergeCommit":false,"messageTitle":"Refactor project structure with package organization","messageBody":"Organize classes into structured Java packages\n\nThe previous architecture had all classes placed in the default package, which, while functional, did not fully utilize the organizational benefits of Java packages. As the codebase grows, a more structured package organization becomes crucial for maintainability and clarity.\n\nThis commit:\n- Organizes all classes into a dedicated `duke` package, enhancing project structure.\n- Further segregates classes into sub-packages:`duke.task` and `duke.command`. This categorization aligns with each class\u0027s functionality.\n- Places task-related classes such as `Task`, `Todo`, `Deadline`, and `Event` into `duke.task`.\n- Groups command processing classes like `Command`, `AddCommand`, `DeleteCommand`, etc., into `duke.command`.\n\nThe `duke.Duke` main class is also updated to reflect these changes.\n\nBy arranging classes into distinct packages, the project now benefits from improved organization, easier navigation, and better encapsulation of related functionalities.\n\nThese changes are a step towards aligning the project more closely with established Java development practices, enhancing the overall design and scalability of the application.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":108,"deletions":15},"md":{"insertions":2,"deletions":2}}},{"hash":"2c3c42e30ca5d0054a8259276ab026e1039aa930","isMergeCommit":true,"messageTitle":"Merge branch-A-Packages into master","messageBody":"","fileTypesAndContributionMap":{}}]},{"date":"2024-01-29","commitResults":[{"hash":"bc8120d0debd3081cc81306190edd7074922f03d","isMergeCommit":true,"messageTitle":"Merge Gradle support into master","messageBody":"","tags":["A-JUnit","A-Gradle"],"fileTypesAndContributionMap":{}},{"hash":"fc03eeda5974dbb1df5b82082691964d4546a794","isMergeCommit":false,"messageTitle":"Add specific JUnit tests for AddCommand and Parser functionality","messageBody":"In this commit, we introduce targeted unit tests for two key components of our application, the AddCommand and Parser, enhancing the reliability and maintainability of our codebase.\n\nKey Implementations:\n1. AddCommandTest: This test class focuses on the functionality of the AddCommand. It includes tests for handling empty descriptions in \u0027todo\u0027 commands and validating the behavior of \u0027deadline\u0027 commands with both valid and invalid date-time formats. The tests ensure that AddCommand correctly processes valid inputs and throws DukeExceptions for invalid or incomplete inputs.\n\n   - addTodo_emptyDescription_throwsDukeException: Verifies that an empty description in a \u0027todo\u0027 command correctly triggers a DukeException.\n   - addDeadline_validDateTime_addsDeadline: Confirms that a valid \u0027deadline\u0027 command correctly adds a Deadline task to the TaskList.\n   - addDeadline_invalidDateTime_throwsDukeException: Ensures that an invalid date-time format in a \u0027deadline\u0027 command results in a DukeException.\n\n2. ParserTest: This test class assesses the Parser\u0027s ability to accurately parse \u0027todo\u0027 and \u0027deadline\u0027 commands into respective AddCommand objects.\n\n   - parse_validTodoCommand_returnsAddCommand: Checks that the Parser correctly interprets a valid \u0027todo\u0027 command.\n   - parse_validDeadlineCommand_returnsAddCommand: Verifies that the Parser accurately parses a valid \u0027deadline\u0027 command.\n\nBy implementing these tests, we significantly bolster the robustness of our command parsing and task addition processes. This initiative is a step forward in ensuring that our application behaves as expected under various input scenarios and correctly handles edge cases.\n\nNote: The tests employ stubbing of dependencies where necessary to focus solely on the class under test, providing clear, isolated validation of their respective functionalities.\n","fileTypesAndContributionMap":{"java":{"insertions":85,"deletions":0}}},{"hash":"63e74aeb7008b2c039418113d8c2a12ee537edfc","isMergeCommit":true,"messageTitle":"Merge branch-A-JUnit to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"9cc55a39c55572ff2da0e622cf28a3165effd40d","isMergeCommit":false,"messageTitle":"Package app as executable JAR","messageBody":"","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":11,"deletions":0}}},{"hash":"db081c6fa573a2face03ce60cce0c5e7c1a65d77","isMergeCommit":true,"messageTitle":"Merge branch-A-Jar","messageBody":"","tags":["v0.1"],"fileTypesAndContributionMap":{}},{"hash":"383c11770ff3921600f90723e1eaad266b6dd6af","isMergeCommit":false,"messageTitle":"Add comprehensive documentation and comments to codebase","messageBody":"In this commit, comprehensive documentation and comments have been introduced across the codebase, with a focus on improving code readability, maintainability, and understandability. The key enhancements include:\n\n1. Javadoc comments have been added for classes, methods, and fields, providing detailed descriptions of their purpose, parameters, and return values. This documentation serves as a valuable resource for developers working on the project and for those seeking to understand the code.\n2. In-code comments have been included where necessary to explain complex algorithms, data structures, and logic. These comments aim to make the code more transparent and assist developers in understanding the intricacies of the implementation.\n3. Naming conventions have been improved by refining variable and method names to adhere to best practices and follow a consistent naming convention throughout the codebase. This consistency enhances code clarity and reduces the likelihood of naming-related errors.\n4. Enhanced error handling documentation provides detailed explanations for error messages and exceptions, making it easier for developers to diagnose issues and troubleshoot errors effectively.\n\nThese documentation and commenting improvements aim to create a more accessible and developer-friendly codebase, facilitating collaboration, code maintenance, and the onboarding of new team members. Ultimately, these enhancements contribute to the overall quality and sustainability of the software project.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{"java":{"insertions":356,"deletions":6}}},{"hash":"bdad33af07742bfa5b029298d362c92a4fa00472","isMergeCommit":true,"messageTitle":"Merge branch-A-JavaDoc to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"9f655268f4c54c3a8c08b4ebfd26902737aecb61","isMergeCommit":false,"messageTitle":"Refactor codebase for compliance with coding standard","messageBody":"In this commit, the codebase has been refactored to align with the prescribed coding standard. Going forward, any new code additions will adhere strictly to the same coding standard, ensuring consistency and maintainability throughout the project.\n","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":37}}},{"hash":"78c65e73511f236b6e20fdb073ffd4b2e59ede0e","isMergeCommit":true,"messageTitle":"Merge branch-A-CodingStandard to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"6fdd2ff13bc77bb078d8cf98e19665e5737d193a","isMergeCommit":false,"messageTitle":"Add FindCommand to search for tasks by keyword","messageBody":"This commit introduces a new functionality, `FindCommand`, to the Duke application. The `FindCommand` allows users to search for tasks containing a specific keyword in their descriptions. The following changes have been made:\n\n- Added `FindCommand.java` to represent the command for task searching.\n- Implemented the execution logic for `FindCommand`, which filters tasks based on the provided keyword and displays matching tasks to the user.\n- Ensured proper error handling for cases where the keyword is missing.\n- Followed coding standards for commit message format, subject length, and imperative mood.\n\nWith this new feature, users can easily find and retrieve tasks that match their search criteria, enhancing the usability of the Duke application.\n","tags":["Level-9"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":0}}},{"hash":"fbbf2229be3258c63b6f52a928fa74f6bab8583e","isMergeCommit":true,"messageTitle":"Merge branch-Level-9 to master","messageBody":"","fileTypesAndContributionMap":{}}]}]},"authorFileTypeContributionMap":{"hjungwoo01":{"java":1228,"md":2,"fxml":0,"sh":0,"bat":0,"gradle":11,"txt":11}},"authorContributionVariance":{"hjungwoo01":83381.9},"authorDisplayNameMap":{"hjungwoo01":"CS2103T-T17-2 HONG.. WOO"}}
