[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"# Riri project template","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"3. After that, locate the `src/main/java/Riri.java` file, right-click it, and choose `Run Riri.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":2,"-":22}},{"path":"src/main/java/Riri/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"import jdk.jshell.execution.LoaderDelegate;","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    protected String by;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, String by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        this.byDate \u003d LocalDate.parse(by);","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, LocalDate by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        this.byDate \u003d by;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d byDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    /** Static method to create a Deadline object from a formatted string","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to Deadline object","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"     * @return Deadline object","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    public static Deadline parseDeadlineFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[D][ ] task description (by: deadline)\"","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        int indexOfOpeningBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        int indexOfClosingBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        int indexOfBy \u003d inputString.indexOf(\"(by:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfClosingBracket + 4, indexOfBy).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        String by \u003d inputString.substring(indexOfBy + 4, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        Deadline deadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Deadline as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"            deadline.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"        return deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":48}},{"path":"src/main/java/Riri/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"    String from;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    String to;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    LocalDate fromDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    LocalDate toDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    public Event(String task, String from, String to) {","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        this.fromDate \u003d LocalDate.parse(from);","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        this.toDate \u003d LocalDate.parse(to);","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        this.from \u003d fromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        this.to \u003d toDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    public Event(String task, LocalDate from, LocalDate to) {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        this.fromDate \u003d from;","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        this.toDate \u003d to;","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        this.from \u003d fromDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        this.to \u003d toDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to \" + to + \")\";","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    /** Static method to create an Event object from a formatted string","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to Event object","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"     * @return Event object","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"    public static Event parseEventFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[ ][ ] task description (from: start_time to end_time)\"","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        int indexOfFirstBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        int indexOfSecondBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        int indexOfFrom \u003d inputString.indexOf(\"(from:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        int indexOfTo \u003d inputString.indexOf(\"to\");","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfSecondBracket + 4, indexOfFrom).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        String from \u003d inputString.substring(indexOfFrom + 6, indexOfTo).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        String to \u003d inputString.substring(indexOfTo + 2, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"        Event event \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Event as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"            event.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        return event;","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":56}},{"path":"src/main/java/Riri/Riri.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"public class Riri {","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    public Riri(String filePath) {","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    public void run() throws RiriException, IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        ui.introduction(\"Riri\");","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        ui.chat(tasks);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        storage.writeToFile(tasks.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        ui.exit();","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    public static void main(String[] args) throws RiriException, IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        new Riri(\"data/tasks.txt\").run();","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Rishit02":29,"-":1}},{"path":"src/main/java/Riri/RiriException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"public class RiriException extends Exception {","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"    public RiriException(String s) {","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"        super(s);","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"Rishit02":7}},{"path":"src/main/java/Riri/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"public class Storage {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * Reads the contents of the previously saved file that contains the tasks previously added by the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * @return string of tasks previously added by user","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    public ArrayList\u003cString\u003e load() throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        ArrayList\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(\"data\");","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        // If data directory does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        // If file does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        // Read the contents of the file","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        Scanner sc \u003d new Scanner(filePath); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"            contents.add(sc.nextLine());","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"     * Function writes the tasks the user has created to a file.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"     * @param textToAdd the tasks to add to the to-do list","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    public void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"        String dirName \u003d \"data\";","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        // Create data directory if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(dirName);","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"            Files.createDirectory(dirPath);","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        // Create file if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        // Write to proper location","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toFile());","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        fw.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":62}},{"path":"src/main/java/Riri/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"    private String task;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public Task(String task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as done if complete","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    public void markDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        return;","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as undone if incomplete","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    public void markUndone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"     * Function to help check if a task is done","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"     * @return true if task is done, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    public boolean done() {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        return this.isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"     * Function returns the status of the object","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"     * @return X if task is done, otherwise \" \"","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    public String getStatus() {","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        return (this.isDone) ? \"X\" : \" \";","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        return \"[\"+this.getStatus()+\"] \"+this.task;","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":41}},{"path":"src/main/java/Riri/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"public class TaskList {","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public TaskList(ArrayList\u003cString\u003e contents) {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        for (String c : contents) {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"            addTask(parser(c));","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    public void returnList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 1; i \u003c taskList.size() + 1; i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"            System.out.println(i + \". \" + taskList.get(i-1).toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"            System.out.println(\"You have no items in your list.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    public void addTask(Task item) {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        taskList.add(item);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"Got it. Added: \" + item.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    public void loadTask(Task item) {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        taskList.add(item);","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    public void mark(int i) {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i-1).markDone();","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        this.returnList();","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    public void unmark(int i) {","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i-1).markUndone();","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        this.returnList();","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"     * This function removes a task from the task list.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"     * @param index remove index\u0027th task","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    public void delete(int index) {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"Deleted task no. \" + index);","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"You have \" + this.len() + \" tasks left\");","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"    public int len() {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        return taskList.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"     * Parses the string to create a Task object","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"     * @param line string that describes a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"     * @return a task object","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"    private static Task parser(String line) {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        if (line.startsWith(\"[D]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"            return Deadline.parseDeadlineFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[E]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"            return Event.parseEventFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[T]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"            return Todo.parseTodoFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        return null;","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"        String s \u003d \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 1; i \u003c taskList.size()+1; i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"            s +\u003d (taskList.get(i-1).toString() + \"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"        return s;","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":72}},{"path":"src/main/java/Riri/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"    public Todo(String task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    /** Static method to create a Todo object from a formatted string","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to Todo object","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * @return Todo object","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    public static Todo parseTodoFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[T][ ] task description\"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(7); // Extract the task description","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        Todo todo \u003d new Todo(taskDescription.trim());","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Todo as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        if (inputString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"            todo.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        return todo;","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":27}},{"path":"src/main/java/Riri/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package Riri;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Ui {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"     * Introduces our chatbot and prompts the user to start asking questions","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * @param name is the name given to our chatbot","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    public void introduction(String name) {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"--------------------------------------------------\");","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"What\u0027s up. I\u0027m \" + name + \".\");","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"I\u0027m about to blow your world.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"--------------------------------------------------\");","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     * Introduces our chatbot and prompts the user to start asking questions","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    public void exit() {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"-------------------------\");","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"     * This method handles the logic for chatting with the user","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"     * @param taskList the task list that stores all the tasks created by the user","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    public void chat(TaskList taskList) throws RiriException {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        boolean isOn \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-dd\");","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter3 \u003d DateTimeFormatter.ofPattern(\"yyyy-mm-dd HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter[] formatters \u003d {formatter1, formatter2, formatter3};","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        while (isOn) {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"            String command \u003d sc.nextLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"            if (command.matches(\"bye\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"                isOn \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"list\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"                taskList.returnList();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\bmark\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"\\\\s+\");","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"                taskList.mark(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\bunmark\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"\\\\s+\");","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"                taskList.unmark(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\bdeadline\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"/by\");","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"                LocalDate date \u003d LocalDate.parse(words[1].trim(), formatter1);","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"                taskList.addTask(new Deadline(words[0].trim(), date));","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"                System.out.println(\"Added deadline.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\bevent\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"/from+\");","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"                String[] from \u003d words[1].split(\"/to\");","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"                LocalDate date1 \u003d LocalDate.parse(from[0].trim(), formatter1);","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"                LocalDate date2 \u003d  LocalDate.parse(from[1].trim(), formatter1);","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"                taskList.addTask(new Event(words[0].trim(), date1, date2));","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"                System.out.println(\"Added event.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\btodo\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"todo\");","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"                if (words[1] \u003d\u003d \"\") {","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"                    throw new RiriException(\"You are adding nothing to your list\");","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"                taskList.addTask(new Todo(words[1].trim()));","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"                System.out.println(\"Added todo.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"            } else if (command.matches(\"\\\\bdelete\\\\b.*\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"                String[] words \u003d command.split(\"\\\\s+\");","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"                taskList.delete(Integer.parseInt(words[1].trim()));","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"            } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"                throw new RiriException(\"You ain\u0027t making sense!\");","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":84}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"todo borrow book","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"mark 1","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"unmark 1","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"java -classpath ..\\bin Riri \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":1,"-":20}}]
