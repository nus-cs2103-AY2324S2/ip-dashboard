[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"# Capone project template","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"3. After that, locate the `src/main/java/Capone.java` file, right-click it, and choose `Run Capone.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"   ░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"   ░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"   ░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":5,"-":17}},{"path":"src/main/java/Capone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"public class Capone {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    private enum Command {","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"        LIST(\"list\"), MARK(\"mark\"), UNMARK(\"unmark\"), TODO(\"todo\"), DEADLINE(\"deadline\"),","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"        EVENT(\"event\"), DELETE(\"delete\"), BYE(\"bye\"), HELP(\"help\");","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"        private final String command;","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        Command(String command) {","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"            this.command \u003d command;","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"        @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"        public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"            return this.command;","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    // We assume there is no more than 100 tasks added.","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    private static final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"    public static void processInputs() {","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        // Create a Scanner object to read user input","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"        while (true) {","lastModifiedDate":"2024-01-24"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"            // Read the user input","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-01-24"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"            // Split inputs by space and store them in an arraylist for processing.","lastModifiedDate":"2024-01-24"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"            ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e(Arrays.asList(input.split(\"\\\\s+\")));","lastModifiedDate":"2024-01-24"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"            String firstWord \u003d inputList.get(0);","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"            try {","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"                if (firstWord.equalsIgnoreCase(Command.LIST.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"                    listTasks();","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.MARK.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"                    markTask(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.UNMARK.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"                    unmarkTask(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.TODO.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"                    processTodo(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.DEADLINE.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"                    processDeadline(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.EVENT.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"                    processEvent(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.DELETE.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"                    deleteTask(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.BYE.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"                    break;","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(Command.HELP.toString())) {","lastModifiedDate":"2024-01-24"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"                    displayHelp();","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"                } else {","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"                    invalidCommand();","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"                }","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"                TaskStorage.writeTasksToJsonFile(tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"            } catch (CaponeException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-24"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"        // If user entered \"bye\", exit program. Clean up.","lastModifiedDate":"2024-01-24"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-01-24"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"        scanner.close();","lastModifiedDate":"2024-01-24"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"    public static void printWelcomeMsg() {","lastModifiedDate":"2024-01-23"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"        String logo \u003d \"░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░\\n\"","lastModifiedDate":"2024-01-24"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"                + \"░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░\\n\"","lastModifiedDate":"2024-01-24"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"                + \"░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░\";","lastModifiedDate":"2024-01-24"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Hello! I\u0027m\\n%s\\nWhat can I do for you?\\n%n\", logo);","lastModifiedDate":"2024-01-24"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"    public static void listTasks() {","lastModifiedDate":"2024-01-23"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-01-23"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"            System.out.printf(\"%d. %s\\n\", i+1, tasks.get(i).toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"    public static void markTask(ArrayList\u003cString\u003e inputList) throws CaponeException {","lastModifiedDate":"2024-01-24"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter an index of a task you\u0027d like to mark.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: mark [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-24"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter only one index you would like to mark.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: mark [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"        // Mark task as done.","lastModifiedDate":"2024-01-24"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"            Task markedTask \u003d tasks.get(Integer.parseInt(inputList.get(1))-1);","lastModifiedDate":"2024-01-24"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"            markedTask.markTask();","lastModifiedDate":"2024-01-24"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"            // Inform user that task has been marked.","lastModifiedDate":"2024-01-24"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + markedTask);","lastModifiedDate":"2024-01-24"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Sorry, you have entered an invalid index.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"                    \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-01-24"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"    public static void unmarkTask(ArrayList\u003cString\u003e inputList) throws CaponeException{","lastModifiedDate":"2024-01-24"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter an index of a task you\u0027d like to unmark.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":115,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":116,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: unmark [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":117,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-24"},{"lineNumber":118,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter only one index you would like to unmark.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":119,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":120,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: unmark [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":121,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":122,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":123,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":124,"author":{"gitId":"ruijietay"},"content":"            Task unmarkedTask \u003d tasks.get(Integer.parseInt(inputList.get(1))-1);","lastModifiedDate":"2024-01-24"},{"lineNumber":125,"author":{"gitId":"ruijietay"},"content":"            unmarkedTask.unmarkTask();","lastModifiedDate":"2024-01-24"},{"lineNumber":126,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":127,"author":{"gitId":"ruijietay"},"content":"            // Inform user that task has been marked.","lastModifiedDate":"2024-01-24"},{"lineNumber":128,"author":{"gitId":"ruijietay"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + unmarkedTask);","lastModifiedDate":"2024-01-24"},{"lineNumber":129,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":130,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Sorry, you have entered an invalid index.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":131,"author":{"gitId":"ruijietay"},"content":"                    \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-01-24"},{"lineNumber":132,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":133,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":134,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":135,"author":{"gitId":"ruijietay"},"content":"    public static void processTodo(ArrayList\u003cString\u003e inputList) throws CaponeException {","lastModifiedDate":"2024-01-24"},{"lineNumber":136,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-24"},{"lineNumber":137,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":138,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter a description for this ToDo task!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":139,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: todo [description]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":140,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":141,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":142,"author":{"gitId":"ruijietay"},"content":"        // Combine the remaining words into a single string","lastModifiedDate":"2024-01-24"},{"lineNumber":143,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":144,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":145,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":146,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":147,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":148,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":149,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":150,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":151,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":152,"author":{"gitId":"ruijietay"},"content":"        ToDo newTodo \u003d new ToDo(description.toString(), false);","lastModifiedDate":"2024-01-31"},{"lineNumber":153,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":154,"author":{"gitId":"ruijietay"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2024-01-24"},{"lineNumber":155,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":156,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":157,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", newTodo.toString(), tasks.size());","lastModifiedDate":"2024-01-24"},{"lineNumber":158,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":159,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":160,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":161,"author":{"gitId":"ruijietay"},"content":"    public static void processDeadline(ArrayList\u003cString\u003e inputList) throws CaponeException {","lastModifiedDate":"2024-01-24"},{"lineNumber":162,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-24"},{"lineNumber":163,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":164,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Insufficient arguments!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":165,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":166,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":167,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":168,"author":{"gitId":"ruijietay"},"content":"        // Find the index of the /by command.","lastModifiedDate":"2024-01-31"},{"lineNumber":169,"author":{"gitId":"ruijietay"},"content":"        int byNdx \u003d inputList.indexOf(\"/by\");","lastModifiedDate":"2024-01-24"},{"lineNumber":170,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":171,"author":{"gitId":"ruijietay"},"content":"        // Catch potential errors from date entry.","lastModifiedDate":"2024-01-31"},{"lineNumber":172,"author":{"gitId":"ruijietay"},"content":"        if (byNdx \u003d\u003d inputList.size() - 1 || byNdx \u003d\u003d -1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":173,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter a date for this deadline task!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":174,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":175,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":176,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":177,"author":{"gitId":"ruijietay"},"content":"        // Combine description of task into one string.","lastModifiedDate":"2024-01-31"},{"lineNumber":178,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":179,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c byNdx; i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":180,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d byNdx - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":181,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":182,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":183,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":184,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":185,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":186,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":187,"author":{"gitId":"ruijietay"},"content":"        if (description.toString().equalsIgnoreCase(\"\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":188,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Insufficient arguments!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":189,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: deadline [description] /by [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":190,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":191,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":192,"author":{"gitId":"ruijietay"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":193,"author":{"gitId":"ruijietay"},"content":"        LocalTime time \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":194,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":195,"author":{"gitId":"ruijietay"},"content":"        StringBuilder byDate \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":196,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d byNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":197,"author":{"gitId":"ruijietay"},"content":"            if (isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":198,"author":{"gitId":"ruijietay"},"content":"                date \u003d Capone.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":199,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":200,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":201,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":202,"author":{"gitId":"ruijietay"},"content":"            if (isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":203,"author":{"gitId":"ruijietay"},"content":"                time \u003d Capone.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":204,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":205,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":206,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":207,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":208,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":209,"author":{"gitId":"ruijietay"},"content":"                byDate.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":210,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":211,"author":{"gitId":"ruijietay"},"content":"                byDate.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":212,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":213,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":214,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":215,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":216,"author":{"gitId":"ruijietay"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":217,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":218,"author":{"gitId":"ruijietay"},"content":"                tasks.add(new Deadline(description.toString(), false, date.atTime(time)));","lastModifiedDate":"2024-01-31"},{"lineNumber":219,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":220,"author":{"gitId":"ruijietay"},"content":"                tasks.add(new Deadline(description.toString(), false, date.atStartOfDay()));","lastModifiedDate":"2024-01-31"},{"lineNumber":221,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":222,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":223,"author":{"gitId":"ruijietay"},"content":"            // If only the time is specified, the deadline will be the time at the next day.","lastModifiedDate":"2024-01-31"},{"lineNumber":224,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":225,"author":{"gitId":"ruijietay"},"content":"                tasks.add(new Deadline(description.toString(), false,","lastModifiedDate":"2024-01-31"},{"lineNumber":226,"author":{"gitId":"ruijietay"},"content":"                        LocalDate.now().plusDays(1).atTime(time)));","lastModifiedDate":"2024-01-31"},{"lineNumber":227,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":228,"author":{"gitId":"ruijietay"},"content":"                tasks.add(new Deadline(description.toString(), false, byDate.toString()));","lastModifiedDate":"2024-01-31"},{"lineNumber":229,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":230,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":231,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":232,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":233,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", tasks.get(tasks.size()-1).toString(), tasks.size());","lastModifiedDate":"2024-01-31"},{"lineNumber":234,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":235,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":236,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":237,"author":{"gitId":"ruijietay"},"content":"     * Checks if date was an input. The recognized format is:","lastModifiedDate":"2024-01-31"},{"lineNumber":238,"author":{"gitId":"ruijietay"},"content":"     * YYYY-MM-DD","lastModifiedDate":"2024-01-31"},{"lineNumber":239,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":240,"author":{"gitId":"ruijietay"},"content":"     * @param input the input string to be checked against.","lastModifiedDate":"2024-01-31"},{"lineNumber":241,"author":{"gitId":"ruijietay"},"content":"     * @return true if a valid date is recognised, false otherwise.","lastModifiedDate":"2024-01-31"},{"lineNumber":242,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":243,"author":{"gitId":"ruijietay"},"content":"    private static boolean isDateFormat(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":244,"author":{"gitId":"ruijietay"},"content":"        String dateFormatRegex \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2024-01-31"},{"lineNumber":245,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":246,"author":{"gitId":"ruijietay"},"content":"        // Check if the input string matches the format","lastModifiedDate":"2024-01-31"},{"lineNumber":247,"author":{"gitId":"ruijietay"},"content":"        return input.matches(dateFormatRegex);","lastModifiedDate":"2024-01-31"},{"lineNumber":248,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":249,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":250,"author":{"gitId":"ruijietay"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":251,"author":{"gitId":"ruijietay"},"content":"     * Checks if time was an input. The recognized formats is:","lastModifiedDate":"2024-01-31"},{"lineNumber":252,"author":{"gitId":"ruijietay"},"content":"     * 1800 (24-hour format).","lastModifiedDate":"2024-01-31"},{"lineNumber":253,"author":{"gitId":"ruijietay"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":254,"author":{"gitId":"ruijietay"},"content":"     * @param input the input string to be checked against.","lastModifiedDate":"2024-01-31"},{"lineNumber":255,"author":{"gitId":"ruijietay"},"content":"     * @return true if a valid time is recognised, false otherwise.","lastModifiedDate":"2024-01-31"},{"lineNumber":256,"author":{"gitId":"ruijietay"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":257,"author":{"gitId":"ruijietay"},"content":"    public static boolean isTimeFormat(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":258,"author":{"gitId":"ruijietay"},"content":"        String timeFormatRegex \u003d \"(\\\\d{4})\";","lastModifiedDate":"2024-01-31"},{"lineNumber":259,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":260,"author":{"gitId":"ruijietay"},"content":"        // Check if the input string matches the format","lastModifiedDate":"2024-01-31"},{"lineNumber":261,"author":{"gitId":"ruijietay"},"content":"        return input.matches(timeFormatRegex);","lastModifiedDate":"2024-01-31"},{"lineNumber":262,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":263,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":264,"author":{"gitId":"ruijietay"},"content":"    public static void processEvent(ArrayList\u003cString\u003e inputList) throws CaponeException {","lastModifiedDate":"2024-01-24"},{"lineNumber":265,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-24"},{"lineNumber":266,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":267,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Insufficient arguments!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":268,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":269,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":270,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":271,"author":{"gitId":"ruijietay"},"content":"        int fromNdx \u003d inputList.indexOf(\"/from\");","lastModifiedDate":"2024-01-24"},{"lineNumber":272,"author":{"gitId":"ruijietay"},"content":"        int toNdx \u003d inputList.indexOf(\"/to\");","lastModifiedDate":"2024-01-24"},{"lineNumber":273,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":274,"author":{"gitId":"ruijietay"},"content":"        // If /to is specified before /from, throw error.","lastModifiedDate":"2024-01-24"},{"lineNumber":275,"author":{"gitId":"ruijietay"},"content":"        if (toNdx \u003c fromNdx) {","lastModifiedDate":"2024-01-24"},{"lineNumber":276,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please input from date followed by to date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":277,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":278,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":279,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":280,"author":{"gitId":"ruijietay"},"content":"        // Catch potential errors from date entry.","lastModifiedDate":"2024-01-24"},{"lineNumber":281,"author":{"gitId":"ruijietay"},"content":"        if (fromNdx \u003d\u003d -1 || toNdx \u003d\u003d -1 || toNdx - fromNdx \u003d\u003d 1 || fromNdx - toNdx \u003d\u003d 1 ||","lastModifiedDate":"2024-01-24"},{"lineNumber":282,"author":{"gitId":"ruijietay"},"content":"                fromNdx \u003d\u003d inputList.size() - 1 || toNdx \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":283,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter a start and end date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":284,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":285,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":286,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":287,"author":{"gitId":"ruijietay"},"content":"        // Combine the task description into a single string.","lastModifiedDate":"2024-01-24"},{"lineNumber":288,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":289,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c fromNdx; i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":290,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d fromNdx - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":291,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":292,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":293,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":294,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":295,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":296,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":297,"author":{"gitId":"ruijietay"},"content":"        if (description.toString().equalsIgnoreCase(\"\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":298,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Insufficient arguments!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":299,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: event [description] /from [date] /to [date]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":300,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":301,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":302,"author":{"gitId":"ruijietay"},"content":"        LocalDate fromDate \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":303,"author":{"gitId":"ruijietay"},"content":"        LocalTime fromTime \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":304,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":305,"author":{"gitId":"ruijietay"},"content":"        StringBuilder fromDateString \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":306,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d fromNdx + 1; i \u003c toNdx; i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":307,"author":{"gitId":"ruijietay"},"content":"            if (isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":308,"author":{"gitId":"ruijietay"},"content":"                fromDate \u003d Capone.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":309,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":310,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":311,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":312,"author":{"gitId":"ruijietay"},"content":"            if (isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":313,"author":{"gitId":"ruijietay"},"content":"                fromTime \u003d Capone.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":314,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":315,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":316,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":317,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":318,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":319,"author":{"gitId":"ruijietay"},"content":"                fromDateString.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":320,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":321,"author":{"gitId":"ruijietay"},"content":"                fromDateString.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":322,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":323,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":324,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":325,"author":{"gitId":"ruijietay"},"content":"        LocalDate toDate \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":326,"author":{"gitId":"ruijietay"},"content":"        LocalTime toTime \u003d null;","lastModifiedDate":"2024-01-31"},{"lineNumber":327,"author":{"gitId":"ruijietay"},"content":"        // Process input for the deadline (i.e. after the /by command).","lastModifiedDate":"2024-01-31"},{"lineNumber":328,"author":{"gitId":"ruijietay"},"content":"        StringBuilder toDateString \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":329,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d toNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":330,"author":{"gitId":"ruijietay"},"content":"            if (isDateFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":331,"author":{"gitId":"ruijietay"},"content":"                toDate \u003d Capone.parseDate(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":332,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":333,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":334,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":335,"author":{"gitId":"ruijietay"},"content":"            if (isTimeFormat(inputList.get(i))) {","lastModifiedDate":"2024-01-31"},{"lineNumber":336,"author":{"gitId":"ruijietay"},"content":"                toTime \u003d Capone.parseTime(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":337,"author":{"gitId":"ruijietay"},"content":"                continue;","lastModifiedDate":"2024-01-31"},{"lineNumber":338,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":339,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":340,"author":{"gitId":"ruijietay"},"content":"            // If this is the last word to be added.","lastModifiedDate":"2024-01-31"},{"lineNumber":341,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":342,"author":{"gitId":"ruijietay"},"content":"                toDateString.append(inputList.get(i));","lastModifiedDate":"2024-01-31"},{"lineNumber":343,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":344,"author":{"gitId":"ruijietay"},"content":"                toDateString.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":345,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":346,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":347,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":348,"author":{"gitId":"ruijietay"},"content":"        LocalDateTime fromDateTime \u003d processDateTime(fromDate, fromTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":349,"author":{"gitId":"ruijietay"},"content":"        LocalDateTime toDateTime \u003d processDateTime(toDate, toTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":350,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":351,"author":{"gitId":"ruijietay"},"content":"        if (fromDateTime !\u003d null \u0026\u0026 toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":352,"author":{"gitId":"ruijietay"},"content":"            tasks.add(new Event(description.toString(), false, fromDateTime, toDateTime));","lastModifiedDate":"2024-01-31"},{"lineNumber":353,"author":{"gitId":"ruijietay"},"content":"        } else if (fromDateTime !\u003d null || toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":354,"author":{"gitId":"ruijietay"},"content":"            // If either fromDateTime or toDateTime is null but the other is not.","lastModifiedDate":"2024-01-31"},{"lineNumber":355,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Oops! It seems like there is a format mismatch between\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":356,"author":{"gitId":"ruijietay"},"content":"                    \"your start and dates and end dates.\\nMake sure you enter both of them in the accepted \" +","lastModifiedDate":"2024-01-31"},{"lineNumber":357,"author":{"gitId":"ruijietay"},"content":"                    \"date format!\\nAlternatively, you can specify a string for both your start and end dates.\\n\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":358,"author":{"gitId":"ruijietay"},"content":"                    \"Use the \u0027help\u0027 command for more information.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":359,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":360,"author":{"gitId":"ruijietay"},"content":"            tasks.add(new Event(description.toString(), false,","lastModifiedDate":"2024-01-31"},{"lineNumber":361,"author":{"gitId":"ruijietay"},"content":"                    fromDateString.toString(), toDateString.toString()));","lastModifiedDate":"2024-01-31"},{"lineNumber":362,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":363,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":364,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":365,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", tasks.get(tasks.size()-1).toString(), tasks.size());","lastModifiedDate":"2024-01-31"},{"lineNumber":366,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":367,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":368,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":369,"author":{"gitId":"ruijietay"},"content":"    public static LocalDateTime processDateTime(LocalDate date, LocalTime time) {","lastModifiedDate":"2024-01-31"},{"lineNumber":370,"author":{"gitId":"ruijietay"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":371,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":372,"author":{"gitId":"ruijietay"},"content":"                return date.atTime(time);","lastModifiedDate":"2024-01-31"},{"lineNumber":373,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":374,"author":{"gitId":"ruijietay"},"content":"                return date.atStartOfDay();","lastModifiedDate":"2024-01-31"},{"lineNumber":375,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":376,"author":{"gitId":"ruijietay"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":377,"author":{"gitId":"ruijietay"},"content":"            // If only the time is specified, the deadline will be the time at the next day.","lastModifiedDate":"2024-01-31"},{"lineNumber":378,"author":{"gitId":"ruijietay"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":379,"author":{"gitId":"ruijietay"},"content":"                return LocalDate.now().plusDays(1).atTime(time);","lastModifiedDate":"2024-01-31"},{"lineNumber":380,"author":{"gitId":"ruijietay"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":381,"author":{"gitId":"ruijietay"},"content":"                // Else, if both date and time are null, return null input to use","lastModifiedDate":"2024-01-31"},{"lineNumber":382,"author":{"gitId":"ruijietay"},"content":"                // the string input of date/time by user.","lastModifiedDate":"2024-01-31"},{"lineNumber":383,"author":{"gitId":"ruijietay"},"content":"                return null;","lastModifiedDate":"2024-01-31"},{"lineNumber":384,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":385,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":386,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":387,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":388,"author":{"gitId":"ruijietay"},"content":"    public static LocalDate parseDate(String date) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":389,"author":{"gitId":"ruijietay"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-01-31"},{"lineNumber":390,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":391,"author":{"gitId":"ruijietay"},"content":"            return LocalDate.parse(date, dateFormatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":392,"author":{"gitId":"ruijietay"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":393,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Oops! You have entered an invalid date. Please try again.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":394,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":395,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":396,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":397,"author":{"gitId":"ruijietay"},"content":"    public static LocalTime parseTime(String time) throws CaponeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":398,"author":{"gitId":"ruijietay"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":399,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":400,"author":{"gitId":"ruijietay"},"content":"            return LocalTime.parse(time, timeFormatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":401,"author":{"gitId":"ruijietay"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":402,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Oops! You have entered an invalid time. Please try again.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":403,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":404,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":405,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":406,"author":{"gitId":"ruijietay"},"content":"    public static void deleteTask(ArrayList\u003cString\u003e inputList) throws CaponeException{","lastModifiedDate":"2024-01-24"},{"lineNumber":407,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has more than two arguments, throw exception.","lastModifiedDate":"2024-01-24"},{"lineNumber":408,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":409,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter an index of a task you\u0027d like to delete.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":410,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":411,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: delete [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":412,"author":{"gitId":"ruijietay"},"content":"        } else if (inputList.size() \u003e 2) {","lastModifiedDate":"2024-01-24"},{"lineNumber":413,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter only one index you would like to delete.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":414,"author":{"gitId":"ruijietay"},"content":"                    \"You can view all tasks using the \u0027list\u0027 command.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":415,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: delete [index]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":416,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":417,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":418,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":419,"author":{"gitId":"ruijietay"},"content":"            // Remove the task from the tasks Arraylist.","lastModifiedDate":"2024-01-24"},{"lineNumber":420,"author":{"gitId":"ruijietay"},"content":"            Task removedTask \u003d tasks.remove(Integer.parseInt(inputList.get(1))-1);","lastModifiedDate":"2024-01-24"},{"lineNumber":421,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":422,"author":{"gitId":"ruijietay"},"content":"            System.out.printf(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\\n\",","lastModifiedDate":"2024-01-24"},{"lineNumber":423,"author":{"gitId":"ruijietay"},"content":"                    removedTask.toString(), tasks.size());","lastModifiedDate":"2024-01-24"},{"lineNumber":424,"author":{"gitId":"ruijietay"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":425,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Sorry, you have entered an invalid index.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":426,"author":{"gitId":"ruijietay"},"content":"                    \"You can check the list of valid indices using the \u0027list\u0027 command.\");","lastModifiedDate":"2024-01-24"},{"lineNumber":427,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":428,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":429,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":430,"author":{"gitId":"ruijietay"},"content":"    public static void invalidCommand() throws CaponeException{","lastModifiedDate":"2024-01-24"},{"lineNumber":431,"author":{"gitId":"ruijietay"},"content":"        throw new CaponeException(\"I\u0027m sorry, I don\u0027t understand what you just said.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":432,"author":{"gitId":"ruijietay"},"content":"                \"Use \u0027help\u0027 to display the list of valid commands\");","lastModifiedDate":"2024-01-24"},{"lineNumber":433,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":434,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":435,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":436,"author":{"gitId":"ruijietay"},"content":"    // TODO: UPDATE HELP MENU","lastModifiedDate":"2024-01-31"},{"lineNumber":437,"author":{"gitId":"ruijietay"},"content":"    public static void displayHelp() {","lastModifiedDate":"2024-01-24"},{"lineNumber":438,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"Commands I understand:\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":439,"author":{"gitId":"ruijietay"},"content":"                \"1. list - Lists the tasks entered.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":440,"author":{"gitId":"ruijietay"},"content":"                \"2. todo [description] - Creates a new ToDo task. Remember to enter the description!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":441,"author":{"gitId":"ruijietay"},"content":"                \"3. deadline [description] /by [date] - Creates a new Deadline task.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":442,"author":{"gitId":"ruijietay"},"content":"                \"   Remember to enter the description and date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":443,"author":{"gitId":"ruijietay"},"content":"                \"   Dates are recognised in the following format - \u0027yyyy-mm-dd HHmm\u0027 (24-hour).\\n\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":444,"author":{"gitId":"ruijietay"},"content":"                \"4. event [description] /from [date] /to [date] - Creates a new Event task.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":445,"author":{"gitId":"ruijietay"},"content":"                \"   Remember to enter the description, as well as the start and end date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":446,"author":{"gitId":"ruijietay"},"content":"                \"   Dates are recognised in the following format - \u0027yyyy-mm-dd HHmm\u0027 (24-hour).\\n\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":447,"author":{"gitId":"ruijietay"},"content":"                \"5. mark [index] - Marks a task as completed. Use this in conjunction with the \u0027list\u0027 command!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":448,"author":{"gitId":"ruijietay"},"content":"                \"6. unmark [index] - Unmarks a task. Use this in conjunction with the \u0027list\u0027 command!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":449,"author":{"gitId":"ruijietay"},"content":"                \"7. delete [index] - Deletes a task. Use this in conjunction with the \u0027list\u0027 command!\");","lastModifiedDate":"2024-01-24"},{"lineNumber":450,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":451,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":452,"author":{"gitId":"ruijietay"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-23"},{"lineNumber":453,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":454,"author":{"gitId":"ruijietay"},"content":"        Capone.printWelcomeMsg();","lastModifiedDate":"2024-01-23"},{"lineNumber":455,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":456,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":457,"author":{"gitId":"ruijietay"},"content":"            TaskStorage.readTasksFromJsonFile(tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":458,"author":{"gitId":"ruijietay"},"content":"        } catch (TaskListCorruptedException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":459,"author":{"gitId":"ruijietay"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-31"},{"lineNumber":460,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":461,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":462,"author":{"gitId":"ruijietay"},"content":"        Capone.processInputs();","lastModifiedDate":"2024-01-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":464,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ruijietay":462,"-":2}},{"path":"src/main/java/CaponeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class CaponeException extends Exception {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    public CaponeException(String e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"        super(e);","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":5}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.util.Date;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    private String deadlineString;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    Deadline(String description, boolean status, String deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.DEADLINE, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"        this.deadlineString \u003d deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    Deadline(String description, boolean status, LocalDateTime deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.DEADLINE, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"    public String getDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"        if (this.deadline !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"            return this.deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"        return this.deadlineString;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDeadline() + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":31}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"    protected String fromDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    protected  String toDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    public Event(String description, boolean status, String fromDate, String toDate) {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.EVENT, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"        this.fromDateTimeString \u003d fromDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        this.toDateTimeString \u003d toDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    public Event(String description, boolean status, LocalDateTime fromDate, LocalDateTime toDate) {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.EVENT, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"        this.fromDateTime \u003d fromDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"        this.toDateTime \u003d toDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    public String getFromDateTime() {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"        if (this.fromDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"            return this.fromDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"        return this.fromDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"    public String getToDateTime() {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"        if (this.toDateTime !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"            return this.toDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"        return this.toDateTimeString;","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.getFromDateTime() +","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"                \" to: \" + this.getToDateTime() +\")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":45}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    protected enum TaskType {","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"        TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\");","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"        private String taskName;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"        TaskType(String name) {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"            this.taskName \u003d name;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"        @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"        public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"            return this.taskName;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    protected  TaskType taskType;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    public Task(TaskType type, String description, boolean status) {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"        this.taskType \u003d type;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d status;","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"    public String getTaskType() {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"        return this.taskType.toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"        return this.description;","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    public Boolean getStatus() {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"        return this.isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    public void markTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"    public void unmarkTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"ruijietay":55}},{"path":"src/main/java/TaskListCorruptedException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class TaskListCorruptedException extends Exception {","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    public TaskListCorruptedException(String e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"        super(e);","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":5}},{"path":"src/main/java/TaskStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONArray;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONException;","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import org.json.JSONObject;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"public class TaskStorage {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"    private static final String JSON_FILENAME \u003d \"tasks.json\";","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    private static final String JSON_FILEPATH \u003d \"./data/\";","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    public static void writeTasksToJsonFile(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"        JSONArray jsonArray \u003d new JSONArray();","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"            JSONObject jsonTask \u003d new JSONObject();","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"taskType\", task.getTaskType());","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"description\", task.getDescription());","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"            jsonTask.put(\"status\", task.getStatus());","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"            // Add type-specific information for Deadline and Event tasks","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"deadline\", ((Deadline) task).getDeadline());","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"fromDate\", ((Event) task).getFromDateTime());","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"                jsonTask.put(\"toDate\", ((Event) task).getToDateTime());","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"            jsonArray.put(jsonTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(JSON_FILEPATH + JSON_FILENAME)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"            jsonArray.write(fileWriter);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"    public static void readTasksFromJsonFile(List\u003cTask\u003e tasks) throws TaskListCorruptedException {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"            TaskStorage.initFileIfNotExist();","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"            String jsonContent \u003d new String(Files.readAllBytes(Paths.get(JSON_FILEPATH + JSON_FILENAME)));","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"            JSONArray jsonArray \u003d new JSONArray(jsonContent);","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"            for (int i \u003d 0; i \u003c jsonArray.length(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"                JSONObject jsonTask \u003d jsonArray.getJSONObject(i);","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"                String type \u003d jsonTask.getString(\"taskType\");","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"                String description \u003d jsonTask.getString(\"description\");","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"                boolean status \u003d jsonTask.getBoolean(\"status\");","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"                switch (type) {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"                    case \"todo\":","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"                        tasks.add(new ToDo(description, status));","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"                        break;","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"                    case \"deadline\":","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"                        String deadline \u003d jsonTask.getString(\"deadline\");","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"                        tasks.add(new Deadline(description, status, deadline));","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"                        break;","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"                    case \"event\":","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"                        String fromDate \u003d jsonTask.getString(\"fromDate\");","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"                        String toDate \u003d jsonTask.getString(\"toDate\");","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"                        tasks.add(new Event(description, status, fromDate, toDate));","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"                        break;","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"        } catch (JSONException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"            initFileIfNotExist();","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"            throw new TaskListCorruptedException(\"Task list file is corrupted.\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"                    \" Creating new task list file.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"    public static void initFileIfNotExist() {","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"        // Create the folder if it doesn\u0027t exist","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"        File folder \u003d new File(JSON_FILEPATH);","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"        if (!folder.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"            folder.mkdir();","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"        // Create the file within the folder","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"        File file \u003d new File(folder, JSON_FILENAME);","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"            try (FileWriter fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"                fileWriter.write(\"[]\");","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ruijietay":99}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"    public ToDo(String description, boolean status) {","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"        super(TaskType.TODO, description, status);","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"-h","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"todo make cake","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"thisisaninvalidinput","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"deadline submit weekly report /by friday 26 Jan 2023","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"event party at home /from saturday, 27 jan 2023 /to 28 jan 2023, sunday","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"mark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"delete asdf","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"delete 333","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"unmark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"delete 1","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"deadline ps1 /by 2024-02-01 2359","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"deadline ps2 /by 2024-02-01 9999","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"deadline ps1 /by 2069-02-01 2359","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 1300 /to 2024-02-10 2200","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 1300 /to thisisnotadate","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"event career fair /from 2024-02-05 9999 /to 2024-02-10 2200","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"java -classpath ..\\bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"java -classpath ../bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":2,"-":36}}]
