[{"path":"data/botchat.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"T|0|a","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"T|1|c","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"kaitinghh":2}},{"path":"src/main/java/BotChat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"import exception.IncompleteCommandException;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import exception.InvalidTaskNumberException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"import parser.Parser;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"import task.Deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import task.Event;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"import task.ToDo;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"public class BotChat {","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"    private static boolean terminate \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    private static final String FILEPATH \u003d \"./././data/botchat.txt\";","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"    private static Storage storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    private static TaskList taskArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"    private static Parser parser;","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"    private static Pattern markPattern \u003d Pattern.compile(\"mark \\\\d+\");","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"    private static Pattern unmarkPattern \u003d Pattern.compile(\"unmark \\\\d+\");","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"     * Adds a new task based on the user input command.","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"     * @param s The user input command containing the task details.","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"     * @throws Exception If the command is invalid or incomplete.","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"    public static void addTask(String s) throws Exception {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"        String taskDescription;","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"        switch (parser.extractCommand(s)) {","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"            case \"todo\":","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"                taskDescription \u003d parser.extractDescription(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"                Task newDescriptionTask \u003d new ToDo(taskDescription);","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"                storage.addToDataStore(newDescriptionTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"                taskArrayList.addTask(newDescriptionTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"            case \"deadline\":","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"                taskDescription \u003d parser.extractDescription(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"                String[] deadlineStringParts \u003d taskDescription.split(\"/by \");","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"kaitinghh"},"content":"                if (deadlineStringParts.length \u003c 2) {","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"kaitinghh"},"content":"                    throw new IncompleteCommandException(\"task.Deadline command incomplete. It should be in the form of \" +","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"kaitinghh"},"content":"                            \"deadline description /by datetime.\");","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"kaitinghh"},"content":"                } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"kaitinghh"},"content":"                    Task newDeadlineTask \u003d new Deadline(deadlineStringParts[0], deadlineStringParts[1]);","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"kaitinghh"},"content":"                    storage.addToDataStore(newDeadlineTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"kaitinghh"},"content":"                    taskArrayList.addTask(newDeadlineTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"kaitinghh"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"kaitinghh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"kaitinghh"},"content":"            case \"event\":","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"kaitinghh"},"content":"                taskDescription \u003d parser.extractDescription(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"kaitinghh"},"content":"                String[] eventStringParts \u003d taskDescription.split(\"/from |/to \");","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"kaitinghh"},"content":"                if (eventStringParts.length \u003c 3) {","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"kaitinghh"},"content":"                    throw new IncompleteCommandException(\"task.Event command incomplete. It should be in the form of \" +","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"kaitinghh"},"content":"                            \"event description /from datetime /to datetime.\");","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"kaitinghh"},"content":"                } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"kaitinghh"},"content":"                    Task newEventTask \u003d new Event(eventStringParts[0], eventStringParts[1], eventStringParts[2]);","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"kaitinghh"},"content":"                    storage.addToDataStore(newEventTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"kaitinghh"},"content":"                    taskArrayList.addTask(newEventTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"kaitinghh"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"kaitinghh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"kaitinghh"},"content":"            default:","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"kaitinghh"},"content":"                throw new InvalidCommandException(s);","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":67,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"kaitinghh"},"content":"     * Generates a response based on the user input command.","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"kaitinghh"},"content":"     * @param s The user input command.","lastModifiedDate":"2024-02-23"},{"lineNumber":71,"author":{"gitId":"kaitinghh"},"content":"     * @return The response message.","lastModifiedDate":"2024-02-23"},{"lineNumber":72,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":73,"author":{"gitId":"kaitinghh"},"content":"    public static String response(String s) {","lastModifiedDate":"2024-01-25"},{"lineNumber":74,"author":{"gitId":"kaitinghh"},"content":"        Matcher markMatcher \u003d markPattern.matcher(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"kaitinghh"},"content":"        Matcher unmarkMatcher \u003d unmarkPattern.matcher(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":76,"author":{"gitId":"kaitinghh"},"content":"        String command \u003d parser.extractCommand(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"kaitinghh"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"kaitinghh"},"content":"            terminate \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":79,"author":{"gitId":"kaitinghh"},"content":"            return Ui.byeMessage();","lastModifiedDate":"2024-02-06"},{"lineNumber":80,"author":{"gitId":"kaitinghh"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":81,"author":{"gitId":"kaitinghh"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder(\"Here are the tasks in your list: \\n\");","lastModifiedDate":"2024-01-25"},{"lineNumber":82,"author":{"gitId":"kaitinghh"},"content":"            for (int i \u003d 1; i \u003c\u003d taskArrayList.getLastIdx(); i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"kaitinghh"},"content":"                stringBuilder.append(i);","lastModifiedDate":"2024-01-25"},{"lineNumber":84,"author":{"gitId":"kaitinghh"},"content":"                stringBuilder.append(\". \");","lastModifiedDate":"2024-01-25"},{"lineNumber":85,"author":{"gitId":"kaitinghh"},"content":"                stringBuilder.append(taskArrayList.getTaskByIdx(i - 1).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"kaitinghh"},"content":"                stringBuilder.append(\"\\n \");","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":88,"author":{"gitId":"kaitinghh"},"content":"            return stringBuilder.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":89,"author":{"gitId":"kaitinghh"},"content":"        } else if (markMatcher.matches()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":90,"author":{"gitId":"kaitinghh"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"kaitinghh"},"content":"                int taskNum \u003d convertTaskNumStringToInt(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"kaitinghh"},"content":"                storage.editDataStoreTaskAsDone(taskNum);","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"kaitinghh"},"content":"                return markTaskAsDone(taskNum);","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"kaitinghh"},"content":"            } catch (InvalidTaskNumberException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"kaitinghh"},"content":"                return e.toString();","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"kaitinghh"},"content":"        } else if (unmarkMatcher.matches()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":98,"author":{"gitId":"kaitinghh"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"kaitinghh"},"content":"                int taskNum \u003d convertTaskNumStringToInt(s);","lastModifiedDate":"2024-02-06"},{"lineNumber":100,"author":{"gitId":"kaitinghh"},"content":"                storage.editDataStoreTaskAsUndone(taskNum);","lastModifiedDate":"2024-02-06"},{"lineNumber":101,"author":{"gitId":"kaitinghh"},"content":"                return unmarkTaskAsDone(taskNum);","lastModifiedDate":"2024-02-06"},{"lineNumber":102,"author":{"gitId":"kaitinghh"},"content":"            } catch (InvalidTaskNumberException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"kaitinghh"},"content":"                return e.toString();","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"kaitinghh"},"content":"        } else if (command.equals(\"delete\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"kaitinghh"},"content":"            String requestedDeletion \u003d s.substring(7);","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"kaitinghh"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"kaitinghh"},"content":"                return deleteTask(requestedDeletion);","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"kaitinghh"},"content":"            } catch (InvalidTaskNumberException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"kaitinghh"},"content":"                return e.toString();","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"kaitinghh"},"content":"        } else {","lastModifiedDate":"2024-01-25"},{"lineNumber":113,"author":{"gitId":"kaitinghh"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":114,"author":{"gitId":"kaitinghh"},"content":"                addTask(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":115,"author":{"gitId":"kaitinghh"},"content":"                return Ui.addTaskMessage(taskArrayList.getTaskByIdx(taskArrayList.getLastIdx() - 1).toString(),","lastModifiedDate":"2024-02-06"},{"lineNumber":116,"author":{"gitId":"kaitinghh"},"content":"                        taskArrayList.getLastIdx());","lastModifiedDate":"2024-02-06"},{"lineNumber":117,"author":{"gitId":"kaitinghh"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"kaitinghh"},"content":"                return e.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":120,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":121,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":123,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":124,"author":{"gitId":"kaitinghh"},"content":"     * Marks the specified task as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":125,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":126,"author":{"gitId":"kaitinghh"},"content":"     * @param taskNum The number of the task to mark as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":127,"author":{"gitId":"kaitinghh"},"content":"     * @return The message indicating the task was marked as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":128,"author":{"gitId":"kaitinghh"},"content":"     * @throws InvalidTaskNumberException If the task number is invalid.","lastModifiedDate":"2024-02-23"},{"lineNumber":129,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":130,"author":{"gitId":"kaitinghh"},"content":"    public static String markTaskAsDone(int taskNum) throws InvalidTaskNumberException {","lastModifiedDate":"2024-02-06"},{"lineNumber":131,"author":{"gitId":"kaitinghh"},"content":"        taskArrayList.getTaskByIdx(taskNum - 1).markAsDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":132,"author":{"gitId":"kaitinghh"},"content":"        return Ui.markTaskAsDoneMessage(taskArrayList.getTaskByIdx(taskNum - 1).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":133,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":136,"author":{"gitId":"kaitinghh"},"content":"     * Converts the task number string to an integer.","lastModifiedDate":"2024-02-23"},{"lineNumber":137,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":138,"author":{"gitId":"kaitinghh"},"content":"     * @param s The task number string.","lastModifiedDate":"2024-02-23"},{"lineNumber":139,"author":{"gitId":"kaitinghh"},"content":"     * @return The integer representation of the task number.","lastModifiedDate":"2024-02-23"},{"lineNumber":140,"author":{"gitId":"kaitinghh"},"content":"     * @throws InvalidTaskNumberException If the task number is invalid.","lastModifiedDate":"2024-02-23"},{"lineNumber":141,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":142,"author":{"gitId":"kaitinghh"},"content":"    private static int convertTaskNumStringToInt(String s) throws InvalidTaskNumberException {","lastModifiedDate":"2024-02-06"},{"lineNumber":143,"author":{"gitId":"kaitinghh"},"content":"        String taskNumString \u003d s.split(\"\\\\s+\")[1];","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"kaitinghh"},"content":"        int taskNum \u003d Integer.parseInt(taskNumString);","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"kaitinghh"},"content":"        if (taskNum \u003e taskArrayList.getLastIdx()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":146,"author":{"gitId":"kaitinghh"},"content":"            throw new InvalidTaskNumberException(taskNumString);","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"kaitinghh"},"content":"        return taskNum;","lastModifiedDate":"2024-02-06"},{"lineNumber":149,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":150,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":151,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":152,"author":{"gitId":"kaitinghh"},"content":"     * Marks the specified task as undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":153,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":154,"author":{"gitId":"kaitinghh"},"content":"     * @param taskNum The number of the task to mark as undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":155,"author":{"gitId":"kaitinghh"},"content":"     * @return The message indicating the task was marked as undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":156,"author":{"gitId":"kaitinghh"},"content":"     * @throws InvalidTaskNumberException If the task number is invalid.","lastModifiedDate":"2024-02-23"},{"lineNumber":157,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":158,"author":{"gitId":"kaitinghh"},"content":"    public static String unmarkTaskAsDone(int taskNum) throws InvalidTaskNumberException {","lastModifiedDate":"2024-02-06"},{"lineNumber":159,"author":{"gitId":"kaitinghh"},"content":"        taskArrayList.getTaskByIdx(taskNum - 1).markAsUndone();","lastModifiedDate":"2024-02-06"},{"lineNumber":160,"author":{"gitId":"kaitinghh"},"content":"        return Ui.markTaskAsUndoneMessage(taskArrayList.getTaskByIdx(taskNum - 1).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":161,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":164,"author":{"gitId":"kaitinghh"},"content":"     * Deletes the specified task.","lastModifiedDate":"2024-02-23"},{"lineNumber":165,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":166,"author":{"gitId":"kaitinghh"},"content":"     * @param requestedDeletion The number of the task to delete.","lastModifiedDate":"2024-02-23"},{"lineNumber":167,"author":{"gitId":"kaitinghh"},"content":"     * @return The message indicating the task was deleted.","lastModifiedDate":"2024-02-23"},{"lineNumber":168,"author":{"gitId":"kaitinghh"},"content":"     * @throws InvalidTaskNumberException If the task number is invalid.","lastModifiedDate":"2024-02-23"},{"lineNumber":169,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":170,"author":{"gitId":"kaitinghh"},"content":"    public static String deleteTask(String requestedDeletion) throws InvalidTaskNumberException {","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"kaitinghh"},"content":"            int taskNum \u003d Integer.parseInt(requestedDeletion);","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"kaitinghh"},"content":"            if (taskNum \u003e taskArrayList.getLastIdx()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":174,"author":{"gitId":"kaitinghh"},"content":"                throw new InvalidTaskNumberException(requestedDeletion);","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":176,"author":{"gitId":"kaitinghh"},"content":"            String deletedTaskString \u003d taskArrayList.getTaskByIdx(taskNum - 1).toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":177,"author":{"gitId":"kaitinghh"},"content":"            storage.removeFromDataStore(taskNum - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":178,"author":{"gitId":"kaitinghh"},"content":"            taskArrayList.removeTask(taskNum - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":179,"author":{"gitId":"kaitinghh"},"content":"            storage \u003d new Storage(FILEPATH);","lastModifiedDate":"2024-02-06"},{"lineNumber":180,"author":{"gitId":"kaitinghh"},"content":"            return Ui.taskRemovalMessage(deletedTaskString, taskArrayList.getLastIdx());","lastModifiedDate":"2024-02-06"},{"lineNumber":181,"author":{"gitId":"kaitinghh"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":182,"author":{"gitId":"kaitinghh"},"content":"            throw new InvalidTaskNumberException(requestedDeletion);","lastModifiedDate":"2024-02-05"},{"lineNumber":183,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":184,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":185,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":186,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":187,"author":{"gitId":"kaitinghh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-25"},{"lineNumber":188,"author":{"gitId":"kaitinghh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2024-02-06"},{"lineNumber":189,"author":{"gitId":"kaitinghh"},"content":"        storage \u003d new Storage(FILEPATH);","lastModifiedDate":"2024-02-06"},{"lineNumber":190,"author":{"gitId":"kaitinghh"},"content":"        taskArrayList \u003d new TaskList(storage.readDataStore());","lastModifiedDate":"2024-02-06"},{"lineNumber":191,"author":{"gitId":"kaitinghh"},"content":"        System.out.println(Ui.hiMessage());","lastModifiedDate":"2024-02-06"},{"lineNumber":192,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":193,"author":{"gitId":"kaitinghh"},"content":"        Scanner userInput \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-25"},{"lineNumber":194,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":195,"author":{"gitId":"kaitinghh"},"content":"        while (!terminate) {","lastModifiedDate":"2024-01-25"},{"lineNumber":196,"author":{"gitId":"kaitinghh"},"content":"            String command \u003d userInput.nextLine();","lastModifiedDate":"2024-01-25"},{"lineNumber":197,"author":{"gitId":"kaitinghh"},"content":"            System.out.println(response(command));","lastModifiedDate":"2024-01-25"},{"lineNumber":198,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":199,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":200,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":200}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"import task.Deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"import task.Event;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"import task.ToDo;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import java.nio.file.*;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"import java.util.List;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":" * The Storage class manages reading from and writing to a data store txt file.","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":" * It handles tasks related to file operations and task data persistence.","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"public class Storage {","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"    private String filePath;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    private int lastIdx \u003d 0;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"            if (!Files.exists(path)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"                Files.createFile(path);","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"                System.out.println(\"Data store created.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"            readDataStore();","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"     * Reads tasks from the data store file and populates an ArrayList with Task objects.","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"kaitinghh"},"content":"     * @return An ArrayList containing Task objects read from the data store.","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"kaitinghh"},"content":"    public ArrayList\u003cTask\u003e readDataStore() {","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"kaitinghh"},"content":"        Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"kaitinghh"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"kaitinghh"},"content":"            this.lastIdx \u003d 0;","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"kaitinghh"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path);","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"kaitinghh"},"content":"            for (String line : lines) {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"kaitinghh"},"content":"                Task task \u003d convertTaskLineToTask(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"kaitinghh"},"content":"                taskArrayList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"kaitinghh"},"content":"                markDataStoreTaskStatus(task, line);","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"kaitinghh"},"content":"                this.lastIdx++;","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"kaitinghh"},"content":"        return taskArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"kaitinghh"},"content":"     * Adds a task to the data store file.","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"kaitinghh"},"content":"     * @param task The task to add to the data store.","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":67,"author":{"gitId":"kaitinghh"},"content":"    public void addToDataStore(Task task) {","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"kaitinghh"},"content":"        String newTaskLine \u003d task.convertToDataStoreLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"kaitinghh"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.filePath, true))) {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"kaitinghh"},"content":"            writer.write(newTaskLine);","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"kaitinghh"},"content":"            writer.newLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"kaitinghh"},"content":"            System.out.println(\"Line added to the file successfully.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"kaitinghh"},"content":"        this.lastIdx++;","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"kaitinghh"},"content":"     * Removes a task from the data store file by its index.","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"kaitinghh"},"content":"     * @param idx The index of the task to remove.","lastModifiedDate":"2024-02-23"},{"lineNumber":83,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":84,"author":{"gitId":"kaitinghh"},"content":"    public void removeFromDataStore(int idx) {","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"kaitinghh"},"content":"        String tempFilePathString \u003d this.filePath + \".temp\";","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"kaitinghh"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"kaitinghh"},"content":"             BufferedWriter writer \u003d new BufferedWriter(new FileWriter(tempFilePathString))) {","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"kaitinghh"},"content":"            String currentLine;","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"kaitinghh"},"content":"            int currentLineNumber \u003d 1;","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"kaitinghh"},"content":"            while ((currentLine \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"kaitinghh"},"content":"                if (currentLineNumber !\u003d idx + 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"kaitinghh"},"content":"                    writer.write(currentLine);","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"kaitinghh"},"content":"                    writer.newLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"kaitinghh"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"kaitinghh"},"content":"                currentLineNumber++;","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"kaitinghh"},"content":"            Files.move(Path.of(tempFilePathString), Path.of(this.filePath), StandardCopyOption.REPLACE_EXISTING);","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":112,"author":{"gitId":"kaitinghh"},"content":"     * Converts a task data store line to a Task object.","lastModifiedDate":"2024-02-23"},{"lineNumber":113,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":114,"author":{"gitId":"kaitinghh"},"content":"     * @param line The task data store line to convert.","lastModifiedDate":"2024-02-23"},{"lineNumber":115,"author":{"gitId":"kaitinghh"},"content":"     * @return The Task object represented by the input line.","lastModifiedDate":"2024-02-23"},{"lineNumber":116,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":117,"author":{"gitId":"kaitinghh"},"content":"    private Task convertTaskLineToTask(String line) {","lastModifiedDate":"2024-02-06"},{"lineNumber":118,"author":{"gitId":"kaitinghh"},"content":"        String[] splitLine \u003d line.split(\"\\\\|\");","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"kaitinghh"},"content":"        String taskAlphabet \u003d splitLine[0];","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"kaitinghh"},"content":"        switch (taskAlphabet) {","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"kaitinghh"},"content":"            case \"T\":","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"kaitinghh"},"content":"                return new ToDo(splitLine[2]);","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"kaitinghh"},"content":"            case \"D\":","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"kaitinghh"},"content":"                return new Deadline(splitLine[2], splitLine[3]);","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"kaitinghh"},"content":"            case \"E\":","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"kaitinghh"},"content":"                return new Event(splitLine[2], splitLine[3], splitLine[4]);","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"kaitinghh"},"content":"            default:","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"kaitinghh"},"content":"                return null;","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":133,"author":{"gitId":"kaitinghh"},"content":"     * Marks the status of a task in the data store as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":134,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":135,"author":{"gitId":"kaitinghh"},"content":"     * @param task     The task to mark as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":136,"author":{"gitId":"kaitinghh"},"content":"     * @param taskLine The task data store line containing the task.","lastModifiedDate":"2024-02-23"},{"lineNumber":137,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":138,"author":{"gitId":"kaitinghh"},"content":"    private static void markDataStoreTaskStatus(Task task, String taskLine) {","lastModifiedDate":"2024-02-05"},{"lineNumber":139,"author":{"gitId":"kaitinghh"},"content":"        String[] splitLine \u003d taskLine.split(\"\\\\|\");","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"kaitinghh"},"content":"        if (Objects.equals(splitLine[1], \"1\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"kaitinghh"},"content":"            task.markAsDone();","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":146,"author":{"gitId":"kaitinghh"},"content":"     * Edits the status of a task in the data store to mark it as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":147,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":148,"author":{"gitId":"kaitinghh"},"content":"     * @param i The index of the task to mark as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":149,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":150,"author":{"gitId":"kaitinghh"},"content":"    public void editDataStoreTaskAsDone(int i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":151,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":152,"author":{"gitId":"kaitinghh"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2024-02-06"},{"lineNumber":153,"author":{"gitId":"kaitinghh"},"content":"            StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":154,"author":{"gitId":"kaitinghh"},"content":"            String line;","lastModifiedDate":"2024-02-06"},{"lineNumber":155,"author":{"gitId":"kaitinghh"},"content":"            int currentLineNumber \u003d 0;","lastModifiedDate":"2024-02-06"},{"lineNumber":156,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":157,"author":{"gitId":"kaitinghh"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-06"},{"lineNumber":158,"author":{"gitId":"kaitinghh"},"content":"                currentLineNumber++;","lastModifiedDate":"2024-02-06"},{"lineNumber":159,"author":{"gitId":"kaitinghh"},"content":"                if (currentLineNumber \u003d\u003d i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":160,"author":{"gitId":"kaitinghh"},"content":"                    line \u003d line.replace(\"0\", \"1\");","lastModifiedDate":"2024-02-06"},{"lineNumber":161,"author":{"gitId":"kaitinghh"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":162,"author":{"gitId":"kaitinghh"},"content":"                content.append(line);","lastModifiedDate":"2024-02-06"},{"lineNumber":163,"author":{"gitId":"kaitinghh"},"content":"                content.append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":164,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":165,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":166,"author":{"gitId":"kaitinghh"},"content":"            reader.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":167,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":168,"author":{"gitId":"kaitinghh"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.filePath));","lastModifiedDate":"2024-02-06"},{"lineNumber":169,"author":{"gitId":"kaitinghh"},"content":"            writer.write(content.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":170,"author":{"gitId":"kaitinghh"},"content":"            writer.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":171,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":172,"author":{"gitId":"kaitinghh"},"content":"            System.out.println(\"File successfully updated.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":173,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":174,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":175,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":176,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":177,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":178,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":179,"author":{"gitId":"kaitinghh"},"content":"     * Edits the status of a task in the data store to mark it as undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":180,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":181,"author":{"gitId":"kaitinghh"},"content":"     * @param i The index of the task to mark as undone.","lastModifiedDate":"2024-02-23"},{"lineNumber":182,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":183,"author":{"gitId":"kaitinghh"},"content":"    public void editDataStoreTaskAsUndone(int i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":184,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":185,"author":{"gitId":"kaitinghh"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2024-02-06"},{"lineNumber":186,"author":{"gitId":"kaitinghh"},"content":"            StringBuilder content \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":187,"author":{"gitId":"kaitinghh"},"content":"            String line;","lastModifiedDate":"2024-02-06"},{"lineNumber":188,"author":{"gitId":"kaitinghh"},"content":"            int currentLineNumber \u003d 0;","lastModifiedDate":"2024-02-06"},{"lineNumber":189,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":190,"author":{"gitId":"kaitinghh"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-06"},{"lineNumber":191,"author":{"gitId":"kaitinghh"},"content":"                currentLineNumber++;","lastModifiedDate":"2024-02-06"},{"lineNumber":192,"author":{"gitId":"kaitinghh"},"content":"                if (currentLineNumber \u003d\u003d i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":193,"author":{"gitId":"kaitinghh"},"content":"                    line \u003d line.replace(\"1\", \"0\");","lastModifiedDate":"2024-02-06"},{"lineNumber":194,"author":{"gitId":"kaitinghh"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":195,"author":{"gitId":"kaitinghh"},"content":"                content.append(line);","lastModifiedDate":"2024-02-06"},{"lineNumber":196,"author":{"gitId":"kaitinghh"},"content":"                content.append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":197,"author":{"gitId":"kaitinghh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":198,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":199,"author":{"gitId":"kaitinghh"},"content":"            reader.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":200,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":201,"author":{"gitId":"kaitinghh"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.filePath));","lastModifiedDate":"2024-02-06"},{"lineNumber":202,"author":{"gitId":"kaitinghh"},"content":"            writer.write(content.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":203,"author":{"gitId":"kaitinghh"},"content":"            writer.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":204,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":205,"author":{"gitId":"kaitinghh"},"content":"            System.out.println(\"File successfully updated.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":206,"author":{"gitId":"kaitinghh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":207,"author":{"gitId":"kaitinghh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":208,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":209,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":210,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":211,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"kaitinghh":211}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":" * The TaskList class represents a list of tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":" * It provides methods for adding, removing, and accessing tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"public class TaskList {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    private ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    private int lastIdx \u003d 0;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"        this.taskArrayList \u003d taskArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"        this.lastIdx \u003d taskArrayList.size();","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"     * Adds a task to the list.","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"     * @param task The task to add.","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"        this.taskArrayList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"        this.lastIdx++;","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"     * Removes a task from the list by its index.","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"     * @param i The index of the task to remove.","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"    public void removeTask(int i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"        this.taskArrayList.remove(i);","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"        this.lastIdx--;","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"     * Retrieves the list of tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"kaitinghh"},"content":"     * @return The list of tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"kaitinghh"},"content":"    public ArrayList\u003cTask\u003e getTaskArrayList() {","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"kaitinghh"},"content":"        return this.taskArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":48,"author":{"gitId":"kaitinghh"},"content":"     * Retrieves a task from the list by its index.","lastModifiedDate":"2024-02-23"},{"lineNumber":49,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"kaitinghh"},"content":"     * @param idx The index of the task to retrieve.","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"kaitinghh"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"kaitinghh"},"content":"    public Task getTaskByIdx(int idx) {","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"kaitinghh"},"content":"        return this.taskArrayList.get(idx);","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"kaitinghh"},"content":"     * Retrieves the index of the last task in the list.","lastModifiedDate":"2024-02-23"},{"lineNumber":59,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"kaitinghh"},"content":"     * @return The index of the last task.","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"kaitinghh"},"content":"    public int getLastIdx() {","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"kaitinghh"},"content":"        return this.lastIdx;","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"kaitinghh":66}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"public class Ui {","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"    public static final String HI_MESSAGE \u003d \"Hello! I\u0027m BotChat.\\n What can I do for you?\";","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"    public static final String BYE_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"    public static String hiMessage() {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"        return HI_MESSAGE;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"    public static String byeMessage() {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"        return BYE_MESSAGE;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    public static String taskRemovalMessage(String deletedTaskString, int tasksLeft) {","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"Noted. I\u0027ve removed this task: \\n %s \\n Now you have %d tasks in the list.\",","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"                deletedTaskString, tasksLeft);","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"    public static String addTaskMessage(String taskString, int tasksLeft) {","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n %s \\n Now you have %d tasks in the list.\",","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"                taskString, tasksLeft);","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    public static String markTaskAsDoneMessage(String taskString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done: \\n %s\", taskString);","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"    public static String markTaskAsUndoneMessage(String taskString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"Nooo! I\u0027ve marked this task as undone: \\n %s\", taskString);","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"kaitinghh":34}},{"path":"src/main/java/exception/IncompleteCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package exception;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"public class IncompleteCommandException extends Exception {","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"    public IncompleteCommandException(String s) {","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"        super(s);","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"        return super.getMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"kaitinghh":14}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package exception;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"    public InvalidCommandException(String s) {","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"        super(String.format(\"Invalid command %s. Please try again with todo, \" +","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"                \"deadline event or list.\", s));","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"        return super.getMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"kaitinghh":13}},{"path":"src/main/java/exception/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package exception;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"public class InvalidTaskNumberException extends Exception {","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"    public InvalidTaskNumberException(String s) {","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"        super(String.format(\"Invalid task number %s. Please try again.\", s));","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"        return super.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"kaitinghh":12}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package parser;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import exception.IncompleteCommandException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":" * The Parser class provides methods for extracting command and description from a string.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"public class Parser {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"     * Extracts the command from the given string.","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"     * @param string The input string containing the command.","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"     * @return The extracted command.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"    public String extractCommand(String string) {","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"        String[] splitString;","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"        splitString \u003d string.split(\" \", 2);","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"        return splitString[0];","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"     * Extracts the description from the given string.","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"     * @param string The input string containing the command and description.","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"     * @return The extracted description.","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"     * @throws IncompleteCommandException If the command is missing a description.","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"    public String extractDescription(String string) throws IncompleteCommandException {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"        String[] splitString;","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"            splitString \u003d string.split(\" \", 2);","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"            return splitString[1];","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"            throw new IncompleteCommandException(\"Command is missing a description.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"kaitinghh":41}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package task;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    private static final DateTimeFormatter ORIGINAL_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyyHHmm\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    public Deadline(String s, String deadlineString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"        super(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"        String cleanedString \u003d deadlineString.replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"        LocalDateTime deadline \u003d LocalDateTime.parse(cleanedString, ORIGINAL_FORMATTER);","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), this.deadline);","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    public String convertToDataStoreLine() {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"D|%s|%s|%s\", super.convertToDataStoreLine(), super.getTaskString(),","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"                this.deadline.format(ORIGINAL_FORMATTER));","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":30}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package task;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"    private LocalDateTime startTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"    private LocalDateTime endTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    private static final DateTimeFormatter ORIGINAL_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyyHHmm\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    public Event(String s, String startTimeString, String endTimeString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"        super(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"        startTimeString \u003d startTimeString.replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"        DateTimeFormatter originalFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyyHHmm\");","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"        LocalDateTime startTime \u003d LocalDateTime.parse(startTimeString, originalFormatter);","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"        endTimeString \u003d endTimeString.replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"        LocalDateTime endTime \u003d LocalDateTime.parse(endTimeString, originalFormatter);","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"[E] %s (from: %s to: %s)\", super.toString(),","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"                this.startTime.format(ORIGINAL_FORMATTER),","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"                this.endTime.format(ORIGINAL_FORMATTER));","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"    public String convertToDataStoreLine() {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"        return String.format(\"E|%s|%s|%s|%s\", super.convertToDataStoreLine(),","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"                super.getTaskString(), this.startTime, this.endTime);","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":37}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package task;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"    private boolean done;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"    private String taskString;","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"    public Task(String s) {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"        this.taskString \u003d s;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"        this.done \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"        this.done \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"        this.done \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"    public boolean getDoneStatus() {","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"        return this.done;","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"    public String getTaskString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"        return this.taskString;","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"        if (this.getDoneStatus()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"            return String.format(\"[X] %s\", this.taskString);","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"        } else {","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"            return String.format(\"[ ] %s\", this.taskString);","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"    public String convertToDataStoreLine() {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"        if (this.getDoneStatus()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"            return \"1\";","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"            return \"0\";","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"kaitinghh"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":43}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package task;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import task.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"    public ToDo(String s) {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"        super(s);","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"       return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    public String convertToDataStoreLine() {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"        return \"T|\"+ super.convertToDataStoreLine() + \"|\" + super.getTaskString();","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":19}},{"path":"src/test/java/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package parser;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import exception.IncompleteCommandException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    public void extractCommand_twoWordInput_returnsExtractedCommand() {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"        String string \u003d \"todo something\";","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"        String expected \u003d \"todo\";","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"        assertEquals(expected, parser.extractCommand(string));","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"    public void extractCommand_multipleWordInput_returnsExtractedCommand(){","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"        String string \u003d \"deadline return book /by Sunday\";","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"        String expected \u003d \"deadline\";","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"        assertEquals(expected, parser.extractCommand(string));","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"kaitinghh"},"content":"    public void extractDescription_validInput_returnsExtractedDescription() throws IncompleteCommandException {","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"kaitinghh"},"content":"        String string \u003d \"deadline return book /by Sunday\";","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"kaitinghh"},"content":"        String expected \u003d \"return book /by Sunday\";","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"kaitinghh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"kaitinghh"},"content":"        assertEquals(expected, parser.extractDescription(string));","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"kaitinghh"},"content":"    public void extractDescription_incompleteInput_returnsExtractedDescription() {","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"kaitinghh"},"content":"        String string \u003d \"deadline\";","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"kaitinghh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"kaitinghh"},"content":"        assertThrows(IncompleteCommandException.class, () -\u003e parser.extractDescription(string));","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"kaitinghh":40}},{"path":"src/test/java/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"package task;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"import exception.IncompleteCommandException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"    public void markAsDone_undoneTask_marksTaskAsDone() {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"        Task task \u003d new ToDo(\"watch movie\");","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"        task.markAsDone();","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"        assertEquals(true, task.getDoneStatus());","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"kaitinghh"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"kaitinghh"},"content":"    public void markAsUndone_doneTask_marksTaskAsUndone() {","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"kaitinghh"},"content":"        Task task \u003d new ToDo(\"watch movie\");","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"kaitinghh"},"content":"        task.markAsDone();","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"kaitinghh"},"content":"        task.markAsUndone();","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"kaitinghh"},"content":"        assertEquals(false, task.getDoneStatus());","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"kaitinghh"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"kaitinghh":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaitinghh"},"content":"erm","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"kaitinghh"},"content":"todo","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"kaitinghh"},"content":"todo borrow book","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"kaitinghh"},"content":"deadline return book","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"kaitinghh"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"kaitinghh"},"content":"mark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"kaitinghh"},"content":"mark 2","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"kaitinghh"},"content":"mark 3","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"kaitinghh"},"content":"unmark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"kaitinghh"},"content":"event /from Mon 2pm","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"kaitinghh"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"kaitinghh"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kaitinghh"},"content":"delete 1","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"kaitinghh"},"content":"delete 3","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"kaitinghh"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"kaitinghh"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kaitinghh":16}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"kaitinghh"},"content":"java -classpath ../bin BotChat \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kaitinghh":1,"-":37}}]
