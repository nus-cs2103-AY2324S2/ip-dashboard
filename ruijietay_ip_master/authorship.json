[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"# Capone project template","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"3. After that, locate the `src/main/java/Capone.java` file, right-click it, and choose `Run Capone.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"   ░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"   ░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"   ░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":5,"-":17}},{"path":"src/main/java/Capone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"import java.util.Objects;","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"import java.util.regex.*;","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"public class Capone {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    // We assume there is no more than 100 tasks added.","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"    public static void printWelcomeMsg() {","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"        String logo \u003d \"░█▀▀░█▀█░█▀█░█▀█░█▀█░█▀▀░\\n\"","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"                + \"░█░░░█▀█░█▀▀░█░█░█░█░█▀▀░\\n\"","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"                + \"░▀▀▀░▀░▀░▀░░░▀▀▀░▀░▀░▀▀▀░\";","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Hello! I\u0027m\\n%s\\nWhat can I do for you?\\n%n\", logo);","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"//    public static void addTask(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"//        // Combine the words back into a single string.","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"//        StringBuilder combinedString \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"//        for (String s : inputList) {","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"//            combinedString.append(s).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"//        }","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"//","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"//        Task newTask \u003d new Task(combinedString.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"//","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"//        // Store task in array and increment counter.","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"ruijietay"},"content":"//        tasks.add(newTask);","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"ruijietay"},"content":"//","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"ruijietay"},"content":"//        // Inform user that task has been added.","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"ruijietay"},"content":"//        System.out.printf(\"added: %s\\n\", newTask.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"ruijietay"},"content":"//    }","lastModifiedDate":"2024-01-24"},{"lineNumber":33,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"ruijietay"},"content":"    public static void listTasks() {","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"ruijietay"},"content":"            System.out.printf(\"%d. %s\\n\", i+1, tasks.get(i).toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":39,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"ruijietay"},"content":"    public static void markTask(int ndx) {","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"ruijietay"},"content":"        // TODO: Add error checking for index out of bounds.","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":43,"author":{"gitId":"ruijietay"},"content":"        // Mark task as done.","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"ruijietay"},"content":"        Task markedTask \u003d tasks.get(ndx-1);","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ruijietay"},"content":"        markedTask.markTask();","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":47,"author":{"gitId":"ruijietay"},"content":"        // Inform user that task has been marked.","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + markedTask);","lastModifiedDate":"2024-01-24"},{"lineNumber":49,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":50,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"ruijietay"},"content":"    public static void unmarkTask(int ndx) {","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"ruijietay"},"content":"        // TODO: Add error checking for index out of bounds.","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"ruijietay"},"content":"        // Mark task as done.","lastModifiedDate":"2024-01-24"},{"lineNumber":55,"author":{"gitId":"ruijietay"},"content":"        Task unmarkedTask \u003d tasks.get(ndx-1);","lastModifiedDate":"2024-01-24"},{"lineNumber":56,"author":{"gitId":"ruijietay"},"content":"        unmarkedTask.unmarkTask();","lastModifiedDate":"2024-01-24"},{"lineNumber":57,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"ruijietay"},"content":"        // Inform user that task has been marked.","lastModifiedDate":"2024-01-24"},{"lineNumber":59,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + unmarkedTask);","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"ruijietay"},"content":"    public static void processTodo(ArrayList\u003cString\u003e inputList) throws CaponeException {","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"ruijietay"},"content":"        // If the inputList has only one string, throw error (insufficient args).","lastModifiedDate":"2024-01-24"},{"lineNumber":64,"author":{"gitId":"ruijietay"},"content":"        if (inputList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":65,"author":{"gitId":"ruijietay"},"content":"            throw new CaponeException(\"Please enter a description for this ToDo task!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":66,"author":{"gitId":"ruijietay"},"content":"                    \"Usage: todo [description]\");","lastModifiedDate":"2024-01-24"},{"lineNumber":67,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"ruijietay"},"content":"        // Combine the remaining words into a single string","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":70,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":71,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":72,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":73,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":74,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":75,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":76,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":77,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":78,"author":{"gitId":"ruijietay"},"content":"        ToDo newTodo \u003d new ToDo(description.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":79,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":80,"author":{"gitId":"ruijietay"},"content":"        tasks.add(newTodo);","lastModifiedDate":"2024-01-24"},{"lineNumber":81,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":82,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":83,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", newTodo.toString(), tasks.size());","lastModifiedDate":"2024-01-24"},{"lineNumber":84,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":85,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":86,"author":{"gitId":"ruijietay"},"content":"    public static void processDeadline(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-24"},{"lineNumber":87,"author":{"gitId":"ruijietay"},"content":"        // TODO: Error checking if date is empty?","lastModifiedDate":"2024-01-24"},{"lineNumber":88,"author":{"gitId":"ruijietay"},"content":"        int byNdx \u003d inputList.indexOf(\"/by\");","lastModifiedDate":"2024-01-24"},{"lineNumber":89,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":90,"author":{"gitId":"ruijietay"},"content":"        // Combine the remaining words into a single string","lastModifiedDate":"2024-01-24"},{"lineNumber":91,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":92,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c byNdx; i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":93,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d byNdx - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":94,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":95,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":96,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":97,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":98,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":99,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":100,"author":{"gitId":"ruijietay"},"content":"        StringBuilder byDate \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":101,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d byNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":102,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":103,"author":{"gitId":"ruijietay"},"content":"                byDate.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":104,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":105,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":106,"author":{"gitId":"ruijietay"},"content":"            byDate.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":107,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":108,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":109,"author":{"gitId":"ruijietay"},"content":"        Deadline newDeadline \u003d new Deadline(description.toString(), byDate.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":110,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":111,"author":{"gitId":"ruijietay"},"content":"        tasks.add(newDeadline);","lastModifiedDate":"2024-01-24"},{"lineNumber":112,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":113,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":114,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", newDeadline.toString(), tasks.size());","lastModifiedDate":"2024-01-24"},{"lineNumber":115,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":116,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":117,"author":{"gitId":"ruijietay"},"content":"    public static void processEvent(ArrayList\u003cString\u003e inputList) {","lastModifiedDate":"2024-01-24"},{"lineNumber":118,"author":{"gitId":"ruijietay"},"content":"        int fromNdx \u003d inputList.indexOf(\"/from\");","lastModifiedDate":"2024-01-24"},{"lineNumber":119,"author":{"gitId":"ruijietay"},"content":"        int toNdx \u003d inputList.indexOf(\"/to\");","lastModifiedDate":"2024-01-24"},{"lineNumber":120,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":121,"author":{"gitId":"ruijietay"},"content":"        // TODO: Error checking for invalid from and to inputs","lastModifiedDate":"2024-01-24"},{"lineNumber":122,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":123,"author":{"gitId":"ruijietay"},"content":"        // Combine the task description into a single string.","lastModifiedDate":"2024-01-24"},{"lineNumber":124,"author":{"gitId":"ruijietay"},"content":"        StringBuilder description \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":125,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d 1; i \u003c fromNdx; i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":126,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d fromNdx - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":127,"author":{"gitId":"ruijietay"},"content":"                description.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":128,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":129,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":130,"author":{"gitId":"ruijietay"},"content":"            description.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":131,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":132,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":133,"author":{"gitId":"ruijietay"},"content":"        StringBuilder fromDate \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":134,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d fromNdx + 1; i \u003c toNdx; i ++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":135,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d toNdx - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":136,"author":{"gitId":"ruijietay"},"content":"                fromDate.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":137,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":138,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":139,"author":{"gitId":"ruijietay"},"content":"            fromDate.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":140,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":141,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":142,"author":{"gitId":"ruijietay"},"content":"        StringBuilder toDate \u003d new StringBuilder();","lastModifiedDate":"2024-01-24"},{"lineNumber":143,"author":{"gitId":"ruijietay"},"content":"        for (int i \u003d toNdx + 1; i \u003c inputList.size(); i++) {","lastModifiedDate":"2024-01-24"},{"lineNumber":144,"author":{"gitId":"ruijietay"},"content":"            if (i \u003d\u003d inputList.size() - 1) {","lastModifiedDate":"2024-01-24"},{"lineNumber":145,"author":{"gitId":"ruijietay"},"content":"                toDate.append(inputList.get(i));","lastModifiedDate":"2024-01-24"},{"lineNumber":146,"author":{"gitId":"ruijietay"},"content":"                break;","lastModifiedDate":"2024-01-24"},{"lineNumber":147,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":148,"author":{"gitId":"ruijietay"},"content":"            toDate.append(inputList.get(i)).append(\" \");","lastModifiedDate":"2024-01-24"},{"lineNumber":149,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":150,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":151,"author":{"gitId":"ruijietay"},"content":"        Event newEvent \u003d new Event(description.toString(), fromDate.toString(), toDate.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":152,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":153,"author":{"gitId":"ruijietay"},"content":"        tasks.add(newEvent);","lastModifiedDate":"2024-01-24"},{"lineNumber":154,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":155,"author":{"gitId":"ruijietay"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":156,"author":{"gitId":"ruijietay"},"content":"                \"Now you have %d task(s) in the list.\\n\", newEvent.toString(), tasks.size());","lastModifiedDate":"2024-01-24"},{"lineNumber":157,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":158,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":159,"author":{"gitId":"ruijietay"},"content":"    public static void invalidCommand() throws CaponeException{","lastModifiedDate":"2024-01-24"},{"lineNumber":160,"author":{"gitId":"ruijietay"},"content":"        throw new CaponeException(\"I\u0027m sorry, I don\u0027t understand what you just said.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":161,"author":{"gitId":"ruijietay"},"content":"                \"Use -h to display the list of valid commands\");","lastModifiedDate":"2024-01-24"},{"lineNumber":162,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":163,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":164,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":165,"author":{"gitId":"ruijietay"},"content":"    public static void displayHelp() {","lastModifiedDate":"2024-01-24"},{"lineNumber":166,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"Commands I understand:\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":167,"author":{"gitId":"ruijietay"},"content":"                \"1. list - Lists the tasks entered.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":168,"author":{"gitId":"ruijietay"},"content":"                \"2. todo [description] - Creates a new ToDo task. Remember to enter the description!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":169,"author":{"gitId":"ruijietay"},"content":"                \"3. deadline [description] /by [date] - Creates a new Deadline task.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":170,"author":{"gitId":"ruijietay"},"content":"                \"   Remember to enter the description and date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":171,"author":{"gitId":"ruijietay"},"content":"                \"4. event [description] /from [date] /to [date] - Creates a new Event task.\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":172,"author":{"gitId":"ruijietay"},"content":"                \"   Remember to enter the description, as well as the start and end date!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":173,"author":{"gitId":"ruijietay"},"content":"                \"5. mark [index] - Marks a task as completed. Use this in conjunction with the \u0027list\u0027 command!\\n\" +","lastModifiedDate":"2024-01-24"},{"lineNumber":174,"author":{"gitId":"ruijietay"},"content":"                \"6. unmark [index] - Unmarks a task. Use this in conjunction with the \u0027list\u0027 command!\\n\");","lastModifiedDate":"2024-01-24"},{"lineNumber":175,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":176,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":177,"author":{"gitId":"ruijietay"},"content":"    public static void processInputs() {","lastModifiedDate":"2024-01-23"},{"lineNumber":178,"author":{"gitId":"ruijietay"},"content":"        // Create a Scanner object to read user input","lastModifiedDate":"2024-01-23"},{"lineNumber":179,"author":{"gitId":"ruijietay"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-23"},{"lineNumber":180,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":181,"author":{"gitId":"ruijietay"},"content":"        while (true) {","lastModifiedDate":"2024-01-24"},{"lineNumber":182,"author":{"gitId":"ruijietay"},"content":"            // Read the user input","lastModifiedDate":"2024-01-23"},{"lineNumber":183,"author":{"gitId":"ruijietay"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-01-23"},{"lineNumber":184,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":185,"author":{"gitId":"ruijietay"},"content":"            // Split inputs by space and store them in an arraylist for processing.","lastModifiedDate":"2024-01-24"},{"lineNumber":186,"author":{"gitId":"ruijietay"},"content":"            ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e(Arrays.asList(input.split(\"\\\\s+\")));","lastModifiedDate":"2024-01-24"},{"lineNumber":187,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":188,"author":{"gitId":"ruijietay"},"content":"            // TODO: Error checking for empty input?","lastModifiedDate":"2024-01-24"},{"lineNumber":189,"author":{"gitId":"ruijietay"},"content":"            String firstWord \u003d inputList.get(0);","lastModifiedDate":"2024-01-24"},{"lineNumber":190,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":191,"author":{"gitId":"ruijietay"},"content":"            try {","lastModifiedDate":"2024-01-24"},{"lineNumber":192,"author":{"gitId":"ruijietay"},"content":"                if (firstWord.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":193,"author":{"gitId":"ruijietay"},"content":"                    listTasks();","lastModifiedDate":"2024-01-23"},{"lineNumber":194,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":195,"author":{"gitId":"ruijietay"},"content":"                    // TODO: Error checking for insufficient args/out of bounds.","lastModifiedDate":"2024-01-24"},{"lineNumber":196,"author":{"gitId":"ruijietay"},"content":"                    markTask(Integer.parseInt(inputList.get(1)));","lastModifiedDate":"2024-01-24"},{"lineNumber":197,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":198,"author":{"gitId":"ruijietay"},"content":"                    // TODO: Error checking for insufficient args/out of bounds.","lastModifiedDate":"2024-01-24"},{"lineNumber":199,"author":{"gitId":"ruijietay"},"content":"                    unmarkTask(Integer.parseInt(inputList.get(1)));","lastModifiedDate":"2024-01-24"},{"lineNumber":200,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":201,"author":{"gitId":"ruijietay"},"content":"                    processTodo(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":202,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":203,"author":{"gitId":"ruijietay"},"content":"                    processDeadline(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":204,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":205,"author":{"gitId":"ruijietay"},"content":"                    processEvent(inputList);","lastModifiedDate":"2024-01-24"},{"lineNumber":206,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":207,"author":{"gitId":"ruijietay"},"content":"                    break;","lastModifiedDate":"2024-01-24"},{"lineNumber":208,"author":{"gitId":"ruijietay"},"content":"                } else if (firstWord.equalsIgnoreCase(\"-h\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":209,"author":{"gitId":"ruijietay"},"content":"                    displayHelp();","lastModifiedDate":"2024-01-24"},{"lineNumber":210,"author":{"gitId":"ruijietay"},"content":"                } else {","lastModifiedDate":"2024-01-24"},{"lineNumber":211,"author":{"gitId":"ruijietay"},"content":"                    invalidCommand();","lastModifiedDate":"2024-01-24"},{"lineNumber":212,"author":{"gitId":"ruijietay"},"content":"                }","lastModifiedDate":"2024-01-23"},{"lineNumber":213,"author":{"gitId":"ruijietay"},"content":"            } catch (CaponeException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":214,"author":{"gitId":"ruijietay"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-24"},{"lineNumber":215,"author":{"gitId":"ruijietay"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":216,"author":{"gitId":"ruijietay"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":217,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":218,"author":{"gitId":"ruijietay"},"content":"        // If user entered \"bye\", exit program. Clean up.","lastModifiedDate":"2024-01-24"},{"lineNumber":219,"author":{"gitId":"ruijietay"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-01-23"},{"lineNumber":220,"author":{"gitId":"ruijietay"},"content":"        scanner.close();","lastModifiedDate":"2024-01-24"},{"lineNumber":221,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":222,"author":{"gitId":"ruijietay"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-23"},{"lineNumber":223,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":224,"author":{"gitId":"ruijietay"},"content":"        Capone.printWelcomeMsg();","lastModifiedDate":"2024-01-23"},{"lineNumber":225,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":226,"author":{"gitId":"ruijietay"},"content":"        Capone.processInputs();","lastModifiedDate":"2024-01-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ruijietay":226,"-":2}},{"path":"src/main/java/CaponeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class CaponeException extends Exception {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    public CaponeException(String e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"        super(e);","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":5}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    protected String deadline;","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.deadline + \")\";","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"    protected String fromDate;","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"    protected  String toDate;","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"    public Event(String description, String fromDate, String toDate) {","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.fromDate + \" to: \" + this.toDate +\")\";","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":16}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"    public void markTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"    public void unmarkTask() {","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ruijietay"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"ruijietay"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"ruijietay":27}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruijietay"},"content":"todo make cake","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ruijietay"},"content":"deadline submit weekly report /by friday 26 Jan 2023","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ruijietay"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ruijietay"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ruijietay"},"content":"event party at home /from saturday, 27 jan 2023 /to 28 jan 2023, sunday","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ruijietay"},"content":"mark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ruijietay"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ruijietay"},"content":"unmark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"ruijietay"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ruijietay"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ruijietay":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ruijietay"},"content":"java -classpath ..\\bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"ruijietay"},"content":"java -classpath ../bin Capone \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"ruijietay"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruijietay":2,"-":36}}]
