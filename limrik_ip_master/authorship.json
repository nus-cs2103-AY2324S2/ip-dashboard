[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"    mainClassName \u003d \"Duke\"","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"checkstyle {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"limrik":20,"-":41}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"    private void flip() {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"        db.flip();","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"        return db;","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import commands.Command;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import exception.UncleBobException;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import parser.Parser;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" * javafx.Main class representing the Duke application.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Constructs a Duke object with the specified file path.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param filePath the file path for loading and saving tasks","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"            this.tasks \u003d storage.loadFile();","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"            System.out.println(e);","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"            return c.execute(tasks, storage);","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        } catch (UncleBobException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":35,"-":3}},{"path":"src/main/java/JavaFx.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"public class JavaFx {","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"        // ...","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"        return \"Duke heard: \" + input;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":15}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class Launcher {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":11}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"            stage.show();","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" * Controller for javafx.MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        dialogContainer.getChildren()","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"                .add(DialogBox.getDukeDialog(\"Hello! I\u0027m Uncle Bob \\nWhat can uncle do for you?\", dukeImage));","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        duke \u003d d;","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        );","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":51}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import exception.UncleBobException;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Represents the commands that Uncle Bob can execute.","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    protected TaskList tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    protected Storage storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    public Command() {}","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Executes command.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     * To be overwritten by child classes.","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"     * @throws UncleBobException If user input is not in the correct format.","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws UncleBobException;","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":25}},{"path":"src/main/java/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import exception.DeadlineFormatException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import task.Deadline;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":" * Represents the command used to add a deadline task to the task list.","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Got it. Uncle added this deadline:\\n\\t\\t %s \"","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"            + \"\\n\\t Now you have %s task(s) in the list.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     * Creates a new DeadlineCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing description and deadline.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    public DeadlineCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"     * Executes the DeadlineCommand, adding a deadline task to the task list based on the provided input message.","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"     * The input message is expected to contain a description and a deadline, separated by \"/by\".","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"     * The description represents the task\u0027s details, and the deadline is the date by which the task must be completed.","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"     * If the input does not follow the correct format or if the date is invalid, a DeadlineFormatException is thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"     * @throws DeadlineFormatException Thrown when the input does not follow the correct deadline command format","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"     *                                or if the provided deadline date is invalid.","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) throws DeadlineFormatException {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        String[] args \u003d message.split(\"/by\");","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        if (args.length \u003d\u003d 1 || args.length \u003e 2) {","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"            throw new DeadlineFormatException();","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        String desc \u003d args[0].trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"        String by \u003d args[1].trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"            Task deadline \u003d new Deadline(desc, LocalDate.parse(by));","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"            tasks.addTasks(deadline);","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"            storage.appendToFile(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"            return String.format(SUCCESS_MESSAGE, deadline, tasks.numTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"            throw new DeadlineFormatException();","lastModifiedDate":"2024-01-29"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":63}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Represents the command used to delete a task from the task list.","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Uncle deleted this item:\\n\\t\\t %s\"","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"            + \"\\n\\t Now you have %s task(s) in the list.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Creates a new DeleteCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing index to delete.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public DeleteCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * Executes the DeleteCommand, deleting a task from the task list based on the input index.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * If the input index is out of range of the task list, an IndexOutOfBoundsException is thrown.","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"            int index \u003d Integer.parseInt(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"            Task removed \u003d tasks.get(index - 1);","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            tasks.remove(index - 1);","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"            return String.format(SUCCESS_MESSAGE, removed, tasks.numTasks());","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":42}},{"path":"src/main/java/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import exception.EventFormatException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import task.Event;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":" * Represents the command used to add an event to the task list.","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Got it. Uncle added this event:\\n\\t\\t %s\"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"            + \"\\n\\t Now you have %s task(s) in the list.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     * Creates a new EventCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing description as well as the start and end date.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    public EventCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"     * Executes the EventCommand, adding an event task to the task list based on the provided input message.","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"     * The input message is expected to contain a description and the start and end date,","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"     * separated by \"/from\" and \"/to\".","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"     * The description represents the task\u0027s details, and the start date is the date the task begins,","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"     * and the end date is the date the task ends.","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"     * If the input does not follow the correct format","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"     * or if the start and/or end dates are invalid, an EventFormatException is thrown.","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"     * @throws EventFormatException Thrown when the input does not follow the correct deadline command format","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"     *                                or if the provided deadline start and/or end date is invalid.","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) throws EventFormatException {","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        String[] args \u003d message.split(\"/from\");","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        if (args.length \u003d\u003d 1 || args.length \u003e 2) {","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"            throw new EventFormatException();","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"            String desc \u003d args[0].trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"            String[] duration \u003d args[1].split(\"/to\");","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"            if (duration.length \u003d\u003d 1 || duration.length \u003e 2) {","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"                throw new EventFormatException();","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"            } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"                String start \u003d duration[0].trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"                String end \u003d duration[1].trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"                try {","lastModifiedDate":"2024-01-29"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"                    Task event \u003d new Event(desc, LocalDate.parse(start), LocalDate.parse(end));","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"                    tasks.addTasks(event);","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"                    storage.appendToFile(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"                    return String.format(SUCCESS_MESSAGE, event, tasks.numTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"                } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"                    return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"                    throw new EventFormatException();","lastModifiedDate":"2024-01-29"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"                }","lastModifiedDate":"2024-01-29"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":75}},{"path":"src/main/java/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":" * Represents the command used to exit the application.","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye! Hope to see you again soon!\";","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"     * Executes the ExitCommand, exiting the application","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * @return","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        System.exit(0);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"        return EXIT_MESSAGE;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":23}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import exception.FindFormatException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" * Command representing the \u0027find\u0027 operation in Duke.","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    private static final String NO_TASK_FOUND_MESSAGE \u003d \"Sorry Uncle cannot find any matching tasks!\";","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private static final String TASK_FOUND_MESSAGE \u003d \"Uncle found %s tasks!\";","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    public FindCommand(String message) {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) throws FindFormatException {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        if (message.isEmpty()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"            throw new FindFormatException();","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"        TaskList matchedTasks \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        if (matchedTasks.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"            return NO_TASK_FOUND_MESSAGE;","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"            if (task.getDescription().contains(message)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"                matchedTasks.addTasks(task);","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        return String.format(TASK_FOUND_MESSAGE, tasks.numTasks()) + \"\\n\" + matchedTasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"limrik":37}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":" *  Represents the command used to display the list of tasks to the user.","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" *  The command checks if the task list is empty and provides appropriate feedback to the user.","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" *","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Congrats, you have no more tasks! Uncle is proud of you!\";","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private static final String LIST_MESSAGE \u003d \"You have %s tasks in your list!\";","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Executes the ListCommand, listing out all the tasks in the task list.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"            return SUCCESS_MESSAGE;","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"            return String.format(LIST_MESSAGE, tasks.numTasks()) + \"\\n\" + tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":29}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" * Represents the command used to mark tasks in the task list as done.","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Nice! Uncle marked this task as done:\\n\\t\\t %s\";","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     * Creates a new MarkCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing index to mark.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public MarkCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * Executes the MarkCommand, marking a task from the task list as done based on the input index.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * If the input index is out of range of the task list, an IndexOutOfBoundsException is thrown.","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"            int index \u003d Integer.parseInt(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"            tasks.get(index - 1).mark();","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            storage.appendToFile(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"            assert tasks.get(index - 1).getStatus().equals(\"1\") : \"task should be marked\";","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"            return String.format(SUCCESS_MESSAGE, tasks.get(index - 1));","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        } catch (IndexOutOfBoundsException | IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":43}},{"path":"src/main/java/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import exception.TodoFormatException;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import task.Todo;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":" * Represents the command used to add a todo to the task list.","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Got it. Uncle added this todo:\\n\\t\\t %s\"","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"            + \"\\n\\t Now you have %s task(s) in the list.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"     * Creates a new TodoCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing description.","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"    public TodoCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"     * Executes the TodoCommand, adding a todo task to the task list based on the provided input message.","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"     * The input message is expected to contain a description.","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"     * @throws TodoFormatException Thrown when the input does not have a message.","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) throws TodoFormatException {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        if (message.isEmpty()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            throw new TodoFormatException();","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        Task todo \u003d new Todo(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        tasks.addTasks(todo);","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"            storage.appendToFile(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        return String.format(SUCCESS_MESSAGE, todo, tasks.numTasks());","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"    };","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":53}},{"path":"src/main/java/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package commands;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" * Represents the command used to unmark tasks in the task list as done.","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private static final String SUCCESS_MESSAGE \u003d \"Nice! Uncle marked this task as done:\\n\\t\\t %s\";","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    private final String message;","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     * Creates a new UnmarkCommand object with the provided message.","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param message Input message containing index to unmark.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public UnmarkCommand(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * Executes the UnmarkCommand, un-marking a task from the task list based on the input index.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * If the input index is out of range of the task list, an IndexOutOfBoundsException is thrown.","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     * @param tasks   The TaskList representing the collection of tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     * @param storage The Storage object handling storage operations.","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"            int index \u003d Integer.parseInt(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"            tasks.get(index - 1).unmark();","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            storage.appendToFile(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"            assert tasks.get(index - 1).getStatus().equals(\"0\") : \"task should be unmarked\";","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"            return String.format(SUCCESS_MESSAGE, tasks.get(index - 1));","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        } catch (IndexOutOfBoundsException | IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":43}},{"path":"src/main/java/exception/DeadlineFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package exception;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Exception indicating an incorrect format for the deadline input.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class DeadlineFormatException extends UncleBobException {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"    private static final String EXCEPTION_MESSAGE \u003d \"Correct Usage: deadline \u003cmessage\u003e /by \u003cday/time\u003e\";","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    public DeadlineFormatException() {","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"        super(EXCEPTION_MESSAGE);","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":13}},{"path":"src/main/java/exception/EventFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package exception;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Exception indicating an incorrect format for the event input.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class EventFormatException extends UncleBobException {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    private static final String EXCEPTION_MESSAGE \u003d \"Correct Usage: event \u003cmessage\u003e /from \u003cday/time\u003e /to \u003cday/time\u003e\";","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"    public EventFormatException() {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"        super(EXCEPTION_MESSAGE);","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":12}},{"path":"src/main/java/exception/FindFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package exception;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Exception indicating an incorrect format for the find input.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class FindFormatException extends UncleBobException {","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    private static final String EXCEPTION_MESSAGE \u003d \"Correct Usage: find \u003cmessage\u003e\";","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    public FindFormatException() {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"        super(EXCEPTION_MESSAGE);","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"limrik":13}},{"path":"src/main/java/exception/TodoFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package exception;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Exception indicating an incorrect format for the to-do input.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class TodoFormatException extends UncleBobException {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"    private static final String EXCEPTION_MESSAGE \u003d \"Uncle also need to know the message!\"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"            + \"\\n\\tCorrect Usage: todo \u003cmessage\u003e\";","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    public TodoFormatException() {","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"        super(EXCEPTION_MESSAGE);","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":13}},{"path":"src/main/java/exception/UncleBobException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package exception;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Base exception class for Duke application.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class UncleBobException extends Exception {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    public UncleBobException(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"        super(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":10}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package parser;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import commands.Command;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import commands.DeadlineCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import commands.EventCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import commands.ExitCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import commands.FindCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import commands.ListCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import commands.MarkCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import commands.TodoCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"import commands.UnmarkCommand;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":" * The Parser class is responsible for parsing user input and creating corresponding Command objects.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":" * It recognizes the command keyword and any accompanying message in the input and constructs the","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":" * appropriate command object to execute the desired action.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":" *","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"public abstract class Parser {","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     * The parser takes in the user input and splits it into command and message.","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     * It uses a switch statement to determine the specific command type to create.","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * @param userInput User input string.","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     * @return Returns the relevant Command based on the user input.","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    public static Command parse(String userInput) {","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"        String[] inputs \u003d userInput.split(\" \");","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"        String command \u003d inputs[0];","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        String message \u003d String.join(\" \", Arrays.copyOfRange(inputs, 1, inputs.length));","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        switch (command) {","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"            return new ListCommand();","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"            return new MarkCommand(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            return new UnmarkCommand(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"            return new TodoCommand(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"            return new DeadlineCommand(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"            return new EventCommand(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"            return new DeleteCommand(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"            return new FindCommand(message);","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        default:","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":57}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.File;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"import task.Deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import task.Event;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"import task.Todo;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":" *  The Storage class manages the reading and writing of tasks to a file.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"public class Storage {","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    private final String path;","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"     * Creates a new Storage object with the specified filepath.","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"     * @param filePath Relative file path to store data.","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        this.path \u003d filePath;","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"     * Encodes and appends a list of tasks to the file, each represented as a line in the file.","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"     * @param tasks The TaskList containing tasks to be appended to the file.","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"     * @throws IOException The TaskList containing tasks to be appended to the file.","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"    public void appendToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        FileWriter fw \u003d new FileWriter(path);","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"            String textToAppend \u003d \"\";","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"                textToAppend \u003d task.getSymbol() + \"/\" + task.getStatus() + \"/\"","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"                        + task.getDescription() + \"\\n\";","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"                textToAppend \u003d task.getSymbol() + \"/\" + task.getStatus() + \"/\" + task.getDescription()","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"                        + \"/\" + task.getBy() + \"\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"                textToAppend \u003d task.getSymbol() + \"/\" + task.getStatus()","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"                        + \"/\" + task.getDescription() + \"/\" + task.getStart() + \"/\" + task.getEnd() + \"\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"            fw.write(textToAppend);","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        fw.close();","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"     * Decodes the file and populates the task list with the stored tasks.","lastModifiedDate":"2024-01-29"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"     * @return Task list stored on local hard drive.","lastModifiedDate":"2024-01-29"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"     * @throws FileNotFoundException If file does not exist on the local repository.","lastModifiedDate":"2024-01-29"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"    public TaskList loadFile() throws FileNotFoundException {","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"        File f \u003d new File(path);","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"        if (!f.isFile()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"                f.createNewFile();","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"                System.out.println(\"An error occurred.\");","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"            String[] inputs \u003d s.nextLine().split(\"/\");","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"limrik"},"content":"            Task task;","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"            if (\"[T]\".equals(inputs[0])) {","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"                task \u003d new Todo(inputs[2]);","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"            } else if (\"[D]\".equals(inputs[0])) {","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"limrik"},"content":"                task \u003d new Deadline(inputs[2], LocalDate.parse(inputs[3]));","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"limrik"},"content":"            } else if (\"[E]\".equals(inputs[0])) {","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"limrik"},"content":"                task \u003d new Event(inputs[2], LocalDate.parse(inputs[3]), LocalDate.parse(inputs[4]));","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"limrik"},"content":"            } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"limrik"},"content":"                task \u003d new Task(inputs[0], inputs[2]);","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"limrik"},"content":"            if (inputs[1].equals(\"1\")) {","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"limrik"},"content":"                task.mark();","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":90,"author":{"gitId":"limrik"},"content":"            taskList.addTasks(task);","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"limrik"},"content":"        return taskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":94}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-21"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"        super(\"[D]\", description, by);","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-21"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-01-21"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"        DateTimeFormatter dateformatter \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"        return \"[D]\" + super.toString() + \" (By: \" + dateformatter.format(this.by) + \")\";","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":21}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Represents an event task with a specified description and duration.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-21"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    private final String symbol \u003d \"[E]\";","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public Event(String description, LocalDate start, LocalDate end) {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"        super(\"[E]\", description, start, end);","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-21"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-01-21"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"        DateTimeFormatter dateformatter \u003d DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        return this.symbol + super.toString() + \" (From: \" + dateformatter.format(this.start)","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"                + \" To: \" + dateformatter.format(this.end) + \")\";","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":23}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":" * Represents a task in the Duke application.","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"public class Task {","lastModifiedDate":"2024-01-21"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"    protected String symbol;","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    protected String description;","lastModifiedDate":"2024-01-21"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-21"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    protected LocalDate by;","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    protected LocalDate start;","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    protected LocalDate end;","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Constructs a Task with the specified symbol and description.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param symbol      the symbol representing the type of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    public Task(String symbol, String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        this.symbol \u003d symbol;","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-21"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-21"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     * Constructs a Task with the specified symbol, description, and deadline date.","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"     * @param symbol      the symbol representing the type of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"     * @param by          the deadline date for tasks with a specified deadline","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"    public Task(String symbol, String description, LocalDate by) {","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        this.symbol \u003d symbol;","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"     * Constructs a Task with the specified symbol, description, start date, and end date.","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"     * @param symbol      the symbol representing the type of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"     * @param start       the start date for events with a specified duration","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"     * @param end         the end date for events with a specified duration","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    public Task(String symbol, String description, LocalDate start, LocalDate end) {","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"        this.symbol \u003d symbol;","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        this.end \u003d end;","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-21"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-21"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"    public void mark() {","lastModifiedDate":"2024-01-21"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-21"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-21"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-21"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":69,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":70,"author":{"gitId":"limrik"},"content":"    public String getSymbol() {","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"limrik"},"content":"        return this.symbol;","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"limrik"},"content":"    public String getStatus() {","lastModifiedDate":"2024-01-27"},{"lineNumber":75,"author":{"gitId":"limrik"},"content":"        return isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-01-27"},{"lineNumber":76,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"limrik"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-27"},{"lineNumber":79,"author":{"gitId":"limrik"},"content":"        return this.description;","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":81,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":82,"author":{"gitId":"limrik"},"content":"    public LocalDate getBy() {","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"limrik"},"content":"        return this.by;","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":86,"author":{"gitId":"limrik"},"content":"    public LocalDate getStart() {","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"limrik"},"content":"        return this.start;","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":90,"author":{"gitId":"limrik"},"content":"    public LocalDate getEnd() {","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"limrik"},"content":"        return this.end;","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":94,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-21"},{"lineNumber":95,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-01-21"},{"lineNumber":96,"author":{"gitId":"limrik"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-21"},{"lineNumber":97,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":98,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":98}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import java.util.List;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * * Represents a collection of tasks in the Duke application.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    public TaskList() {}","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    public void addTasks(Task task) {","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    public int numTasks() {","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"        return tasks.size();","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"    public Task get(int i) {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        return tasks.get(i);","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    public Task remove(int i) {","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        return tasks.remove(i);","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        return tasks.iterator();","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"            result.append(i + 1).append(\". \").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        return result.toString();","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"limrik":51}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Represents a to-do task in the Duke application.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-21"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-21"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"        super(\"[T]\", description);","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-21"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-21"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    public String toString() {","lastModifiedDate":"2024-01-21"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"        return this.symbol + super.toString();","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-21"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":16}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"limrik":19}},{"path":"src/test/java/storage/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package storage;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":" * Stub implementation of the Storage class for testing purposes.","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"public class StorageStub extends Storage {","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"    private boolean simulateIoException;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"    private boolean appendToFileCalled;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    private TaskList taskListToLoad;","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"     * Constructs a StorageStub with the specified TaskList to load.","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"     * @param taskListToLoad the TaskList to be loaded in the stub implementation","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"    public StorageStub(TaskList taskListToLoad) {","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        super(\"stubFilePath\");","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        this.taskListToLoad \u003d taskListToLoad;","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"     * Constructs a StorageStub with the specified TaskList to load and a flag to simulate IOException.","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"     *","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"     * @param taskListToLoad        the TaskList to be loaded in the stub implementation","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"     * @param simulateIoException   flag to simulate IOException during file operations","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    public StorageStub(TaskList taskListToLoad, boolean simulateIoException) {","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"        super(\"stubFilePath\");","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        this.taskListToLoad \u003d taskListToLoad;","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        this.simulateIoException \u003d simulateIoException;","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"    public void appendToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        this.appendToFileCalled \u003d true;","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"        if (simulateIoException) {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            throw new IOException(\"Simulated IOException\");","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"        // For simplicity, do nothing in the stub implementation","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"    public TaskList loadFile() {","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"        return taskListToLoad;","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"    public boolean wasAppendToFileCalled() {","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        return appendToFileCalled;","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"limrik":55}},{"path":"src/test/java/task/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import commands.DeadlineCommand;","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import exception.DeadlineFormatException;","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import storage.StorageStub;","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"import ui.UiStub;","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"public class DeadlineCommandTest {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    void execute_validMessage_success() throws DeadlineFormatException {","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        String deadlineMessage \u003d \"Complete project /by 2022-12-31\";","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(deadlineMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"        UiStub uiStub \u003d new UiStub();","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"        assertDoesNotThrow(() -\u003e deadlineCommand.execute(taskList, storageStub, uiStub));","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        assertEquals(1, taskList.numTasks());","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        assertTrue(storageStub.wasAppendToFileCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        assertTrue(uiStub.wasShowToUserCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    void execute_missingByField_exceptionThrown() {","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        String missingByFieldMessage \u003d \"Complete project\";","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(missingByFieldMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        UiStub uiStub \u003d new UiStub();","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"            deadlineCommand.execute(taskList, storageStub, uiStub);","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            fail(\"Expected DeadlineFormatException, but it was not thrown.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        } catch (DeadlineFormatException exception) {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"            assertEquals(\"Correct Usage: deadline \u003cmessage\u003e /by \u003cday/time\u003e\", exception.getMessage());","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"            assertFalse(storageStub.wasAppendToFileCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"            assertFalse(uiStub.wasShowToUserCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"limrik"},"content":"    void execute_invalidDateFormat_exceptionThrown() {","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"limrik"},"content":"        String invalidDateFormatMessage \u003d \"Complete project /by invalid-date\";","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"limrik"},"content":"        DeadlineCommand deadlineCommand \u003d new DeadlineCommand(invalidDateFormatMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"limrik"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"limrik"},"content":"        UiStub uiStub \u003d new UiStub();","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":58,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":59,"author":{"gitId":"limrik"},"content":"            deadlineCommand.execute(taskList, storageStub, uiStub);","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"limrik"},"content":"            fail(\"Expected DeadlineFormatException, but it was not thrown.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":61,"author":{"gitId":"limrik"},"content":"        } catch (DeadlineFormatException exception) {","lastModifiedDate":"2024-01-29"},{"lineNumber":62,"author":{"gitId":"limrik"},"content":"            assertEquals(\"Correct Usage: deadline \u003cmessage\u003e /by \u003cday/time\u003e\", exception.getMessage());","lastModifiedDate":"2024-01-29"},{"lineNumber":63,"author":{"gitId":"limrik"},"content":"            assertFalse(storageStub.wasAppendToFileCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"limrik"},"content":"            assertFalse(uiStub.wasShowToUserCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":66,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":67,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":68,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"limrik":68}},{"path":"src/test/java/task/TodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package task;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"import commands.TodoCommand;","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"import exception.TodoFormatException;","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"import storage.StorageStub;","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"import ui.UiStub;","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"public class TodoCommandTest {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"    void execute_validMessage_success() {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"        String todoMessage \u003d \"Buy groceries\";","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"        TodoCommand todoCommand \u003d new TodoCommand(todoMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"        UiStub uiStub \u003d new UiStub();","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"limrik"},"content":"        assertDoesNotThrow(() -\u003e todoCommand.execute(taskList, storageStub, uiStub));","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"limrik"},"content":"        assertEquals(1, taskList.numTasks());","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"limrik"},"content":"        assertTrue(storageStub.wasAppendToFileCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"limrik"},"content":"        assertTrue(uiStub.wasShowToUserCalled());","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"limrik"},"content":"    @Test","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"limrik"},"content":"    void execute_emptyMessage_exceptionThrown() {","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"limrik"},"content":"        String emptyTodoMessage \u003d \"\";","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"limrik"},"content":"        TodoCommand todoCommand \u003d new TodoCommand(emptyTodoMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"limrik"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"limrik"},"content":"        StorageStub storageStub \u003d new StorageStub(taskList);","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"limrik"},"content":"        UiStub uiStub \u003d new UiStub();","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"limrik"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"limrik"},"content":"            todoCommand.execute(taskList, storageStub, uiStub);","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"limrik"},"content":"            fail(\"Expected TodoFormatException, but it was not thrown.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"limrik"},"content":"        } catch (TodoFormatException exception) {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"limrik"},"content":"            assertEquals(\"Uncle also need to know the message!\\n\\tCorrect Usage: todo \u003cmessage\u003e\",","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"limrik"},"content":"                    exception.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"limrik"},"content":"            assertFalse(storageStub.wasAppendToFileCalled());","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"limrik"},"content":"            assertFalse(uiStub.wasShowToUserCalled());","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"limrik"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"limrik":50}},{"path":"src/test/java/ui/UiStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"package ui;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"/**","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":" * Stub implementation of the Ui class for testing purposes.","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":" */","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"limrik"},"content":"public class UiStub extends Ui {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"limrik"},"content":"    private boolean showToUserCalled;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"limrik"},"content":"    private boolean showErrorMessageCalled;","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"limrik"},"content":"    public void showToUser(String... messages) {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"limrik"},"content":"        showToUserCalled \u003d true;","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"limrik"},"content":"        // For simplicity, do nothing in the stub implementation","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"limrik"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"limrik"},"content":"    public void showErrorMessage(String errorMessage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"limrik"},"content":"        showErrorMessageCalled \u003d true;","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"limrik"},"content":"        // For simplicity, do nothing in the stub implementation","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"limrik"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"limrik"},"content":"    public boolean wasShowToUserCalled() {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"limrik"},"content":"        return this.showToUserCalled;","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"limrik"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"limrik"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"limrik":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"limrik"},"content":"todo borrow book","lastModifiedDate":"2024-01-21"},{"lineNumber":2,"author":{"gitId":"limrik"},"content":"list","lastModifiedDate":"2024-01-21"},{"lineNumber":3,"author":{"gitId":"limrik"},"content":"deadline return book /by 2023-01-22","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"limrik"},"content":"event project meeting /from 2023-01-22 /to 2023-01-23","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"limrik"},"content":"bye","lastModifiedDate":"2024-01-21"}],"authorContributionMap":{"limrik":5}}]
