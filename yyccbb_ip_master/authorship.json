[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"# Nihao project template","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"3. After that, locate the `src/main/java/Nihao.java` file, right-click it, and choose `Run Nihao.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyccbb":2,"-":22}},{"path":"src/main/java/App.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class App {","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    private static Nihao nihao \u003d Nihao.instance;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"        nihao.run();","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":9}},{"path":"src/main/java/Nihao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"import action.Action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import handler.DataHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import handler.InputHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"import handler.PrintHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"public final class Nihao {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    public static final Nihao instance \u003d new Nihao();","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"//    private static final String LOGO \u003d","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"//            \" ____        _        \\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"//            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"//            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"//            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"//            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"    private static final String LOGO \u003d \"::::    ::: ::::::::::: :::    :::     :::      ::::::::  \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"        \":+:+:   :+:     :+:     :+:    :+:   :+: :+:   :+:    :+: \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"        \":+:+:+  +:+     +:+     +:+    +:+  +:+   +:+  +:+    +:+ \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"        \"+#+ +:+ +#+     +#+     +#++:++#++ +#++:++#++: +#+    +:+ \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"yyccbb"},"content":"        \"+#+  +#+#+#     +#+     +#+    +#+ +#+     +#+ +#+    +#+ \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"yyccbb"},"content":"        \"#+#   #+#+#     #+#     #+#    #+# #+#     #+# #+#    #+# \\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"yyccbb"},"content":"        \"###    #### ########### ###    ### ###     ###  ########  \";","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"yyccbb"},"content":"    private final String GREETINGS \u003d \"Hello! I\u0027m Nihao.\\nI\u0027m lazy and I don\u0027t want to do anything for you.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"yyccbb"},"content":"    private final String GOODBYE \u003d \"Hope to never see you again. Goodbye!\";","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"yyccbb"},"content":"    private final PrintHandler printHandler \u003d PrintHandler.instance;","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"yyccbb"},"content":"    private final DataHandler dataHandler \u003d DataHandler.instance;","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"yyccbb"},"content":"    private final InputHandler inputHandler \u003d InputHandler.instance;","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"yyccbb"},"content":"    private Nihao() {}","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"yyccbb"},"content":"    public void run() {","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"yyccbb"},"content":"        printHandler.printWithDivider(LOGO);","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"yyccbb"},"content":"        printHandler.printWithDivider(GREETINGS);","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"yyccbb"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"yyccbb"},"content":"        while (true) {","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"yyccbb"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"yyccbb"},"content":"            if (input.equals(\"bye\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"yyccbb"},"content":"                printHandler.printWithDivider(GOODBYE);","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"yyccbb"},"content":"                break;","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"yyccbb"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"yyccbb"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"yyccbb"},"content":"                Action action \u003d inputHandler.handleInput(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"yyccbb"},"content":"                action.execute();","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"yyccbb"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"yyccbb"},"content":"                printHandler.printException(e);","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"yyccbb"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"yyccbb"},"content":"        scanner.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":54}},{"path":"src/main/java/action/Action.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"public interface Action {","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public abstract void execute() throws InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":7}},{"path":"src/main/java/action/ListAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import handler.PrintHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import handler.DataHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"public class ListAction implements Action{","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public ListAction() {}","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    public void execute() {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"        Task[] data \u003d DataHandler.instance.getData();","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"        PrintHandler.instance.print(\"Here is your list of tasks:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"        PrintHandler.instance.printNumberedDivider(data);","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":13}},{"path":"src/main/java/action/MarkAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import handler.PrintHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"import handler.DataHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"public class MarkAction implements Action{","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"    private final int index;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    public MarkAction(String index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"        this.index \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    public void execute() throws InvalidCommandException {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"        DataHandler.instance.markTask(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"        Task task \u003d DataHandler.instance.getTask(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"        PrintHandler.instance.printWithDivider(\"Fine. I\u0027ve marked this as completed:\\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"                \"   \" + task);","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":18}},{"path":"src/main/java/action/TaskAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import handler.PrintHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import handler.DataHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"public class TaskAction implements Action{","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    private Task task;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"    public TaskAction(String text) {","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"        this.task \u003d new Task(text);","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    public TaskAction(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"    public void execute() {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"        DataHandler.instance.handleData(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"        int noOfTasks \u003d DataHandler.instance.length();","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"        PrintHandler.instance.printWithDivider(\"Ok.. I\u0027ve added this task to your list:\\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"                \"   \" + task.toString() + \"\\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"yyccbb"},"content":"                \"Now you have \" + noOfTasks + \" tasks.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":23}},{"path":"src/main/java/action/UnmarkAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import handler.DataHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"import handler.PrintHandler;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"public class UnmarkAction implements Action{","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    private int index;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"    public UnmarkAction(String index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"        this.index \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    public void execute() throws InvalidCommandException {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"        DataHandler.instance.unmarkTask(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"        Task task \u003d DataHandler.instance.getTask(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"        PrintHandler.instance.printWithDivider(\"Fine. I\u0027ve marked this as uncompleted:\\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"                \"   \" + task);","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":19}},{"path":"src/main/java/action/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class DeadlineTask extends Task{","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    private String by;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"    public DeadlineTask(String taskName, String by) {","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"        super(taskName);","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":14}},{"path":"src/main/java/action/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class EventTask extends Task{","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    private String from;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"    private String to;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public EventTask(String taskName, String from, String to) {","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"        super(taskName);","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"        return \"[E]\" + super.toString() +","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"                \" (from: \" + from +","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"                \" to: \" + to + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":18}},{"path":"src/main/java/action/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class Task {","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    private boolean isCompleted;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"    private String taskName;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public Task(String taskName) {","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"    public void mark() {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"        isCompleted \u003d true;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    public void unmark() {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"        isCompleted \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"        String isCompleted \u003d this.isCompleted ? \"X\" : \" \";","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"        return \"[\" + isCompleted + \"] \" + taskName;","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":20}},{"path":"src/main/java/action/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package action.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class TodoTask extends Task{","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    public TodoTask(String taskName) {","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"        super(taskName);","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":12}},{"path":"src/main/java/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"public class InvalidCommandException extends Exception{","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"    public InvalidCommandException(String errMsg) {","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"        super(errMsg);","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":7}},{"path":"src/main/java/handler/DataHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package handler;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"public class DataHandler {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"    public static final DataHandler instance \u003d new DataHandler();","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    private static Task[] tasks \u003d new Task[100];","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    private static int index \u003d 0; // always equals to the index of last valid element plus 1","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    private DataHandler() {};","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"    public void handleData(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"        if (index \u003e\u003d 100) return;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"        tasks[index] \u003d task;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"        index++;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"        // Todo: Exception handling","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"yyccbb"},"content":"    public void markTask(int index) throws InvalidCommandException {","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"yyccbb"},"content":"        if (index \u003e DataHandler.index || index \u003c\u003d 0) {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"yyccbb"},"content":"            throw new InvalidCommandException(\"Index out of bound\");","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"yyccbb"},"content":"        tasks[index - 1].mark();","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"yyccbb"},"content":"    public void unmarkTask(int index) throws InvalidCommandException {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"yyccbb"},"content":"        if (index \u003e DataHandler.index || index \u003c\u003d 0) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"yyccbb"},"content":"            throw new InvalidCommandException(\"Index out of bound\");","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"yyccbb"},"content":"        tasks[index - 1].unmark();","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"yyccbb"},"content":"    public int length() {","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"yyccbb"},"content":"        return index;","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"yyccbb"},"content":"    public Task[] getData() {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"yyccbb"},"content":"        return Arrays.copyOfRange(tasks, 0, index);","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"yyccbb"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"yyccbb"},"content":"        return tasks[index - 1];","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":46}},{"path":"src/main/java/handler/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package handler;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import action.*;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"import action.task.DeadlineTask;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"import action.task.EventTask;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"import action.task.TodoTask;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"import exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"public class InputHandler {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"    public static final InputHandler instance \u003d new InputHandler();","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    private InputHandler() {}","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    public Action handleInput(String input) throws InvalidCommandException{","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"        String[] parsedInput \u003d input.split(\" \");","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"        String taskName;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"        switch (parsedInput[0]) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"            case \"list\":","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"                return new ListAction();","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"            case \"mark\":","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"                if (parsedInput.length !\u003d 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Incorrect number of arguments\");","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"yyccbb"},"content":"                return new MarkAction(parsedInput[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"yyccbb"},"content":"            case \"unmark\":","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"yyccbb"},"content":"                if (parsedInput.length !\u003d 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Incorrect number of arguments\");","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"yyccbb"},"content":"                return new UnmarkAction(parsedInput[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"yyccbb"},"content":"            case \"todo\":","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"yyccbb"},"content":"                if (parsedInput.length \u003c 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Incorrect number of arguments\");","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"yyccbb"},"content":"                taskName \u003d input.substring(5);","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"yyccbb"},"content":"                TodoTask todoTask \u003d new TodoTask(taskName);","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"yyccbb"},"content":"                return new TaskAction(todoTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"yyccbb"},"content":"            case \"deadline\":","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"yyccbb"},"content":"                if (countByFlag(parsedInput) !\u003d 1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Illegal use of flags\");","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"yyccbb"},"content":"                int flagIndex \u003d input.indexOf(\" /by \");","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"yyccbb"},"content":"                if (flagIndex \u003d\u003d -1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Illegal use of flags\");","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"yyccbb"},"content":"                taskName \u003d input.substring(9, flagIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"yyccbb"},"content":"                String by \u003d input.substring(flagIndex + 5);","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"yyccbb"},"content":"                DeadlineTask deadlineTask \u003d new DeadlineTask(taskName, by);","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"yyccbb"},"content":"                return new TaskAction(deadlineTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"yyccbb"},"content":"            case \"event\":","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"yyccbb"},"content":"                if (countFromFlag(parsedInput) !\u003d 1 || countToFlag(parsedInput) !\u003d 1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Illegal use of flags\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"yyccbb"},"content":"                int fromIndex \u003d input.indexOf(\" /from \");","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"yyccbb"},"content":"                int toIndex \u003d input.indexOf(\" /to \");","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"yyccbb"},"content":"                if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1 || toIndex \u003c fromIndex) {","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"yyccbb"},"content":"                    throw new InvalidCommandException(\"Illegal use of flags\");","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"yyccbb"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"yyccbb"},"content":"                taskName \u003d input.substring(6, fromIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"yyccbb"},"content":"                String from \u003d input.substring(fromIndex + 7, toIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"yyccbb"},"content":"                String to \u003d input.substring(toIndex + 5);","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"yyccbb"},"content":"                EventTask eventTask \u003d new EventTask(taskName, from, to);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"yyccbb"},"content":"                return new TaskAction(eventTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"yyccbb"},"content":"            default:","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"yyccbb"},"content":"                return new TaskAction(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"yyccbb"},"content":"    private int countByFlag(String[] parsedInput) {","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"yyccbb"},"content":"        int counter \u003d 0;","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"yyccbb"},"content":"        for (int i \u003d 0; i \u003c parsedInput.length; i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"yyccbb"},"content":"            if (parsedInput[i].equals(\"/by\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"yyccbb"},"content":"                counter++;","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"yyccbb"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"yyccbb"},"content":"        return counter;","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"yyccbb"},"content":"    private int countFromFlag(String[] parsedInput) {","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"yyccbb"},"content":"        int counter \u003d 0;","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"yyccbb"},"content":"        for (int i \u003d 0; i \u003c parsedInput.length; i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"yyccbb"},"content":"            if (parsedInput[i].equals(\"/from\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"yyccbb"},"content":"                counter++;","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"yyccbb"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"yyccbb"},"content":"        return counter;","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"yyccbb"},"content":"    private int countToFlag(String[] parsedInput) {","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"yyccbb"},"content":"        int counter \u003d 0;","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"yyccbb"},"content":"        for (int i \u003d 0; i \u003c parsedInput.length; i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"yyccbb"},"content":"            if (parsedInput[i].equals(\"/to\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"yyccbb"},"content":"                counter++;","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"yyccbb"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"yyccbb"},"content":"        return counter;","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":96}},{"path":"src/main/java/handler/PrintHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"package handler;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"import action.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"public final class PrintHandler {","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"    public static final PrintHandler instance \u003d new PrintHandler();","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"    private static final String DIVIDER \u003d \"------------------------------------\";","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"    private PrintHandler() {}","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"yyccbb"},"content":"    public void print(String msg) {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"yyccbb"},"content":"        System.out.println(msg);","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"yyccbb"},"content":"    public void printWithDivider(String msg) {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"yyccbb"},"content":"        System.out.println(msg);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"yyccbb"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"yyccbb"},"content":"    public void printNumberedDivider(Task[] msgs) {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"        for (int i \u003d 0; i \u003c msgs.length; i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"yyccbb"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"yyccbb"},"content":"            System.out.println(Integer.toString(index) + \". \" + msgs[i]);","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"yyccbb"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"yyccbb"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"yyccbb"},"content":"    public void printException(Exception e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"yyccbb"},"content":"        System.out.println(\"Exception: \" + e.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"yyccbb"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"yyccbb"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"yyccbb"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"yyccbb"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"yyccbb":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yyccbb"},"content":"hello","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"yyccbb"},"content":"mark 2","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"yyccbb"},"content":"list","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"yyccbb"},"content":"deadline finish homework /by tomorrow","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"yyccbb"},"content":"event concert /from tomorrow 2200 /to tomorrow 2300","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"yyccbb"},"content":"mark 2 3","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"yyccbb"},"content":"mark 2","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"yyccbb"},"content":"list","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"yyccbb"},"content":"bye","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"yyccbb":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yyccbb"},"content":"java -classpath ..\\bin App \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yyccbb":1,"-":20}}]
