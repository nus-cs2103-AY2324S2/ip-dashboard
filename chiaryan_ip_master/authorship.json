[{"path":"AI.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"# Declaration of AI usage","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"ChatGPT was used to generate some of the Javadoc documentation, which was reviewed before being committed to the project","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"chiaryan":3}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"# duke.Duke project template","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chiaryan":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"checkstyle {","lastModifiedDate":"2024-02-11"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-11"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-11"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chiaryan":21,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.commands.CommandList;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.commands.DukeCommandNotFoundException;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"public class Duke extends Application {","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    private final CommandList commands \u003d new CommandList();","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    private TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    private final Storage st \u003d new Storage(\"data.txt\");","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    public Duke() {","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    public Storage getStorage() {","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"        return this.st;","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    public TaskList getTasks() {","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        return this.tasks;","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"    public Ui getUi() {","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        return this.ui;","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    public void processInput(String input) {","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        assert(input !\u003d null);","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        assert(!input.contains(\"\\n\"));","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"        Parser parser \u003d new Parser(input);","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"            this.commands.get(parser.next()).run(parser, this);","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        } catch (DukeCommandNotFoundException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"            this.ui.print(\"no matching command...\");","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"            this.ui.print(String.format(\"OH NYO!!!!!!!!!!! %s\", e.getMessage()));","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-12"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        this.ui \u003d new Ui(stage, this);","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-12"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"            this.tasks \u003d this.st.loadTasks();","lastModifiedDate":"2024-02-12"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-12"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"            this.ui.print(String.format","lastModifiedDate":"2024-02-20"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"                    (\"Error loading task data: %s\"","lastModifiedDate":"2024-02-12"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"                            + \"\\n\\nPlease delete \u0027data.txt\u0027 and try again. Bye bye...\", e.getMessage()));","lastModifiedDate":"2024-02-12"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"            System.exit(1);","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"chiaryan":58,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":" * Exception thrown by the Duke chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"        super(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"chiaryan":10}},{"path":"src/main/java/duke/DukeOptionParsingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":" * To be thrown when command option parsing fails, which occurs for incorrect user input.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"public class DukeOptionParsingException extends DukeException {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"    public DukeOptionParsingException(String message) {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"        super(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"chiaryan":10}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"public class Launcher {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"chiaryan":12}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":" * Parser class extracts tokens from a String like a Scanner, intended for used for parsing arguments given to a","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":" * command.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class Parser {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    private final String[] strs;","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private int cursor \u003d 0;","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"     * Constructs a Parser object with the provided input string. read operations on this parser reads tokens from the","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"     * String as if it were an array of space-separated strings.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"     * @param str The input string.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    public Parser(String str) {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        assert str !\u003d null : \"input string cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        this.strs \u003d str.split(\" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"     * consumes a token from the string and returns it.","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"     * @return The next string.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException If all tokens have been read from the input","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"    public String next() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        String token \u003d this.peek();","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        cursor++;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        return token;","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"     * consumes whatever is left of the string and returns it.","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"     * @return all the test after the cursor.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException If all tokens have been read from the input","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"    public String rest() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        if (!this.hasNext()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(\"command ended when an argument was expected\");","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        String collected \u003d Stream.iterate(this.cursor, i -\u003e i \u003c this.strs.length, i -\u003e i + 1)","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"                .map(i -\u003e this.strs[i])","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"                .collect(Collectors.joining(\" \"));","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        assert(!this.hasNext());","lastModifiedDate":"2024-02-21"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"        return collected;","lastModifiedDate":"2024-02-21"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"     * Returns the next token without consuming it.","lastModifiedDate":"2024-02-21"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"     * @return The next token.","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException If all tokens have been read from the input","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"    public String peek() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        if (!this.hasNext()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(\"command ended when an argument was expected\");","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"        return this.strs[this.cursor];","lastModifiedDate":"2024-02-21"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"     * Reads until an option or the end of input is encountered. an option starts with \u0027/\u0027. The option itself","lastModifiedDate":"2024-02-21"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"     * is not consumed.","lastModifiedDate":"2024-02-21"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"     * @return the String before the option or end of input was encountered.","lastModifiedDate":"2024-02-21"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException if the end of input has already been reached.","lastModifiedDate":"2024-02-21"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"    public String nextUntilOption() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"        StringBuilder name \u003d new StringBuilder();","lastModifiedDate":"2024-02-21"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"        if (!this.hasNext()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(\"command ended when an argument was expected\");","lastModifiedDate":"2024-02-21"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"        while (this.hasNext() \u0026\u0026 !this.peek().startsWith(\"/\")) {","lastModifiedDate":"2024-02-21"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"            if (!name.isEmpty()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"                name.append(\" \");","lastModifiedDate":"2024-02-21"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"            name.append(this.next());","lastModifiedDate":"2024-02-21"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"        assert(! this.hasNext() || this.peek().startsWith(\"/\"));","lastModifiedDate":"2024-02-21"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"        return name.toString();","lastModifiedDate":"2024-02-21"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"     * Checks if there\u0027s any input available.","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"     * @return false if all the text has been consumed, false otherwise.","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"    public boolean hasNext() {","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"        return this.cursor \u003c this.strs.length;","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"     * Asserts that the next token read is the same as the passed string. consumes the token.","lastModifiedDate":"2024-02-21"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-21"},{"lineNumber":99,"author":{"gitId":"chiaryan"},"content":"     * @param expected The what the next token read is expected to be","lastModifiedDate":"2024-02-21"},{"lineNumber":100,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-21"},{"lineNumber":101,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException If the end of input is reached or !expected.equals(actual)","lastModifiedDate":"2024-02-21"},{"lineNumber":102,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":103,"author":{"gitId":"chiaryan"},"content":"    public void assertNext(String expected) throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":104,"author":{"gitId":"chiaryan"},"content":"        assert(expected !\u003d null);","lastModifiedDate":"2024-02-21"},{"lineNumber":105,"author":{"gitId":"chiaryan"},"content":"        String actual \u003d this.next();","lastModifiedDate":"2024-02-21"},{"lineNumber":106,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":107,"author":{"gitId":"chiaryan"},"content":"        if (!actual.equals(expected)) {","lastModifiedDate":"2024-02-21"},{"lineNumber":108,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException","lastModifiedDate":"2024-02-21"},{"lineNumber":109,"author":{"gitId":"chiaryan"},"content":"                    (String.format(\"expected \u0027%s\u0027 but \u0027%s\u0027 was given instead\", expected, actual));","lastModifiedDate":"2024-02-21"},{"lineNumber":110,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":111,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":112,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":113,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":114,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"chiaryan"},"content":"     * Asserts that the end of input has been reached. Throws if there\u0027s any input available.","lastModifiedDate":"2024-02-21"},{"lineNumber":116,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeOptionParsingException If there\u0027s any input available.","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"chiaryan"},"content":"    public void assertEnd() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-02"},{"lineNumber":120,"author":{"gitId":"chiaryan"},"content":"        if (this.hasNext()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"chiaryan"},"content":"                    (\"option was not expected but was given: \" + this.strs[this.cursor]);","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"chiaryan":125}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import java.io.File;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"public class Storage {","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private final String path;","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    public Storage(String path) {","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        assert path !\u003d null : \"path cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        this.path \u003d path;","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    public TaskList loadTasks() throws DukeException {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"        File f \u003d new File(path);","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        Scanner scanner \u003d null;","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        if (!f.exists()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"            try {","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"                f.createNewFile();","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"                throw new DukeException(\"IO error when creating data.txt: \" + e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"            scanner \u003d new Scanner(f);","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"                String str \u003d scanner.nextLine();","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"                tasks.add(Task.fromStorageString(str));","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(\"IO error: \" + e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"            if (scanner !\u003d null) {","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"                scanner.close();","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"        return tasks;","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"    public void writeTasks(TaskList tasks) throws DukeException {","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        assert tasks !\u003d null : \"tasks cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"        PrintWriter pw \u003d null;","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"        File f \u003d new File(path);","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        String toWrite \u003d tasks.toStorageString();","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"            pw \u003d new PrintWriter(new File(path));","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"            pw.write(toWrite);","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"            pw.close();","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(\"IO Error encountered while writing: \" + e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"            if (pw !\u003d null) {","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"                pw.close();","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"chiaryan":66}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(\"Ok, going to sleep...\");","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"        Platform.exit();","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":15}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":" * Encapsulates the running and parsing logic of a command given to Duke. Create it using the constructor and run it","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":" * using the \u003ccode\u003erun\u003c/code\u003e method.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"     * Executes the command. This runs logic of the command","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"     * @param parser the Parser object that contains the args passed to the command in the user\u0027s input. It is assumed","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"     *             that the parser has already read the first token (i.e. the name of the command).","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public abstract void run(Parser parser, Duke duke) throws DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"chiaryan":19}},{"path":"src/main/java/duke/commands/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":" * Represents a set of {@code Command}s that can be queried by their names. Analogous to a","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":" * \u003ccode\u003eHashMap\u003cString, Command\u003e\u003c/code\u003e with relevant operations supported.","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"public class CommandList {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"     * Gets the command associated with the given name. Similar to HashMap::get, but it throws if there is nothing","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"     * found.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"     * @param cmdName name of the command to query.","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"     * @return the Command associated with the name","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"     * @throws DukeCommandNotFoundException if there is nothing found.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public Command get(String cmdName) throws DukeCommandNotFoundException {","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        switch (cmdName) {","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        case \"list\":","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"            return new ListCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        case \"bye\":","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"            return new ByeCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"        case \"mark\":","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"            return new MarkCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        case \"unmark\":","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"            return new UnmarkCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"            return new ToDoCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"            return new DeadlineCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        case \"event\":","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"            return new EventCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        case \"delete\":","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"            return new DeleteCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        case \"find\":","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"            return new FindCommand();","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"        default:","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"            throw new DukeCommandNotFoundException();","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"chiaryan":42}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    private static final String NO_NAME_MSG \u003d \"you didn\u0027t specify specify a name for your deadline\";","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private static final String NO_BY_MSG \u003d \"you failed to specify an end date using \u0027/by\u0027\";","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    private static final String DATE_PARSE_EXCEPTION_MSG \u003d \"Couldn\u0027t parse the end date %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    private static final String ADDED_DEADLINE_MSG \u003d \"Ok, I\u0027ve added a new deadline...\\n  %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        String by;","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        String name;","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"        Task t;","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        name \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        parser.assertNext(\"/by\");","lastModifiedDate":"2024-02-21"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        by \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-21"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(NO_NAME_MSG);","lastModifiedDate":"2024-02-21"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(NO_BY_MSG);","lastModifiedDate":"2024-02-21"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"            t \u003d new Deadline(name, by);","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(String.format(DATE_PARSE_EXCEPTION_MSG, by));","lastModifiedDate":"2024-02-21"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(ADDED_DEADLINE_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"        duke.getTasks().add(t);","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":50}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private static final String INT_PARSE_EXCEPTION_MSG \u003d \"I expected a number but %s was given instead\";","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    private static final String INVALID_INDEX_MSG \u003d \"You tried to access an invalid task index: %d\";","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    private static final String SUCCESS_MSG \u003d \"I\u0027m deleting this task. bye...\\n%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    private int tryParseInt(Parser p) throws DukeOptionParsingException {","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"        String indexStr \u003d p.next();","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"            return Integer.parseInt(indexStr);","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(String.format(INT_PARSE_EXCEPTION_MSG, indexStr));","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        int index \u003d tryParseInt(parser);","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        Task t;","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"            t \u003d duke.getTasks().get(index - 1);","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(String.format(INVALID_INDEX_MSG, index));","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        duke.getTasks().remove(index - 1);","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":42}},{"path":"src/main/java/duke/commands/DukeCommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"public class DukeCommandNotFoundException extends DukeException {","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"    public DukeCommandNotFoundException() {","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"        super(\"command not found\");","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"chiaryan":9}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    private static final String NO_NAME \u003d \"you didn\u0027t specify a name for your event\";","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private static final String NO_FROM \u003d \"you failed to specify an start date using \u0027/from\u0027\";","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    private static final String NO_TO \u003d \"you failed to specify an end date using \u0027/to\u0027\";","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    private static final String DATE_PARSE_EXC_MSG \u003d \"Couldn\u0027t parse the start/end date %s/%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    private static final String SUCCESS_MSG \u003d \"Ok, I\u0027ve added a new event...\\n  %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        String from;","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"        String to;","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"        String name;","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        Event t;","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        name \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        parser.assertNext(\"/from\");","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"        from \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        parser.assertNext(\"/to\");","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        to \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-21"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(NO_NAME);","lastModifiedDate":"2024-02-21"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        if (from.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(NO_FROM);","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        if (to.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(NO_TO);","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"            t \u003d new Event(name, from, to);","lastModifiedDate":"2024-02-21"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(String.format(DATE_PARSE_EXC_MSG, from, to));","lastModifiedDate":"2024-02-21"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"        duke.getTasks().add(t);","lastModifiedDate":"2024-02-20"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":58}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    public static final String SUCCESS_MSG \u003d \"I found the following tasks with names that match \u0027%s\u0027:\\n%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"        String toFind \u003d parser.rest();","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        String response \u003d String.format","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"                (SUCCESS_MSG, toFind, duke.getTasks().filterSubString(toFind));","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(response);","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":19}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    public static final String SUCCESS_MSG \u003d \"Here\u0027s what you\u0027ve done today...\\n%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeOptionParsingException {","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, duke.getTasks().toDisplayString()));","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":16}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    private static final String INT_PARSE_EXCEPTION_MSG \u003d \"I expected a number but %s was given instead\";","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private static final String INVALID_INDEX_MSG \u003d \"You tried to access an invalid task index: %d\";","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    private static final String SUCCESS_MSG \u003d \"CONGRATULATION!!!!!! you completed this task:\\n%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private int tryParseInt(Parser p) throws DukeOptionParsingException {","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        String indexStr \u003d p.next();","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"            return Integer.parseInt(indexStr);","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException(String.format(INT_PARSE_EXCEPTION_MSG, indexStr));","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        int index \u003d tryParseInt(parser);","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        Task t;","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"            t \u003d duke.getTasks().get(index - 1);","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(String.format(INVALID_INDEX_MSG, index));","lastModifiedDate":"2024-02-21"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"        t.mark();","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":41}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private static final String SUCCESS_MSG \u003d \"Ok, I\u0027ve added a new todo...\\n  %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        String name \u003d parser.nextUntilOption();","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(name);","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        duke.getTasks().add(t);","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":22}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.commands;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import duke.DukeOptionParsingException;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    private static final String INT_PARSE_EXCEPTION_MSG \u003d \"I expected a number but %s was given instead\";","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private static final String INVALID_INDEX_MSG \u003d \"You tried to access an invalid task index: %d\";","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    private static final String SUCCESS_MSG \u003d \"CONGRATULATION!!!!!! you completed this task:\\n%s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private int tryParseInt(Parser p) throws DukeOptionParsingException {","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        String indexStr \u003d p.next();","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"            return Integer.parseInt(indexStr);","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"            throw new DukeOptionParsingException","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"                    (String.format(INT_PARSE_EXCEPTION_MSG, indexStr));","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"    public void run(Parser parser, Duke duke) throws DukeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        int index \u003d tryParseInt(parser);","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        Task t;","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        parser.assertEnd();","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"            t \u003d duke.getTasks().get(index - 1);","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(String.format(INVALID_INDEX_MSG, index));","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        t.unmark();","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        duke.getUi().print(String.format(SUCCESS_MSG, t.describe()));","lastModifiedDate":"2024-02-21"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        duke.getStorage().writeTasks(duke.getTasks());","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"chiaryan":42}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":" * Represents a Task that has a date of completion. Essentially a Task with a Date.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"     * Deadline constructor method.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"     * @param name The name of this task.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"     * @param by When this task needs to be completed, as a String formatted in the form of Input.INPUT_TIME_FORMATTER","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"     * @throws DateTimeParseException when an invalid date according to the INPUT_TIME_FORMATTER","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    public Deadline(String name, String by) throws DateTimeParseException {","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        super(name);","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        assert by !\u003d null : \"by cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        assert !by.contains(\"\\n\") : \"by cannot contain newline characters\";","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"        this.by \u003d LocalDateTime.parse(by, Task.INPUT_TIME_FORMATTER);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"     * Returns a Descriptor string containing details of this task. Meant for printing to the console.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"     * @return a String containing details of this method, showing the date this task is due","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"    public String describe() {","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"[D]%s (by: %s)\",","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"                super.describe(), this.by.format(Task.OUTPUT_TIME_FORMATTER)","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        );","lastModifiedDate":"2024-01-24"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"     * Returns a string representation containing all details required to reconstruct this task. Meant for writing to","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"     * storage.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"     * @return a String that shows the name, date and done status of the task, to be stored on disk.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"D,%s,%s\",","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"                super.toStorageString(), this.by.format(Task.INPUT_TIME_FORMATTER));","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"chiaryan":46}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    public Event(String name, String from, String to) throws DateTimeParseException {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"        super(name);","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"        assert from !\u003d null \u0026\u0026 to !\u003d null : \"from and to cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"        assert !from.contains(\"\\n\") \u0026\u0026 !to.contains(\"\\n\") : \"from and to cannot contain newlines\";","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        this.from \u003d LocalDateTime.parse(from, Task.INPUT_TIME_FORMATTER);","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"        this.to \u003d LocalDateTime.parse(to, Task.INPUT_TIME_FORMATTER);","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    public String describe() {","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\",","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"                super.describe(),","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"                this.from.format(Task.OUTPUT_TIME_FORMATTER),","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"                this.to.format(Task.OUTPUT_TIME_FORMATTER));","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"E,%s,%s,%s\", super.toStorageString(),","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"                this.from.format(INPUT_TIME_FORMATTER),","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"                this.to.format(INPUT_TIME_FORMATTER));","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"chiaryan":33}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2024-02-21"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import duke.DukeException;","lastModifiedDate":"2024-02-21"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    private static final String UNEXPECTED_TYPE_MSG \u003d \"unexpected type string %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    private static final String UNEXPECTED_DONE_MSG \u003d \"unexpected done string %s\";","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    private static final String MISSING_FIELD_MSG \u003d \"expected a type identifier, but none was given\";","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    protected final String name;","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public static final DateTimeFormatter INPUT_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    public static final DateTimeFormatter OUTPUT_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"hh:mm a, M-dd-yyyy\");","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"     * Task constructor method. Initialises name.","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"     * @param name The name of the task.","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    public Task(String name) {","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        assert name !\u003d null : \"name cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        assert !name.contains(\"\\n\") : \"name cannot contain newline characters\";","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"    /** Marks this task as done. */","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"    public void mark() {","lastModifiedDate":"2024-01-24"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    /** Marks this task as not done. */","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-24"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    /** Returns true if the name of this task contains the given string. */","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"    public final boolean nameContains(String str) {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        return this.name.contains(str);","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"     * Returns a string describing details of this task. Intended for printing to console.","lastModifiedDate":"2024-02-21"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"     * @return a string containing details of this task.","lastModifiedDate":"2024-02-21"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"    public String describe() {","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"        return \"[\" + (this.isDone ? \"X\" : \" \") + \"] \" + this.name;","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"     * Returns a string representation containing all details required to reconstruct this part of the task. Intended","lastModifiedDate":"2024-02-21"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"     * for writing to storage.","lastModifiedDate":"2024-02-21"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"     * @return a String that shows the name and done status of the task.","lastModifiedDate":"2024-02-21"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"%s,%s\", this.name, this.isDone ? \"T\" : \"F\");","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"    public static Task fromStorageString(String str) throws DukeException {","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"        assert str !\u003d null : \"str cannot be null\";","lastModifiedDate":"2024-02-21"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"        Scanner sc \u003d new Scanner(str);","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"        String typeStr;","lastModifiedDate":"2024-02-13"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"        String nameStr;","lastModifiedDate":"2024-02-13"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"        String doneStr;","lastModifiedDate":"2024-02-13"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"        Task t;","lastModifiedDate":"2024-01-30"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"        sc.useDelimiter(\",\");","lastModifiedDate":"2024-01-30"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"        try {","lastModifiedDate":"2024-02-21"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"            typeStr \u003d sc.next();","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"            nameStr \u003d sc.next();","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"            doneStr \u003d sc.next();","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"            switch (typeStr) {","lastModifiedDate":"2024-01-30"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"            case \"T\":","lastModifiedDate":"2024-01-30"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"                t \u003d new ToDo(nameStr);","lastModifiedDate":"2024-01-30"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"                break;","lastModifiedDate":"2024-01-30"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"            case \"D\":","lastModifiedDate":"2024-02-21"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"                t \u003d new Deadline(nameStr, sc.next());","lastModifiedDate":"2024-02-21"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"                break;","lastModifiedDate":"2024-01-30"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"            case \"E\":","lastModifiedDate":"2024-02-21"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"                t \u003d new Event(nameStr, sc.next(), sc.next());","lastModifiedDate":"2024-02-21"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"                break;","lastModifiedDate":"2024-01-30"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"            default:","lastModifiedDate":"2024-01-30"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"                throw new DukeException(String.format(UNEXPECTED_TYPE_MSG, typeStr));","lastModifiedDate":"2024-02-21"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"            switch (doneStr) {","lastModifiedDate":"2024-01-30"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"            case \"T\":","lastModifiedDate":"2024-01-30"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"                t.isDone \u003d true;","lastModifiedDate":"2024-02-13"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"                break;","lastModifiedDate":"2024-01-30"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"            case \"F\":","lastModifiedDate":"2024-01-30"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"                t.isDone \u003d false;","lastModifiedDate":"2024-02-13"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"                break;","lastModifiedDate":"2024-01-30"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"            default:","lastModifiedDate":"2024-01-30"},{"lineNumber":99,"author":{"gitId":"chiaryan"},"content":"                throw new DukeException(String.format(UNEXPECTED_DONE_MSG, doneStr));","lastModifiedDate":"2024-02-21"},{"lineNumber":100,"author":{"gitId":"chiaryan"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":101,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":102,"author":{"gitId":"chiaryan"},"content":"            return t;","lastModifiedDate":"2024-01-30"},{"lineNumber":103,"author":{"gitId":"chiaryan"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":104,"author":{"gitId":"chiaryan"},"content":"            throw new DukeException(MISSING_FIELD_MSG);","lastModifiedDate":"2024-02-21"},{"lineNumber":105,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":106,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":107,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"chiaryan":107}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":" * Encapsulates the list of tasks that the user is currently tracking. Analogous to an ArrayList and supports","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":" * the relevant operations.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"public class TaskList {","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"    private final ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"     * Returns a string representation of this list. Intended to be printed as the chatbot\u0027s response","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"     * @return A string containing the tasks in the list, generated with each tasks\u0027 describe method.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    public String toDisplayString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        // here\u0027s your \"\"\"\"\"effectively final\"\"\"\"\" value bro","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        var numBox \u003d new Object() {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"            int num \u003d 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"        };","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        return this.tasks.stream()","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"                .reduce(new StringBuilder(),","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"                        (curr, acc) -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"                            curr.append(numBox.num).append(\".\").append(acc.describe());","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"                            if (numBox.num \u003c tasks.size()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"                                curr.append(\"\\n\");","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"                            }","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"                            numBox.num++;","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"                            return curr;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"                        },","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"                        StringBuilder::append)","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"                .toString();","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"     * Returns a string representation of this list that is intended to be stored as a database.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"     * @return A string containing the tasks in the list, using the tasks\u0027 toStorageString method.","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        for (Task t : this.tasks) {","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"            sb.append(t.toStorageString()).append(\u0027\\n\u0027);","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        return sb.toString();","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"     * Retrieves the task at the specified zero-based index. similar to ArrayList::get","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"     * @param i The index of the task to retrieve.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"     * @return The task the index i.","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"     * @throws IndexOutOfBoundsException If the index is out of bounds.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"    public Task get(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"     * Adds a new task to the list. similar to ArrayList::add","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"     * @param t The task to be added to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"    public void add(Task t) {","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"        this.tasks.add(t);","lastModifiedDate":"2024-02-13"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"    public int size() {","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"        return this.tasks.size();","lastModifiedDate":"2024-02-13"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"     * Deletes the task at the specified zero-based index. similar to ArrayList::remove, except it does not return","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"     * the removed task.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"     * @param i The index of the task to be removed.","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"     * @throws IndexOutOfBoundsException If the index is out of bounds.","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"    public void remove(int i) throws IndexOutOfBoundsException {","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"        this.tasks.remove(i);","lastModifiedDate":"2024-02-13"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"    public String filterSubString(String toFind) {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"        return Stream.iterate(0, i -\u003e i \u003c this.tasks.size(), i -\u003e i + 1)","lastModifiedDate":"2024-02-13"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"                .filter(i -\u003e this.tasks.get(i).nameContains(toFind))","lastModifiedDate":"2024-02-13"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"                .reduce(new StringBuilder(),","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"                        (sb, curr) -\u003e sb","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"                                .append(curr + 1).append(\".\")","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"                                .append(this.tasks.get(curr).describe())","lastModifiedDate":"2024-02-13"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"                                .append(curr \u003c tasks.size() - 1 ? \"\\n\" : \"\"),","lastModifiedDate":"2024-02-13"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"                        StringBuilder::append)","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"                .toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"chiaryan":98}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"    public ToDo(String name) {","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"        super(name);","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"    public String describe() {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"[T]%s\", super.describe());","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"        return String.format(\"T,%s\", super.toStorageString());","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"chiaryan":17}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.ui;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    private Label text;","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        text \u003d l;","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        text.setWrapText(true);","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"    private void flip() {","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"    public static DialogBox createUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"    public static DialogBox createDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-12"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        db.flip();","lastModifiedDate":"2024-02-12"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"        return db;","lastModifiedDate":"2024-02-12"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"chiaryan":47}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke.ui;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.Duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"public class Ui {","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    private Scene scene;","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    private Image userImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/user.jpg\")));","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"    private Image dukeImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/louie.jpg\")));","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"    public Ui(Stage stage, Duke duke) {","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"        stage.setScene(scene);","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        stage.show();","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"        //More code to be added here later","lastModifiedDate":"2024-02-20"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2024-02-20"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2024-02-20"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"        stage.setResizable(false);","lastModifiedDate":"2024-02-20"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2024-02-20"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2024-02-20"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2024-02-20"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2024-02-20"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"        //You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2024-02-20"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2024-02-20"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2024-02-20"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2024-02-20"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-20"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"        });","lastModifiedDate":"2024-02-20"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2024-02-20"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-20"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"        });","lastModifiedDate":"2024-02-20"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2024-02-20"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"     * Prints message to the chatbot GUI.","lastModifiedDate":"2024-02-20"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"     * @param msg the message to be printed.","lastModifiedDate":"2024-02-20"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"    public void print(String msg) {","lastModifiedDate":"2024-02-20"},{"lineNumber":99,"author":{"gitId":"chiaryan"},"content":"        dialogContainer.getChildren()","lastModifiedDate":"2024-02-20"},{"lineNumber":100,"author":{"gitId":"chiaryan"},"content":"                .add(DialogBox.createDukeDialog","lastModifiedDate":"2024-02-20"},{"lineNumber":101,"author":{"gitId":"chiaryan"},"content":"                        (new Label(msg), new ImageView(dukeImage)));","lastModifiedDate":"2024-02-20"},{"lineNumber":102,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":103,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"chiaryan"},"content":"    /**","lastModifiedDate":"2024-02-20"},{"lineNumber":106,"author":{"gitId":"chiaryan"},"content":"     * Iteration 2:","lastModifiedDate":"2024-02-20"},{"lineNumber":107,"author":{"gitId":"chiaryan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-20"},{"lineNumber":108,"author":{"gitId":"chiaryan"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-20"},{"lineNumber":109,"author":{"gitId":"chiaryan"},"content":"     */","lastModifiedDate":"2024-02-20"},{"lineNumber":110,"author":{"gitId":"chiaryan"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-20"},{"lineNumber":111,"author":{"gitId":"chiaryan"},"content":"        String readString \u003d userInput.getText();","lastModifiedDate":"2024-02-20"},{"lineNumber":112,"author":{"gitId":"chiaryan"},"content":"        Label userLabel \u003d new Label(readString);","lastModifiedDate":"2024-02-20"},{"lineNumber":113,"author":{"gitId":"chiaryan"},"content":"        dialogContainer.getChildren().add(DialogBox.createUserDialog(userLabel, new ImageView(userImage)));","lastModifiedDate":"2024-02-20"},{"lineNumber":114,"author":{"gitId":"chiaryan"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-20"},{"lineNumber":115,"author":{"gitId":"chiaryan"},"content":"        this.duke.processInput(readString);","lastModifiedDate":"2024-02-20"},{"lineNumber":116,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":118,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"chiaryan":118}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Nested;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    public static final String NAME_1 \u003d \"deadline 1\";","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public static final String DATE_1 \u003d \"2024-06-06 0000\";","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    public static final String EXPECTED_DESCRIBE_1 \u003d \"[D][ ] deadline 1 (by: 12:00 am, 6-06-2024)\";","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"    public static final String EXPECTED_STORED_1 \u003d \"D,deadline 1,F,2024-06-06 0000\";","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    @Nested","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    class TaskTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        private static Task t;","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        @BeforeEach","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        public void createT() {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"            t \u003d new Deadline(NAME_1, DATE_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        public void Deadline_normalDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"            assertEquals(EXPECTED_DESCRIBE_1, t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        public void describe_markedDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"            t.mark();","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][X] deadline 1 (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"        public void describe_unmarkedDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"            t.mark();","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][X] deadline 1 (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"            t.unmark();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"            assertEquals(EXPECTED_DESCRIBE_1, t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"        public void describe_noNameDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"            t \u003d new Deadline(\"\", DATE_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][ ]  (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"        public void toStorageString_normalDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), EXPECTED_STORED_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"        public void toStorageString_markedDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"            t.mark();","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), \"D,deadline 1,T,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"        public void toStorageString_unmarkedDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"            t.mark();","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), \"D,deadline 1,T,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"            t.unmark();","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), EXPECTED_STORED_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"        public void toStorageString_noNameDeadline_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"            t \u003d new Deadline(\"\", DATE_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), \"D,,F,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"        // by right this should fail as it will mess up parsing","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"        // will fail when fixed in the future","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"        public void toStorageString_commaInName_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d new Deadline(\"mwa, ha, ha\", DATE_1);","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"            assertEquals(t.toStorageString(), \"D,mwa, ha, ha,F,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"    public void Deadline_invalidDateString_exceptionThrown() {","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"                (DateTimeParseException.class, () -\u003e new Deadline(NAME_1, \"2024-06-06 0000 nonsense\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"        assertEquals","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"                (\"Text \u00272024-06-06 0000 nonsense\u0027 could not be parsed, unparsed text found at index 15\",","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"                        thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"chiaryan"},"content":"    public void Deadline_outOfBoundsDateString_exceptionThrown() {","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"chiaryan"},"content":"                (DateTimeParseException.class, () -\u003e new Deadline(NAME_1, \"2024-06-06 2500\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"chiaryan"},"content":"        assertEquals","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"chiaryan"},"content":"                (\"Text \u00272024-06-06 2500\u0027 could not be parsed: \"","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"chiaryan"},"content":"                        + \"Invalid value for HourOfDay (valid values 0 - 23): 25\",","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"chiaryan"},"content":"                        thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"chiaryan":107}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-21"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-21"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    public void nextUntilOption_normalInput_success() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"test /op test\");","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"test\", p.nextUntilOption());","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"/op test\", p.rest());","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"    public void nextUntilOption_noOption_wholeString() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"a b c d\");","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        assertEquals(p.nextUntilOption(), \"a b c d\");","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    public void nextUntilOption_reachedOption_emptyString() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"pop /by this\");","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        p.next();","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        assertEquals(p.nextUntilOption(), \"\");","lastModifiedDate":"2024-02-21"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"    public void nextUntilOption_endInput_throws() throws DukeOptionParsingException {","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"test\");","lastModifiedDate":"2024-02-21"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"        p.next();","lastModifiedDate":"2024-02-21"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        assertThrows(DukeOptionParsingException.class, p::nextUntilOption);","lastModifiedDate":"2024-02-21"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"    public void assertNext_different_throws() {","lastModifiedDate":"2024-02-21"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"abc\");","lastModifiedDate":"2024-02-21"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        assertThrows(DukeOptionParsingException.class, () -\u003e p.assertNext(\"xyz\"));","lastModifiedDate":"2024-02-21"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"    public void assertNext_same_success() throws DukeException {","lastModifiedDate":"2024-02-21"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"abc\");","lastModifiedDate":"2024-02-21"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        p.assertNext(\"abc\");","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-21"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"    public void assertNext_twoTokens_success() throws DukeException {","lastModifiedDate":"2024-02-21"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"        Parser p \u003d new Parser(\"abc xyz\");","lastModifiedDate":"2024-02-21"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        p.assertNext(\"abc\");","lastModifiedDate":"2024-02-21"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"        p.assertNext(\"xyz\");","lastModifiedDate":"2024-02-21"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-21"}],"authorContributionMap":{"chiaryan":55}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"    TaskList t;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"    @BeforeEach","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    public void init() {","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"        t \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        t.add(new ToDo(\"name\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        t.add(new ToDo(\"game\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        t.add(new ToDo(\"nam\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    @AfterEach","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    public void end() {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        t \u003d null;","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"    public void filterSubString_requestWholeInput_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"1.[T][ ] name\\n\"","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"                   + \"2.[T][ ] game\\n\"","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"                   + \"3.[T][ ] nam\",","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"                t.filterSubString(\"am\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"    public void filterSubString_requestOneItem_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"2.[T][ ] game\\n\",","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"                t.filterSubString(\"gam\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"    public void filterSubString_requestSomeItem_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"1.[T][ ] name\\n\"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"                   + \"3.[T][ ] nam\",","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"                t.filterSubString(\"nam\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"    public void filterSubString_requestNothing_success() {","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"\",","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"                t.filterSubString(\"wahoo\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"chiaryan":55}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertInstanceOf;","lastModifiedDate":"2024-02-21"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-21"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Nested;","lastModifiedDate":"2024-02-21"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public void fromStorageString_noString_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"expected a type identifier, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    public void fromStorageString_noDelimString_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"Tno delimitersF\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"expected a name, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"    public void fromStorageString_oneDelim_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"T,one delimF\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"expected an done identifier, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"    public void fromStorageString_invalidTypeId_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"???,one delim,F\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"unexpected type string ???\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"    public void fromStorageString_invalidDoneString_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"T,one delim,???\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"unexpected done string ???\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"//    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"//    public void fromStorageString_emptyTypeId_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"//        var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\",name,F\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"//        assertEquals(\"unexpected done string \", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"//    }","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"    @Nested","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"    class ToDo {","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_todoString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"T,name,F\");","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.ToDo.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[T][ ] name\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_markedTodoString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"T,name,T\");","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.ToDo.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[T][X] name\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_namelessTodoString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"T,,F\");","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.ToDo.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[T][ ] \", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"chiaryan"},"content":"        // should work only for now","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_extraComma_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"T,name,F,extra\");","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.ToDo.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[T][ ] name\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"chiaryan"},"content":"    @Nested","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"chiaryan"},"content":"    class Deadline {","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_deadlineString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"D,name,F,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Deadline.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":92,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][ ] name (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_markedDeadlineString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"D,name,T,2024-06-06 0000\");","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Deadline.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":99,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][X] name (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"chiaryan"},"content":"        // should work only for now","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_extraComma_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"D,name,F,2024-06-06 0000,extra\");","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Deadline.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":107,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[D][ ] name (by: 12:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_noDate_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"chiaryan"},"content":"            var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"D,name,F\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"expected a deadline, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_invalidDate_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"chiaryan"},"content":"            var thrown \u003d assertThrows(DateTimeParseException.class, () -\u003e Task.fromStorageString(\"D,name,F,2024-06-06 2500\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"Text \u00272024-06-06 2500\u0027 could not be parsed: \"","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"chiaryan"},"content":"                    + \"Invalid value for HourOfDay (valid values 0 - 23): 25\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"chiaryan"},"content":"    @Nested","lastModifiedDate":"2024-02-04"},{"lineNumber":125,"author":{"gitId":"chiaryan"},"content":"    class Event {","lastModifiedDate":"2024-02-04"},{"lineNumber":126,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":128,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_eventString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":129,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"E,name,F,2024-06-06 0000,2024-06-06 0100\");","lastModifiedDate":"2024-02-04"},{"lineNumber":130,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Event.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":131,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[E][ ] name (from: 12:00 am, 6-06-2024 to: 01:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":132,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":133,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":134,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":135,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_markedEventString_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":136,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"E,name,T,2024-06-06 0000,2024-06-06 0100\");","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Event.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":138,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[E][X] name (from: 12:00 am, 6-06-2024 to: 01:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":139,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":141,"author":{"gitId":"chiaryan"},"content":"        // should work only for now","lastModifiedDate":"2024-02-04"},{"lineNumber":142,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":143,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_extraComma_success() throws DukeException {","lastModifiedDate":"2024-02-04"},{"lineNumber":144,"author":{"gitId":"chiaryan"},"content":"            Task t \u003d Task.fromStorageString(\"E,name,F,2024-06-06 0000,2024-06-06 0100,extra\");","lastModifiedDate":"2024-02-04"},{"lineNumber":145,"author":{"gitId":"chiaryan"},"content":"            assertInstanceOf(duke.tasks.Event.class, t);","lastModifiedDate":"2024-02-14"},{"lineNumber":146,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"[E][ ] name (from: 12:00 am, 6-06-2024 to: 01:00 am, 6-06-2024)\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":148,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_noFrom_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"chiaryan"},"content":"            var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"E,name,F\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"expected a start date, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":155,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":156,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_noTo_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":157,"author":{"gitId":"chiaryan"},"content":"            var thrown \u003d assertThrows(DukeException.class, () -\u003e Task.fromStorageString(\"E,name,F,2024-06-06 0000\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":158,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"expected an end date, but none was given\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":159,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":160,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":161,"author":{"gitId":"chiaryan"},"content":"        @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":162,"author":{"gitId":"chiaryan"},"content":"        public void fromStorageString_invalidDate_throws() {","lastModifiedDate":"2024-02-04"},{"lineNumber":163,"author":{"gitId":"chiaryan"},"content":"            var thrown \u003d assertThrows(DateTimeParseException.class,","lastModifiedDate":"2024-02-04"},{"lineNumber":164,"author":{"gitId":"chiaryan"},"content":"                    () -\u003e Task.fromStorageString(\"E,name,F,2024-06-06 0000,2024-06-06 2500\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":165,"author":{"gitId":"chiaryan"},"content":"            assertEquals(\"Text \u00272024-06-06 2500\u0027 could not be parsed: \"","lastModifiedDate":"2024-02-04"},{"lineNumber":166,"author":{"gitId":"chiaryan"},"content":"                    + \"Invalid value for HourOfDay (valid values 0 - 23): 25\", thrown.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":167,"author":{"gitId":"chiaryan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":168,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":169,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"chiaryan":169}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"    public void describe_normalToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"this\");","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"[T][ ] this\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"    public void describe_markedToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"this\");","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"        t.mark();","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"[T][X] this\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"    public void describe_unmarkedToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"this\");","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"        t.mark();","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"[T][X] this\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"        t.unmark();","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"[T][ ] this\", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"    public void describe_noNameToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"\");","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"[T][ ] \", t.describe());","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"    public void toStorageString_normalToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"\");","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,,F\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"chiaryan"},"content":"    public void toStorageString_markedToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"this\");","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"chiaryan"},"content":"        t.mark();","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,this,T\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"chiaryan"},"content":"    public void toStorageString_unmarkedToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"this\");","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"chiaryan"},"content":"        t.mark();","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,this,T\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"chiaryan"},"content":"        t.unmark();","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,this,F\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"chiaryan"},"content":"    public void toStorageString_noNameToDo_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"\");","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,,F\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"chiaryan"},"content":"    // by right this should fail as it will mess up parsing","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"chiaryan"},"content":"    // should fail when fixed in the future","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"chiaryan"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"chiaryan"},"content":"    public void toStorageString_commaInName_success() {","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"chiaryan"},"content":"        Task t \u003d new ToDo(\"mwa, ha, ha\");","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"chiaryan"},"content":"        assertEquals(\"T,mwa, ha, ha,F\", t.toStorageString());","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"chiaryan"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"chiaryan"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"chiaryan":74}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chiaryan"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"chiaryan"},"content":"todo read book","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"chiaryan"},"content":"deadline return book /by 2024-06-06 0000","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"chiaryan"},"content":"event project meeting /from 2000-09-04 1600 /to 2000-09-04 1600","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"chiaryan"},"content":"list this should throw ","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"chiaryan"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"chiaryan"},"content":"mark 0","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"chiaryan"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"chiaryan"},"content":"mark 1 should throw","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"mark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"chiaryan"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"chiaryan"},"content":"unmark 0","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"chiaryan"},"content":"unmark 4","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"chiaryan"},"content":"unmark 1 should throw","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"chiaryan"},"content":"unmark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"chiaryan"},"content":"todo","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"chiaryan"},"content":"todo do sumting","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"todo  do anadating","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"chiaryan"},"content":"todo do  samadating","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"chiaryan"},"content":"todo   do  sumting  with trailingspace   ","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"chiaryan"},"content":"deadline","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"chiaryan"},"content":"deadline do sumting","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"chiaryan"},"content":"deadline /by 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"chiaryan"},"content":"deadline no by /by","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"chiaryan"},"content":"deadline do sumting /nonsenseoption asjkldf","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"chiaryan"},"content":"deadline do sumting /by 2001-02-03 14001","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"chiaryan"},"content":"deadline do sumting /by 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"chiaryan"},"content":"event","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"chiaryan"},"content":"event no from to","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"chiaryan"},"content":"event no fromop /to 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"chiaryan"},"content":"event no from /from /to 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"chiaryan"},"content":"event no toop /from 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"chiaryan"},"content":"event no to /from no 2001-02-03 1400 /to","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"chiaryan"},"content":"event /from 2001-02-03 1400 /to 2001-02-03 1500","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"chiaryan"},"content":"event eventname /from 2001-02-03 1400 /to nonsensedate","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"chiaryan"},"content":"event eventname /from 2001-02-03 1400 /to 2001-02-03 1400","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"chiaryan"},"content":"list","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"chiaryan"},"content":"delete 0","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"chiaryan"},"content":"delete 4","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"chiaryan"},"content":"delete 5 should throw","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"chiaryan"},"content":"delete 5","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"chiaryan"},"content":"delete 9","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"chiaryan"},"content":"bye this should throw","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"chiaryan"},"content":"bye","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"chiaryan":44}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"chiaryan"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"chiaryan"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"chiaryan":2,"-":19}}]
