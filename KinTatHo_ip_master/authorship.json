[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Enum representing the various commands that the Yoda chatbot can understand.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"enum Command {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"    BYE,     // Command to end the chat session","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"    LIST,    // Command to list all tasks","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"    MARK,    // Command to mark a task as done","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"    UNMARK,  // Command to mark a task as not done","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"    TODO,    // Command to add a new \u0027Todo\u0027 task","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"    DEADLINE, // Command to add a new \u0027Deadline\u0027 task","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"    DELETE,  // Command to delete a task","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"    EVENT,   // Command to add a new \u0027Event\u0027 task","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"    UNKNOWN, // Represents an unrecognized command","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"    SAVE; // Command to save the current task list to disk","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"     * Converts a string to its corresponding Command enum value. If the string","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"     * does not match any command, UNKNOWN is returned.","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"     * @param str The input string representing a command.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"     * @return The corresponding Command enum value, or UNKNOWN if no match is found.","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"    public static Command fromString(String str) {","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"        try {","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"            return Command.valueOf(str.toUpperCase());","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"            return UNKNOWN; // Return UNKNOWN if the input string is not a valid command","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"KinTatHo":30}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Represents a deadline task. It extends the Task class and adds a deadline time.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"    private final String by; // Deadline time for the task","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"     * Constructs a Deadline task with a description and a deadline time.","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     * @param description A string describing the deadline task.","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     * @param by A string representing the time by which the task should be completed.","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"        super(description); // Calls the constructor of the superclass Task","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"        this.by \u003d by;       // Sets the deadline time for this task","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"    public String getBy() {","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"        return this.by;","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"     * Returns a string representation of the deadline task, including its type,","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"     * description, and deadline time.","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"     * @return A formatted string with the type of task, its description, and the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"KinTatHo":32}},{"path":"src/main/java/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Exception thrown when an attempt is made to create a task with an empty description.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"public class EmptyDescriptionException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"     * Constructs an EmptyDescriptionException with a detailed message.","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"     * This exception is typically thrown when a task is created without a ","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * necessary description.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     * @param message A string providing details about the exception cause.","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"    public EmptyDescriptionException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"        super(message); // Call to the superclass (Exception) constructor with the detailed message","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"KinTatHo":16}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Represents an event task.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"    private final String from; // Event starting time","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"    private final String to; // Event ending time","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * Constructs an Event task with a description, start time, and end time.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     * @param description A string describing the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     * @param from A string representing the start time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     * @param to A string representing the end time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"        super(description); // Calls the constructor of the superclass Task","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"    public String getFrom() {","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"        return this.from;","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"    public String getTo() {","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"        return this.to;","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"     * Returns a string representation of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"KinTatHo"},"content":"     * @return A formatted string with the type of task, its description,","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"KinTatHo"},"content":"     *         start time, and end time.","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"KinTatHo"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"KinTatHo"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"KinTatHo"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"KinTatHo":39}},{"path":"src/main/java/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Exception thrown when an invalid task operation is attempted.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" * This can occur in various scenarios such as trying to access a task","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":" * that doesn\u0027t exist or providing an invalid task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"public class InvalidTaskException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * Constructs an InvalidTaskException with a detailed message.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     * This message provides information about what makes the task operation invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     * @param message A string detailing the reason for the exception.","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"    public InvalidTaskException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"        super(message); // Call to the superclass (Exception) constructor with the detailed message","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"KinTatHo":17}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Represents a generic task with a description and a completion status.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"public class Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"    private final String description; // Description of the task","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"    private boolean isDone;     // Flag to track if the task is done","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     * Constructs a Task with the given description. By default, the task is not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"        this.isDone \u003d false; // Task is not done by default","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"        return this.description;","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"     * Gets the status of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"KinTatHo"},"content":"     * @return true if the task is done, false otherwise.","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"KinTatHo"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"KinTatHo"},"content":"        return this.isDone;","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"KinTatHo"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"KinTatHo"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"KinTatHo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"KinTatHo"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":46,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"KinTatHo"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"KinTatHo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"KinTatHo"},"content":"     * Returns a string representation of the task, including its done status and description.","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"KinTatHo"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"KinTatHo"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"KinTatHo"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"KinTatHo"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + this.getDescription();","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":60,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"KinTatHo":60}},{"path":"src/main/java/TimeMissingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Exception thrown when a required time information is missing.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" * This can occur in scenarios such as creating a deadline or event task","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":" * without specifying the necessary time details.","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"public class TimeMissingException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * Constructs a TimeMissingException with a detailed message.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     * This message provides information about the missing time detail, ","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     * which is essential for certain types of tasks (e.g., deadlines, events).","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     * @param message A string detailing the reason for the exception, ","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"     *                typically indicating which time information is missing.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    public TimeMissingException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"        super(message); // Call to the superclass (Exception) constructor with the detailed message","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"KinTatHo":19}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Represents a \"Todo\" task. It is a simple task with only a description.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"     * Constructs a todo task with the given description.","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * @param description A string describing the todo task.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"        super(description); // Call to the superclass (Task) constructor","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"     * Returns a string representation of the todo task.","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"     * The method overrides the Task class\u0027s toString method to add the specific","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"     * identifier for Todo tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"     * @return A formatted string representing the todo task,","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"     *         prefixed with \"[T]\" to denote a Todo type task.","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"        return \"[T]\" + super.toString(); // Adding the Todo identifier to the string representation","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"KinTatHo":27}},{"path":"src/main/java/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":" * Exception thrown when an unrecognized command is encountered.","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":" * This typically happens when user input does not match any of the expected commands.","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"public class UnknownCommandException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"     * Constructs an UnknownCommandException with a detailed message.","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"     * The message usually indicates that the user input did not match any known command.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"     * @param message A string detailing the reason for the exception,","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"     *                such as \"Unknown command entered\".","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"    public UnknownCommandException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"        super(message); // Call to the superclass (Exception) constructor with the detailed message","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"KinTatHo":17}},{"path":"src/main/java/Yoda.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":" * Main class for the Yoda chatbot application.","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"public class Yoda {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"        // Name of the chatbot is set to \"Yoda\".","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"        String chatbotName \u003d \"Yoda\";","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"        // Create an instance of the YodaUI class with the specified chatbot name.","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"        YodaUI yoda \u003d new YodaUI(chatbotName);","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"        // Scanner to read user input from the console.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"        // Display the initial greeting message from Yoda.","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"        yoda.printGreeting();","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"        // Main loop to keep processing user input until the chatbot stops chatting.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"        while (yoda.isChatting()) {","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"            // Read the next line of input from the user.","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"            try {","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"                // Handle the user\u0027s input and perform the appropriate action.","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"                yoda.handleUserInput(input);","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"            } catch (EmptyDescriptionException | UnknownCommandException | InvalidTaskException | TimeMissingException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"                // Catch specific exceptions and print their messages.","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"                yoda.printMessage(e.getMessage());","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"KinTatHo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"KinTatHo"},"content":"                // Catch any other exceptions and throw a RuntimeException.","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"KinTatHo"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"KinTatHo"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"KinTatHo"},"content":"        // Close the scanner to prevent resource leaks.","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"KinTatHo"},"content":"        scanner.close();","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"KinTatHo":40}},{"path":"src/main/java/YodaUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"public class YodaUI {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"    private final ArrayList\u003cTask\u003e tasks; // List to store the tasks","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"    private final String chatbotName; // Name of the chatbot","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"    private boolean isChatting; // Flag to check if the chatbot is currently chatting","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"     * Constructor to initialize the chatbot with a name.","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"     * @param chatbotName The name of the chatbot.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"KinTatHo"},"content":"    public YodaUI(String chatbotName) {","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"KinTatHo"},"content":"        this.chatbotName \u003d chatbotName;","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"        this.isChatting \u003d true;","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"KinTatHo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"KinTatHo"},"content":"     * Checks if the chatbot is currently chatting.","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"KinTatHo"},"content":"     * @return true if chatting, false otherwise.","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"KinTatHo"},"content":"    public boolean isChatting() {","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"KinTatHo"},"content":"        return this.isChatting;","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"KinTatHo"},"content":"     * Marks a task as done.","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"KinTatHo"},"content":"     * @param taskNumber The number of the task to mark as done.","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"KinTatHo"},"content":"    public void markTaskAsDone(int taskNumber) {","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"KinTatHo"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"KinTatHo"},"content":"        task.markAsDone();","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"KinTatHo"},"content":"        printMessage(\"Done, this task is:\\n\" + task);","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"KinTatHo"},"content":"     * Marks a task as undone.","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"KinTatHo"},"content":"     * @param taskNumber The number of the task to mark as not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"KinTatHo"},"content":"    public void markTaskAsUndone(int taskNumber) {","lastModifiedDate":"2024-01-27"},{"lineNumber":46,"author":{"gitId":"KinTatHo"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"KinTatHo"},"content":"        task.markAsUndone();","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"KinTatHo"},"content":"        printMessage(\"Undone, this task remains:\\n\" + task);","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"KinTatHo"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"KinTatHo"},"content":"     * @param taskNumber The number of the task to be deleted.","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"KinTatHo"},"content":"    public void deleteTask(int taskNumber) {","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"KinTatHo"},"content":"        Task task \u003d tasks.remove(taskNumber - 1);","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"KinTatHo"},"content":"        printMessage(\"Removed, this task has been:\\n\" + task + \"\\nTasks in the list, now you have \" + tasks.size() + \", hmm.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":60,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"KinTatHo"},"content":"     * Saves the current task list to a file called yoda.txt.","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"KinTatHo"},"content":"    public void saveTasks() {","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"KinTatHo"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"./data/yoda.txt\"))) {","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"KinTatHo"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"KinTatHo"},"content":"                writer.write(taskToFileFormat(task) + System.lineSeparator());","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"KinTatHo"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"KinTatHo"},"content":"            printMessage(\"Saved, your task list has been.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"KinTatHo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"KinTatHo"},"content":"            printMessage(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":75,"author":{"gitId":"KinTatHo"},"content":"     * Converts a task to a formatted string suitable for file storage.","lastModifiedDate":"2024-01-27"},{"lineNumber":76,"author":{"gitId":"KinTatHo"},"content":"     * @param task The task to convert.","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"KinTatHo"},"content":"     * @return A string representing the task in the file format.","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":79,"author":{"gitId":"KinTatHo"},"content":"    private String taskToFileFormat(Task task) {","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"KinTatHo"},"content":"        String status \u003d task.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2024-01-27"},{"lineNumber":81,"author":{"gitId":"KinTatHo"},"content":"        String type \u003d task instanceof Todo ? \"T\" :","lastModifiedDate":"2024-01-27"},{"lineNumber":82,"author":{"gitId":"KinTatHo"},"content":"                task instanceof Deadline ? \"D\" :","lastModifiedDate":"2024-01-27"},{"lineNumber":83,"author":{"gitId":"KinTatHo"},"content":"                        task instanceof Event ? \"E\" : \"\";","lastModifiedDate":"2024-01-27"},{"lineNumber":84,"author":{"gitId":"KinTatHo"},"content":"        String details \u003d task.getDescription();","lastModifiedDate":"2024-01-27"},{"lineNumber":85,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":86,"author":{"gitId":"KinTatHo"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2024-01-27"},{"lineNumber":87,"author":{"gitId":"KinTatHo"},"content":"            Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2024-01-27"},{"lineNumber":88,"author":{"gitId":"KinTatHo"},"content":"            details +\u003d \" | \" + deadlineTask.getBy();","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"KinTatHo"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2024-01-27"},{"lineNumber":90,"author":{"gitId":"KinTatHo"},"content":"            Event eventTask \u003d (Event) task;","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"KinTatHo"},"content":"            details +\u003d \" | \" + eventTask.getFrom() + \" to \" + eventTask.getTo();","lastModifiedDate":"2024-01-27"},{"lineNumber":92,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":93,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":94,"author":{"gitId":"KinTatHo"},"content":"        return type + \" | \" + status + \" | \" + details;","lastModifiedDate":"2024-01-27"},{"lineNumber":95,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":96,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":97,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":98,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":99,"author":{"gitId":"KinTatHo"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2024-01-27"},{"lineNumber":100,"author":{"gitId":"KinTatHo"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-01-27"},{"lineNumber":101,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":102,"author":{"gitId":"KinTatHo"},"content":"    private void addTask(Task task) {","lastModifiedDate":"2024-01-27"},{"lineNumber":103,"author":{"gitId":"KinTatHo"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":104,"author":{"gitId":"KinTatHo"},"content":"        printMessage(\"Hmm, added this task, I have:\\n\" + task + \"\\nTasks in the list, now you have \" + tasks.size() + \", hmm.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":105,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":106,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":107,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":108,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":109,"author":{"gitId":"KinTatHo"},"content":"     * Displays all the tasks in the list.","lastModifiedDate":"2024-01-27"},{"lineNumber":110,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":111,"author":{"gitId":"KinTatHo"},"content":"    private void showTasks() {","lastModifiedDate":"2024-01-27"},{"lineNumber":112,"author":{"gitId":"KinTatHo"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2024-01-27"},{"lineNumber":113,"author":{"gitId":"KinTatHo"},"content":"            printMessage(\"Empty, your task list is.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":114,"author":{"gitId":"KinTatHo"},"content":"            return;","lastModifiedDate":"2024-01-27"},{"lineNumber":115,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":116,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":117,"author":{"gitId":"KinTatHo"},"content":"        StringBuilder response \u003d new StringBuilder(\"Tasks in your list, here they are:\\n\");","lastModifiedDate":"2024-01-27"},{"lineNumber":118,"author":{"gitId":"KinTatHo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-01-27"},{"lineNumber":119,"author":{"gitId":"KinTatHo"},"content":"            response.append(i + 1).append(\".\").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2024-01-27"},{"lineNumber":120,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":121,"author":{"gitId":"KinTatHo"},"content":"        printMessage(response.toString().trim());","lastModifiedDate":"2024-01-27"},{"lineNumber":122,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":123,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":124,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":125,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":126,"author":{"gitId":"KinTatHo"},"content":"     * Handles user input and performs actions based on the command.","lastModifiedDate":"2024-01-27"},{"lineNumber":127,"author":{"gitId":"KinTatHo"},"content":"     * @param input The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":128,"author":{"gitId":"KinTatHo"},"content":"     * @throws Exception if there is an issue in processing the command.","lastModifiedDate":"2024-01-27"},{"lineNumber":129,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":130,"author":{"gitId":"KinTatHo"},"content":"    public void handleUserInput(String input) throws Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":131,"author":{"gitId":"KinTatHo"},"content":"        String[] parts \u003d input.split(\"\\\\s+\", 2);","lastModifiedDate":"2024-01-27"},{"lineNumber":132,"author":{"gitId":"KinTatHo"},"content":"        Command command \u003d Command.fromString(parts[0]);","lastModifiedDate":"2024-01-27"},{"lineNumber":133,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":134,"author":{"gitId":"KinTatHo"},"content":"        try {","lastModifiedDate":"2024-01-27"},{"lineNumber":135,"author":{"gitId":"KinTatHo"},"content":"            switch (command) {","lastModifiedDate":"2024-01-27"},{"lineNumber":136,"author":{"gitId":"KinTatHo"},"content":"                case BYE:","lastModifiedDate":"2024-01-27"},{"lineNumber":137,"author":{"gitId":"KinTatHo"},"content":"                    printMessage(\"Farewell. See you again, I hope!\");","lastModifiedDate":"2024-01-27"},{"lineNumber":138,"author":{"gitId":"KinTatHo"},"content":"                    this.isChatting \u003d false;","lastModifiedDate":"2024-01-27"},{"lineNumber":139,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":140,"author":{"gitId":"KinTatHo"},"content":"                case LIST:","lastModifiedDate":"2024-01-27"},{"lineNumber":141,"author":{"gitId":"KinTatHo"},"content":"                    showTasks();","lastModifiedDate":"2024-01-27"},{"lineNumber":142,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":143,"author":{"gitId":"KinTatHo"},"content":"                case SAVE:","lastModifiedDate":"2024-01-27"},{"lineNumber":144,"author":{"gitId":"KinTatHo"},"content":"                    saveTasks();","lastModifiedDate":"2024-01-27"},{"lineNumber":145,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":146,"author":{"gitId":"KinTatHo"},"content":"                case DELETE:","lastModifiedDate":"2024-01-27"},{"lineNumber":147,"author":{"gitId":"KinTatHo"},"content":"                    performTaskOperation(parts, this::deleteTask);","lastModifiedDate":"2024-01-27"},{"lineNumber":148,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":149,"author":{"gitId":"KinTatHo"},"content":"                case MARK:","lastModifiedDate":"2024-01-27"},{"lineNumber":150,"author":{"gitId":"KinTatHo"},"content":"                    performTaskOperation(parts, this::markTaskAsDone);","lastModifiedDate":"2024-01-27"},{"lineNumber":151,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":152,"author":{"gitId":"KinTatHo"},"content":"                case UNMARK:","lastModifiedDate":"2024-01-27"},{"lineNumber":153,"author":{"gitId":"KinTatHo"},"content":"                    performTaskOperation(parts, this::markTaskAsUndone);","lastModifiedDate":"2024-01-27"},{"lineNumber":154,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":155,"author":{"gitId":"KinTatHo"},"content":"                case TODO:","lastModifiedDate":"2024-01-27"},{"lineNumber":156,"author":{"gitId":"KinTatHo"},"content":"                    addTask(new Todo(parts[1]));","lastModifiedDate":"2024-01-27"},{"lineNumber":157,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":158,"author":{"gitId":"KinTatHo"},"content":"                case DEADLINE:","lastModifiedDate":"2024-01-27"},{"lineNumber":159,"author":{"gitId":"KinTatHo"},"content":"                    String[] deadlineParts \u003d parts[1].split(\" /by \", 2);","lastModifiedDate":"2024-01-27"},{"lineNumber":160,"author":{"gitId":"KinTatHo"},"content":"                    addTask(new Deadline(deadlineParts[0], deadlineParts[1]));","lastModifiedDate":"2024-01-27"},{"lineNumber":161,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":162,"author":{"gitId":"KinTatHo"},"content":"                case EVENT:","lastModifiedDate":"2024-01-27"},{"lineNumber":163,"author":{"gitId":"KinTatHo"},"content":"                    String[] eventParts \u003d parts[1].split(\" /from \", 2);","lastModifiedDate":"2024-01-27"},{"lineNumber":164,"author":{"gitId":"KinTatHo"},"content":"                    String[] timeParts \u003d eventParts[1].split(\" /to \", 2);","lastModifiedDate":"2024-01-27"},{"lineNumber":165,"author":{"gitId":"KinTatHo"},"content":"                    addTask(new Event(eventParts[0], timeParts[0], timeParts[1]));","lastModifiedDate":"2024-01-27"},{"lineNumber":166,"author":{"gitId":"KinTatHo"},"content":"                    break;","lastModifiedDate":"2024-01-27"},{"lineNumber":167,"author":{"gitId":"KinTatHo"},"content":"                default:","lastModifiedDate":"2024-01-27"},{"lineNumber":168,"author":{"gitId":"KinTatHo"},"content":"                    printMessage(\"Sorry, I am. What that means, I do not know :-(\");","lastModifiedDate":"2024-01-27"},{"lineNumber":169,"author":{"gitId":"KinTatHo"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":170,"author":{"gitId":"KinTatHo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":171,"author":{"gitId":"KinTatHo"},"content":"            printMessage(e.getMessage());","lastModifiedDate":"2024-01-27"},{"lineNumber":172,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":173,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":174,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":175,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":176,"author":{"gitId":"KinTatHo"},"content":"     * Performs a task operation (delete, mark, unmark) based on the user input.","lastModifiedDate":"2024-01-27"},{"lineNumber":177,"author":{"gitId":"KinTatHo"},"content":"     * @param parts The split input containing the command and task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":178,"author":{"gitId":"KinTatHo"},"content":"     * @param operation The operation to be performed on the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":179,"author":{"gitId":"KinTatHo"},"content":"     * @throws Exception if the task number is invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":180,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":181,"author":{"gitId":"KinTatHo"},"content":"    private void performTaskOperation(String[] parts, TaskOperation operation) throws Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":182,"author":{"gitId":"KinTatHo"},"content":"        if (parts.length \u003e 1) {","lastModifiedDate":"2024-01-27"},{"lineNumber":183,"author":{"gitId":"KinTatHo"},"content":"            int taskNumber \u003d parseTaskNumber(parts[1]);","lastModifiedDate":"2024-01-27"},{"lineNumber":184,"author":{"gitId":"KinTatHo"},"content":"            operation.perform(taskNumber);","lastModifiedDate":"2024-01-27"},{"lineNumber":185,"author":{"gitId":"KinTatHo"},"content":"        } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":186,"author":{"gitId":"KinTatHo"},"content":"            throw new Exception(\"Specify a task number, you must.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":187,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":188,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":189,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":190,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":191,"author":{"gitId":"KinTatHo"},"content":"     * Parses the task number from the input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":192,"author":{"gitId":"KinTatHo"},"content":"     * @param input The input string containing the task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":193,"author":{"gitId":"KinTatHo"},"content":"     * @return The parsed task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":194,"author":{"gitId":"KinTatHo"},"content":"     * @throws Exception if the input is not a valid number or out of range.","lastModifiedDate":"2024-01-27"},{"lineNumber":195,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":196,"author":{"gitId":"KinTatHo"},"content":"    private int parseTaskNumber(String input) throws Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":197,"author":{"gitId":"KinTatHo"},"content":"        try {","lastModifiedDate":"2024-01-27"},{"lineNumber":198,"author":{"gitId":"KinTatHo"},"content":"            int taskNumber \u003d Integer.parseInt(input);","lastModifiedDate":"2024-01-27"},{"lineNumber":199,"author":{"gitId":"KinTatHo"},"content":"            if (taskNumber \u003c\u003d 0 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2024-01-27"},{"lineNumber":200,"author":{"gitId":"KinTatHo"},"content":"                throw new Exception(\"Valid task number, provide you must.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":201,"author":{"gitId":"KinTatHo"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":202,"author":{"gitId":"KinTatHo"},"content":"            return taskNumber;","lastModifiedDate":"2024-01-27"},{"lineNumber":203,"author":{"gitId":"KinTatHo"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":204,"author":{"gitId":"KinTatHo"},"content":"            throw new Exception(\"A number, enter you must.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":205,"author":{"gitId":"KinTatHo"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":206,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":207,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":208,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":209,"author":{"gitId":"KinTatHo"},"content":"     * Prints a message wrapped with lines for better readability.","lastModifiedDate":"2024-01-27"},{"lineNumber":210,"author":{"gitId":"KinTatHo"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2024-01-27"},{"lineNumber":211,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":212,"author":{"gitId":"KinTatHo"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":213,"author":{"gitId":"KinTatHo"},"content":"        printLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":214,"author":{"gitId":"KinTatHo"},"content":"        System.out.println(\"\" + message);","lastModifiedDate":"2024-01-27"},{"lineNumber":215,"author":{"gitId":"KinTatHo"},"content":"        printLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":216,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":217,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":218,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":219,"author":{"gitId":"KinTatHo"},"content":"     * Functional interface for task operations like delete, mark, and unmark.","lastModifiedDate":"2024-01-27"},{"lineNumber":220,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":221,"author":{"gitId":"KinTatHo"},"content":"    @FunctionalInterface","lastModifiedDate":"2024-01-27"},{"lineNumber":222,"author":{"gitId":"KinTatHo"},"content":"    private interface TaskOperation {","lastModifiedDate":"2024-01-27"},{"lineNumber":223,"author":{"gitId":"KinTatHo"},"content":"        void perform(int taskNumber) throws Exception;","lastModifiedDate":"2024-01-27"},{"lineNumber":224,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":225,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":226,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":227,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":228,"author":{"gitId":"KinTatHo"},"content":"     * Prints a line for visual separation in the console output.","lastModifiedDate":"2024-01-27"},{"lineNumber":229,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":230,"author":{"gitId":"KinTatHo"},"content":"    private void printLine() {","lastModifiedDate":"2024-01-27"},{"lineNumber":231,"author":{"gitId":"KinTatHo"},"content":"        System.out.println(\"________________________________________________________\");","lastModifiedDate":"2024-01-27"},{"lineNumber":232,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":233,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":234,"author":{"gitId":"KinTatHo"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":235,"author":{"gitId":"KinTatHo"},"content":"     * Prints a greeting message when the chatbot starts.","lastModifiedDate":"2024-01-27"},{"lineNumber":236,"author":{"gitId":"KinTatHo"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":237,"author":{"gitId":"KinTatHo"},"content":"    public void printGreeting() {","lastModifiedDate":"2024-01-27"},{"lineNumber":238,"author":{"gitId":"KinTatHo"},"content":"        printLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":239,"author":{"gitId":"KinTatHo"},"content":"        System.out.println(\"Greetings! \" + chatbotName + \", I am\\nAssist you, may I?\");","lastModifiedDate":"2024-01-27"},{"lineNumber":240,"author":{"gitId":"KinTatHo"},"content":"        printLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":241,"author":{"gitId":"KinTatHo"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":242,"author":{"gitId":"KinTatHo"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":243,"author":{"gitId":"KinTatHo"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"KinTatHo":243}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"KinTatHo"},"content":"todo read book","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"KinTatHo"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"KinTatHo"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"KinTatHo"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"KinTatHo"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"KinTatHo"},"content":"todo join sports club","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"KinTatHo"},"content":"todo borrow book","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"KinTatHo"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"KinTatHo"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"KinTatHo"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"KinTatHo"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"KinTatHo"},"content":"delete 3","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"KinTatHo"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"KinTatHo"},"content":"save","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"KinTatHo"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"KinTatHo":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"KinTatHo"},"content":"java -classpath ..\\bin Yoda \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"KinTatHo":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"KinTatHo"},"content":"java -classpath ../bin Yoda \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"KinTatHo":1}}]
