[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jayllo-c":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    testImplementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jayllo-c":4,"-":41}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"T | 1 | wow","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"E | 1 | wowzers | 01/01/2024 1234 | 03/01/2024 1234","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"D | 0 | wowweee | 01/01/2025 1234","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"T | 0 | zersee","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"jayllo-c":4}},{"path":"src/Test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"    public void getBy_validInput_properDates() throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"        assertEquals(\"29/10/2024 1234\", new Deadline(\"test\",","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"                \"29/10/2024 1234\").getBy());","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"    public void getBy_invalidInput_exceptionThrown() {","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"            assertEquals(\"29/10/2024 1234\", new Deadline(\"test\",","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"                    \"33/13/2024 4567\").getBy());","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"            assertEquals(\"Something went wrong...\\n\"","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"                    + \"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"                    + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234\", e.getMessage());","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"jayllo-c":25}},{"path":"src/Test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"public class EventTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"    public void getFrom_validInput_properDates() throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"        assertEquals(\"29/10/2024 1234\", new Event(\"test\",","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"                \"29/10/2024 1234\", \"29/10/2024 1235\").getFrom());","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"    public void getTo_validInput_properDates() throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"        assertEquals(\"29/10/2024 1235\", new Event(\"test\",","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"                \"29/10/2024 1234\", \"29/10/2024 1235\").getTo());","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"    public void getFromAndTo_invalidInput_exceptionThrown() {","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"            assertEquals(\"32/13/2024 4567\", new Event(\"test\",","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"                    \"32/13/2024 4567\", \"32/14/2024 4567\").getFrom());","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"            assertEquals(\"Something went wrong...\\n\" + \"The time format in \\\"from\\\" or \\\"to\\\" is wrong\\n\"","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"                    + \"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"                    + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234)\", e.getMessage());","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"jayllo-c":31}},{"path":"src/main/java/duke/AcceptedCmds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":" * Contains the list of commands accepted by duke.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"public enum AcceptedCmds {","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"    bye, list, mark, unmark, todo, deadline, event, delete, find","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"jayllo-c":8}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":" * Extension of task that saves the deadline date of that task.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    private DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"     * Base constructor used by Duke to generate a Deadline object.","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"     * @param time The deadline of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty or time is not given in the correct format.","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"    public Deadline(String description, String time) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"        time \u003d time.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0 || time.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"            String errorMessage \u003d \"Please enter the following:\";","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"            if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na description for this duke.Deadline task\";","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"            if (time.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/by\u0027 command\";","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"            this.by \u003d LocalDateTime.parse(time, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"                    + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234\");","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"     * Secondary constructor used by Duke to generate a deadline object from a data txt file.","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"     * @param logic Indicates if this task should be marked.","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"     * @param time The deadline of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty or time is not given in the correct format.","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"    public Deadline(String logic, String description, String time) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"        time \u003d time.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0 || time.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"            String errorMessage \u003d \"Please enter the following:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"            if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na description for this duke.Deadline task\";","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"jayllo-c"},"content":"            if (time.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/by\u0027 command\";","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"jayllo-c"},"content":"            this.by \u003d LocalDateTime.parse(time, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"jayllo-c"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"jayllo-c"},"content":"                    + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234\");","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"jayllo-c"},"content":"        switch (logic) {","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"jayllo-c"},"content":"        case \"1\":","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"jayllo-c"},"content":"        default:","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":84,"author":{"gitId":"jayllo-c"},"content":"    public String getBy() {","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"jayllo-c"},"content":"        return by.format(inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"jayllo-c"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":88,"author":{"gitId":"jayllo-c"},"content":"    public String toString() {","lastModifiedDate":"2024-01-29"},{"lineNumber":89,"author":{"gitId":"jayllo-c"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(displayFormatter) + \")\";","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":91,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"jayllo-c":91}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"import java.util.List;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":" * The main class that contains functions involved with running the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    private static String horzLine \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    private static String chatbotName \u003d \"Destiny\";","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    private static String greetingMessage \u003d horzLine","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"            + \"\\nGreetings! I\u0027m \" + chatbotName + \"\\nHow may I serve you?\\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"            + horzLine;","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"    private static String goodbyeMessage \u003d horzLine","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"            + \"\\nBye. Hope to see you again soon!\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"            + horzLine;","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"    private Parser parser;","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"     * Initializes the instance variables of the Duke class.","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"    public Duke() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"        tasks \u003d new TaskList(storage.loadData());","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"     * Helper function that prints a horizontal line above and below the given message.","lastModifiedDate":"2024-02-07"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"    private static void printWithLines(String message) {","lastModifiedDate":"2024-02-07"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(message);","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"     * Main code for the running of the Duke chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"    public void run() {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(greetingMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"        while (!ui.getUserInput().equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"            ui.inputMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"            String userMessage \u003d ui.getUserInput();","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"            if (userMessage.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"jayllo-c"},"content":"            String[] userMessageArr \u003d parser.getCommand(userMessage);","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"jayllo-c"},"content":"            String userCmd \u003d userMessageArr[0];","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"jayllo-c"},"content":"            String cmdDetails \u003d userMessageArr[1];","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"jayllo-c"},"content":"            // checks if command is valid","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"jayllo-c"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"jayllo-c"},"content":"                AcceptedCmds testCommand \u003d AcceptedCmds.valueOf(userCmd.toLowerCase());","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"jayllo-c"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"jayllo-c"},"content":"                printWithLines(\"Please enter a valid command\\nThe list of valid commands are as follows:\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"jayllo-c"},"content":"                        + Arrays.asList(AcceptedCmds.values()));","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"jayllo-c"},"content":"                continue;","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"jayllo-c"},"content":"            if (userCmd.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"jayllo-c"},"content":"                list();","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"find\")) {","lastModifiedDate":"2024-02-07"},{"lineNumber":77,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-07"},{"lineNumber":78,"author":{"gitId":"jayllo-c"},"content":"                    String searchStr \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"jayllo-c"},"content":"                    find(searchStr);","lastModifiedDate":"2024-02-07"},{"lineNumber":80,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":81,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-07"},{"lineNumber":82,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-07"},{"lineNumber":83,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"mark\")","lastModifiedDate":"2024-02-07"},{"lineNumber":84,"author":{"gitId":"jayllo-c"},"content":"                    || userCmd.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2024-02-07"},{"lineNumber":85,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"jayllo-c"},"content":"                    String possInteger \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"jayllo-c"},"content":"                    int taskIndex \u003d Integer.valueOf(possInteger);","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"jayllo-c"},"content":"                    if (userCmd.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"jayllo-c"},"content":"                        markNotDone(taskIndex);","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"jayllo-c"},"content":"                    } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"jayllo-c"},"content":"                        markDone(taskIndex);","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"jayllo-c"},"content":"                    }","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"jayllo-c"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines((tasks.size() !\u003d 0","lastModifiedDate":"2024-02-06"},{"lineNumber":98,"author":{"gitId":"jayllo-c"},"content":"                            ? \"Invalid input type\\nEnter a number between 1 and \" + tasks.size()","lastModifiedDate":"2024-02-06"},{"lineNumber":99,"author":{"gitId":"jayllo-c"},"content":"                            : \"Invalid input type\\nCan\u0027t mark or unmark either cause the list is empty\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":100,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"jayllo-c"},"content":"                    String possInteger \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-06"},{"lineNumber":104,"author":{"gitId":"jayllo-c"},"content":"                    int taskIndex \u003d Integer.valueOf(possInteger);","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"jayllo-c"},"content":"                    tasks.delete(taskIndex);","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"jayllo-c"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines((tasks.size() !\u003d 0","lastModifiedDate":"2024-02-06"},{"lineNumber":110,"author":{"gitId":"jayllo-c"},"content":"                            ? \"Invalid input type\\nEnter a number between 1 and \" + tasks.size()","lastModifiedDate":"2024-02-06"},{"lineNumber":111,"author":{"gitId":"jayllo-c"},"content":"                            : \"Invalid input type\\nCan\u0027t mark or unmark either cause the list is empty\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":112,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"jayllo-c"},"content":"                    String possToDo \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-06"},{"lineNumber":116,"author":{"gitId":"jayllo-c"},"content":"                    ToDo newToDo \u003d new ToDo(possToDo);","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"jayllo-c"},"content":"                    tasks.addTask(newToDo);","lastModifiedDate":"2024-02-06"},{"lineNumber":118,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"jayllo-c"},"content":"                    String possDlDetails \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-06"},{"lineNumber":124,"author":{"gitId":"jayllo-c"},"content":"                    String[] splitDetails \u003d possDlDetails.toLowerCase().split(\"/by \", 2);","lastModifiedDate":"2024-02-06"},{"lineNumber":125,"author":{"gitId":"jayllo-c"},"content":"                    try {","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"jayllo-c"},"content":"                        Deadline newDL \u003d new Deadline(splitDetails[0], splitDetails[1]);","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"jayllo-c"},"content":"                        tasks.addTask(newDL);","lastModifiedDate":"2024-02-06"},{"lineNumber":128,"author":{"gitId":"jayllo-c"},"content":"                    } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"jayllo-c"},"content":"                        printWithLines(\"After entering the deadline task name,\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":130,"author":{"gitId":"jayllo-c"},"content":"                                + \"add \u0027/by\u0027 followed by your desired deadline\");","lastModifiedDate":"2024-02-06"},{"lineNumber":131,"author":{"gitId":"jayllo-c"},"content":"                    }","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":136,"author":{"gitId":"jayllo-c"},"content":"            } else if (userCmd.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"jayllo-c"},"content":"                    String possEventDetails \u003d parser.getCmdDetails(userCmd, cmdDetails);","lastModifiedDate":"2024-02-06"},{"lineNumber":139,"author":{"gitId":"jayllo-c"},"content":"                    String[] splitDetails \u003d possEventDetails.split(\"/from \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"jayllo-c"},"content":"                    String[] secondSplitDetails \u003d new String[2];","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"jayllo-c"},"content":"                    try {","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"jayllo-c"},"content":"                        secondSplitDetails \u003d splitDetails[1].split(\"/to \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"jayllo-c"},"content":"                        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"jayllo-c"},"content":"                            Event newEvent \u003d new Event(splitDetails[0], secondSplitDetails[0], secondSplitDetails[1]);","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"jayllo-c"},"content":"                            tasks.addTask(newEvent);","lastModifiedDate":"2024-02-06"},{"lineNumber":146,"author":{"gitId":"jayllo-c"},"content":"                        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"jayllo-c"},"content":"                            printWithLines(\"After entering your desired start time,\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":148,"author":{"gitId":"jayllo-c"},"content":"                                    + \"add \u0027/to\u0027 followed by your desired end time\");","lastModifiedDate":"2024-02-06"},{"lineNumber":149,"author":{"gitId":"jayllo-c"},"content":"                        }","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"jayllo-c"},"content":"                    } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":151,"author":{"gitId":"jayllo-c"},"content":"                        printWithLines(\"After entering the event task name,\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":152,"author":{"gitId":"jayllo-c"},"content":"                                + \"add \u0027/from\u0027 followed by your desired start time\");","lastModifiedDate":"2024-02-06"},{"lineNumber":153,"author":{"gitId":"jayllo-c"},"content":"                    }","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"jayllo-c"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"jayllo-c"},"content":"                    printWithLines(e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":157,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":158,"author":{"gitId":"jayllo-c"},"content":"            storage.saveData(tasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":159,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(goodbyeMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":164,"author":{"gitId":"jayllo-c"},"content":"     * Lists out each task in the TaskList \u0027tasks\u0027.","lastModifiedDate":"2024-02-07"},{"lineNumber":165,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":166,"author":{"gitId":"jayllo-c"},"content":"    public void list() {","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"jayllo-c"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":168,"author":{"gitId":"jayllo-c"},"content":"            printWithLines(\"There\u0027s nothing in your list so far\");","lastModifiedDate":"2024-01-31"},{"lineNumber":169,"author":{"gitId":"jayllo-c"},"content":"            return;","lastModifiedDate":"2024-01-31"},{"lineNumber":170,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":171,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-01-26"},{"lineNumber":172,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-01-29"},{"lineNumber":173,"author":{"gitId":"jayllo-c"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":174,"author":{"gitId":"jayllo-c"},"content":"            int j \u003d i + 1;","lastModifiedDate":"2024-01-29"},{"lineNumber":175,"author":{"gitId":"jayllo-c"},"content":"            System.out.println(j + \". \" + tasks.get(i).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":176,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":177,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-01-26"},{"lineNumber":178,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":179,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":180,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":181,"author":{"gitId":"jayllo-c"},"content":"     * Finds tasks in the TaskList that contain the given search string.","lastModifiedDate":"2024-02-07"},{"lineNumber":182,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":183,"author":{"gitId":"jayllo-c"},"content":"     * @param searchStr Keyword to find elements in the TaskList.","lastModifiedDate":"2024-02-07"},{"lineNumber":184,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":185,"author":{"gitId":"jayllo-c"},"content":"    public void find(String searchStr) {","lastModifiedDate":"2024-02-07"},{"lineNumber":186,"author":{"gitId":"jayllo-c"},"content":"        List\u003cTask\u003e matches \u003d tasks.getTaskList().stream().filter(task -\u003e task.getDescription().contains(searchStr))","lastModifiedDate":"2024-02-07"},{"lineNumber":187,"author":{"gitId":"jayllo-c"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-02-07"},{"lineNumber":188,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":189,"author":{"gitId":"jayllo-c"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-07"},{"lineNumber":190,"author":{"gitId":"jayllo-c"},"content":"            printWithLines(\"There\u0027s nothing in your list so far\");","lastModifiedDate":"2024-02-07"},{"lineNumber":191,"author":{"gitId":"jayllo-c"},"content":"        } else if (matches.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-07"},{"lineNumber":192,"author":{"gitId":"jayllo-c"},"content":"            printWithLines(\"There\u0027s nothing in your list that matches your search\");","lastModifiedDate":"2024-02-07"},{"lineNumber":193,"author":{"gitId":"jayllo-c"},"content":"            return;","lastModifiedDate":"2024-02-07"},{"lineNumber":194,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":195,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":196,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-07"},{"lineNumber":197,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-07"},{"lineNumber":198,"author":{"gitId":"jayllo-c"},"content":"        for (int i \u003d 0; i \u003c matches.size(); i++) {","lastModifiedDate":"2024-02-07"},{"lineNumber":199,"author":{"gitId":"jayllo-c"},"content":"            int j \u003d i + 1;","lastModifiedDate":"2024-02-07"},{"lineNumber":200,"author":{"gitId":"jayllo-c"},"content":"            System.out.println(j + \". \" + matches.get(i).toString());","lastModifiedDate":"2024-02-07"},{"lineNumber":201,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":202,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-07"},{"lineNumber":203,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":204,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":205,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":206,"author":{"gitId":"jayllo-c"},"content":"     * Marks the indicated task as done.","lastModifiedDate":"2024-02-07"},{"lineNumber":207,"author":{"gitId":"jayllo-c"},"content":"     * @param index The task number displayed by the list.","lastModifiedDate":"2024-02-07"},{"lineNumber":208,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If 0 \u003c index \u003c tasks.size().","lastModifiedDate":"2024-02-07"},{"lineNumber":209,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":210,"author":{"gitId":"jayllo-c"},"content":"    public void markDone(int index) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":211,"author":{"gitId":"jayllo-c"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":212,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":213,"author":{"gitId":"jayllo-c"},"content":"        if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":214,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + tasks.size());","lastModifiedDate":"2024-02-06"},{"lineNumber":215,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":216,"author":{"gitId":"jayllo-c"},"content":"        tasks.get(index - 1).markAsDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":217,"author":{"gitId":"jayllo-c"},"content":"        printWithLines(\"Nice! I\u0027ve marked this task as done:\\n  \" + tasks.get(index - 1).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":218,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":219,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":220,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":221,"author":{"gitId":"jayllo-c"},"content":"     * Marks the indicated task as not done.","lastModifiedDate":"2024-02-07"},{"lineNumber":222,"author":{"gitId":"jayllo-c"},"content":"     * @param index The task number displayed by the list.","lastModifiedDate":"2024-02-07"},{"lineNumber":223,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If 0 \u003c index \u003c tasks.size().","lastModifiedDate":"2024-02-07"},{"lineNumber":224,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":225,"author":{"gitId":"jayllo-c"},"content":"    public void markNotDone(int index) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":226,"author":{"gitId":"jayllo-c"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":227,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Nothing is in the list yet\");","lastModifiedDate":"2024-01-31"},{"lineNumber":228,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":229,"author":{"gitId":"jayllo-c"},"content":"        if (index \u003c 1 || index \u003e tasks.size()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":230,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + tasks.size());","lastModifiedDate":"2024-02-06"},{"lineNumber":231,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":232,"author":{"gitId":"jayllo-c"},"content":"        tasks.get(index - 1).markAsUndone();","lastModifiedDate":"2024-02-06"},{"lineNumber":233,"author":{"gitId":"jayllo-c"},"content":"        printWithLines(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + tasks.get(index - 1).toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":234,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":235,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":237,"author":{"gitId":"jayllo-c"},"content":"        new Duke().run();","lastModifiedDate":"2024-02-05"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jayllo-c":235,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":" * An extension of the Exception class used to identify exceptions unique to Duke.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"    public DukeException() {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"        super();","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"        super(\"Something went wrong...\\n\" + message);","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"jayllo-c":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":" * Extension of task that saves the timeline of that task.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    private DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"    private DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mma\");","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"     * Base constructor used by Duke to generate an Event object.","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"     * @param fromTime The start date of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     * @param toTime The end date of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty or either fromTime or toTime is not given in the correct format.","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"    public Event(String description, String fromTime, String toTime) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"        fromTime \u003d fromTime.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"        toTime \u003d toTime.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0 || fromTime.length() \u003d\u003d 0 || toTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"            String errorMessage \u003d \"Please enter the following:\";","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"            if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na description for this duke.Deadline task\";","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"            if (fromTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/from\u0027 command\";","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"            if (toTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/to\u0027 command\";","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"        String formatIssueMessage \u003d \"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"                + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234)\";","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"            if (LocalDateTime.parse(fromTime, inputFormatter).isAfter(LocalDateTime.parse(toTime, inputFormatter))) {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"                throw new DukeException(\"The time in \\\"from\\\" comes after the time in \\\"to\\\"\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"                        + \"Please ensure that your \\\"from\\\" time is earlier than your \\\"to\\\" time\");","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"The time format in \\\"from\\\" or \\\"to\\\" is wrong\\n\" + formatIssueMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"        this.from \u003d LocalDateTime.parse(fromTime, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"        this.to \u003d LocalDateTime.parse(toTime, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"     * Secondary constructor used by Duke to generate an Event object from a data txt file.","lastModifiedDate":"2024-02-07"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"     * @param logic Indicates if this task should be marked.","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"jayllo-c"},"content":"     * @param fromTime The start date of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"jayllo-c"},"content":"     * @param toTime The end date of this Deadline task.","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty or either fromTime or toTime is not given in the correct format.","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"jayllo-c"},"content":"    public Event(String logic, String description, String fromTime, String toTime) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"jayllo-c"},"content":"        fromTime \u003d fromTime.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"jayllo-c"},"content":"        toTime \u003d toTime.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0 || fromTime.length() \u003d\u003d 0 || toTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"jayllo-c"},"content":"            String errorMessage \u003d \"Please enter the following:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"jayllo-c"},"content":"            if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na description for this duke.Deadline task\";","lastModifiedDate":"2024-02-06"},{"lineNumber":74,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"jayllo-c"},"content":"            if (fromTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/from\u0027 command\";","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"jayllo-c"},"content":"            if (toTime.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"jayllo-c"},"content":"                errorMessage +\u003d \"\\na deadline after the \u0027/to\u0027 command\";","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(errorMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"jayllo-c"},"content":"        String formatIssueMessage \u003d \"Please enter the date and time in the following format:\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"jayllo-c"},"content":"                + \"dd/mm/yyyy hhmm (e.g. 30/01/2024 1234)\";","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"jayllo-c"},"content":"            if (LocalDateTime.parse(fromTime, inputFormatter).isAfter(LocalDateTime.parse(toTime, inputFormatter))) {","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"jayllo-c"},"content":"                throw new DukeException(\"The time in \\\"from\\\" comes after the time in \\\"to\\\"\\n\"","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"jayllo-c"},"content":"                        + \"Please ensure that your \\\"from\\\" time is earlier than your \\\"to\\\" time\");","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"jayllo-c"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"The time format in \\\"from\\\" or \\\"to\\\" is wrong\\n\" + formatIssueMessage);","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"jayllo-c"},"content":"        this.from \u003d LocalDateTime.parse(fromTime, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"jayllo-c"},"content":"        this.to \u003d LocalDateTime.parse(toTime, inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"jayllo-c"},"content":"        switch (logic) {","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"jayllo-c"},"content":"        case \"1\":","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"jayllo-c"},"content":"        default:","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":108,"author":{"gitId":"jayllo-c"},"content":"     * Getter for from time in the input format, used to store the time in the duke.txt data file.","lastModifiedDate":"2024-02-07"},{"lineNumber":109,"author":{"gitId":"jayllo-c"},"content":"     * @return Reformatted string of from time.","lastModifiedDate":"2024-02-07"},{"lineNumber":110,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":111,"author":{"gitId":"jayllo-c"},"content":"    public String getFrom() {","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"jayllo-c"},"content":"        return from.format(inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":116,"author":{"gitId":"jayllo-c"},"content":"     * Getter for to time in the input format, used to store the time in the duke.txt data file.","lastModifiedDate":"2024-02-07"},{"lineNumber":117,"author":{"gitId":"jayllo-c"},"content":"     * @return Reformatted string of to time.","lastModifiedDate":"2024-02-07"},{"lineNumber":118,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":119,"author":{"gitId":"jayllo-c"},"content":"    public String getTo() {","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"jayllo-c"},"content":"        return to.format(inputFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"jayllo-c"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":124,"author":{"gitId":"jayllo-c"},"content":"    public String toString() {","lastModifiedDate":"2024-01-29"},{"lineNumber":125,"author":{"gitId":"jayllo-c"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from.format(displayFormatter)","lastModifiedDate":"2024-02-06"},{"lineNumber":126,"author":{"gitId":"jayllo-c"},"content":"                + \"  to: \" + to.format(displayFormatter) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":127,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":128,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"jayllo-c":128}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":" * Used to understand the user input.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"public class Parser {","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"     * Splits user input into the command and its details.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"     * @param userMessage The user input.","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"     * @return An array of strings where the 1st elem is the command and the 2nd is the details of the command.","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    public String[] getCommand(String userMessage) {","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"        String[] result \u003d new String[2];","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"        Boolean foundSplit \u003d false;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"        for (int i \u003d 0; i \u003c userMessage.length(); i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"            if (userMessage.charAt(i) \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"                result[0] \u003d userMessage.substring(0, i);","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"                result[1] \u003d userMessage.substring(i + 1, userMessage.length());","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"                foundSplit \u003d true;","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"        if (!foundSplit) {","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"            result[0] \u003d userMessage;","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"        return result;","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"     * Used by commands that require details.","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"     * @param cmd The command given.","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"     * @param details The details given by the user.","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"     * @return Trimmed details.","lastModifiedDate":"2024-02-07"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If details is empty or null.","lastModifiedDate":"2024-02-07"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"    public String getCmdDetails(String cmd, String details) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"        if (details \u003d\u003d null || details.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a description for the \" + cmd + \" command\");","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"        return details.trim();","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"jayllo-c":44}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.io.File;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":" * Used to load/store TaskList from/to a duke.txt data file.","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"public class Storage {","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"    private final String dataPath \u003d System.getProperty(\"user.dir\") + \"/data\";","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"    private final String fileName \u003d \"duke.txt\";","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"     * Attempts to load data from a duke.txt file that would contain the previously saved TaskList.","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"     * Creates a new .txt file if it is not found.","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     * @return ArrayList of tasks that will be loaded into the Tasklist.","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"    public ArrayList\u003cTask\u003e loadData() {","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"        File directory \u003d new File(dataPath);","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"        File file \u003d new File(dataPath + \"/\" + fileName);","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"        ArrayList\u003cTask\u003e tempTaskStorage \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"        // check if data directory and file exist already","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"            directory.mkdir();","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"            try {","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"                file.createNewFile();","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"                System.out.println(\"First initialization, creating new save file...\");","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"        } else if (!file.exists()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"            try {","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"                file.createNewFile();","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"                System.out.println(\"Data file missing, creating new save file...\");","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"        } else {","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"            try {","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"                Scanner s \u003d new Scanner(file);","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"                while (s.hasNextLine()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"                    String newEntry \u003d s.nextLine();","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"                    String[] entryDetails \u003d newEntry.split(\" \\\\| \");","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"                    Task newTask;","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"                    switch (entryDetails[0]) {","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"                    case \"T\":","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"                        newTask \u003d new ToDo(entryDetails[1], entryDetails[2]);","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"                        tempTaskStorage.add(newTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"                        break;","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"                    case \"D\":","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"                        newTask \u003d new Deadline(entryDetails[1], entryDetails[2], entryDetails[3]);","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"                        tempTaskStorage.add(newTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"                        break;","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"jayllo-c"},"content":"                    case \"E\":","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"jayllo-c"},"content":"                        newTask \u003d new Event(entryDetails[1], entryDetails[2], entryDetails[3], entryDetails[4]);","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"jayllo-c"},"content":"                        tempTaskStorage.add(newTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"jayllo-c"},"content":"                        break;","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"jayllo-c"},"content":"                    default:","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"jayllo-c"},"content":"                        // ignores corrupted line in data file","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"jayllo-c"},"content":"                    }","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"jayllo-c"},"content":"                return tempTaskStorage;","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"jayllo-c"},"content":"            } catch (DukeException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"jayllo-c"},"content":"                try {","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"jayllo-c"},"content":"                    file.delete();","lastModifiedDate":"2024-02-06"},{"lineNumber":73,"author":{"gitId":"jayllo-c"},"content":"                    file.createNewFile();","lastModifiedDate":"2024-02-06"},{"lineNumber":74,"author":{"gitId":"jayllo-c"},"content":"                    System.out.println(\"Data file corrupted, creating new save file...\");","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"jayllo-c"},"content":"                } catch (IOException ioe) {","lastModifiedDate":"2024-02-06"},{"lineNumber":76,"author":{"gitId":"jayllo-c"},"content":"                    ioe.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"jayllo-c"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":79,"author":{"gitId":"jayllo-c"},"content":"                e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":80,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":81,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":82,"author":{"gitId":"jayllo-c"},"content":"        return new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":84,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":86,"author":{"gitId":"jayllo-c"},"content":"     * Saves the TaskList given into the duke.txt data file.","lastModifiedDate":"2024-02-07"},{"lineNumber":87,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":88,"author":{"gitId":"jayllo-c"},"content":"     * @param tasks The TaskList containing all tasks currently saved by Duke.","lastModifiedDate":"2024-02-07"},{"lineNumber":89,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":90,"author":{"gitId":"jayllo-c"},"content":"    public void saveData(TaskList tasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"jayllo-c"},"content":"        File directory \u003d new File(dataPath);","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"jayllo-c"},"content":"        File file \u003d new File(dataPath + \"/\" + fileName);","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"jayllo-c"},"content":"        // reset file","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"jayllo-c"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":95,"author":{"gitId":"jayllo-c"},"content":"            file.delete();","lastModifiedDate":"2024-02-06"},{"lineNumber":96,"author":{"gitId":"jayllo-c"},"content":"            file.createNewFile();","lastModifiedDate":"2024-02-06"},{"lineNumber":97,"author":{"gitId":"jayllo-c"},"content":"            FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2024-02-06"},{"lineNumber":98,"author":{"gitId":"jayllo-c"},"content":"            ArrayList\u003cTask\u003e taskList \u003d tasks.getTaskList();","lastModifiedDate":"2024-02-06"},{"lineNumber":99,"author":{"gitId":"jayllo-c"},"content":"            for (Task tsk: taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":100,"author":{"gitId":"jayllo-c"},"content":"                if (tsk instanceof ToDo) {","lastModifiedDate":"2024-02-06"},{"lineNumber":101,"author":{"gitId":"jayllo-c"},"content":"                    writer.write(\"T | \" + tsk.getStatusAsNum() + \" | \" + tsk.getDescription()","lastModifiedDate":"2024-02-06"},{"lineNumber":102,"author":{"gitId":"jayllo-c"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2024-02-06"},{"lineNumber":103,"author":{"gitId":"jayllo-c"},"content":"                } else if (tsk instanceof Deadline) {","lastModifiedDate":"2024-02-06"},{"lineNumber":104,"author":{"gitId":"jayllo-c"},"content":"                    writer.write(\"D | \" + tsk.getStatusAsNum() + \" | \" + tsk.getDescription()","lastModifiedDate":"2024-02-06"},{"lineNumber":105,"author":{"gitId":"jayllo-c"},"content":"                            + \" | \" + ((Deadline) tsk).getBy()","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"jayllo-c"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2024-02-06"},{"lineNumber":107,"author":{"gitId":"jayllo-c"},"content":"                } else if (tsk instanceof Event) {","lastModifiedDate":"2024-02-06"},{"lineNumber":108,"author":{"gitId":"jayllo-c"},"content":"                    writer.write(\"E | \" + tsk.getStatusAsNum() + \" | \" + tsk.getDescription()","lastModifiedDate":"2024-02-06"},{"lineNumber":109,"author":{"gitId":"jayllo-c"},"content":"                            + \" | \" + ((Event) tsk).getFrom() + \" | \" + ((Event) tsk).getTo()","lastModifiedDate":"2024-02-06"},{"lineNumber":110,"author":{"gitId":"jayllo-c"},"content":"                            + System.lineSeparator());","lastModifiedDate":"2024-02-06"},{"lineNumber":111,"author":{"gitId":"jayllo-c"},"content":"                }","lastModifiedDate":"2024-02-06"},{"lineNumber":112,"author":{"gitId":"jayllo-c"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":113,"author":{"gitId":"jayllo-c"},"content":"            writer.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":114,"author":{"gitId":"jayllo-c"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":115,"author":{"gitId":"jayllo-c"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-06"},{"lineNumber":116,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":117,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":118,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"jayllo-c":118}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":" * Base Task class which contains the base information and functions all tasks share.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"public class Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"    protected String description;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"     * Constructs a task with the given description.","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"     * @param description A string containing the basic information about the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"        this.description \u003d description.trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     * Used to return a string that represents if the task has been marked.","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"     * @return \"X\" if the task is done, else \" \".","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"     * Used to return a string that represents if the task has been marked.","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"     * @return \"1\" if the task is done, else \"0\".","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"    public String getStatusAsNum() {","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"        return (isDone ? \"1\" : \"0\"); // mark done task with X","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"        return description;","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"    public String toString() {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"     * Marks this task as done.","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"     * Marks this task as not done.","lastModifiedDate":"2024-02-07"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-01-29"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-29"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"jayllo-c":60}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":" * Used to store and manage the list of tasks.","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"public class TaskList {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"    private String horzLine \u003d \"____________________________________________________________\";","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"     * Loads given ArrayList of tasks into the tasklist.","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"     * Helper function that prints a horizontal line above and below the given message.","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"    private void printWithLines(String message) {","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(message);","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"        System.out.println(horzLine);","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"     * Returns task based on index.","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"     * @param i index of the given task.","lastModifiedDate":"2024-02-07"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"     * @return Specified task.","lastModifiedDate":"2024-02-07"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"    public Task get(int i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"        return taskList.get(i);","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"     * Gets the TaskList.","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"jayllo-c"},"content":"     * @return the TaskList as an ArrayList.","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"jayllo-c"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"jayllo-c"},"content":"        return taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"jayllo-c"},"content":"     * Retrieves the current size of the task list.","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":56,"author":{"gitId":"jayllo-c"},"content":"     * @return Size of the task list.","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":58,"author":{"gitId":"jayllo-c"},"content":"    public int size() {","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"jayllo-c"},"content":"        return taskList.size();","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"jayllo-c"},"content":"     * Adds given task into the task list like a stack.","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"jayllo-c"},"content":"     * @param newTask Task that will be inserted into the TaskList.","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"jayllo-c"},"content":"    public void addTask(Task newTask) {","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"jayllo-c"},"content":"        taskList.add(newTask);","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"jayllo-c"},"content":"        printWithLines(\"Got it. I\u0027ve added this task:\\n   \" + newTask.toString()","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"jayllo-c"},"content":"                + \"\\nNow you have \" + taskList.size() + (taskList.size() \u003e 1 ? \" tasks \" : \" task \")","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"jayllo-c"},"content":"                + \"in the list.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":73,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":74,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":75,"author":{"gitId":"jayllo-c"},"content":"     * Removes the specified task from the TaskList.","lastModifiedDate":"2024-02-07"},{"lineNumber":76,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":77,"author":{"gitId":"jayllo-c"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2024-02-07"},{"lineNumber":78,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If TaskList is empty, or the index is invalid.","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":80,"author":{"gitId":"jayllo-c"},"content":"    public void delete(int index) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":81,"author":{"gitId":"jayllo-c"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":82,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Nothing is in the list yet\");","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":84,"author":{"gitId":"jayllo-c"},"content":"        if (index \u003c 1 || index \u003e taskList.size()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a number between 1 and \" + taskList.size());","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"jayllo-c"},"content":"        Task tempTask \u003d taskList.get(index - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":88,"author":{"gitId":"jayllo-c"},"content":"        taskList.remove(index - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"jayllo-c"},"content":"        printWithLines(\"Noted. I\u0027ve removed this task:\\n   \" + tempTask.toString()","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"jayllo-c"},"content":"                + \"\\nNow you have \" + taskList.size() + (taskList.size() \u003e 1 ? \" tasks \" : \" task \")","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"jayllo-c"},"content":"                + \"in the list.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"jayllo-c":93}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":" * Extension of task that only contains a description of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"     * Base constructor used by Duke to generate ToDo object.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty.","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"    public ToDo(String description) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a description for this todo task\");","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     * Secondary constructor used by Duke to generate a ToDo object from a data txt file.","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"     * @param logic Indicates if this task should be marked.","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"     * @param description Title of the task.","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"     * @throws DukeException If description is empty.","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"jayllo-c"},"content":"    public ToDo(String logic, String description) throws DukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"jayllo-c"},"content":"        super(description);","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"jayllo-c"},"content":"        if (description.trim().length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"jayllo-c"},"content":"            throw new DukeException(\"Please enter a description for this todo task\");","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"jayllo-c"},"content":"        switch (logic) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"jayllo-c"},"content":"        case \"1\":","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"jayllo-c"},"content":"        default:","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"jayllo-c"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"jayllo-c"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"jayllo-c"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"jayllo-c"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"jayllo-c"},"content":"    public String toString() {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"jayllo-c"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"jayllo-c":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":" * Obtains the user input from the user and passes it into the relevant functions.","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"public class Ui {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"    private Scanner scanObj \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"    private String userInput \u003d \"\";","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"     * saves the next input given by the user in userInput.","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"    public void inputMessage() {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"        userInput \u003d scanObj.nextLine();","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"jayllo-c"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"jayllo-c"},"content":"     * Sends the saved userInput as a String.","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"jayllo-c"},"content":"     * @return User input as a String.","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"jayllo-c"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"jayllo-c"},"content":"    public String getUserInput() {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"jayllo-c"},"content":"        return userInput;","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"jayllo-c"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"jayllo-c"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"jayllo-c":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jayllo-c"},"content":"todo test","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"jayllo-c"},"content":"deadline test2 /by Mon","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"jayllo-c"},"content":"deadline test2 /by 11/02/2024 2359","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"jayllo-c"},"content":"event test3 /from 11/02/2024 2359 /to 11/02/2024 2358","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"jayllo-c"},"content":"event test3 /from 11/02/2024 2359 /to 12/02/2024 2359","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"jayllo-c"},"content":"list","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"jayllo-c"},"content":"mark 4","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"jayllo-c"},"content":"mark 3","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"jayllo-c"},"content":"todo","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"deadline  /by","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"jayllo-c"},"content":"event  /from  /to","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"jayllo-c"},"content":"list","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"jayllo-c"},"content":"delete 2","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"jayllo-c"},"content":"list","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"jayllo-c"},"content":"delete 1","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"jayllo-c"},"content":"list","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"jayllo-c"},"content":"delete 1","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"jayllo-c"},"content":"bye","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"jayllo-c":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jayllo-c"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jayllo-c":1,"-":20}}]
