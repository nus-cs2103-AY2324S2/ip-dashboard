[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"# riri project template","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"3. After that, locate the `src/main/java/riri.java` file, right-click it, and choose `Run riri.main()` (if the code editor is showing compile errors, try restarting the IDE).","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"Rishit02":2,"-":14}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"checkstyle {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"    mainClass.set(\"riri.Launcher\")","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"    archiveBaseName \u003d \"riri\"","lastModifiedDate":"2024-02-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"    archiveFileName \u003d \u0027riri.jar\u0027","lastModifiedDate":"2024-02-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":24,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"# Riri User Guide","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"![Ui.png](https://Rishit02.github.io/ip/Ui.png)","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"Welcome to Riri, your personal chatbot assistant! Riri helps you manage tasks efficiently through a simple chat interface.","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"## Adding Todos","lastModifiedDate":"2024-02-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"To add todos for tasks, use the following format:","lastModifiedDate":"2024-02-29"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"`todo \u003cdescription\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"Example: `todo play video games`","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"After entering this command, a deadline task will be added to your task list.","lastModifiedDate":"2024-02-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"Expected Output:","lastModifiedDate":"2024-02-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-29"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"Got it. Added: T[][] play video games","lastModifiedDate":"2024-02-29"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-29"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"## Adding Deadlines","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"To add deadlines for tasks, use the following format:","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"`deadline \u003cdescription\u003e /by \u003cdate\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"Example: `deadline return books /by 2/2/2024`","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"After entering this command, a deadline task will be added to your task list.","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"Expected Output:","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"Got it. Added: [D][] return books (by: Feb 2 2024)","lastModifiedDate":"2024-02-29"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"## Adding Events","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"To add future events to your task list, follow this format:","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"`event \u003cdescription\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"Example: `event birthday party /from 2/2/2024 /to 3/2/2024`","lastModifiedDate":"2024-02-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"After entering this command, an event task will be added to your task list.","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"Expected Output:","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"Got it. Added: [E][] birthday party (from: Feb 2 2024 to Mar 3 2024)","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"## Marking a Task as Done","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"To mark a task as done follow this format:","lastModifiedDate":"2024-02-23"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"`mark \u003ctask number\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"Example: `mark 3`","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"After entering this command, the third task will be marked as done.","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"Expected Output:","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"[T][X] read book","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"## Marking a Task as not done","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"To mark a task as not done follow this format:","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"`unmark \u003ctask_number\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"Example: `unmark 3`","lastModifiedDate":"2024-02-23"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"After entering this command, the third task will be marked as not done.","lastModifiedDate":"2024-02-23"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"Expected Output:","lastModifiedDate":"2024-02-23"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"[T][] read book","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"```","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"Rishit02"},"content":"## Finding Tasks","lastModifiedDate":"2024-02-23"},{"lineNumber":83,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":84,"author":{"gitId":"Rishit02"},"content":"Riri allows you to find tasks in your task list based on keywords. Use the following format:","lastModifiedDate":"2024-02-23"},{"lineNumber":85,"author":{"gitId":"Rishit02"},"content":"`find \u003ctask\u003e`","lastModifiedDate":"2024-02-29"},{"lineNumber":86,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":87,"author":{"gitId":"Rishit02"},"content":"Example: `find books`","lastModifiedDate":"2024-02-23"},{"lineNumber":88,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":89,"author":{"gitId":"Rishit02"},"content":"After entering this command, Riri will search your task list for tasks containing the keyword \"books.\"","lastModifiedDate":"2024-02-23"},{"lineNumber":90,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":91,"author":{"gitId":"Rishit02"},"content":"### Tips for Using Find","lastModifiedDate":"2024-02-23"},{"lineNumber":92,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":93,"author":{"gitId":"Rishit02"},"content":"- The `find` command is not case-sensitive, so it will match tasks regardless of case.","lastModifiedDate":"2024-02-23"},{"lineNumber":94,"author":{"gitId":"Rishit02"},"content":"- You can use partial keywords to broaden your search. For example, `find book` will match tasks with the word \"book\" in them.","lastModifiedDate":"2024-02-23"},{"lineNumber":95,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":96,"author":{"gitId":"Rishit02"},"content":"Feel free to experiment with different keywords to quickly locate the tasks you are looking for.","lastModifiedDate":"2024-02-23"},{"lineNumber":97,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":98,"author":{"gitId":"Rishit02"},"content":"## Deleting a task","lastModifiedDate":"2024-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":100,"author":{"gitId":"Rishit02"},"content":"In Riri, you have the ability to delete tasks from your task list.","lastModifiedDate":"2024-02-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":102,"author":{"gitId":"Rishit02"},"content":"Example: `delete 3`","lastModifiedDate":"2024-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":104,"author":{"gitId":"Rishit02"},"content":"This would result in the 3rd task in your task list to be deleted","lastModifiedDate":"2024-02-23"},{"lineNumber":105,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":106,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":107,"author":{"gitId":"Rishit02"},"content":"## Saving tasks","lastModifiedDate":"2024-02-23"},{"lineNumber":108,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":109,"author":{"gitId":"Rishit02"},"content":"Your task list is saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2024-02-23"},{"lineNumber":110,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":111,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":112,"author":{"gitId":"Rishit02"},"content":"## Exit program","lastModifiedDate":"2024-02-23"},{"lineNumber":113,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":114,"author":{"gitId":"Rishit02"},"content":"We can exit the chatbot and save messages by writing `bye`","lastModifiedDate":"2024-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":116,"author":{"gitId":"Rishit02"},"content":"Example: `bye`","lastModifiedDate":"2024-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":118,"author":{"gitId":"Rishit02"},"content":"The chatbot will exit.","lastModifiedDate":"2024-02-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":120,"author":{"gitId":"Rishit02"},"content":"## Summary","lastModifiedDate":"2024-02-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":122,"author":{"gitId":"Rishit02"},"content":"| Command  | Format                                                  | Example                                            |","lastModifiedDate":"2024-02-29"},{"lineNumber":123,"author":{"gitId":"Rishit02"},"content":"|----------|---------------------------------------------------------|----------------------------------------------------|","lastModifiedDate":"2024-02-29"},{"lineNumber":124,"author":{"gitId":"Rishit02"},"content":"| List     | `list`                                                  | `list`                                             |","lastModifiedDate":"2024-02-29"},{"lineNumber":125,"author":{"gitId":"Rishit02"},"content":"| Mark     | `mark \u003ctask_number\u003e`                                    | `mark 3`                                           |","lastModifiedDate":"2024-02-29"},{"lineNumber":126,"author":{"gitId":"Rishit02"},"content":"| Unmark   | `unmark \u003ctask_number\u003e`                                  | `unmark 3`                                         |","lastModifiedDate":"2024-02-29"},{"lineNumber":127,"author":{"gitId":"Rishit02"},"content":"| Todo     | `todo \u003cdescription\u003e`                                    | `todo play video games`                            |","lastModifiedDate":"2024-02-29"},{"lineNumber":128,"author":{"gitId":"Rishit02"},"content":"| Deadline | `deadline \u003cdescription\u003e /by \u003cdate\u003e`                     | `deadline return books /by 2/2/2024`               |","lastModifiedDate":"2024-02-29"},{"lineNumber":129,"author":{"gitId":"Rishit02"},"content":"| Event    | `event \u003cdescription\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e` | `event birthday party /from 2/2/2024 /to 3/2/2024` |","lastModifiedDate":"2024-02-29"},{"lineNumber":130,"author":{"gitId":"Rishit02"},"content":"| Delete   | `delete \u003ctask_number\u003e`                                  | `delete 3`                                         |","lastModifiedDate":"2024-02-29"},{"lineNumber":131,"author":{"gitId":"Rishit02"},"content":"| Find     | `find \u003ctask\u003e`                                           | `find book`                                        |","lastModifiedDate":"2024-02-29"},{"lineNumber":132,"author":{"gitId":"Rishit02"},"content":"| Bye      | `bye`                                                   | `bye`                                              |","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"Rishit02":108,"-":24}},{"path":"src/main/java/riri/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-18"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * Return appropriate Riri response for each user input.","lastModifiedDate":"2024-02-21"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class CommandHandler {","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private final String exitMessage \u003d \"Press the cross on your console\";","lastModifiedDate":"2024-02-18"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    private final String badCommandMessage \u003d \"I am unable to process and understand your command\";","lastModifiedDate":"2024-02-18"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    private final String waitingMessage \u003d \"I am here to help with your task list\";","lastModifiedDate":"2024-02-18"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * Handles the logic for interacting with the user through chat input.","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * @param input The user\u0027s input to process and respond to.","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * @param taskList The task list that stores all the tasks created by the user.","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * @return A string representing the response or action taken based on the user\u0027s input.","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    public String chat(String input, TaskList taskList) throws RiriException, IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        if (input.matches(\"bye\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"            return exitMessage;","lastModifiedDate":"2024-02-18"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\blist\\\\b\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            // Print list","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"            return taskList.returnList();","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bmark\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"            // Mark task as done","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"            return taskList.mark(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bunmark\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"            // Mark the task as undone","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"            return taskList.unmarked(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-18"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bdeadline\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"            // Add deadline task to task list","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"/by\");","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"            String date \u003d words[1].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Deadline(words[0].substring(8).trim(), date));","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bevent\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"            // Add event task to task list","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"/from+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"            String[] from \u003d words[1].split(\"/to\");","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"            String date1 \u003d from[0].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"            String date2 \u003d from[1].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Event(words[0].substring(5).trim(), date1, date2));","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\btodo\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"todo\");","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"            if (words[1].trim().equals(\"\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"                throw new RiriException(\"You are adding nothing to your list\");","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Todo(words[1].trim()));","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bdelete\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"            // Delete tasks in tasks list","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"            return taskList.delete(Integer.parseInt(words[1].trim()));","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bfind\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"            // Implement the find function through keyword","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"            String keyword \u003d input.substring(4);","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"            return taskList.searchTasks(keyword);","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        } else if (input.trim().isEmpty()) {","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"            // If by mistake user presses return or space, nothing will happen","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"            return waitingMessage;","lastModifiedDate":"2024-02-18"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        return badCommandMessage;","lastModifiedDate":"2024-02-18"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"Rishit02":64}},{"path":"src/main/java/riri/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" * Class that represent tasks with deadlines","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private LocalDate by;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * Constructs a Deadline object representing a task with a specified completion deadline.","lastModifiedDate":"2024-02-18"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * This constructor creates a Deadline object with the given task description and the date","lastModifiedDate":"2024-02-18"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * by which the task should be completed. The deadline is represented as a string, which","lastModifiedDate":"2024-02-18"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * is parsed to extract the date information.","lastModifiedDate":"2024-02-18"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * @param task The task description provided by the user.","lastModifiedDate":"2024-02-18"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     * @param by   The deadline in string format representing the date the task should be completed by.","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"     *             The date is parsed internally to ensure accurate representation.","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     *             The accepted date format is flexible, allowing natural language input.","lastModifiedDate":"2024-02-18"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, String by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d parseDate(by);","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"     * Constructs a Deadline object representing a task with a specified completion deadline.","lastModifiedDate":"2024-02-18"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"     * @param task The task description provided by the user.","lastModifiedDate":"2024-02-18"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"     * @param by The deadline in LocalDate format representing the date the task should be completed by.","lastModifiedDate":"2024-02-18"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, LocalDate by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"     * Parses a formatted string to create a Deadline object.","lastModifiedDate":"2024-02-18"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     * This static method is designed to create a Deadline object from a string formatted","lastModifiedDate":"2024-02-18"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"     * in a specific way. The expected format is \"[D][ ] task description (by: deadline)\".","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"     * The method extracts relevant information such as task description, deadline, and completion","lastModifiedDate":"2024-02-18"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"     * status to instantiate a Deadline object.","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * @param inputString The formatted string to parse into a Deadline object.","lastModifiedDate":"2024-02-18"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     *                    It should follow the pattern \"[D][ ] task description (by: deadline)\".","lastModifiedDate":"2024-02-18"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     * @return A Deadline object representing the parsed task with its completion status and deadline.","lastModifiedDate":"2024-02-18"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"    public static Deadline parseDeadlineFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[D][ ] task description (by: deadline)\"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        int indexOfOpeningBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        int indexOfClosingBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        int indexOfBy \u003d inputString.indexOf(\"(by:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfClosingBracket + 4, indexOfBy).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        String by \u003d inputString.substring(indexOfBy + 4, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        Deadline deadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Deadline as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"            deadline.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"        return deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + stringifyDate(by) + \")\";","lastModifiedDate":"2024-02-07"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":71}},{"path":"src/main/java/riri/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    private int profileDetails \u003d 35;","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        dialog.getStyleClass().add(\"message\");","lastModifiedDate":"2024-02-21"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"        dialog.getStyleClass().add(\"layout\");","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"        displayPicture.setClip(new Circle(profileDetails, profileDetails, profileDetails));","lastModifiedDate":"2024-02-21"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"    private void flip() {","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"    public static DialogBox getRiriDialog(String text, Image img) {","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        db.flip();","lastModifiedDate":"2024-02-09"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        return db;","lastModifiedDate":"2024-02-09"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":64}},{"path":"src/main/java/riri/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" * This class represents the events in the task list.","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private LocalDate from;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private LocalDate to;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * Constructs an Event object representing a task with a specified time frame.","lastModifiedDate":"2024-02-18"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * This constructor creates an Event object with the given task description and the time","lastModifiedDate":"2024-02-18"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * frame during which the event occurs. The \u0027from\u0027 and \u0027to\u0027 parameters are parsed into","lastModifiedDate":"2024-02-18"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * LocalDate format to accurately represent the start and end dates of the event.","lastModifiedDate":"2024-02-18"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"     * @param task The task description provided by the user.","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     * @param from The starting date and time of the event, provided in string format.","lastModifiedDate":"2024-02-18"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     *             The date is parsed internally to ensure accurate representation.","lastModifiedDate":"2024-02-18"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"     *             The accepted date format is flexible, allowing natural language input.","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     * @param to   The ending date and time of the event, provided in string format.","lastModifiedDate":"2024-02-18"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"     *             The date is parsed internally to ensure accurate representation.","lastModifiedDate":"2024-02-18"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"     *             The accepted date format is flexible, allowing natural language input.","lastModifiedDate":"2024-02-18"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    public Event(String task, String from, String to) {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        this.from \u003d super.parseDate(from);","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        this.to \u003d super.parseDate(to);","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        return \"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"                + super.stringifyDate(from) + \" to \" + super.stringifyDate(to) + \")\";","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     * Parses a formatted string to create an Event object.","lastModifiedDate":"2024-02-18"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"     * This static method is designed to create an Event object from a string formatted","lastModifiedDate":"2024-02-18"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"     * in a specific way. The expected format is \"[E][ ] task description (from: start_time to end_time)\".","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"     * The method extracts relevant information such as task description, event start time, event end time,","lastModifiedDate":"2024-02-18"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * and completion status to instantiate an Event object.","lastModifiedDate":"2024-02-18"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     * @param inputString The formatted string to parse into an Event object.","lastModifiedDate":"2024-02-18"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     *                    It should follow the pattern \"[E][ ] task description (from: start_time to end_time)\".","lastModifiedDate":"2024-02-18"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"     * @return An Event object representing the parsed task with its completion status and event time frame.","lastModifiedDate":"2024-02-18"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    public static Event parseEventFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[E][ ] task description (from: start_time to end_time)\"","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        int indexOfFirstBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        int indexOfSecondBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        int indexOfFrom \u003d inputString.indexOf(\"(from:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        int indexOfTo \u003d inputString.indexOf(\"to\");","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfSecondBracket + 4, indexOfFrom).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        String from \u003d inputString.substring(indexOfFrom + 6, indexOfTo).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        String to \u003d inputString.substring(indexOfTo + 2, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        Event event \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Event as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"            event.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"        return event;","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":71}},{"path":"src/main/java/riri/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class Launcher {","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":12}},{"path":"src/main/java/riri/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":" * Start the GUI for Riri using FXML.","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    private final Riri riri \u003d new Riri();","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"            scene.getStylesheets().add(getClass().getResource(\"/style/dialogBoxStyle.css\").toExternalForm());","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setRiri(riri);","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"            stage.show();","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcome();","lastModifiedDate":"2024-02-21"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":33}},{"path":"src/main/java/riri/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import static java.lang.Thread.sleep;","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-02-29"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-21"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    private Riri riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    private Image ririImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaRiri.png\"));","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    public void setRiri(Riri r) {","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"        riri \u003d r;","lastModifiedDate":"2024-02-21"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     * Sends a welcome message for user from Riri.","lastModifiedDate":"2024-02-21"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    public void welcome() {","lastModifiedDate":"2024-02-21"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-21"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"                DialogBox.getRiriDialog(riri.welcome(), ririImage)","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        );","lastModifiedDate":"2024-02-21"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-21"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Riri\u0027s reply and then appends them to","lastModifiedDate":"2024-02-21"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-09"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-09"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-09"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        String response \u003d riri.getResponse(input);","lastModifiedDate":"2024-02-21"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-09"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-09"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"                DialogBox.getRiriDialog(response, ririImage)","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"        );","lastModifiedDate":"2024-02-09"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-09"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"        if (input.equals(\"bye\") || input.equals(\"exit\")) {","lastModifiedDate":"2024-02-21"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"            try {","lastModifiedDate":"2024-02-21"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"                sleep(1000);","lastModifiedDate":"2024-02-21"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"            } catch (InterruptedException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"                System.out.println(Arrays.toString(e.getStackTrace()));","lastModifiedDate":"2024-02-23"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"            } finally {","lastModifiedDate":"2024-02-21"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"                Platform.exit();","lastModifiedDate":"2024-02-21"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":78}},{"path":"src/main/java/riri/Riri.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * This class holds the main logic for the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class Riri {","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private final CommandHandler commandHandler;","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * Constructs the Riri object.","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    public Riri() {","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        commandHandler \u003d new CommandHandler();","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            System.out.println(e.getStackTrace());","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"     * Introduce the chatbot to the user.","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    public String welcome() {","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        return \"Hi my name is Riri! I am here to help you with your task list :)\";","lastModifiedDate":"2024-02-21"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"     * Returns the exit response to the user.","lastModifiedDate":"2024-02-21"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-21"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    public String endingResponse() {","lastModifiedDate":"2024-02-21"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        return \"Bye! I will store your messages and turn off.\";","lastModifiedDate":"2024-02-21"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"     * Returns responses to user input.","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"     * @param input user input","lastModifiedDate":"2024-02-18"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"            return commandHandler.chat(input, tasks);","lastModifiedDate":"2024-02-18"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        } catch (RiriException | IOException e) {","lastModifiedDate":"2024-02-18"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Rishit02":47,"-":1}},{"path":"src/main/java/riri/RiriException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":" * Custom exception for errors in the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"public class RiriException extends Exception {","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public RiriException(String s) {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        super(s);","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"Rishit02":9}},{"path":"src/main/java/riri/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":" * Class responsible for storing and loading up task lists from local storage when the chatbot is turned off.","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"public class Storage {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * Reads the contents of the previously saved file that contains the tasks previously added by the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     * @return ArrayList of tasks previously added by the user","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"     * @throws IOException if an I/O error occurs","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    public ArrayList\u003cString\u003e load() throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        ArrayList\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(\"data\");","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        // If data directory does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        // If file does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        // Read the contents of the file","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        Scanner sc \u003d new Scanner(filePath); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"            contents.add(sc.nextLine());","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * Writes the tasks the user has created to a file.","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     * @param textToAdd the tasks to add to the to-do list","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     * @throws IOException if an I/O error occurs","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    public void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        String dirName \u003d \"data\";","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        // Create data directory if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(dirName);","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"            Files.createDirectory(dirPath);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        // Create file if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        // Write to proper location","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toFile());","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"        fw.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":67}},{"path":"src/main/java/riri/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":" * Parent class that represents tasks with deadlines, todos, and events.","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    private String task;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * Constructor for the Task object.","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * @param task The task inputted by the user.","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    public Task(String task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as done if complete","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    public void markDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as undone if incomplete","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    public void markUndone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"     * Checks if the task is done.","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        return this.isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     * Returns the status of the task.","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     * @return \"X\" if the task is done, otherwise \" \".","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    public String getStatus() {","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        return (this.getIsDone()) ? \"X\" : \" \";","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"     * Parses a string into a LocalDate object using multiple date formats.","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"     * @param date The string to be parsed as a LocalDate.","lastModifiedDate":"2024-02-23"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"     * @return The LocalDate object parsed from the string.","lastModifiedDate":"2024-02-23"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"    public LocalDate parseDate(String date) {","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy HHmm\");","lastModifiedDate":"2024-02-07"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy\");","lastModifiedDate":"2024-02-07"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter3 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter4 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter5 \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter[] formatters \u003d {formatter1, formatter2, formatter3, formatter4, formatter5};","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"        for (DateTimeFormatter dateFormat : formatters) {","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"            try {","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"                return LocalDate.parse(date, dateFormat);","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"                // Parsing failed for this pattern, try the next one","lastModifiedDate":"2024-02-07"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"        throw new IllegalArgumentException(\"Try writing the date in this format: M/d/yyyy HHmm\");","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"     * Converts a LocalDate object to a string in a particular format.","lastModifiedDate":"2024-02-23"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"     * @param date The LocalDate object to be converted.","lastModifiedDate":"2024-02-23"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"     * @return The string representation of the date in the format \"MMM d yyyy\".","lastModifiedDate":"2024-02-23"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"    public String stringifyDate(LocalDate date) {","lastModifiedDate":"2024-02-07"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-07"},{"lineNumber":81,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":82,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":83,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":84,"author":{"gitId":"Rishit02"},"content":"        return \"[\" + this.getStatus() + \"] \" + this.task;","lastModifiedDate":"2024-01-25"},{"lineNumber":85,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":86,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":86}},{"path":"src/main/java/riri/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-18"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * Class responsible for handling the logic of the task lists.","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class TaskList {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    private Storage storage \u003d new Storage();","lastModifiedDate":"2024-02-18"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * Create a task list based on the contents.","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * @param contents tasks to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    public TaskList(ArrayList\u003cString\u003e contents) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        for (String content : contents) {","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"            loadTask(parser(content));","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"     * Prints the task list to console.","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    public String returnList() {","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        StringBuilder list \u003d new StringBuilder();","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"            return \"You have no items in your list.\";","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-18"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"            int j \u003d i + 1;","lastModifiedDate":"2024-02-18"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            list.append(j).append(\". \").append(taskList.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        return list.toString();","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"     * Adds task to the task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"     * @param task task to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    public String addTask(Task task) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        taskList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        storage.writeToFile(this.toString());","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"        return \"Got it. Added: \" + task.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     * Loading up tasks from storage to task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"     * @param task tasks from storage to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"    public void loadTask(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        taskList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"     * Marking task at index i as done. Displays list at the end of marking.","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"    public String mark(int i) {","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        assert(i \u003e 0);","lastModifiedDate":"2024-02-16"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i - 1).markDone();","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        return \"Marked task number \" + i + \" as done\";","lastModifiedDate":"2024-02-19"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"     * Marking task at index i as undone. Displays list at the end of marking.","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"    public String unmarked(int i) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"        assert(i \u003e 0);","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i - 1).markUndone();","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"        storage.writeToFile(this.toString());","lastModifiedDate":"2024-02-18"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"        return \"Marked task number \" + i + \" as not done\";","lastModifiedDate":"2024-02-19"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"     * This function removes a task from the task list.","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"     * @param index remove index\u0027th task","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"    public String delete(int index) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"        assert(index \u003e 0);","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"        if (taskList.size() \u003c index) {","lastModifiedDate":"2024-02-21"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"            return \"Cannot delete that\";","lastModifiedDate":"2024-02-21"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"        this.taskList.remove(index - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"        storage.writeToFile(this.toString());","lastModifiedDate":"2024-02-18"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"        return \"Deleted task no. \" + index + \". You have \" + this.len() + \" tasks left. \\n\";","lastModifiedDate":"2024-02-21"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":82,"author":{"gitId":"Rishit02"},"content":"     * Returns the size of the task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":84,"author":{"gitId":"Rishit02"},"content":"    private int len() {","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"Rishit02"},"content":"        return taskList.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"Rishit02"},"content":"     * Parses the string to create a Task object","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"Rishit02"},"content":"     * @param line string that describes a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"Rishit02"},"content":"     * @return a task object","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"Rishit02"},"content":"    private static Task parser(String line) {","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"Rishit02"},"content":"        if (line.startsWith(\"[D]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"Rishit02"},"content":"            return Deadline.parseDeadlineFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[E]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"Rishit02"},"content":"            return Event.parseEventFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[T]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"Rishit02"},"content":"            return Todo.parseTodoFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"Rishit02"},"content":"        return null;","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":105,"author":{"gitId":"Rishit02"},"content":"     * Searches for tasks in the task list containing a specific keyword in their description.","lastModifiedDate":"2024-02-07"},{"lineNumber":106,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":107,"author":{"gitId":"Rishit02"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-02-07"},{"lineNumber":108,"author":{"gitId":"Rishit02"},"content":"     * @return A list of tasks that match the search criteria. If no matches are found, an empty list is returned.","lastModifiedDate":"2024-02-07"},{"lineNumber":109,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":110,"author":{"gitId":"Rishit02"},"content":"    public String searchTasks(String keyword) {","lastModifiedDate":"2024-02-07"},{"lineNumber":111,"author":{"gitId":"Rishit02"},"content":"        StringBuilder matchingTasks \u003d new StringBuilder();","lastModifiedDate":"2024-02-19"},{"lineNumber":112,"author":{"gitId":"Rishit02"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2024-02-07"},{"lineNumber":113,"author":{"gitId":"Rishit02"},"content":"            if (task.toString().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2024-02-07"},{"lineNumber":114,"author":{"gitId":"Rishit02"},"content":"                matchingTasks.append(task.toString()).append(\"\\n\");","lastModifiedDate":"2024-02-19"},{"lineNumber":115,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":116,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":117,"author":{"gitId":"Rishit02"},"content":"        if (matchingTasks.length() \u003d\u003d 0) {","lastModifiedDate":"2024-02-19"},{"lineNumber":118,"author":{"gitId":"Rishit02"},"content":"            return \"No matching tasks found\";","lastModifiedDate":"2024-02-19"},{"lineNumber":119,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":120,"author":{"gitId":"Rishit02"},"content":"        return matchingTasks.toString();","lastModifiedDate":"2024-02-19"},{"lineNumber":121,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":122,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"Rishit02"},"content":"        StringBuilder s \u003d new StringBuilder();","lastModifiedDate":"2024-02-19"},{"lineNumber":125,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-21"},{"lineNumber":126,"author":{"gitId":"Rishit02"},"content":"            s.append(taskList.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2024-02-21"},{"lineNumber":127,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"Rishit02"},"content":"        return s.toString();","lastModifiedDate":"2024-02-19"},{"lineNumber":129,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":130}},{"path":"src/main/java/riri/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":" * This class models the Todo objects in the task list. This class extends from the parent Task class","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public Todo(String task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * Parses a formatted string to create a Todo object.","lastModifiedDate":"2024-02-18"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * This static method is designed to create a Todo object from a string formatted","lastModifiedDate":"2024-02-18"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * in a specific way. The expected format is \"[T][ ] task description\".","lastModifiedDate":"2024-02-18"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * The method extracts the task description and completion status from the input","lastModifiedDate":"2024-02-18"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * string to instantiate a Todo object.","lastModifiedDate":"2024-02-18"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"     * @param inputString The formatted string to parse into a Todo object.","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     *                    It should follow the pattern \"[T][ ] task description\".","lastModifiedDate":"2024-02-18"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"     * @return A Todo object representing the parsed task with its completion status.","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    public static Todo parseTodoFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[T][ ] task description\"","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(7); // Extract the task description","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        Todo todo \u003d new Todo(taskDescription.trim());","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Todo as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        if (inputString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"            todo.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        return todo;","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":39}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"riri.MainWindow\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":19}},{"path":"src/test/java/riri/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest1() {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"2/12/2019 1800\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 12 2019)\", d.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest2() {","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"2/12/2019\");","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 12 2019)\", d.toString());","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest3() {","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"2024-02-02\");","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 2 2024)\", d.toString());","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest4() {","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"2024-02-02 1001\");","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 2 2024)\", d.toString());","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest5() {","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"Feb 2 2024\");","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 2 2024)\", d.toString());","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Rishit02":33}},{"path":"src/test/java/riri/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class EventTest {","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void eventCreationTest1() {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Event event \u003d new Event(\"party\", \"2/2/2024\", \"3/2/2024\");","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        assertEquals(event.toString(), \"[E][ ] party (from: Feb 2 2024 to Mar 2 2024)\");","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"Rishit02":13}},{"path":"src/test/java/riri/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-29"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-29"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-29"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-29"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-29"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void markDoneTest() {","lastModifiedDate":"2024-02-29"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Task task \u003d new Todo(\"return book\");","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        task.markDone();","lastModifiedDate":"2024-02-29"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        assertEquals(task.getIsDone(), true);","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"Rishit02":14}},{"path":"src/test/java/riri/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package riri;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void todoCreationTest1() {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Todo task \u003d new Todo(\"return book\");","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        assertEquals(task.toString(), \"[T][ ] return book\");","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Rishit02":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"todo borrow book","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"mark 1","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"unmark 1","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"java -classpath ..\\bin riri \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":1,"-":20}}]
