[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    mainClass.set(\"bartenderbob.BartenderBob\")","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    archiveBaseName \u003d \"BartenderBob\"","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    archiveVersion \u003d \"0.1\"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"gavin331":3,"-":30}},{"path":"src/main/java/bartenderbob/BartenderBob.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Represents a BartenderBob chatbot that stores tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" * @author Gavin Goh","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * @version 0.1","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class BartenderBob {","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** Name of the chatbot */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private static final String NAME \u003d \"BartenderBob\";","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    /** Save tasks to the user\u0027s hard disk */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    /** Keeps track of the user tasks */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    /** Displays the chatbot\u0027s user interface to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * Creates a BartenderBob with the specified file path.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     * @param filePath The file path of the stored tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    public BartenderBob(String filePath) {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"            ui.showWelcomeMessage(NAME);","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"        } catch (BartenderBobException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * Sets Bartender Bob to begin receiving and responding to user inputs.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    public void run() {","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        InputHandler inputHandler \u003d new InputHandler();","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        inputHandler.handleInput(tasks, ui);","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     * Initialises and runs the BartenderBob chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        new BartenderBob(\"./data/tasks.txt\").run();","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":49}},{"path":"src/main/java/bartenderbob/BartenderBobException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Handles exceptions that is specific to BartenderBob chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"public class BartenderBobException extends Exception{","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    /** First word of the user input */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    private String firstWord;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** Displays messages to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private static final Ui UI \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of BartenderBobException.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    public BartenderBobException() {","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of BartenderBobException and initialise","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     * it with the first word of the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     * @param firstWord First word of the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    public BartenderBobException(String firstWord) {","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        this.firstWord \u003d firstWord;","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"     * Shows invalid input error message when a user","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"     * types in a command BartenderBob cannot comprehend.","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input to BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"    public static void invalidInput(String userInput) {","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        UI.showInvalidInputError(userInput);","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"     * Displays error message when a user gives an input","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * with missing parameters that is required by BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"    public void displayError() {","lastModifiedDate":"2024-01-24"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"        switch (firstWord) {","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidMarkCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidUnmarkCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidDeleteCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidTodoCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-24"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidDeadlineCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        case \"event\":","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"            UI.showInvalidEventCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"            break;","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"     * Displays error message when a user specified task index","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"     * is out of bounds.","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"    public void tasksOutOfBounds() {","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        UI.showOutOfBoundsCommand();","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"gavin331":72}},{"path":"src/main/java/bartenderbob/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * Represents the Deadline task that has a due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class Deadline extends Task{","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** The due date for the task */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private LocalDate dueDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Deadline task with a description and a","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"     * due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * @throws IllegalArgumentException If \u0027by\u0027 parameter is not in yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public Deadline(String description, String by) throws IllegalArgumentException {","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        this.dueDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Deadline task with a description, due date","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"     * and whether it has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     * @throws IllegalArgumentException If \u0027by\u0027 parameter is not in yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    public Deadline(String description, String by, boolean isDone) throws IllegalArgumentException {","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"        this.dueDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"     * Verifies whether a string is of the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"     * @param by Input String.","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"     * @return Whether the string follows the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"    private boolean isValidDateFormat(String by) {","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            return true;","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"            return false;","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"     * Shows the deadline task information when the user uses the \u0027list\u0027 command.","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"     * @return Complete deadline task information as a String.","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone? \"X\": \" \";","lastModifiedDate":"2024-01-23"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"        String dateFormat \u003d this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        String byFormat \u003d \"(by: \" + dateFormat + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        return \"[D]\" + \"[\" + status + \"]\" + \" \" + this.description + \" \" + byFormat;","lastModifiedDate":"2024-01-23"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"gavin331":72}},{"path":"src/main/java/bartenderbob/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * Represents the Event task that has a description, from date and a due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class Event extends Task{","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** Event start date */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private LocalDate from;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    /** Event due date */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    private LocalDate by;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of an Event class that has a description, from date","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * and a by date.","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     * @param from Start date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    public Event(String description, String from, String by) {","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(from, by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        this.from \u003d LocalDate.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of an Event class that has a description, from date,","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * by date and whether it has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"     * @param from Start date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"    public Event(String description, String from, String by, boolean isDone) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(from, by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        this.from \u003d LocalDate.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     * Verifies whether a string is of the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"     * @param by Input String.","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"     * @return Whether the string follows the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"    private boolean isValidDateFormat(String from, String by) {","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"            return true;","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"            return false;","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"     * Shows the event task information when the user uses the \u0027list\u0027 command.","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"     * @return Complete event task information as a String.","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-23"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone? \"X\": \" \";","lastModifiedDate":"2024-01-23"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"        String fromFormat \u003d this.from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"        String byFormat \u003d this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"        String fromByFormat \u003d \"(from: \" + fromFormat + \" to: \" + byFormat + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"        return \"[E]\" + \"[\" + status + \"]\" + \" \" + this.description + \" \" + fromByFormat;","lastModifiedDate":"2024-01-23"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"gavin331":78}},{"path":"src/main/java/bartenderbob/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" * Represents a parser that receives and handle user inputs.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"public class InputHandler {","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"     * Receives and handles the user inputs to BartenderBob chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"     * @param taskList The tasks that the user has inputted into BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"     * @param ui Displays appropriate messages for its corresponding user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    public void handleInput(TaskList taskList, Ui ui) {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"        while (true) {","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"            String[] stringComponents \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"            String firstWord \u003d stringComponents[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"            String index;","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"            if (firstWord.equals(\"bye\")) {","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"                ui.leave();","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"                break;","lastModifiedDate":"2024-01-22"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"            } else {","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"                try {","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"                    switch (firstWord) {","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"                    case \"list\":","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"                        taskList.list();","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"                    case \"mark\":","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"                        index \u003d stringComponents[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"                        taskList.markDone(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"                    case \"unmark\":","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"                        index \u003d stringComponents[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"                        taskList.unmarkDone(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"                    case \"delete\":","lastModifiedDate":"2024-01-24"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"                        index \u003d stringComponents[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"                        taskList.delete(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"                    case \"find\":","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"                        String substring \u003d strArray[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"                        taskList.find(substring);","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"                    case \"todo\":","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"                        String str \u003d userInput.split(\"todo \")[1];","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"                        ToDo task \u003d new ToDo(str);","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"                        taskList.store(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"                    case \"deadline\":","lastModifiedDate":"2024-01-23"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"                        String[] deadlineComponents \u003d userInput.split(\"deadline | /by \");","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"                        Deadline deadline \u003d new Deadline(deadlineComponents[1], deadlineComponents[2]);","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"                        taskList.store(deadline);","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"                    case \"event\":","lastModifiedDate":"2024-01-23"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"                        String[] eventComponents \u003d userInput.split(\"event | /from | /to \");","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"                        Event event \u003d new Event(eventComponents[1], eventComponents[2], eventComponents[3]);","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"                        taskList.store(event);","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"                        break;","lastModifiedDate":"2024-01-23"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"                    default:","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"                        BartenderBobException.invalidInput(userInput);","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"                    }","lastModifiedDate":"2024-01-24"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"                } catch (BartenderBobException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"                    //This exception is when the index from user input is out of the TASKS bounds.","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"                    e.tasksOutOfBounds();","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"                    //IndexOutOfBoundsException is for missing userInputs.","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"                    BartenderBobException error \u003d new BartenderBobException(firstWord);","lastModifiedDate":"2024-01-24"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"                    error.displayError();","lastModifiedDate":"2024-01-24"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"                } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"                    ui.showInvalidDateFormat();","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"                }","lastModifiedDate":"2024-01-23"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-01-22"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":77}},{"path":"src/main/java/bartenderbob/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"import java.util.List;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":" * Represents the storage class to store user tasks into the hard disk.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"public class Storage {","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    /** File path to the storage file */","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    private String filePath; //eg \"./data/tasks.txt\"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    /** Displays messages to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Storage class and initialises its file path.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     * @param filePath File path to the storage file.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     * Loads the tasks from the storage file into BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * @return ArrayList of tasks","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If error occurred while loading the tasks into BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    public ArrayList\u003cTask\u003e load() throws BartenderBobException {","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"            ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath); //Operating system independent","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"            if (Files.exists(path)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"                List\u003cString\u003e tasks \u003d Files.readAllLines(path);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"                for (String taskString : tasks) {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"                    String[] taskStringComponents \u003d taskString.split(\" \\\\| \");","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"                    String taskType \u003d taskStringComponents[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"                    String taskStatus \u003d taskStringComponents[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"                    boolean isDone \u003d taskStatus.equals(\"X\");","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"                    String description \u003d taskStringComponents[2];","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"                    if (taskType.equals(\"T\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"                        taskArray.add(new ToDo(description, isDone));","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"                    } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"                        String dueDate \u003d taskStringComponents[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"                        dueDate \u003d convertDateFormat(dueDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"                        taskArray.add(new Deadline(description, dueDate, isDone));","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"                    } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"                        String fromDate \u003d taskStringComponents[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"                        fromDate \u003d convertDateFormat(fromDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"                        String toDate \u003d taskStringComponents[4];","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"                        toDate \u003d convertDateFormat(toDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"                        taskArray.add(new Event(description, fromDate, toDate, isDone));","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"                    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"            } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"                //Create data directory","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"                //if path is \"./data/tasks.txt\", then path.getParent()","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"                //gives data.","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"                Files.createDirectories(path.getParent());","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"                //Create tasks.txt","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"                Files.createFile(path);","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"            return taskArray;","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"     * Save changes to the files in the hard disk","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"     * especially after unmarking, marking and deleting them.","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"     * @param tasks The tasks that the user has inputted to BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"    public void saveChanges(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"            Files.write(path, \"\".getBytes(), StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"                saveTask(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"            ui.showSaveChangesError();","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"     * Convert date format from MMM dd yyyy to yyyy-MM-dd","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"     * @param oldDateFormat Date which is of MMM dd yyyy format.","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"     * @return Date which is of yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"gavin331"},"content":"    private String convertDateFormat(String oldDateFormat) {","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"gavin331"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"gavin331"},"content":"        // Parse the original string to LocalDate","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"gavin331"},"content":"        LocalDate localDate \u003d LocalDate.parse(oldDateFormat, inputFormatter);","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"gavin331"},"content":"        // Define the formatter for the output pattern","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"gavin331"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"gavin331"},"content":"        // Format the LocalDate to the desired output pattern","lastModifiedDate":"2024-02-01"},{"lineNumber":112,"author":{"gitId":"gavin331"},"content":"        return localDate.format(outputFormatter);","lastModifiedDate":"2024-02-01"},{"lineNumber":113,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":114,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":115,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"gavin331"},"content":"     * Saves tasks to the storage file specified by the filepath,","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"gavin331"},"content":"     * especially after adding them to the tasks list.","lastModifiedDate":"2024-02-02"},{"lineNumber":118,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":119,"author":{"gitId":"gavin331"},"content":"     * @param task The task that we are saving to the storage file.","lastModifiedDate":"2024-02-02"},{"lineNumber":120,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"gavin331"},"content":"    public void saveTask(Task task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"gavin331"},"content":"        //[T][X] read book \u003d T | X | read book","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"gavin331"},"content":"        //[D][ ] return book (by: June 6th) \u003d D |  | return book | June 6th","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"gavin331"},"content":"        //[E][ ] project meeting (from: Aug 6th 2pm to: 4pm)","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"gavin331"},"content":"        // \u003d E |  | project meeting | Aug 6th 2pm | 4pm","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":127,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"gavin331"},"content":"            String taskString \u003d task.show();","lastModifiedDate":"2024-02-01"},{"lineNumber":129,"author":{"gitId":"gavin331"},"content":"            String typeOfTask \u003d taskString.substring(1, 2); //T","lastModifiedDate":"2024-02-01"},{"lineNumber":130,"author":{"gitId":"gavin331"},"content":"            String taskStatus \u003d taskString.substring(4, 5); //X","lastModifiedDate":"2024-02-01"},{"lineNumber":131,"author":{"gitId":"gavin331"},"content":"            String taskDescription \u003d \"\";","lastModifiedDate":"2024-02-01"},{"lineNumber":132,"author":{"gitId":"gavin331"},"content":"            String saveEntry \u003d \"\";","lastModifiedDate":"2024-02-01"},{"lineNumber":133,"author":{"gitId":"gavin331"},"content":"            if (typeOfTask.equals(\"T\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":134,"author":{"gitId":"gavin331"},"content":"                taskDescription \u003d taskString.substring(7);","lastModifiedDate":"2024-02-01"},{"lineNumber":135,"author":{"gitId":"gavin331"},"content":"                saveEntry \u003d typeOfTask + \" | \" + taskStatus + \" | \" + taskDescription;","lastModifiedDate":"2024-02-01"},{"lineNumber":136,"author":{"gitId":"gavin331"},"content":"            } else if (typeOfTask.equals(\"D\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":137,"author":{"gitId":"gavin331"},"content":"                int startIndex \u003d taskString.indexOf(\"(by: \");","lastModifiedDate":"2024-02-01"},{"lineNumber":138,"author":{"gitId":"gavin331"},"content":"                int endIndex \u003d taskString.indexOf(\")\");","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"gavin331"},"content":"                taskDescription \u003d taskString.substring(7, startIndex - 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":140,"author":{"gitId":"gavin331"},"content":"                String deadline \u003d taskString.substring(startIndex + 5, endIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":141,"author":{"gitId":"gavin331"},"content":"                saveEntry \u003d typeOfTask + \" | \" + taskStatus + \" | \" + taskDescription","lastModifiedDate":"2024-02-01"},{"lineNumber":142,"author":{"gitId":"gavin331"},"content":"                        + \" | \" + deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":143,"author":{"gitId":"gavin331"},"content":"            } else if (typeOfTask.equals(\"E\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":144,"author":{"gitId":"gavin331"},"content":"                int startIndex \u003d taskString.indexOf(\"(from: \");","lastModifiedDate":"2024-02-01"},{"lineNumber":145,"author":{"gitId":"gavin331"},"content":"                taskDescription \u003d taskString.substring(7, startIndex - 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":146,"author":{"gitId":"gavin331"},"content":"                int endIndex \u003d taskString.indexOf(\" to:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":147,"author":{"gitId":"gavin331"},"content":"                String fromDate \u003d taskString.substring(startIndex + 7, endIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":148,"author":{"gitId":"gavin331"},"content":"                startIndex \u003d taskString.indexOf(\")\");","lastModifiedDate":"2024-02-01"},{"lineNumber":149,"author":{"gitId":"gavin331"},"content":"                String toDate \u003d taskString.substring(endIndex + 5, startIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":150,"author":{"gitId":"gavin331"},"content":"                saveEntry \u003d typeOfTask + \" | \" + taskStatus + \" | \" + taskDescription","lastModifiedDate":"2024-02-01"},{"lineNumber":151,"author":{"gitId":"gavin331"},"content":"                        + \" | \" + fromDate + \" | \" + toDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":152,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":153,"author":{"gitId":"gavin331"},"content":"            Files.write(path, (saveEntry + System.lineSeparator()).getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2024-02-01"},{"lineNumber":154,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":155,"author":{"gitId":"gavin331"},"content":"            ui.showSaveTasksError();","lastModifiedDate":"2024-02-02"},{"lineNumber":156,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":157,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":158,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":158}},{"path":"src/main/java/bartenderbob/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"public class Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"    protected String status;","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    public void mark() {","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-22"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        return \"\";","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"        return this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":30}},{"path":"src/main/java/bartenderbob/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"public class TaskList {","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"    private final Storage STORAGE \u003d new Storage(\"./data/tasks.txt\");","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    private final ArrayList\u003cTask\u003e TASKS;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"        this.TASKS \u003d tasks;","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    public void store(Task task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"        TASKS.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"        STORAGE.saveTask(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"        int totalTasks \u003d TASKS.size();","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        ui.showStoreTasksMessage(task, totalTasks);","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    public void list() {","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"        ui.showListCommandHeader();","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        for (int i \u003d 0; i \u003c TASKS.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            ui.showListElements(number, TASKS, i);","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public void markDone(String index) throws BartenderBobException{","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"            Task task \u003d TASKS.get(integerIndex - 1);","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"            task.mark();","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(TASKS);","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"            ui.showMarkDone(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    public void unmarkDone(String index) throws BartenderBobException{","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"            Task task \u003d TASKS.get(integerIndex - 1);","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"            task.unmark();","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(TASKS);","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"            ui.showUnmarkDone(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"    public void delete(String index) throws BartenderBobException{","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"            String display \u003d TASKS.get(integerIndex - 1).show();","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"            TASKS.remove(integerIndex - 1);","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(TASKS);","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"            int totalTasks \u003d TASKS.size();","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"            ui.showDelete(display, totalTasks);","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"    public void find(String substring) {","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"        for (Task task : TASKS) {","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"            if (task.getDescription().contains(substring)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"                result.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        ui.showFindCommandHeader();","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        for (int i \u003d 0; i \u003c result.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"            ui.showListElements(number, result, i);","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":75}},{"path":"src/main/java/bartenderbob/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"public class ToDo extends Task{","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone? \"X\": \" \";","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"        return \"[T]\" + \"[\" + status + \"]\" + \" \" + this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":15}},{"path":"src/main/java/bartenderbob/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"public class Ui {","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"    public void leave() {","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Bye! Another round next time!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    public void showWelcomeMessage(String name) {","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Welcome back! I\u0027m \" + name + \"\\nHow\u0027s it going out there?\");","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public void showLoadingError() {","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Error occurred while loading!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    public void showInvalidInputError(String userInput) {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"What? I can\u0027t understand \" + userInput + \" \u003d(\");","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    public void showInvalidMarkCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hmm, please provide a valid task number to mark.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public void showInvalidUnmarkCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hmm, please provide a valid task number to unmark.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    public void showInvalidDeleteCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hmm, please provide a valid task number to delete.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public void showInvalidTodoCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hmm, did you add in a description for the todo?\");","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    public void showInvalidDeadlineCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hey, this is an invalid format for deadline!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"    public void showInvalidDateFormat() {","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Date format should be of the form yyyy-MM-dd!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"    public void showInvalidEventCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Hey, this is an invalid format for event!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    public void showOutOfBoundsCommand() {","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"The index is out of bounds!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"    public void showSaveChangesError() {","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Something went wrong while saving changes!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    public void showSaveTasksError() {","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Something went wrong while saving tasks!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"    public void showStoreTasksMessage(Task task, int totalTasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        System.out.println(task.show());","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"    public void showListCommandHeader() {","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Here are the tasks in your list!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"    public void showListElements(int number, ArrayList\u003cTask\u003e tasks, int i) {","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        System.out.println(number + \".\" + tasks.get(i).show());","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"    public void showMarkDone(Task task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"        System.out.println(task.show());","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"    public void showUnmarkDone(Task task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"        System.out.println(task.show());","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"    public void showDelete(String display, int totalTasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        System.out.println(display);","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"    public void showFindCommandHeader() {","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":75}},{"path":"src/test/java/bartenderbob/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    public void Deadline_invalidString_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"Tuesday\");","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    public void Deadline_invalidMonth_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-10\");","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public void Deadline_dayExceedBounds_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-40\");","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public void Deadline_dayEqualZero_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-0\");","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"    public void Deadline_validString_classCreated() {","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"        Deadline test \u003d new Deadline(\"Testing!\", \"2019-10-10\");","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"Deadline instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[D][ ] Testing! (by: Oct 10 2019)\");","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":38}},{"path":"src/test/java/bartenderbob/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"public class ToDoTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    public void ToDo_withoutIsDoneParameter_blankStatus(){","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][ ] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    public void ToDo_trueIsDoneParameter_blankStatus(){","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\", true);","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][X] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    public void ToDo_falseIsDoneParameter_blankStatus(){","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\", false);","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][ ] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"todo buy bread","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"unmark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"mark","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"unmark","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"delete","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"deadline","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"event","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"mark 5","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"mark 0","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"blah","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"gavin331":20}}]
