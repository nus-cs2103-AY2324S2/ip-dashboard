[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    mainClass.set(\"duke.gui.Launcher\")","lastModifiedDate":"2024-02-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"    archiveBaseName \u003d \"MeanDuke\"","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"billyhoce":18}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that adds a Task to a TaskList","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public abstract class AddCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    public AddCommand(TaskList taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" add \u003ctype\u003e ...\";","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        return this.taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":24}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that adds a Deadline to a TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"public class AddDeadlineCommand extends AddCommand {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    private final String description;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate deadlineDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime deadlineTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new AddDeadlineCommand that adds a new Deadline to the specified TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * @param taskList     The TaskList to add the new Deadline to.","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     * @param description  The description of the new Deadline to be added.","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     * @param deadlineDate The date where the deadline task needs to be completed.","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     * @param deadlineTime The time when the deadline task needs to be completed.","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    public AddDeadlineCommand(TaskList taskList, String description, LocalDate deadlineDate, LocalTime deadlineTime) {","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        super(taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"        this.deadlineDate \u003d deadlineDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"        this.deadlineTime \u003d deadlineTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format to add a Deadline Task","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" add deadline \u003cdescription\u003e /by \u003cYYYY-MM-DD\u003e [HH:MM]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"    public String execute() {","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"        super.getTaskList().add(new Deadline(this.description,","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"                false, this.deadlineDate, this.deadlineTime));","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        return \"Added Deadline task: \" + this.description","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"                + \"(by: \" + this.deadlineDate","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"                + (this.deadlineTime \u003d\u003d null ? \"\" : \" \" + this.deadlineTime)","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"                + \")\";","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":48}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that adds an Event to a TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"public class AddEventCommand extends AddCommand {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    private final String description;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate fromDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime fromTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate toDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime toTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new AddEventCommand that adds a new Event to the specified TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     * @param taskList    The TaskList to add the new Event to.","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     * @param description The description of the new Event to be added.","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"     * @param fromDate    The starting date of the event.","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"     * @param fromTime    The starting time of the event.","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"     * @param toDate      The ending date of the event.","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     * @param toTime      The ending time of the event.","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    public AddEventCommand(TaskList taskList, String description,","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"                           LocalDate fromDate, LocalTime fromTime,","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"                           LocalDate toDate, LocalTime toTime) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"        super(taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format to add an Event Task","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" add event \u003cdescription\u003e /from \u003cYYYY-MM-DD\u003e [HH:MM] /to \u003cYYYY-MM-DD\u003e [HH:MM]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"    public String execute() {","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"        super.getTaskList().add(new Event(this.description, false, this.fromDate,","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"                this.fromTime, this.toDate, this.toTime));","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"        return \"Added Event task: \" + this.description","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"                + \"\\n(from: \" + this.fromDate + (this.fromTime \u003d\u003d null ? \"\" : \" \" + this.fromTime)","lastModifiedDate":"2024-02-16"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"                + \"\\n   to: \" + this.toDate + (this.toTime \u003d\u003d null ? \"\" : \" \" + this.toTime) + \")\";","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":56}},{"path":"src/main/java/duke/commands/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that adds a ToDO to a TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class AddTodoCommand extends AddCommand {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final String description;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new AddTodoCommand that adds a new ToDo to the specified TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     * @param taskList    The TaskList to add the new ToDo to.","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param description The description of the new ToDo to be added.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    public AddTodoCommand(TaskList taskList, String description) {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        super(taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format to add a ToDo Task","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" add todo \u003cdescription\u003e\";","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    public String execute() {","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"        super.getTaskList().add(new ToDo(this.description));","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        return \"Added ToDo task: \" + this.description;","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":36}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that is given by the user that carries a specific action.","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format for this Command.","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"        return \"Usage:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * Carries out the actions of this command","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * @throws MeanDukeException if execution issues occur.","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    public abstract String execute() throws MeanDukeException;","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"     * Returns if this Command is an ExitCommand.","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    public boolean isExitCommand() {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"        return false;","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":31}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that adds deletes a Task from a TaskList","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private final int index;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    private final int visualIndex;","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     * Constructs a DeleteCommand that deletes the task at the given index of the given TaskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param taskList TaskList from which the Task is to be deleted from.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * @param index    Index of the Task to be deleted from taskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    public DeleteCommand(TaskList taskList, int index) {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        this.visualIndex \u003d index + 1;","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format for deleting a Task.","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" delete \u003ctaskIndex\u003e\";","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"    public String execute() throws MeanDukeException {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"            return \"deleted task:\\n\" + this.taskList.delete(this.index);","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"            throw new MeanDukeException(\"Dude... you don\u0027t even have a task \" + this.visualIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":41}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command to end the current session and exit the program.","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    public String execute() throws MeanDukeException {","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"        return \"Finally you\u0027re finished, thought you would never stop yapping.\";","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    public boolean isExitCommand() {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"        return true;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":19}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that filters a TaskList with a String","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final String searchString;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new FindCommand that will filter the given TaskList using the given String.","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     * @param taskList The TaskList to filter through.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param searchString The String to filter the TaskList using.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    public FindCommand(TaskList taskList, String searchString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        this.searchString \u003d searchString;","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"     * Returns the String containing the proper usage of filtering the tasklist","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" find \u003cfilter\u003e\";","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    public String execute() {","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        return this.taskList.filter(this.searchString);","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"billyhoce":36}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that displays the given TaskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     * Constructs a ListCommand that displays the given TaskList in text form.","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     * @param taskList TaskList to be displayed.","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    public ListCommand(TaskList taskList) {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"        super();","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    public String execute() {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        return this.taskList.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":25}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that marks the Task at the given index of the given TaskList as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private final int index;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    private final int visualIndex;","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new MarkCommand that marks the Task at the given index of the given TaskList as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param taskList TaskList containing Task to be marked as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * @param index    Index of Task in taskList to be marked as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    public MarkCommand(TaskList taskList, int index) {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        this.visualIndex \u003d index + 1;","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format to mark a Task in a TaskList as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" mark \u003ctaskIndex\u003e\";","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"    public String execute() throws MeanDukeException {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"            if (this.taskList.markDone(this.index)) {","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"                //Task successfully changed from not done to done","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"                return \"Marked task: \" + this.visualIndex + \" as completed.\\nCould you have taken any longer?\";","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"            } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"                //Task was already completed","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"                return \"You have already marked task \" + this.visualIndex + \" as completed you goldfish...\";","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"            throw new MeanDukeException(\"Dude... you don\u0027t even have a task \" + this.visualIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":47}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.commands;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Command that marks the Task at the given index of the given TaskList as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private final int index;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    private final int visualIndex;","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new UnmarkCommand that marks the Task at the given index of the given TaskList as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param taskList TaskList containing Task to be marked as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * @param index    Index of Task in taskList to be marked as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    public UnmarkCommand(TaskList taskList, int index) {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        this.visualIndex \u003d index + 1;","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     * Returns the string describing the proper format to mark a Task in a TaskList as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    public static String getUsage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        return Command.getUsage() + \" unmark \u003ctaskIndex\u003e\";","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"    public String execute() throws MeanDukeException {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"            if (taskList.unmarkDone(this.index)) {","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"                //Task successfully changed from done to not done","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"                return \"Marked task: \" + this.visualIndex","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"                        + \" as not completed.\\nWhy did you mark this in the first place?\";","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"            } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"                //Task was already not complete","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"                return \"Task \" + this.visualIndex","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"                        + \" is already not completed.\\nMaybe you should start working on it.\";","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"            throw new MeanDukeException(\"Dude... you don\u0027t even have a task \" + this.visualIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":49}},{"path":"src/main/java/duke/core/MeanDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.core;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.commands.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.MeanDukeException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import duke.gui.MainWindow;","lastModifiedDate":"2024-02-21"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":" * This class represents a MEAN chatbot with task-tracking capabilities","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"public class MeanDuke {","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    //Creates an empty task list","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * Initialises the MeanDuke chatbot","lastModifiedDate":"2024-02-18"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     * @param controller The controller that will be controlling the graphical outputs of the chatbot","lastModifiedDate":"2024-02-18"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * @return String containing the introductory message of the chatbot","lastModifiedDate":"2024-02-18"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    public static String initialise(MainWindow controller) {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        taskList \u003d Storage.load(controller);","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"        return \"What do you want this time?\";","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     * Gets a response from MeanDuke given an input by the user","lastModifiedDate":"2024-02-18"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"     * @param input The string input by the user","lastModifiedDate":"2024-02-18"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"     * @param controller The controller controlling the graphical outputs of the chatbot","lastModifiedDate":"2024-02-18"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"     * @return String containing the response from MeanDuke","lastModifiedDate":"2024-02-18"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"    public static String getResponse(String input, MainWindow controller) {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"            Command cmd \u003d Parser.parseUserInput(input, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"            String ret \u003d cmd.execute();","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"            Storage.save(taskList, controller);","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"            if (cmd.isExitCommand()) {","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"                javafx.application.Platform.exit();","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"            return ret;","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        } catch (MeanDukeException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"billyhoce":47}},{"path":"src/main/java/duke/core/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.core;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"import duke.commands.AddTodoCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"import duke.commands.Command;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2024-02-18"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"import duke.parserenums.CommandWord;","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"import duke.parserenums.TaskType;","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":" * This class represents a parser that reads user input and converts it into Commands","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"public class Parser {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"    private static final int VISUAL_INDEX_OFFSET \u003d 1;","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"     * Takes in user input and parses it into a Command that can be executed.","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"     * TaskList-specific Commands will be executed on the given TaskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"     * @param userInput The String containing the user input.","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"     * @param taskList  The TaskList that certain Commands will be executed on.","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"     * @return The Command generated by parsing the user input.","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"     * @throws InvalidCommandException if the user input is not a valid command.","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"    public static Command parseUserInput(String userInput, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"        //Check first word","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"        String[] commandAndRemaining \u003d userInput.strip().split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        String commandUpper \u003d commandAndRemaining[0].toUpperCase();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"        Command cmd;","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"        CommandWord commandWord \u003d findInEnum(CommandWord.class, commandUpper);","lastModifiedDate":"2024-02-19"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"        if (commandWord \u003d\u003d null) {","lastModifiedDate":"2024-02-19"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2024-02-19"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"        switch (commandWord) {","lastModifiedDate":"2024-02-19"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"        case ADD:","lastModifiedDate":"2024-02-19"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"                cmd \u003d parseAdd(commandAndRemaining[1].strip(), taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(AddCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"        case LIST:","lastModifiedDate":"2024-02-19"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"            cmd \u003d new ListCommand(taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"        case MARK:","lastModifiedDate":"2024-02-19"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"billyhoce"},"content":"                cmd \u003d parseMark(commandAndRemaining[1].strip(), taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"billyhoce"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"billyhoce"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(MarkCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"billyhoce"},"content":"        case UNMARK:","lastModifiedDate":"2024-02-19"},{"lineNumber":69,"author":{"gitId":"billyhoce"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"billyhoce"},"content":"                cmd \u003d parseUnmark(commandAndRemaining[1].strip(), taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"billyhoce"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"billyhoce"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(UnmarkCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"billyhoce"},"content":"        case DELETE:","lastModifiedDate":"2024-02-19"},{"lineNumber":76,"author":{"gitId":"billyhoce"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"billyhoce"},"content":"                cmd \u003d parseDelete(commandAndRemaining[1].strip(), taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"billyhoce"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"billyhoce"},"content":"            } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(DeleteCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"billyhoce"},"content":"        case END:","lastModifiedDate":"2024-02-19"},{"lineNumber":83,"author":{"gitId":"billyhoce"},"content":"            cmd \u003d new ExitCommand();","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"billyhoce"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"billyhoce"},"content":"        case FIND:","lastModifiedDate":"2024-02-19"},{"lineNumber":86,"author":{"gitId":"billyhoce"},"content":"            try {","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"billyhoce"},"content":"                cmd \u003d new FindCommand(taskList, commandAndRemaining[1]);","lastModifiedDate":"2024-02-06"},{"lineNumber":88,"author":{"gitId":"billyhoce"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(FindCommand.getUsage());","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"billyhoce"},"content":"            break;","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"billyhoce"},"content":"        default:","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException();","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"billyhoce"},"content":"        return cmd;","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":100,"author":{"gitId":"billyhoce"},"content":"     * Parses the following portion of user input after the \"add\" keyword.","lastModifiedDate":"2024-02-06"},{"lineNumber":101,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":102,"author":{"gitId":"billyhoce"},"content":"     * @param inputWithoutAdd The portion of user input containing details of the task to be added.","lastModifiedDate":"2024-02-06"},{"lineNumber":103,"author":{"gitId":"billyhoce"},"content":"     * @param taskList        The TaskList to add the new Task to.","lastModifiedDate":"2024-02-06"},{"lineNumber":104,"author":{"gitId":"billyhoce"},"content":"     * @return The AddCommand which adds the new Task to the TaskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":105,"author":{"gitId":"billyhoce"},"content":"     * @throws InvalidCommandException if the user input is not a valid AddCommand.","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":107,"author":{"gitId":"billyhoce"},"content":"    protected static AddCommand parseAdd(String inputWithoutAdd, TaskList taskList) throws InvalidCommandException {","lastModifiedDate":"2024-02-06"},{"lineNumber":108,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"billyhoce"},"content":"        String[] typeAndRemaining \u003d inputWithoutAdd.split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"billyhoce"},"content":"        String typeUpper \u003d typeAndRemaining[0].toUpperCase();","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"billyhoce"},"content":"        TaskType taskType \u003d findInEnum(TaskType.class, typeUpper);","lastModifiedDate":"2024-02-19"},{"lineNumber":112,"author":{"gitId":"billyhoce"},"content":"        if (taskType \u003d\u003d null) {","lastModifiedDate":"2024-02-19"},{"lineNumber":113,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException(AddCommand.getUsage());","lastModifiedDate":"2024-02-19"},{"lineNumber":114,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":115,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":116,"author":{"gitId":"billyhoce"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-19"},{"lineNumber":117,"author":{"gitId":"billyhoce"},"content":"        case TODO:","lastModifiedDate":"2024-02-19"},{"lineNumber":118,"author":{"gitId":"billyhoce"},"content":"            return parseAddTodo(taskList, typeAndRemaining);","lastModifiedDate":"2024-02-16"},{"lineNumber":119,"author":{"gitId":"billyhoce"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-19"},{"lineNumber":120,"author":{"gitId":"billyhoce"},"content":"            return parseAddDeadline(taskList, typeAndRemaining);","lastModifiedDate":"2024-02-16"},{"lineNumber":121,"author":{"gitId":"billyhoce"},"content":"        case EVENT:","lastModifiedDate":"2024-02-19"},{"lineNumber":122,"author":{"gitId":"billyhoce"},"content":"            return parseAddEvent(taskList, typeAndRemaining);","lastModifiedDate":"2024-02-16"},{"lineNumber":123,"author":{"gitId":"billyhoce"},"content":"        default:","lastModifiedDate":"2024-02-16"},{"lineNumber":124,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException(AddCommand.getUsage());","lastModifiedDate":"2024-02-16"},{"lineNumber":125,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":128,"author":{"gitId":"billyhoce"},"content":"    private static AddEventCommand parseAddEvent(TaskList taskList, String[] typeAndRemaining)","lastModifiedDate":"2024-02-18"},{"lineNumber":129,"author":{"gitId":"billyhoce"},"content":"            throws InvalidCommandException {","lastModifiedDate":"2024-02-18"},{"lineNumber":130,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"billyhoce"},"content":"            String[] descAndRemaining \u003d typeAndRemaining[1].split(\"/from\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"billyhoce"},"content":"            String[] fromAndTo \u003d descAndRemaining[1].split(\"/to\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"billyhoce"},"content":"            String[] fromdateAndFromtime \u003d fromAndTo[0].strip().split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"billyhoce"},"content":"            String[] todateAndTotime \u003d fromAndTo[1].strip().split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":136,"author":{"gitId":"billyhoce"},"content":"            String eventDesc \u003d descAndRemaining[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"billyhoce"},"content":"            if (eventDesc.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"billyhoce"},"content":"                throw new InvalidCommandException(AddEventCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":139,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"billyhoce"},"content":"            LocalDate fromDate \u003d LocalDate.parse(fromdateAndFromtime[0]);","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"billyhoce"},"content":"            LocalTime fromTime \u003d null;","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"billyhoce"},"content":"            if (fromdateAndFromtime.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"billyhoce"},"content":"                fromTime \u003d LocalTime.parse(fromdateAndFromtime[1].strip());","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"billyhoce"},"content":"            LocalDate toDate \u003d LocalDate.parse(todateAndTotime[0]);","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"billyhoce"},"content":"            LocalTime toTime \u003d null;","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"billyhoce"},"content":"            if (todateAndTotime.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"billyhoce"},"content":"                toTime \u003d LocalTime.parse(todateAndTotime[1].strip());","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"billyhoce"},"content":"            return new AddEventCommand(taskList, eventDesc, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2024-02-05"},{"lineNumber":151,"author":{"gitId":"billyhoce"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException(AddEventCommand.getUsage());","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":156,"author":{"gitId":"billyhoce"},"content":"    private static AddDeadlineCommand parseAddDeadline(TaskList taskList, String[] typeAndRemaining)","lastModifiedDate":"2024-02-18"},{"lineNumber":157,"author":{"gitId":"billyhoce"},"content":"            throws InvalidCommandException {","lastModifiedDate":"2024-02-18"},{"lineNumber":158,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-16"},{"lineNumber":159,"author":{"gitId":"billyhoce"},"content":"            String[] descAndBy \u003d typeAndRemaining[1].split(\"/by\", 2);","lastModifiedDate":"2024-02-16"},{"lineNumber":160,"author":{"gitId":"billyhoce"},"content":"            String[] bydateAndBytime \u003d descAndBy[1].strip().split(\" \", 2);","lastModifiedDate":"2024-02-16"},{"lineNumber":161,"author":{"gitId":"billyhoce"},"content":"            LocalDate byDate \u003d LocalDate.parse(bydateAndBytime[0]);","lastModifiedDate":"2024-02-16"},{"lineNumber":162,"author":{"gitId":"billyhoce"},"content":"            LocalTime byTime \u003d null;","lastModifiedDate":"2024-02-16"},{"lineNumber":163,"author":{"gitId":"billyhoce"},"content":"            if (bydateAndBytime.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-16"},{"lineNumber":164,"author":{"gitId":"billyhoce"},"content":"                byTime \u003d LocalTime.parse(bydateAndBytime[1].strip());","lastModifiedDate":"2024-02-16"},{"lineNumber":165,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"billyhoce"},"content":"            return new AddDeadlineCommand(taskList, descAndBy[0], byDate, byTime);","lastModifiedDate":"2024-02-16"},{"lineNumber":167,"author":{"gitId":"billyhoce"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":168,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException(AddDeadlineCommand.getUsage());","lastModifiedDate":"2024-02-16"},{"lineNumber":169,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":170,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":171,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":172,"author":{"gitId":"billyhoce"},"content":"    private static AddTodoCommand parseAddTodo(TaskList taskList, String[] typeAndRemaining)","lastModifiedDate":"2024-02-18"},{"lineNumber":173,"author":{"gitId":"billyhoce"},"content":"            throws InvalidCommandException {","lastModifiedDate":"2024-02-18"},{"lineNumber":174,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-16"},{"lineNumber":175,"author":{"gitId":"billyhoce"},"content":"            String todoDesc \u003d typeAndRemaining[1].strip();","lastModifiedDate":"2024-02-16"},{"lineNumber":176,"author":{"gitId":"billyhoce"},"content":"            return new AddTodoCommand(taskList, todoDesc);","lastModifiedDate":"2024-02-16"},{"lineNumber":177,"author":{"gitId":"billyhoce"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":178,"author":{"gitId":"billyhoce"},"content":"            throw new InvalidCommandException(AddTodoCommand.getUsage());","lastModifiedDate":"2024-02-16"},{"lineNumber":179,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":180,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":181,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":182,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":183,"author":{"gitId":"billyhoce"},"content":"     * Parses the following portion of user input after the \"mark\" keyword.","lastModifiedDate":"2024-02-06"},{"lineNumber":184,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":185,"author":{"gitId":"billyhoce"},"content":"     * @param inputWithoutMark The portion of user input containing the task number to be marked as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":186,"author":{"gitId":"billyhoce"},"content":"     * @param taskList         The TaskList whom Task will be marked as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":187,"author":{"gitId":"billyhoce"},"content":"     * @return The MarkCommand which marks the specified Task in the given TaskList as done.","lastModifiedDate":"2024-02-06"},{"lineNumber":188,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":189,"author":{"gitId":"billyhoce"},"content":"    protected static MarkCommand parseMark(String inputWithoutMark, TaskList taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":190,"author":{"gitId":"billyhoce"},"content":"        int index \u003d Integer.parseInt(inputWithoutMark) - VISUAL_INDEX_OFFSET;","lastModifiedDate":"2024-02-16"},{"lineNumber":191,"author":{"gitId":"billyhoce"},"content":"        return new MarkCommand(taskList, index);","lastModifiedDate":"2024-02-05"},{"lineNumber":192,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":193,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":194,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":195,"author":{"gitId":"billyhoce"},"content":"     * Parses the following portion of user input after the \"unmark\" keyword.","lastModifiedDate":"2024-02-06"},{"lineNumber":196,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":197,"author":{"gitId":"billyhoce"},"content":"     * @param inputWithoutUnmark The portion of user input containing the task number to be marked as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":198,"author":{"gitId":"billyhoce"},"content":"     * @param taskList           The TaskList whom Task will be marked as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":199,"author":{"gitId":"billyhoce"},"content":"     * @return The UnmarkCommand which marks the specified Task in the given TaskList as not done.","lastModifiedDate":"2024-02-06"},{"lineNumber":200,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":201,"author":{"gitId":"billyhoce"},"content":"    protected static UnmarkCommand parseUnmark(String inputWithoutUnmark, TaskList taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":202,"author":{"gitId":"billyhoce"},"content":"        int index \u003d Integer.parseInt(inputWithoutUnmark) - VISUAL_INDEX_OFFSET;","lastModifiedDate":"2024-02-16"},{"lineNumber":203,"author":{"gitId":"billyhoce"},"content":"        return new UnmarkCommand(taskList, index);","lastModifiedDate":"2024-02-05"},{"lineNumber":204,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":205,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":206,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":207,"author":{"gitId":"billyhoce"},"content":"     * Parses the following portion of user input after the \"delete\" keyword.","lastModifiedDate":"2024-02-06"},{"lineNumber":208,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":209,"author":{"gitId":"billyhoce"},"content":"     * @param inputWithoutDelete The portion of user input containing the task number to be deleted.","lastModifiedDate":"2024-02-06"},{"lineNumber":210,"author":{"gitId":"billyhoce"},"content":"     * @param taskList           The TaskList whom Task will be deleted from.","lastModifiedDate":"2024-02-06"},{"lineNumber":211,"author":{"gitId":"billyhoce"},"content":"     * @return The DeleteCommand which deletes the specified Task from the given TaskList.","lastModifiedDate":"2024-02-06"},{"lineNumber":212,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":213,"author":{"gitId":"billyhoce"},"content":"    protected static DeleteCommand parseDelete(String inputWithoutDelete, TaskList taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":214,"author":{"gitId":"billyhoce"},"content":"        int index \u003d Integer.parseInt(inputWithoutDelete) - VISUAL_INDEX_OFFSET;","lastModifiedDate":"2024-02-16"},{"lineNumber":215,"author":{"gitId":"billyhoce"},"content":"        return new DeleteCommand(taskList, index);","lastModifiedDate":"2024-02-05"},{"lineNumber":216,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":217,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":218,"author":{"gitId":"billyhoce"},"content":"    private static \u003cT extends Enum\u003cT\u003e\u003e T findInEnum(Class\u003cT\u003e enumClass, String userKeyword) {","lastModifiedDate":"2024-02-19"},{"lineNumber":219,"author":{"gitId":"billyhoce"},"content":"        T[] enumElements \u003d enumClass.getEnumConstants();","lastModifiedDate":"2024-02-19"},{"lineNumber":220,"author":{"gitId":"billyhoce"},"content":"        assert enumElements !\u003d null;","lastModifiedDate":"2024-02-19"},{"lineNumber":221,"author":{"gitId":"billyhoce"},"content":"        for (T element : enumElements) {","lastModifiedDate":"2024-02-19"},{"lineNumber":222,"author":{"gitId":"billyhoce"},"content":"            if (element.toString().contains(userKeyword)) {","lastModifiedDate":"2024-02-19"},{"lineNumber":223,"author":{"gitId":"billyhoce"},"content":"                return element;","lastModifiedDate":"2024-02-19"},{"lineNumber":224,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-19"},{"lineNumber":225,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":226,"author":{"gitId":"billyhoce"},"content":"        return null;","lastModifiedDate":"2024-02-19"},{"lineNumber":227,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":228,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":228}},{"path":"src/main/java/duke/core/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.core;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.io.File;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"import java.util.InputMismatchException;","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2024-02-18"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"import duke.gui.MainWindow;","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":" * This class represents the part of MeanDuke that handles loading and saving of data to disk.","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"public class Storage {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    private static final String PATH \u003d \"./data/MeanDuke.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    private static final File savedTaskList \u003d new File(PATH);","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"     * Attempts to load a TaskList from the PATH in disk. Creates a new one if it fails to load a save.","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"     * @return The TaskList that was loaded from disk, or a new TaskList if loading fails.","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    public static TaskList load(MainWindow controller) {","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"            Scanner s \u003d new Scanner(savedTaskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"                switch (s.nextLine()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"                case \"TODO\":","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"                    loadTodo(s, taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"                    break;","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"                case \"DEADLINE\":","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"                    loadDeadline(s, taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"                    break;","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"                case \"EVENT\":","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"                    loadEvent(s, taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"                    break;","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"                default:","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"                    throw new NoSuchElementException(s.nextLine());","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"            controller.showMessage(\"Successfully loaded save file.\");","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"            return taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"        } catch (NoSuchElementException | FileNotFoundException | DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"            controller.showMessage(\"Missing or corrupted save file. Creating new Task List\");","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"            return new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"    private static void loadEvent(Scanner s, TaskList taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"        String eventDesc \u003d s.nextLine();","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"        boolean eventIsDone \u003d parseSaveBoolean(s.nextLine());","lastModifiedDate":"2024-02-16"},{"lineNumber":63,"author":{"gitId":"billyhoce"},"content":"        String[] dateTimeFrom \u003d s.nextLine().split(\";\");","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"billyhoce"},"content":"        String[] dateTimeTo \u003d s.nextLine().split(\";\");","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"billyhoce"},"content":"        taskList.add(new Event(eventDesc, eventIsDone,","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(dateTimeFrom[0]),","lastModifiedDate":"2024-02-16"},{"lineNumber":67,"author":{"gitId":"billyhoce"},"content":"                dateTimeFrom.length \u003d\u003d 1 ? null : LocalTime.parse(dateTimeFrom[1]),","lastModifiedDate":"2024-02-16"},{"lineNumber":68,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(dateTimeTo[0]),","lastModifiedDate":"2024-02-16"},{"lineNumber":69,"author":{"gitId":"billyhoce"},"content":"                dateTimeTo.length \u003d\u003d 1 ? null : LocalTime.parse(dateTimeTo[1])));","lastModifiedDate":"2024-02-16"},{"lineNumber":70,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":71,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":72,"author":{"gitId":"billyhoce"},"content":"    private static void loadDeadline(Scanner s, TaskList taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":73,"author":{"gitId":"billyhoce"},"content":"        String deadlineDesc \u003d s.nextLine();","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"billyhoce"},"content":"        boolean deadlineIsDone \u003d parseSaveBoolean(s.nextLine());","lastModifiedDate":"2024-02-16"},{"lineNumber":75,"author":{"gitId":"billyhoce"},"content":"        String[] dateTime \u003d s.nextLine().split(\";\");","lastModifiedDate":"2024-02-16"},{"lineNumber":76,"author":{"gitId":"billyhoce"},"content":"        taskList.add(new Deadline(deadlineDesc, deadlineIsDone,","lastModifiedDate":"2024-02-16"},{"lineNumber":77,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(dateTime[0]),","lastModifiedDate":"2024-02-16"},{"lineNumber":78,"author":{"gitId":"billyhoce"},"content":"                dateTime.length \u003d\u003d 1 ? null : LocalTime.parse(dateTime[1])));","lastModifiedDate":"2024-02-16"},{"lineNumber":79,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":80,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":81,"author":{"gitId":"billyhoce"},"content":"    private static void loadTodo(Scanner s, TaskList taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":82,"author":{"gitId":"billyhoce"},"content":"        taskList.add(new ToDo(s.nextLine(), parseSaveBoolean(s.nextLine())));","lastModifiedDate":"2024-02-16"},{"lineNumber":83,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":85,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"billyhoce"},"content":"     * Parses the given string into a boolean value.","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"billyhoce"},"content":"     * @param str The string to be parsed","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"billyhoce"},"content":"     * @return true or false depending on the string","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"billyhoce"},"content":"     * @throws InputMismatchException if string is not a valid boolean value","lastModifiedDate":"2024-02-16"},{"lineNumber":91,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"billyhoce"},"content":"    private static boolean parseSaveBoolean(String str) throws InputMismatchException {","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"billyhoce"},"content":"        if (str.equals(\"true\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"billyhoce"},"content":"            return true;","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"billyhoce"},"content":"        } else if (str.equals(\"false\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"billyhoce"},"content":"            return false;","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"billyhoce"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"billyhoce"},"content":"            throw new InputMismatchException();","lastModifiedDate":"2024-02-16"},{"lineNumber":99,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"billyhoce"},"content":"     * Attempts to save the current TaskList into disk at PATH.","lastModifiedDate":"2024-02-06"},{"lineNumber":104,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"billyhoce"},"content":"     * @param taskList The TaskList to be saved into disk in text form.","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"billyhoce"},"content":"    public static void save(TaskList taskList, MainWindow controller) {","lastModifiedDate":"2024-02-14"},{"lineNumber":108,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"billyhoce"},"content":"            new File(\"./data\").mkdir();","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"billyhoce"},"content":"            FileWriter fw \u003d new FileWriter(savedTaskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"billyhoce"},"content":"            fw.write(taskList.saveString());","lastModifiedDate":"2024-02-06"},{"lineNumber":112,"author":{"gitId":"billyhoce"},"content":"            fw.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"billyhoce"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"billyhoce"},"content":"            controller.showMessage(\"An error has occurred during saving.\");","lastModifiedDate":"2024-02-14"},{"lineNumber":115,"author":{"gitId":"billyhoce"},"content":"            controller.showMessage(e.getMessage());","lastModifiedDate":"2024-02-14"},{"lineNumber":116,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":119}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.exceptions;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * Exception that is thrown when MeanDuke encounters an invalid user input.","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public class InvalidCommandException extends MeanDukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    private final String errorMessage;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"     * Constructs an InvalidCommandException class with the message being a general warning","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"        super();","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"        this.errorMessage \u003d \"What are you saying? Read the user manual, it was written for a reason\";","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     * Constructs an InvalidCommandException class with the specified proper usage.","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     * @param usage Proper usage of the command that was given.","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    public InvalidCommandException(String usage) {","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"        super();","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"        this.errorMessage \u003d usage;","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    public String getMessage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        return this.errorMessage;","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":32}},{"path":"src/main/java/duke/exceptions/MeanDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.exceptions;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * Checked exception thrown typically due to issues that affect the behaviour of the chatbot","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public class MeanDukeException extends Exception {","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"     * Constructs an MeanDukeException class with a specific message.","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"     * @param message The message to be tagged to this exception.","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    public MeanDukeException(String message) {","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"        super(message);","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * Constructs a MeanDukeException with no specific message.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    public MeanDukeException() {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        super();","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"billyhoce":23}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.gui;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    private DialogBox(String text) {","lastModifiedDate":"2024-02-21"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        this.dialog.setText(text);","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    public static DialogBox getUserDialog(String text) {","lastModifiedDate":"2024-02-21"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"        return new DialogBox(text);","lastModifiedDate":"2024-02-21"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"    public static DialogBox getDukeDialog(String text) {","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"        var db \u003d new DialogBox(text);","lastModifiedDate":"2024-02-21"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        db.flip();","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"        return db;","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"    private void flip() {","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":56}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.gui;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public class Launcher {","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.gui;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"            stage.setTitle(\"Mean-Duke\");","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"            stage.show();","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":29}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.gui;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import duke.core.MeanDuke;","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     * Initialises the MainWindow controller, which hosts the MeanDuke application","lastModifiedDate":"2024-02-18"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        this.scrollPane.vvalueProperty().bind(this.dialogContainer.heightProperty());","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"        this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"                DialogBox.getDukeDialog(MeanDuke.initialise(this))","lastModifiedDate":"2024-02-21"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"        );","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"        String input \u003d this.userInput.getText();","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"            return;","lastModifiedDate":"2024-02-21"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"        String response \u003d MeanDuke.getResponse(input, this);","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        assert !response.isEmpty();","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"        this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"                DialogBox.getUserDialog(input),","lastModifiedDate":"2024-02-21"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"                DialogBox.getDukeDialog(response)","lastModifiedDate":"2024-02-21"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"        );","lastModifiedDate":"2024-02-21"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"        this.userInput.clear();","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"     * Tells this controller to display a message from MeanDuke","lastModifiedDate":"2024-02-18"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-18"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"     * @param message To be displayed","lastModifiedDate":"2024-02-18"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"        this.dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-16"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"                DialogBox.getDukeDialog(message)","lastModifiedDate":"2024-02-21"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"        );","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-13"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":62}},{"path":"src/main/java/duke/parserenums/CommandWord.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.parserenums;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * This enum class contains words representing a command for Mean-Duke","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public enum CommandWord {","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"    ADD,","lastModifiedDate":"2024-02-19"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    DELETE,","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    END,","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    FIND,","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    LIST,","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    MARK,","lastModifiedDate":"2024-02-19"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    UNMARK","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-19"}],"authorContributionMap":{"billyhoce":14}},{"path":"src/main/java/duke/parserenums/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.parserenums;","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * This enum class contains types of Task","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public enum TaskType {","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"    TODO,","lastModifiedDate":"2024-02-19"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    EVENT,","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    DEADLINE","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-19"}],"authorContributionMap":{"billyhoce":11}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Task with a deadline.","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private static final String TYPE_SYMBOL \u003d \"[D]\";","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate deadlineDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime deadlineTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new deadline Task with the specified description, completion status, and deadline.","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * @param description  Description of the deadline Task","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     * @param isDone       boolean value that determines if the initialised deadline Task is completed or not","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * @param deadlineDate Deadline date of the Task in format \"YYYY-MM-DD\"","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     * @param deadlineTime Deadline time of the Task in format \"HH:MM\", or null.","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    public Deadline(String description, boolean isDone, LocalDate deadlineDate, LocalTime deadlineTime) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"        super(description, TYPE_SYMBOL, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"        this.deadlineDate \u003d deadlineDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        this.deadlineTime \u003d deadlineTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    public String saveString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"        return \"DEADLINE\" + \"\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"                + super.saveString() + \"\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"                + this.deadlineDate","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"                + (this.deadlineTime \u003d\u003d null ? \"\" : \";\" + this.deadlineTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"        String deadlineString \u003d this.deadlineDate.getDayOfMonth() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"                + this.deadlineDate.getMonth().toString() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"                + this.deadlineDate.getYear()","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"                + (this.deadlineTime \u003d\u003d null ? \"\" : \" \" + this.deadlineTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        return super.toString() + \" (by: \" + deadlineString + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"billyhoce":45}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" * This class represents a Task with a start and end duration","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private static final String TYPE_SYMBOL \u003d \"[E]\";","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate fromDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    private final LocalDate toDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime fromTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    private final LocalTime toTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new Event with the specified description, completion state, start, and end period.","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * @param description Description of the Event","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     * @param isDone      boolean value that determines if the initialised Event is completed or not","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     * @param fromDate    start date of the Event in the format \"YYYY-MM-DD\"","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     * @param fromTime    start time of the Event in the format \"HH:MM\", or null","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"     * @param toDate      end date of the Event in the format \"YYYY-MM-DD\"","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"     * @param toTime      end time of the Event in the format \"HH:MM\", or null","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    public Event(String description, boolean isDone, LocalDate fromDate,","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"                 LocalTime fromTime, LocalDate toDate, LocalTime toTime) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"        super(description, TYPE_SYMBOL, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    public String saveString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"        return \"EVENT\" + \"\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"                + super.saveString() + \"\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"                + this.fromDate","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"                + (this.fromTime \u003d\u003d null ? \"\" : \";\" + this.fromTime) + \"\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"                + this.toDate","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"                + (this.toTime \u003d\u003d null ? \"\" : \";\" + this.toTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"        String fromString \u003d this.fromDate.getDayOfMonth() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"                + this.fromDate.getMonth().toString() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"                + this.fromDate.getYear()","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"                + (this.fromTime \u003d\u003d null ? \"\" : \" \" + this.fromTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"        String toString \u003d this.toDate.getDayOfMonth() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"                + this.toDate.getMonth().toString() + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"                + this.toDate.getYear()","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"                + (this.toTime \u003d\u003d null ? \"\" : \" \" + this.toTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"        return super.toString() + \" (\" + fromString + \" - \" + toString + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"billyhoce":58}},{"path":"src/main/java/duke/tasks/Savable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * A savable is an object that can be saved to disk, containing information from the interaction with Mean Duke","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public interface Savable {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"     * Produces the string containing interaction data to be stored.","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"     * @return string containing save data","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    String saveString();","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"billyhoce":14}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * This class represents a task that tracks if it is completed.","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public abstract class Task implements Savable {","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"    private static final String DONE_SYMBOL \u003d \"[X]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    private static final String UNDONE_SYMBOL \u003d \"[ ]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    private final String description;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private String taskSymbol;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new Task with the specified description and task symbol.","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"     * @param description textual description of the task","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"     * @param taskSymbol textual symbol that represents the type of Task","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    public Task(String description, String taskSymbol) {","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        assert !description.isEmpty();","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"        this.taskSymbol \u003d taskSymbol;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new Task with the specified description, task symbol and completion state.","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"     * @param description textual description of the task","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"     * @param taskSymbol textual symbol that represents the type of Task","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"     * @param isDone      boolean value that determines if the initialised Task is completed or not","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    public Task(String description, String taskSymbol, Boolean isDone) {","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        assert !description.isEmpty();","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"        this.taskSymbol \u003d taskSymbol;","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"     * Marks this task as done.","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"     * @return true if task was change from not done to done. Else false.","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"    public boolean markDone() {","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"            return false;","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"        } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"            return true;","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"     * Marks this task as not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"     * @return true if task was change from done to not done. Else false.","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"    public boolean unmarkDone() {","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"        if (this.isDone) {","lastModifiedDate":"2024-02-09"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"            this.isDone \u003d false;","lastModifiedDate":"2024-02-09"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"            return true;","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"billyhoce"},"content":"        } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"billyhoce"},"content":"            return false;","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"billyhoce"},"content":"    public String saveString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"billyhoce"},"content":"        return this.description + \"\\n\" + this.isDone;","lastModifiedDate":"2024-02-09"},{"lineNumber":71,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"billyhoce"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":75,"author":{"gitId":"billyhoce"},"content":"        return this.taskSymbol","lastModifiedDate":"2024-02-09"},{"lineNumber":76,"author":{"gitId":"billyhoce"},"content":"                + (this.isDone ? DONE_SYMBOL : UNDONE_SYMBOL)","lastModifiedDate":"2024-02-09"},{"lineNumber":77,"author":{"gitId":"billyhoce"},"content":"                + \" \"","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"billyhoce"},"content":"                + this.description;","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"billyhoce":80}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":" * This class represents a list of Tasks of up to 100 Tasks","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"public class TaskList implements Savable {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    private static final int VISUAL_INDEX_OFFSET \u003d 1;","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     * Constructs a new TaskList with initial capacity of 100","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e(100);","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     * Adds a task to the back of the task list.","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    public void add(Task task) {","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        this.tasks.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"     * Marks the task at the given index as done","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"     * @param index the index of the task to be marked done","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"     * @return true if task was already done, else false","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    public boolean markDone(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"        return this.tasks.get(index).markDone();","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"     * Marks the task at the given index as not done","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"     * @param index the index of the task to be marked not done","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"     * @return true if task was already not done, else false","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"    public boolean unmarkDone(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"        return this.tasks.get(index).unmarkDone();","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"     * Removes the Task at the given index from this list","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"     * @param index The index of the Task to be removed","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"     * @return The String representation of the removed Task","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"    public String delete(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"        String ret \u003d this.tasks.get(index).toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"        return ret;","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"     * Filters the TaskList for Tasks containing the specified String in its fields. Not case-sensitive.","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"billyhoce"},"content":"     * @param filterString String to filter the TaskList by.","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"billyhoce"},"content":"     * @return String representation of the TaskList containing only Tasks who contain filterString.","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"billyhoce"},"content":"    public String filter(String filterString) {","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"billyhoce"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"billyhoce"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2024-02-16"},{"lineNumber":70,"author":{"gitId":"billyhoce"},"content":"            String taskString \u003d this.tasks.get(i).toString();","lastModifiedDate":"2024-02-16"},{"lineNumber":71,"author":{"gitId":"billyhoce"},"content":"            if (taskString.toUpperCase().contains(filterString.toUpperCase())) {","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"billyhoce"},"content":"                sb.append((i + VISUAL_INDEX_OFFSET) + \". \" + this.tasks.get(i) + \"\\n\");","lastModifiedDate":"2024-02-16"},{"lineNumber":73,"author":{"gitId":"billyhoce"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":74,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"billyhoce"},"content":"        return sb.toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":76,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"billyhoce"},"content":"    public String saveString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"billyhoce"},"content":"        String ret \u003d \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"billyhoce"},"content":"        for (Task t : this.tasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":82,"author":{"gitId":"billyhoce"},"content":"            assert !t.saveString().isEmpty();","lastModifiedDate":"2024-02-16"},{"lineNumber":83,"author":{"gitId":"billyhoce"},"content":"            ret \u003d ret + t.saveString() + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"billyhoce"},"content":"        return ret;","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":89,"author":{"gitId":"billyhoce"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"billyhoce"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"billyhoce"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2024-02-16"},{"lineNumber":92,"author":{"gitId":"billyhoce"},"content":"            sb.append((i + VISUAL_INDEX_OFFSET) + \". \" + this.tasks.get(i) + \"\\n\");","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"billyhoce"},"content":"        return sb.toString();","lastModifiedDate":"2024-01-27"},{"lineNumber":95,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"billyhoce":96}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":" * This class represents a basic Task without any time constraints.","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"    private static final String TYPE_SYMBOL \u003d \"[T]\";","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"     * Constructs a basic ToDo task.","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"     * @param description Description of the ToDo Task","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"        super(description, TYPE_SYMBOL);","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"     * Constructs a basic ToDo task.","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"     * @param description Description of the ToDo Task","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"     * @param isDone      boolean value that determines if the initialised ToDo Task is completed or not","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    public ToDo(String description, Boolean isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"        super(description, TYPE_SYMBOL, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    public String saveString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"        return \"TODO\" + \"\\n\" + super.saveString();","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"billyhoce":33}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"380.0\" minHeight\u003d\"10.0\" minWidth\u003d\"380.0\" prefWidth\u003d\"380.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"300.0\" minHeight\u003d\"30.0\" style\u003d\"-fx-background-color: #7a4c0b; -fx-text-fill: #FFFFFF; -fx-label-padding: 10; -fx-background-radius: 20;\" text\u003d\"\u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"   \u003copaqueInsets\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"      \u003cInsets /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"   \u003c/opaqueInsets\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #FBFCEE;\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"6.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"33.0\" prefWidth\u003d\"310.0\" AnchorPane.bottomAnchor\u003d\"9.0\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"      \u003cImageView fitHeight\u003d\"117.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"         \u003cimage\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"            \u003cImage url\u003d\"@../images/MeanDukeBanner.png\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"         \u003c/image\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"      \u003c/ImageView\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"320.0\" layoutY\u003d\"554.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-border-color: #000000; -fx-background-radius: 25; -fx-border-radius: 25; -fx-background-color: #7a4c0b;\" text\u003d\"Send\" textFill\u003d\"WHITE\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"117.0\" prefHeight\u003d\"432.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background: #FBFCEE;\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"billyhoce":30}},{"path":"src/test/java/duke/core/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.core;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"    public void parseAddWithoutType() {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"            TaskList taskList \u003d new TaskList(); //No need for stub as method only passes this instance","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"            Parser.parseAdd(\"WrongType blah blah\", taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"            assertEquals(\"Usage: add \u003ctype\u003e ...\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"    public void parseAddWithoutDesc() {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"            TaskList taskList \u003d new TaskList(); //No need for stub as method only passes this instance","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"            Parser.parseAdd(\"event /from 2023-12-12 /to 2022-12-31\", taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"            assertEquals(\"Usage: add event \u003cdescription\u003e /from \u003cYYYY-MM-DD\u003e [HH:MM] /to \u003cYYYY-MM-DD\u003e [HH:MM]\",","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"                    e.getMessage());","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"billyhoce"},"content":"    public void parseAddWithoutDate() {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"billyhoce"},"content":"            TaskList taskList \u003d new TaskList(); //No need for stub as method only passes this instance","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"billyhoce"},"content":"            Parser.parseAdd(\"event testDesc /from 23:23 /to 2022-12-31\", taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"billyhoce"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"billyhoce"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"billyhoce"},"content":"            assertEquals(\"Usage: add event \u003cdescription\u003e /from \u003cYYYY-MM-DD\u003e [HH:MM] /to \u003cYYYY-MM-DD\u003e [HH:MM]\",","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"billyhoce"},"content":"                    e.getMessage());","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"billyhoce"},"content":"    public void parseAddRandomSpaces() {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"billyhoce"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"billyhoce"},"content":"            TaskList taskList \u003d new TaskList(); //No need for stub as method only passes this instance","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"billyhoce"},"content":"            AddCommand cmd \u003d Parser.parseAdd(","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"billyhoce"},"content":"                    \"event   testDesc  /from   2023-06-07   23:23  /to   2022-12-31  \", taskList);","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"billyhoce"},"content":"            cmd.execute();","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"billyhoce"},"content":"            assertEquals(\"1. [E][ ] testDesc (7 JUNE 2023 23:23 - 31 DECEMBER 2022)\\n\", taskList.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"billyhoce"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"billyhoce"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"billyhoce"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":64}},{"path":"src/test/java/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"billyhoce"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"billyhoce"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"billyhoce"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"billyhoce"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"billyhoce"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"billyhoce"},"content":"    public void saveStringEventTest() {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"billyhoce"},"content":"        Event event \u003d new Event(\"testDesc\",","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"billyhoce"},"content":"                true,","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(\"2023-12-12\"),","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"billyhoce"},"content":"                LocalTime.parse(\"23:23\"),","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(\"2023-01-01\"),","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"billyhoce"},"content":"                LocalTime.parse(\"01:01\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"billyhoce"},"content":"        assertEquals(\"EVENT\\ntestDesc\\ntrue\\n2023-12-12;23:23\\n2023-01-01;01:01\", event.saveString());","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"billyhoce"},"content":"    public void saveStringDeadlineTest() {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"billyhoce"},"content":"        Deadline deadline \u003d new Deadline(\"testDesc\",","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"billyhoce"},"content":"                true,","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"billyhoce"},"content":"                LocalDate.parse(\"2023-12-12\"),","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"billyhoce"},"content":"                LocalTime.parse(\"23:23\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"billyhoce"},"content":"        assertEquals(\"DEADLINE\\ntestDesc\\ntrue\\n2023-12-12;23:23\", deadline.saveString());","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"billyhoce"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"billyhoce"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"billyhoce"},"content":"    public void saveStringTodoTest() {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"billyhoce"},"content":"        ToDo todo \u003d new ToDo(\"testDesc testtest\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"billyhoce"},"content":"        assertEquals(\"TODO\\ntestDesc testtest\\ntrue\", todo.saveString());","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"billyhoce"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"billyhoce"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"billyhoce":37}}]
