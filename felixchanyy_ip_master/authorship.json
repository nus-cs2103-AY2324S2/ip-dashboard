[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"# denify.core.Denify project template","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"3. After that, locate the `src/main/java/denify.core.Denify.java` file, right-click it, and choose `Run denify.core.Denify.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"felixchanyy":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    mainClass.set(\"denify.ui.Launcher\")","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    mainClassName \u003d \u0027denify.ui.Launcher\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"    archiveFileName \u003d \u0027denify-GUI.jar\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-02-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"checkstyle {","lastModifiedDate":"2024-02-12"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":23,"-":40}},{"path":"data/denify.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"T | 1 | list","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"E | 1 | 2 | 2022-02-13 17:00 - 2022-02-13 17:00","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"D | 0 | 2 | 2022-02-13 17:00","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"T | 0 | read","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"T | 0 | read","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"T | 0 | 3123","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"felixchanyy":6}},{"path":"src/main/java/denify/core/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.core;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":" * Enumeration representing valid commands for the Denify application.","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"public enum Command {","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"    BYE, LIST, MARK, UNMARK, FIND, DELETE, TODO, DEADLINE, EVENT","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"felixchanyy":9}},{"path":"src/main/java/denify/core/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.core;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import denify.parser.Parser;","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.storage.Storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Task;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import denify.task.TaskList;","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import denify.ui.Ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * The `CommandHandler` class is responsible for parsing and executing commands in the Denify application.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" * It encapsulates the logic for handling different types of commands.","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"public class CommandHandler {","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    private final TaskList tasks;","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"    private final Storage storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    private final Ui ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `CommandHandler` with the specified dependencies.","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"     * @param tasks   The list of tasks managed by Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"     * @param storage The storage component responsible for loading and saving tasks.","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"     * @param ui      The user interface component for interacting with the user.","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    public CommandHandler(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     * Executes the specified command by parsing it and performing the corresponding action.","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     * @param command The command to be executed.","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     * @param parser  The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the executed command.","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"    public String execute(Command command, Parser parser) {","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"            switch (command) {","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"            case BYE:","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleBye(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"            case LIST:","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleList(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"            case FIND:","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleFind(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"            case MARK:","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleMark(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"            case UNMARK:","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleUnmark(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"            case DELETE:","lastModifiedDate":"2024-02-16"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleDelete(parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"            case TODO:","lastModifiedDate":"2024-02-16"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"            case EVENT:","lastModifiedDate":"2024-02-16"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"                response.append(handleTask(command, parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"            default:","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"                response.append(\"Unable to understand the command. Please enter a valid command.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"                break;","lastModifiedDate":"2024-02-16"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"        } catch (DenifyException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"            response.append(e.getMessage());","lastModifiedDate":"2024-02-16"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"        return response.toString();","lastModifiedDate":"2024-02-16"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"bye\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"bye\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"    private String handleBye(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"        parser.parseBye();","lastModifiedDate":"2024-02-16"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"        return ui.exit();","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"list\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"list\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"    private String handleList(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"        parser.parseList();","lastModifiedDate":"2024-02-16"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"        return ui.showAllTasks(tasks.getTasks());","lastModifiedDate":"2024-02-16"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"find\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"find\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"    private String handleFind(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"        String description \u003d parser.parseFind();","lastModifiedDate":"2024-02-16"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"        return ui.showFoundTasks(tasks.findTasks(description));","lastModifiedDate":"2024-02-16"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":111,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"mark\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":112,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":113,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":114,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"mark\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":115,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":116,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":117,"author":{"gitId":"felixchanyy"},"content":"    private String handleMark(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":118,"author":{"gitId":"felixchanyy"},"content":"        int markIndex \u003d parser.parseMark();","lastModifiedDate":"2024-02-16"},{"lineNumber":119,"author":{"gitId":"felixchanyy"},"content":"        Task markTask \u003d tasks.markTask(markIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":120,"author":{"gitId":"felixchanyy"},"content":"        tasks.saveToStorage(storage);","lastModifiedDate":"2024-02-16"},{"lineNumber":121,"author":{"gitId":"felixchanyy"},"content":"        return ui.showMarkTaskMessage(markTask);","lastModifiedDate":"2024-02-16"},{"lineNumber":122,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":123,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":124,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":125,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"unmark\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":126,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":127,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":128,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"unmark\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":129,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":130,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":131,"author":{"gitId":"felixchanyy"},"content":"    private String handleUnmark(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":132,"author":{"gitId":"felixchanyy"},"content":"        int unmarkIndex \u003d parser.parseUnmark();","lastModifiedDate":"2024-02-16"},{"lineNumber":133,"author":{"gitId":"felixchanyy"},"content":"        Task unmarkTask \u003d tasks.unmarkTask(unmarkIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":134,"author":{"gitId":"felixchanyy"},"content":"        tasks.saveToStorage(storage);","lastModifiedDate":"2024-02-16"},{"lineNumber":135,"author":{"gitId":"felixchanyy"},"content":"        return ui.showUnmarkTaskMessage(unmarkTask);","lastModifiedDate":"2024-02-16"},{"lineNumber":136,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":137,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":138,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":139,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"delete\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":140,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":141,"author":{"gitId":"felixchanyy"},"content":"     * @param parser The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":142,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the \"delete\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":143,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":144,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":145,"author":{"gitId":"felixchanyy"},"content":"    private String handleDelete(Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":146,"author":{"gitId":"felixchanyy"},"content":"        int deleteIndex \u003d parser.parseDelete();","lastModifiedDate":"2024-02-16"},{"lineNumber":147,"author":{"gitId":"felixchanyy"},"content":"        Task deleteTask \u003d tasks.deleteTask(deleteIndex);","lastModifiedDate":"2024-02-16"},{"lineNumber":148,"author":{"gitId":"felixchanyy"},"content":"        tasks.saveToStorage(storage);","lastModifiedDate":"2024-02-16"},{"lineNumber":149,"author":{"gitId":"felixchanyy"},"content":"        return ui.showDeleteTaskMessage(deleteTask, tasks.getTasks().size());","lastModifiedDate":"2024-02-16"},{"lineNumber":150,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":151,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":152,"author":{"gitId":"felixchanyy"},"content":"     * Handles the \"todo\", \"deadline\", and \"event\" commands.","lastModifiedDate":"2024-02-16"},{"lineNumber":153,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":154,"author":{"gitId":"felixchanyy"},"content":"     * @param command The command to be handled.","lastModifiedDate":"2024-02-16"},{"lineNumber":155,"author":{"gitId":"felixchanyy"},"content":"     * @param parser  The parser instance used for parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":156,"author":{"gitId":"felixchanyy"},"content":"     * @return A string representing the response to the task-related command.","lastModifiedDate":"2024-02-16"},{"lineNumber":157,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the command.","lastModifiedDate":"2024-02-16"},{"lineNumber":158,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":159,"author":{"gitId":"felixchanyy"},"content":"    private String handleTask(Command command, Parser parser) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":160,"author":{"gitId":"felixchanyy"},"content":"        Task task;","lastModifiedDate":"2024-02-16"},{"lineNumber":161,"author":{"gitId":"felixchanyy"},"content":"        switch (command) {","lastModifiedDate":"2024-02-16"},{"lineNumber":162,"author":{"gitId":"felixchanyy"},"content":"        case TODO:","lastModifiedDate":"2024-02-16"},{"lineNumber":163,"author":{"gitId":"felixchanyy"},"content":"            task \u003d parser.parseTodo();","lastModifiedDate":"2024-02-16"},{"lineNumber":164,"author":{"gitId":"felixchanyy"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":165,"author":{"gitId":"felixchanyy"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-16"},{"lineNumber":166,"author":{"gitId":"felixchanyy"},"content":"            task \u003d parser.parseDeadline();","lastModifiedDate":"2024-02-16"},{"lineNumber":167,"author":{"gitId":"felixchanyy"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":168,"author":{"gitId":"felixchanyy"},"content":"        case EVENT:","lastModifiedDate":"2024-02-16"},{"lineNumber":169,"author":{"gitId":"felixchanyy"},"content":"            task \u003d parser.parseEvent();","lastModifiedDate":"2024-02-16"},{"lineNumber":170,"author":{"gitId":"felixchanyy"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":171,"author":{"gitId":"felixchanyy"},"content":"        default:","lastModifiedDate":"2024-02-16"},{"lineNumber":172,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Unsupported task command: \" + command.name());","lastModifiedDate":"2024-02-16"},{"lineNumber":173,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":174,"author":{"gitId":"felixchanyy"},"content":"        tasks.addTask(task);","lastModifiedDate":"2024-02-16"},{"lineNumber":175,"author":{"gitId":"felixchanyy"},"content":"        tasks.saveToStorage(storage);","lastModifiedDate":"2024-02-16"},{"lineNumber":176,"author":{"gitId":"felixchanyy"},"content":"        return ui.showAddTaskMessage(task, tasks.getTasks().size());","lastModifiedDate":"2024-02-16"},{"lineNumber":177,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":178,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"felixchanyy":178}},{"path":"src/main/java/denify/core/Denify.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.core;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import denify.parser.Parser;","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.storage.Storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import denify.task.TaskList;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import denify.ui.Ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":" * The `Denify` class represents the main application that manages tasks.","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * It handles user interactions, parses commands, and performs operations on tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"public class Denify {","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    private static final String DATA_DIRECTORY \u003d \"./data/\";","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    private static final String FILENAME \u003d \"denify.txt\";","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"    private final Ui ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    private final CommandHandler commandHandler;","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Denify` instance with the specified file path for storage.","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    public Denify() {","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"        Storage storage \u003d new Storage(DATA_DIRECTORY + FILENAME);","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"        TaskList tasks;","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"        } catch (DenifyException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"            ui.displayError(e.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"        this.commandHandler \u003d new CommandHandler(tasks, ui, storage);","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     * Processes the user input and returns the response.","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     * @param msg The user input message.","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"     * @return The response to the user input.","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    public String getResponse(String msg) {","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(msg);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"            Command command \u003d parser.parseCommand();","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"            assert command !\u003d null : \"Command must not be null\";","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"            response.append(commandHandler.execute(command, parser));","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"        } catch (DenifyException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"            response.append(e.getMessage());","lastModifiedDate":"2024-02-12"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"        return response.toString();","lastModifiedDate":"2024-02-12"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     * Initializes the Denify application, greets the user, and starts command processing.","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    public void run() {","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        String msg \u003d ui.getInput();","lastModifiedDate":"2024-02-12"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"        this.getResponse(msg);","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"     * Main method to launch the Denify application.","lastModifiedDate":"2024-02-16"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"        new Denify().run();","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"felixchanyy":63,"-":3}},{"path":"src/main/java/denify/exception/DenifyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.exception;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":" * The `DenifyException` class represents an exception specific to the Denify application.","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":" * It extends the general `Exception` class to handle custom exceptions within Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"public class DenifyException extends Exception {","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `DenifyException` with the specified error message.","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"    public DenifyException(String message) {","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"        super(message);","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"felixchanyy":16}},{"path":"src/main/java/denify/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.parser;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import denify.core.Command;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Deadline;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Event;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Todo;","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":" * The `Parser` class handles the parsing of user commands in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * It interprets commands and converts them into corresponding Denify actions.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"public class Parser {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"     * The command to be parsed.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    private final String rawInput;","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Parser` with the given command.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"     * @param rawInput The command to be parsed.","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    public Parser(String rawInput) {","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"        assert rawInput !\u003d null : \"Raw input must not be null\";","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"        this.rawInput \u003d rawInput;","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     * Parses the command and returns the corresponding Command enum value.","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"     * @return The Command enum value representing the parsed command.","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is not recognized or is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"    public Command parseCommand() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d rawInput.split(\" \", 2);","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"        String commandString \u003d parts[0].trim().toUpperCase();","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"        for (Command cmd : Command.values()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"            if (cmd.name().equals(commandString)) {","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"                return cmd;","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"        throw new DenifyException(\"Invalid command. Please use a valid command such as \u0027bye\u0027, \u0027list\u0027, \u0027find\u0027, \"","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"                + \"\u0027delete\u0027, \u0027mark\u0027, \u0027unmark\u0027, \u0027event\u0027, \u0027todo\u0027, or \u0027deadline\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"     * Parses the \"bye\" command.","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the input is not a valid \"bye\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"    public void parseBye() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d rawInput.split(\" \");","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"        if (parts.length !\u003d 1 || !parts[0].equalsIgnoreCase(Command.BYE.name())) {","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027bye\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"     * Parses the \"list\" command.","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the input is not a valid \"list\" command.","lastModifiedDate":"2024-02-16"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"    public void parseList() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d rawInput.split(\" \");","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        if (parts.length !\u003d 1 || !parts[0].equalsIgnoreCase(Command.LIST.name())) {","lastModifiedDate":"2024-02-16"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027list\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"     * Parses the \"find\" command to search for tasks with a keyword.","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"     * @return The keyword to search for.","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command format is invalid.","lastModifiedDate":"2024-02-16"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"    public String parseFind() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d rawInput.split(\" \", 2);","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"        if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027find \u003ckeyword\u003e\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"        return parts[1].trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"     * Parses the delete command and returns the index of the task to be deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"     * @return The index of the task to be deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"    public int parseDelete() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d rawInput.split(\" \");","lastModifiedDate":"2024-02-16"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"        if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-12"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"            String index \u003d parts[1].trim();","lastModifiedDate":"2024-02-12"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"                return Integer.parseInt(index) - 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"                throw new DenifyException(\"Invalid format. Please use integers only.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027delete \u003cindex\u003e\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"     * Parses the mark command and returns the index of the task to be marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"     * @return The index of the task to be marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"    public int parseMark() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"        String[] part \u003d rawInput.split(\" \");","lastModifiedDate":"2024-02-16"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"        if (part.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"            String index \u003d part[1].trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"                return Integer.parseInt(index) - 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"felixchanyy"},"content":"                throw new DenifyException(\"Invalid format. Please use integers only.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":112,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":113,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":114,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027mark \u003cindex\u003e\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":115,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":116,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":117,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"felixchanyy"},"content":"     * Parses the unmark command and returns the index of the task to be marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"felixchanyy"},"content":"     * @return The index of the task to be marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":122,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"felixchanyy"},"content":"    public int parseUnmark() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":124,"author":{"gitId":"felixchanyy"},"content":"        String[] part \u003d rawInput.split(\" \");","lastModifiedDate":"2024-02-16"},{"lineNumber":125,"author":{"gitId":"felixchanyy"},"content":"        if (part.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":126,"author":{"gitId":"felixchanyy"},"content":"            String index \u003d part[1].trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":127,"author":{"gitId":"felixchanyy"},"content":"            try {","lastModifiedDate":"2024-02-01"},{"lineNumber":128,"author":{"gitId":"felixchanyy"},"content":"                return Integer.parseInt(index) - 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":129,"author":{"gitId":"felixchanyy"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":130,"author":{"gitId":"felixchanyy"},"content":"                throw new DenifyException(\"Invalid format. Please use integers only.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":131,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":132,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":133,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027unmark \u003cindex\u003e\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":134,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":135,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":136,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"felixchanyy"},"content":"     * Parses the event command and returns the corresponding Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":139,"author":{"gitId":"felixchanyy"},"content":"     * @return The Event created based on the event command.","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":141,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":142,"author":{"gitId":"felixchanyy"},"content":"    public Event parseEvent() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":143,"author":{"gitId":"felixchanyy"},"content":"        String input \u003d rawInput.substring(Command.EVENT.name().length()).trim();","lastModifiedDate":"2024-02-16"},{"lineNumber":144,"author":{"gitId":"felixchanyy"},"content":"        int byIndex \u003d input.indexOf(\" /from \");","lastModifiedDate":"2024-02-01"},{"lineNumber":145,"author":{"gitId":"felixchanyy"},"content":"        if (byIndex !\u003d 0 \u0026\u0026 byIndex !\u003d -1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":146,"author":{"gitId":"felixchanyy"},"content":"            String description \u003d input.substring(0, byIndex).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":147,"author":{"gitId":"felixchanyy"},"content":"            String fromTo \u003d input.substring(byIndex + 6).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":148,"author":{"gitId":"felixchanyy"},"content":"            String[] part \u003d fromTo.split(\" /to \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":149,"author":{"gitId":"felixchanyy"},"content":"            if (part.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-01"},{"lineNumber":150,"author":{"gitId":"felixchanyy"},"content":"                String from \u003d part[0].trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":151,"author":{"gitId":"felixchanyy"},"content":"                String to \u003d part[1].trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":152,"author":{"gitId":"felixchanyy"},"content":"                return new Event(description, from, to);","lastModifiedDate":"2024-02-01"},{"lineNumber":153,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":154,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":155,"author":{"gitId":"felixchanyy"},"content":"        throw new DenifyException(\"Invalid format. Please use \u0027event \u003cdescription\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e\u0027.\\n\"","lastModifiedDate":"2024-02-16"},{"lineNumber":156,"author":{"gitId":"felixchanyy"},"content":"                + \" Datetime format: \u003cyyyy-MM-dd HH:mm\u003e.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":157,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":158,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":159,"author":{"gitId":"felixchanyy"},"content":"     * Parses the todo command and returns the corresponding Todo.","lastModifiedDate":"2024-02-04"},{"lineNumber":160,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":161,"author":{"gitId":"felixchanyy"},"content":"     * @return The Todo created based on the todo command.","lastModifiedDate":"2024-02-04"},{"lineNumber":162,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":163,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":164,"author":{"gitId":"felixchanyy"},"content":"    public Todo parseTodo() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":165,"author":{"gitId":"felixchanyy"},"content":"        String input \u003d rawInput.substring(Command.TODO.name().length()).trim();","lastModifiedDate":"2024-02-16"},{"lineNumber":166,"author":{"gitId":"felixchanyy"},"content":"        String description \u003d input.trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":167,"author":{"gitId":"felixchanyy"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":168,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027todo \u003cdescription\u003e\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":169,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":170,"author":{"gitId":"felixchanyy"},"content":"        return new Todo(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":171,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":172,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":173,"author":{"gitId":"felixchanyy"},"content":"     * Parses the deadline command and returns the corresponding Deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":174,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":175,"author":{"gitId":"felixchanyy"},"content":"     * @return The Deadline created based on the deadline command.","lastModifiedDate":"2024-02-04"},{"lineNumber":176,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the command is in an invalid format.","lastModifiedDate":"2024-02-16"},{"lineNumber":177,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":178,"author":{"gitId":"felixchanyy"},"content":"    public Deadline parseDeadline() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":179,"author":{"gitId":"felixchanyy"},"content":"        String input \u003d rawInput.substring(Command.DEADLINE.name().length()).trim();","lastModifiedDate":"2024-02-16"},{"lineNumber":180,"author":{"gitId":"felixchanyy"},"content":"        int byIndex \u003d input.indexOf(\" /by \");","lastModifiedDate":"2024-02-01"},{"lineNumber":181,"author":{"gitId":"felixchanyy"},"content":"        if (byIndex !\u003d 0 \u0026\u0026 byIndex !\u003d -1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":182,"author":{"gitId":"felixchanyy"},"content":"            String description \u003d input.substring(0, byIndex).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":183,"author":{"gitId":"felixchanyy"},"content":"            String by \u003d input.substring(byIndex + 4).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":184,"author":{"gitId":"felixchanyy"},"content":"            return new Deadline(description, by);","lastModifiedDate":"2024-02-01"},{"lineNumber":185,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":186,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid format. Please use \u0027deadline \u003cdescription\u003e /by \u003cdatetime\u003e\u0027.\\n\"","lastModifiedDate":"2024-02-16"},{"lineNumber":187,"author":{"gitId":"felixchanyy"},"content":"                    + \" Datetime format: \u003cyyyy-MM-dd HH:mm\u003e.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":188,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":189,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":190,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"felixchanyy":190}},{"path":"src/main/java/denify/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Deadline;","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Event;","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Task;","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Todo;","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":" * The `Storage` class manages the loading and saving of tasks from/to a file in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":" * It interacts with the file system to store and retrieve tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"public class Storage {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"     * The file path for storing tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    protected Path filePath;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     * Indicates whether the warning about potential overwriting has been printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    private boolean isWarningPrinted \u003d false;","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Storage` with the given file path.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     * @param filePath The file path for storing tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"        assert filePath !\u003d null : \"File path must not be null\";","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"        this.filePath \u003d Paths.get(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"     * Prints a warning about potential overwriting of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"    private void printWarning() {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"        if (!isWarningPrinted) {","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"            System.err.println(\"Warning: Invalid input will be ignored and overwritten after new task is added.\\n\"","lastModifiedDate":"2024-02-12"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"                    + \"To prevent overwriting, type \u0027bye\u0027 to quit.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"            isWarningPrinted \u003d true;","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"     * Prepares the task file by creating directories and the file if they do not exist.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue preparing the file.","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    private void prepareFile() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"            if (!Files.exists(filePath)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"                Files.createDirectories(filePath.getParent());","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Unable to create task file in \" + this.filePath);","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"     * Loads tasks from the task file.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"     * @return The list of tasks loaded from the task file.","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue loading tasks.","lastModifiedDate":"2024-02-16"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"        prepareFile();","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"        try (Scanner myScannerObj \u003d new Scanner(filePath)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"            int lineNumber \u003d 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"            while (myScannerObj.hasNext()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"                String line \u003d myScannerObj.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"                try {","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"                    Task t \u003d this.load(line);","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"                    tasks.add(t);","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"                } catch (DenifyException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"                    printWarning();","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"                    System.err.println(lineNumber + \": \" + e.getMessage());","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"                lineNumber++;","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Unable to load tasks from task file.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"        return tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"     * Saves tasks to the task file.","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue saving tasks.","lastModifiedDate":"2024-02-16"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"        prepareFile();","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"            for (Task t : tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"                lines.add(t.toFileString());","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"            Files.write(filePath, lines, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);","lastModifiedDate":"2024-01-31"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Unable to save tasks to task file.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"     * Loads a task from a string representation.","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"felixchanyy"},"content":"     * @param line The string representation of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"felixchanyy"},"content":"     * @return The Task object created from the string representation.","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue loading the task.","lastModifiedDate":"2024-02-16"},{"lineNumber":115,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"felixchanyy"},"content":"    public Task load(String line) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":117,"author":{"gitId":"felixchanyy"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"felixchanyy"},"content":"        if (parts.length \u003c 3 || !parts[1].matches(\"[01]\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":119,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid task format. Please check the task file.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":120,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":121,"author":{"gitId":"felixchanyy"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2024-02-01"},{"lineNumber":122,"author":{"gitId":"felixchanyy"},"content":"        boolean isDone \u003d Integer.parseInt(parts[1]) \u003d\u003d 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":123,"author":{"gitId":"felixchanyy"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2024-02-01"},{"lineNumber":124,"author":{"gitId":"felixchanyy"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-01"},{"lineNumber":125,"author":{"gitId":"felixchanyy"},"content":"        case \"T\":","lastModifiedDate":"2024-02-01"},{"lineNumber":126,"author":{"gitId":"felixchanyy"},"content":"            Task tT \u003d new Todo(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":127,"author":{"gitId":"felixchanyy"},"content":"            tT.setDone(isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":128,"author":{"gitId":"felixchanyy"},"content":"            return tT;","lastModifiedDate":"2024-02-01"},{"lineNumber":129,"author":{"gitId":"felixchanyy"},"content":"        case \"D\":","lastModifiedDate":"2024-02-01"},{"lineNumber":130,"author":{"gitId":"felixchanyy"},"content":"            Task tD \u003d new Deadline(description, parts[3]);","lastModifiedDate":"2024-02-01"},{"lineNumber":131,"author":{"gitId":"felixchanyy"},"content":"            tD.setDone(isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":132,"author":{"gitId":"felixchanyy"},"content":"            return tD;","lastModifiedDate":"2024-02-01"},{"lineNumber":133,"author":{"gitId":"felixchanyy"},"content":"        case \"E\":","lastModifiedDate":"2024-02-01"},{"lineNumber":134,"author":{"gitId":"felixchanyy"},"content":"            String[] time \u003d parts[3].split(\" - \");","lastModifiedDate":"2024-02-01"},{"lineNumber":135,"author":{"gitId":"felixchanyy"},"content":"            if (!(time.length \u003d\u003d 2)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":136,"author":{"gitId":"felixchanyy"},"content":"                throw new DenifyException(\"Invalid time format. \"","lastModifiedDate":"2024-02-16"},{"lineNumber":137,"author":{"gitId":"felixchanyy"},"content":"                        + \"Please use \u003cdatetime\u003e - \u003cdatetime\u003e\");","lastModifiedDate":"2024-02-12"},{"lineNumber":138,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"felixchanyy"},"content":"            Task tE \u003d new Event(description, time[0], time[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":140,"author":{"gitId":"felixchanyy"},"content":"            tE.setDone(isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":141,"author":{"gitId":"felixchanyy"},"content":"            return tE;","lastModifiedDate":"2024-02-01"},{"lineNumber":142,"author":{"gitId":"felixchanyy"},"content":"        default:","lastModifiedDate":"2024-02-01"},{"lineNumber":143,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid task type \" + taskType);","lastModifiedDate":"2024-02-16"},{"lineNumber":144,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":145,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"felixchanyy":146}},{"path":"src/main/java/denify/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * The `Deadline` class represents a task with a specific deadline in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"     * The formatted string representation of the deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    protected String by;","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * The input date-time formatter.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    protected DateTimeFormatter input \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"     * The output date-time formatter for display.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    protected DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Deadline` with the given description and deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"     * @param by The deadline in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the deadline or the format is invalid.","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"    public Deadline(String description, String by) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(by, input);","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"            this.by \u003d date.format(output);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid time format. Please use yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"     * Returns a string representation of the deadline task, including its status icon and the deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"     * @return String representation of the deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-01-24"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     * Returns a formatted string for writing the deadline task to a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"     * @return Formatted string for file representation.","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"        return \"D\" + super.toFileString() + \" | \" + LocalDateTime.parse(by, output).format(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"     * Indicates whether some other object is \"equal to\" this one. Equality is based on task properties.","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"     * @param obj The reference object with which to compare.","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"     * @return True if this object is the same as the obj argument; false otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"            return true;","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"            return false;","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"        Deadline deadline \u003d (Deadline) obj;","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"        return this.isDone \u003d\u003d deadline.isDone","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.description.equals(deadline.description)","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.by.equals(deadline.by);","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"     * Returns a hash code value for the object.","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"     * @return A hash code value for this object.","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"    public int hashCode() {","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"        return Objects.hash(this.description, this.isDone, this.by);","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"felixchanyy":88}},{"path":"src/main/java/denify/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * The `Event` class represents a task that spans a specific duration in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"     * The formatted string representation of the start time.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    protected String from;","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * The formatted string representation of the end time.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    protected String to;","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"     * The input date-time formatter.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    protected DateTimeFormatter input \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     * The output date-time formatter for display.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    protected DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     * Constructs an `Event` with the given description, start time, and end time.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     * @param description The description of the event.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     * @param from The start time of the event in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     * @param to The end time of the event in yyyy-MM-dd HH:mm format.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue parsing the time or the format is invalid.","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"    public Event(String description, String from, String to) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"            LocalDateTime date1 \u003d LocalDateTime.parse(from, input);","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"            LocalDateTime end1 \u003d LocalDateTime.parse(to, input);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"            this.from \u003d date1.format(output);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"            this.to \u003d end1.format(output);","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"            if (!isBeforeDateTime(date1, end1)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"                throw new DenifyException(\"Invalid date range. \u0027From\u0027 should be before \u0027To\u0027.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"        } catch (DateTimeParseException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Invalid time format. Please use yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     * Checks if the start date and time is before or equal to the end date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"     * @param from The start date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"     * @param to   The end date and time.","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"     * @return True if the start date and time is before or equal to the end date and time, false otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"    private boolean isBeforeDateTime(LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"        return from.isBefore(to) || from.isEqual(to);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"     * Returns a string representation of the event task, including its status icon and the start and end times.","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"     * @return String representation of the event task.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"     * Returns a formatted string for writing the event task to a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"     * @return Formatted string for file representation.","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"        return \"E\" + super.toFileString() + \" | \" + LocalDateTime.parse(this.from, output).format(input) + \" - \"","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"                + LocalDateTime.parse(this.to, output).format(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"     * Indicates whether some other object is \"equal to\" this one. Equality is based on task properties.","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"     * @param obj The reference object with which to compare.","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"     * @return True if this object is the same as the obj argument; false otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"            return true;","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"            return false;","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"        Event event \u003d (Event) obj;","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"        return this.isDone \u003d\u003d event.isDone","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.description.equals(event.description)","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.from.equals(event.from)","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.to.equals(event.to);","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"     * Returns a hash code value for the object.","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"     * @return A hash code value for this object.","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"    public int hashCode() {","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"        return Objects.hash(this.description, this.isDone, this.from, this.to);","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"felixchanyy":110}},{"path":"src/main/java/denify/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":" * The `Task` class represents a generic task in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"public class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"     * The description of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"     * A flag indicating whether the task is done or not.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Task` with the given description.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"     * Sets the task\u0027s done status.","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     * @param done True if the task is done, false otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     * Retrieves the status icon for the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     * @return \"X\" if the task is done, \" \" otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-23"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"     * Retrieves the status symbol for the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"     * @return \"1\" if the task is done, \"0\" otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"    private String getStatusSymbol() {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"        return (this.isDone ? \"1\" : \"0\");","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"        return this.description;","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"     * Returns a string representation of the task for display.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string with task status and description.","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-23"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"     * Returns a string representation of the task for storage in a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string with task status and description for file storage.","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"        return \" | \" + this.getStatusSymbol() + \" | \" + this.description;","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"felixchanyy":73}},{"path":"src/main/java/denify/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import denify.storage.Storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":" * The `TaskList` class represents a list of tasks in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"public class TaskList {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"     * The `ArrayList` that stores the tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `TaskList` with the given `ArrayList` of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     * @param tasks The `ArrayList` of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"        assert tasks !\u003d null : \"Task list must not be null\";","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"     * Constructs an empty `TaskList`.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     * Saves the tasks in the `TaskList` to the provided `Storage`.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"     * @param storage The `Storage` object to save tasks to.","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If there is an issue saving tasks to storage.","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"    public void saveToStorage(Storage storage) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        assert storage !\u003d null : \"Storage must not be null\";","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"     * Retrieves the `ArrayList` of tasks from the `TaskList`.","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"     * @return The `ArrayList` of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"        return tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"     * Finds tasks containing the specified keyword.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     * @return A list of tasks containing the keyword.","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"    public ArrayList\u003cTask\u003e findTasks(String keyword) {","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"                foundTasks.add(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        return foundTasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"     * Adds a task to the `TaskList`.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"     * Deletes a task from the `TaskList` by index.","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"     * @return The deleted task.","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the specified task index is out of bounds.","lastModifiedDate":"2024-02-16"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"    public Task deleteTask(int taskIndex) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"            return tasks.remove(taskIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Task not found.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"     * Marks a task as done by index.","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"     * @param taskIndex The index of the task to be marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"     * @return The task marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the specified task index is out of bounds.","lastModifiedDate":"2024-02-16"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"    public Task markTask(int taskIndex) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"            task.setDone(true);","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"            return task;","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Task not found.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"     * Marks a task as not done by index.","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"     * @param taskIndex The index of the task to be marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"     * @return The task marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"     * @throws DenifyException If the specified task index is out of bounds.","lastModifiedDate":"2024-02-16"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"    public Task unmarkTask(int taskIndex) throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"felixchanyy"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"felixchanyy"},"content":"            task.setDone(false);","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"felixchanyy"},"content":"            return task;","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":115,"author":{"gitId":"felixchanyy"},"content":"            throw new DenifyException(\"Task not found.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":116,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":117,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"felixchanyy":118}},{"path":"src/main/java/denify/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":" * The `Todo` class represents a basic task without a specific deadline or duration in Denify.","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"     * Constructs a `Todo` with the given description.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"     * @param description The description of the todo.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"     * Returns a string representation of the todo task, including its status icon.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     * @return String representation of the todo task.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"     * Returns a formatted string for writing the todo task to a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"     * @return Formatted string for file representation.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"        return \"T\" + super.toFileString();","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     * Indicates whether some other object is \"equal to\" this one. Equality is based on task properties.","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"     * @param obj The reference object with which to compare.","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"     * @return True if this object is the same as the obj argument; false otherwise.","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"            return true;","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"            return false;","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        Todo todo \u003d (Todo) obj;","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"        return this.isDone \u003d\u003d todo.isDone","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"                \u0026\u0026 this.description.equals(todo.description);","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"     * Returns a hash code value for the object.","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"     * @return A hash code value for this object.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"    public int hashCode() {","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"        return Objects.hash(this.description, this.isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"felixchanyy":63}},{"path":"src/main/java/denify/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-12"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"    private void flip() {","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-12"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-12"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-12"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-12"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-12"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"    public static DialogBox getDenifyDialog(String text, Image img) {","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-12"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"        db.flip();","lastModifiedDate":"2024-02-12"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        return db;","lastModifiedDate":"2024-02-12"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":57}},{"path":"src/main/java/denify/ui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"public class Launcher {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":12}},{"path":"src/main/java/denify/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.core.Denify;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":" * A GUI for Denify using FXML.","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"    private final Denify denify \u003d new Denify();","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"        try {","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDenify(denify);","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"            stage.show();","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":32}},{"path":"src/main/java/denify/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import denify.core.Denify;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-12"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"    private Denify denify;","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"            \"/images/DaUser.png\")));","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"    private final Image denifyImage \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"            \"/images/DaDenify.png\")));","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"     * Initializes the main window.","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"     * Binds the scroll pane to the height of the dialog container.","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"     * Adds a welcome message from Denify to the dialog container.","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-12"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"        String input \u003d \"Hello! I\u0027m Denify\\n\" + \"What can I do for you?\";","lastModifiedDate":"2024-02-12"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"                DialogBox.getDenifyDialog(input, denifyImage)","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"        );","lastModifiedDate":"2024-02-12"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    public void setDenify(Denify d) {","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"        denify \u003d d;","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Denify\u0027s reply and then appends them to","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-12"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    @FXML","lastModifiedDate":"2024-02-12"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-12"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"        String response \u003d denify.getResponse(input);","lastModifiedDate":"2024-02-16"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-12"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-12"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"                DialogBox.getDenifyDialog(response, denifyImage)","lastModifiedDate":"2024-02-16"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"        );","lastModifiedDate":"2024-02-12"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-12"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"            Platform.exit();","lastModifiedDate":"2024-02-12"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":67}},{"path":"src/main/java/denify/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Task;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":" * The `Ui` class handles user interaction and provides formatted output.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":" * It includes methods for greeting the user, formatting replies, displaying errors,","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":" * and obtaining user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"public class Ui {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"     * Horizontal line used for formatting output.","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"     * Scanner object for reading user input.","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"    private final Scanner scanner;","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"     * Constructs an `Ui` object and initializes the Scanner for user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    public Ui() {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"     * Formats and prints an error message to the console.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"     * @param raw The raw error message to be formatted and displayed.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"    public void formatError(String raw) {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"        System.err.println(HORIZONTAL_LINE + \" \" + raw + \"\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"     * Displays a farewell message to the user upon exiting the application.","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted farewell message.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"    public String exit() {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string containing the matching tasks and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"     * @param foundTasks The list of matching tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string containing the matching tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    public String showFoundTasks(ArrayList\u003cTask\u003e foundTasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"        if (foundTasks.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"            result.append(\"No matching tasks found.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"            result.append(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"            int taskCount \u003d 1;","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"            for (Task task : foundTasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"                result.append(\"\\n \").append(taskCount).append(\".\").append(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"                taskCount++;","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"        return result.toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string containing the list of tasks and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"     * @param tasks The ArrayList of tasks to be displayed.","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string containing the list of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"    public String showAllTasks(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"            result.append(\"There are no tasks in the list.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"            result.append(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"            int taskCount \u003d 1;","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"                result.append(\"\\n \").append(taskCount).append(\".\").append(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"                taskCount++;","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"        return result.toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string for marking a task as not done and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"     * @param task The task to be marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string confirming the task has been marked as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"    public String showUnmarkTaskMessage(Task task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + \"   \" + task;","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string for marking a task as done and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"     * @param task The task to be marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string confirming the task has been marked as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"felixchanyy"},"content":"    public String showMarkTaskMessage(Task task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"felixchanyy"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"   \" + task;","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string for adding a task and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"felixchanyy"},"content":"     * @param task The task that has been added.","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"felixchanyy"},"content":"     * @param taskCount The current count of tasks in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string confirming the addition of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"felixchanyy"},"content":"    public String showAddTaskMessage(Task task, int taskCount) {","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"felixchanyy"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + \"   \" + task + \"\\n\"","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"felixchanyy"},"content":"                + \" Now you have \" + taskCount + \" task(s) in the list.\";","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"felixchanyy"},"content":"     * Generates a formatted string for deleting a task and returns the result.","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"felixchanyy"},"content":"     * @param task The task that has been deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"felixchanyy"},"content":"     * @param taskCount The current count of tasks in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"felixchanyy"},"content":"     * @return A formatted string confirming the deletion of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"felixchanyy"},"content":"    public String showDeleteTaskMessage(Task task, int taskCount) {","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"felixchanyy"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + \"   \" + task + \"\\n\"","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"felixchanyy"},"content":"                + \" Now you have \" + taskCount + \" task(s) in the list.\";","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":125,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":126,"author":{"gitId":"felixchanyy"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":128,"author":{"gitId":"felixchanyy"},"content":"     * @param errorMessage The error message to be displayed.","lastModifiedDate":"2024-02-04"},{"lineNumber":129,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":130,"author":{"gitId":"felixchanyy"},"content":"    public void displayError(String errorMessage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":131,"author":{"gitId":"felixchanyy"},"content":"        this.formatError(\"Error: \" + errorMessage);","lastModifiedDate":"2024-02-01"},{"lineNumber":132,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":133,"author":{"gitId":"felixchanyy"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":134,"author":{"gitId":"felixchanyy"},"content":"     * Retrieves user input from the console.","lastModifiedDate":"2024-02-04"},{"lineNumber":135,"author":{"gitId":"felixchanyy"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":136,"author":{"gitId":"felixchanyy"},"content":"     * @return The user\u0027s input as a String.","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"felixchanyy"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"felixchanyy"},"content":"    public String getInput() {","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"felixchanyy"},"content":"        return scanner.nextLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":141,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"felixchanyy":141}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"denify.ui.MainWindow\"\u003e","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"felixchanyy":19}},{"path":"src/test/java/denify/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.parser;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Deadline;","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Event;","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"import denify.task.Todo;","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":" * Unit tests for the Parser class.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"    public void parseDelete_validInput_correctDeleteTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"delete 2\");","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"        int result \u003d parser.parseDelete();","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(1, result);","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"    public void parseMark_validInput_correctMarkTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"mark 3\");","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"        int result \u003d parser.parseMark();","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(2, result);","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"    public void parseUnMark_validInput_correctUnmarkTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"unmark 4\");","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"        int result \u003d parser.parseUnmark();","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(3, result);","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"    public void parseEvent_validInput_correctEventTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"event Meeting /from 2022-02-14 13:00 /to 2022-02-14 14:00\");","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"        Event result \u003d parser.parseEvent();","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(new Event(\"Meeting\", \"2022-02-14 13:00\", \"2022-02-14 14:00\"), result);","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    public void parseTodo_validInput_correctTodoTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"todo Borrow Book\");","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"        Todo result \u003d parser.parseTodo();","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(new Todo(\"Borrow Book\"), result);","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    public void parseDeadline_validInput_correctDeadlineTask() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"deadline Assignment /by 2022-03-01 23:59\");","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"        Deadline result \u003d parser.parseDeadline();","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(new Deadline(\"Assignment\", \"2022-03-01 23:59\"), result);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"    public void parseEvent_invalidFormat_throwsDenifyExceptionInvalidEventFormat() {","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"event Meeting /from 2022-02-28 18:00 /to blah\");","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, parser::parseEvent);","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"    public void parseTodo_invalidFormat_throwsDenifyExceptionInvalidTodoFormat() {","lastModifiedDate":"2024-02-16"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"todo \");","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, parser::parseTodo);","lastModifiedDate":"2024-02-16"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"    public void parseDeadline_invalidFormat_throwsDenifyExceptionInvalidDeadlineFormat() {","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"        Parser parser \u003d new Parser(\"deadline Assignment /by blah\");","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, parser::parseDeadline);","lastModifiedDate":"2024-02-16"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"felixchanyy":77}},{"path":"src/test/java/denify/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"package denify.task;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"import denify.exception.DenifyException;","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"felixchanyy"},"content":"import denify.ui.Ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"felixchanyy"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":" * Unit tests for the TaskList class.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"felixchanyy"},"content":"    public void addTask_validInput_addsTaskSuccessfully() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"felixchanyy"},"content":"        Task task \u003d new Todo(\"Read Book\");","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"felixchanyy"},"content":"        taskList.addTask(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"        Ui testUi \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"felixchanyy"},"content":"        String result \u003d testUi.showAddTaskMessage(task, taskList.getTasks().size());","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(\"Got it. I\u0027ve added this task:\\n   \"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"felixchanyy"},"content":"                + task","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"felixchanyy"},"content":"                + \"\\n Now you have 1 task(s) in the list.\", result);","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(1, taskList.getTasks().size());","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"felixchanyy"},"content":"    public void deleteTask_validIndex_deletesTaskSuccessfully() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"felixchanyy"},"content":"        Task t1 \u003d new Todo(\"Read Book\");","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"felixchanyy"},"content":"        taskList.addTask(t1);","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"felixchanyy"},"content":"        Task t2 \u003d taskList.deleteTask(0);","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"felixchanyy"},"content":"        Ui testUi \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"felixchanyy"},"content":"        String result \u003d testUi.showDeleteTaskMessage(t2, taskList.getTasks().size());","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(\"Noted. I\u0027ve removed this task:\\n   \"","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"felixchanyy"},"content":"                + t1","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"felixchanyy"},"content":"                + \"\\n Now you have 0 task(s) in the list.\", result);","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(0, taskList.getTasks().size());","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"felixchanyy"},"content":"    public void deleteTask_invalidIndex_throwsDenifyException() {","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, () -\u003e taskList.deleteTask(0));","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"felixchanyy"},"content":"    public void printList_emptyList_returnsNoTasksMessage() {","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"felixchanyy"},"content":"        Ui testUi \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"felixchanyy"},"content":"        String result \u003d testUi.showAllTasks(taskList.getTasks());","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(\"There are no tasks in the list.\", result);","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"felixchanyy"},"content":"    public void markTask_validIndex_marksAsDoneSuccessfully() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":63,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"felixchanyy"},"content":"        Task t1 \u003d new Todo(\"Read Book\");","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"felixchanyy"},"content":"        taskList.addTask(t1);","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"felixchanyy"},"content":"        Task t2 \u003d taskList.markTask(0);","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"felixchanyy"},"content":"        Ui testUi \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"felixchanyy"},"content":"        String result \u003d testUi.showMarkTaskMessage(t2);","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n   \" + t1, result);","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"felixchanyy"},"content":"        assertTrue(taskList.getTasks().get(0).isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"felixchanyy"},"content":"    public void markTask_invalidIndex_throwsDenifyException() {","lastModifiedDate":"2024-02-16"},{"lineNumber":75,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, () -\u003e taskList.markTask(0));","lastModifiedDate":"2024-02-16"},{"lineNumber":77,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"felixchanyy"},"content":"    public void unmarkTask_validIndex_marksAsNotDoneSuccessfully() throws DenifyException {","lastModifiedDate":"2024-02-16"},{"lineNumber":81,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"felixchanyy"},"content":"        Task t1 \u003d new Todo(\"Read Book\");","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"felixchanyy"},"content":"        taskList.addTask(t1);","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"felixchanyy"},"content":"        Task t2 \u003d taskList.unmarkTask(0);","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"felixchanyy"},"content":"        Ui testUi \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"felixchanyy"},"content":"        String result \u003d testUi.showUnmarkTaskMessage(t2);","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"felixchanyy"},"content":"        assertEquals(\"OK, I\u0027ve marked this task as not done yet:\\n   \" + t1, result);","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"felixchanyy"},"content":"        assertFalse(taskList.getTasks().get(0).isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"felixchanyy"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"felixchanyy"},"content":"    public void unmarkTask_invalidIndex_throwsDenifyException() {","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"felixchanyy"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"felixchanyy"},"content":"        assertThrows(DenifyException.class, () -\u003e taskList.unmarkTask(0));","lastModifiedDate":"2024-02-16"},{"lineNumber":95,"author":{"gitId":"felixchanyy"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"felixchanyy"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"felixchanyy":97}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"felixchanyy"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"felixchanyy"},"content":"todo borrow book","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"felixchanyy"},"content":"mark 1","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"felixchanyy"},"content":"event play games /from 2024-01-06 14:00 /to 2024-02-06 16:00","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"felixchanyy"},"content":"deadline play more /by 2025-01-22 23:00","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"felixchanyy"},"content":"mark 3","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"felixchanyy"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"felixchanyy"},"content":"unmark 3","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"felixchanyy"},"content":"delete 1","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"delete 1","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"felixchanyy"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"felixchanyy"},"content":"delete 1","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"felixchanyy":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"felixchanyy"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\core\\*.java ..\\src\\main\\java\\duke\\exception\\*.java ..\\src\\main\\java\\duke\\parser\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\storage\\*.java ..\\src\\main\\java\\duke\\ui\\*.java","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"java -classpath ..\\bin duke.core.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"felixchanyy":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"felixchanyy"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"felixchanyy"},"content":"# shellcheck disable\u003dSC2046","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"felixchanyy"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin $(find ../src/main/java -name \"*.java\");","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"felixchanyy"},"content":"java -classpath ../bin duke.core.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"felixchanyy":4,"-":36}}]
