[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    ","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"    mainClass.set(\"duke.rahbot.Launcher\")","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"    ","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    archiveBaseName \u003d \"rahbot\"","lastModifiedDate":"2024-02-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"checkstyle {","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-10"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"rahhulleee":22}},{"path":"src/main/java/duke/actions/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * Facilitates adding tasks to the Duke application\u0027s storage.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * This class represents an action to add a new task into the storage system of the Duke application.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * It holds a reference to the storage where the task needs to be added and the task itself.","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * After adding a task, the class can also provide a string representation of the addition to be used","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" * for output in the Parser class, indicating the successful addition of the task and the total number","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":" * of tasks currently stored.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"public class AddTask {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    private Task t;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * Constructs an {@code AddTask} action with specified storage and task.","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * This constructor initializes the {@code AddTask} object with the storage system where the task will be added","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * and the task to be added. The {@code storage} is used to access and modify the list of tasks, while the {@code t}","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * represents the specific task to add.","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The storage system of the Duke application where the task will be added. It must be initialized","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"     *                and capable of storing tasks.","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"     * @param t       The task to be added to the storage system. This task should not be {@code null}.","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"    public AddTask(Storage storage, Task t) {","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"        this.t \u003d t;","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"     * Adds a task to the storage\u0027s list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"     * This method accesses the storage to retrieve the current list of tasks and appends the task represented by","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"     * the {@code t} instance variable to this list.","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"    public void add() {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"        this.storage.load().add(t);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"     * Provides a string representation of the task addition action.","lastModifiedDate":"2024-02-10"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"     * This method generates a message indicating that a task has been successfully added to the storage. It also","lastModifiedDate":"2024-02-10"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"     * displays the added task and the total number of tasks in the storage. This string representation is useful for","lastModifiedDate":"2024-02-10"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"     * providing feedback to the user about the result of their action.","lastModifiedDate":"2024-02-10"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"     * @return A string detailing the task that was added, along with the current total number of tasks in the storage.","lastModifiedDate":"2024-02-10"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"        String temp \u003d \"Got it. I\u0027ve added this task: \\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d \" \" + this.storage.load().get(this.storage.load().size() - 1).toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d \"\\nNow you have \" + this.storage.load().size() + \" tasks in the list.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"        return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"rahhulleee":61}},{"path":"src/main/java/duke/actions/DeleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * Handles the deletion of tasks from the Duke application\u0027s storage based on their index.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * This class encapsulates the functionality required to delete a task from the storage\u0027s list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * It is constructed with a reference to the storage and the index of the task to be deleted. The deletion","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * process involves removing the task from the storage\u0027s task list and storing the deleted task\u0027s string","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" * representation for feedback purposes. The {@code toString} method provides a message that includes the","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":" * details of the deleted task and the updated total number of tasks in storage.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"public class DeleteTask {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    private int index;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"    private String task;","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * Creates a {@code DeleteTask} action with specified storage and the index of the task to be deleted.","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * This constructor initializes a {@code DeleteTask} object with a reference to the storage system from where","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * the task will be deleted and the index of the task in the list. It is important to note that the index","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * should be based on user-visible numbering (typically starting from 1) which will be adjusted internally","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     * to match the zero-based indexing of Java collections. The task\u0027s string representation is initially empty","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"     * and will be populated upon deletion.","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The storage system of the Duke application from which the task will be deleted.","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"     * @param index   The index of the task to be deleted, as seen by the user, starting from 1.","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    public DeleteTask(Storage storage, int index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"        this.task \u003d \"\";","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     * Deletes a task from the storage\u0027s list of tasks based on its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"     * This method removes the task at the specified index from the storage\u0027s ArrayList of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"     * The index is adjusted to account for list indexing starting at 0. Before removal, the task\u0027s","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"     * string representation is stored in {@code this.task} to allow for reporting what was deleted.","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    public void delete() {","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"        this.task \u003d storage.load().get(index - 1).toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"        storage.load().remove(index - 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     * Returns a string representation of the task deletion action.","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     * After a task is deleted, this method generates a confirmation message including the details of the deleted task","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"     * and the updated total number of tasks remaining in storage. This feedback is essential for informing the user","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"     * about the outcome of their delete command, ensuring clarity in the application\u0027s state changes.","lastModifiedDate":"2024-02-10"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"     * @return A string message detailing the task that was removed and the current total number of tasks in storage.","lastModifiedDate":"2024-02-10"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"        String temp \u003d \"Noted. I\u0027ve removed this task: \\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d \" \" + this.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d \"\\nNow you have \" + storage.load().size() + \" tasks in this list.\";","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"        return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"rahhulleee":72}},{"path":"src/main/java/duke/actions/FindTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * A class representing the action of finding tasks in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * Searches for tasks based on a specified keyword and provides a list of matching tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * @author SITHANATHAN RAHUL","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * @version CS2103T AY23/24 Semester 2","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"public class FindTask {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    private String task;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    private ArrayList\u003cTask\u003e matches;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a FindTask object with the given storage and task keyword.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The Storage object responsible for loading tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * @param task    A String representing the keyword to search for in tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"    public FindTask(Storage storage, String task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"        this.matches \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"     * Fills the list of tasks with tasks that match the specified keyword.","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"    public void createMatches() {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"        ArrayList\u003cTask\u003e inventory \u003d storage.load();","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"        for (int i \u003d 0; i \u003c inventory.size(); i++) {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"            Task t \u003d inventory.get(i);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"            if (t.getDescription().toLowerCase().contains(this.task.toLowerCase())) {","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"                this.matches.add(t);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"     * Returns a formatted String representation of the matching tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"     * @return A String displaying the matching tasks or an apology if none are found.","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"        if (this.matches.isEmpty()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"            return \"Sorry :( ! There are no such tasks.\";","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"            StringBuilder result \u003d new StringBuilder(\"Here are the matching tasks on your list!: \\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"            int count \u003d 1;","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"            for (Task t : this.matches) {","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"                result.append(count + \": \" + t.toString()).append(\"\\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"                count++;","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"            return result.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"rahhulleee":61}},{"path":"src/main/java/duke/actions/ListTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * Provides functionality to list all tasks currently stored in the Duke application\u0027s storage.","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * This class is designed to access the application\u0027s storage system and retrieve a formatted list","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * of all tasks. Each task is presented alongside its index in the storage list, offering a clear","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * overview of all tasks to the user. In case the storage list is empty, the class will return a","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * simple message indicating that no tasks are available. This functionality supports the user\u0027s","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" * ability to view all their tasks at a glance.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"public class ListTask {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    public ListTask(Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * Generates a string representation of all tasks in the storage\u0027s task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * This method iterates through the ArrayList of tasks in the storage, appending each task\u0027s","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * string representation to the result string, prefixed by its list index. If the list is empty,","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     * it returns a message indicating that the list is empty.","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"     * @return A string listing all tasks with their index in the list, or a message if the list is empty.","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"    public String list() {","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"        if (storage.load().isEmpty()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"            return \"List is Empty !\";","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"        String result \u003d \"\";","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"        for (Task s : storage.load()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"            result +\u003d count + \". \" + s.toString() + \"\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"            count++;","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"        return result;","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"rahhulleee":45}},{"path":"src/main/java/duke/actions/MarkTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":" * Enables marking of tasks as completed within the Duke application\u0027s storage system.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * This class is tasked with identifying a specific task by its index and updating its status to reflect completion.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * Constructed with references to the storage system and the target task\u0027s index, it facilitates the marking process,","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * ensuring that the designated task is accurately flagged as done. The operation is confirmed through a message","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * detailing the task\u0027s new status, providing immediate feedback to the user on the successful update.","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"public class MarkTask {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    private int index;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a {@code MarkTask} action with specified storage and the index of the task to be marked as completed.","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"     * This constructor initializes a {@code MarkTask} object with a reference to the storage","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * system where the tasks are managed and the index of the task that","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * needs to be marked as done. The index provided should correspond to the position of the task","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * in the user-visible list, which is then adjusted internally to accommodate zero-based indexing used in storage.","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The storage system of the Duke application, responsible for managing tasks.","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * @param index   The 1-based index of the task to be marked as completed, as viewed by the user.","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    public MarkTask(Storage storage, int index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     * Marks a task as done based on its index in the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"     * This method updates the status of a specified task to \"completed\" and generates a confirmation message.","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"     * It retrieves the task by its index (adjusted for zero-based indexing) from the storage\u0027s list of tasks,","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"     * marks the task as done, and returns a message indicating the task has been successfully marked.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     * @return A string message confirming the task has been marked as done, along with the task\u0027s details.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"    public String mark() {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"        storage.load().get(index - 1).mark();","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"        String temp \u003d \"Nice! I\u0027ve marked this task as done: \\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d storage.load().get(index - 1).toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"        return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"rahhulleee":49}},{"path":"src/main/java/duke/actions/UnmarkTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.actions;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":" * Manages the unmarking of tasks within the Duke application, setting them as not completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * This class provides the functionality to change the status of a specific task from \"completed\" to \"not completed\"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * based on its index in the task list. It is instantiated with a reference to the storage where tasks are maintained","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * and the index of the task to be updated. This action is part of the application\u0027s task management capabilities,","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * allowing users to dynamically adjust task statuses as needed.","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"public class UnmarkTask {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    private int index;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a new UnmarkTask object to manage the unmarking of tasks within the Duke application.","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     * This constructor initializes an instance of the UnmarkTask class with references to the storage where tasks","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"     * are maintained and the index of the task to be updated. It is used to instantiate objects that provide the","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * functionality to change the status of a specific task from \"completed\" to \"not completed\" based on its index in","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * the task list. This action is part of the application\u0027s task management capabilities, allowing users to","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * dynamically adjust task statuses as needed.","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The storage instance where tasks are maintained.","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * @param index   The index of the task to be updated within the task list.","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    public UnmarkTask(Storage storage, int index) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     * Marks the specified task as not done based on its index attribute.","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"     * This method accesses the task identified by the given index in the storage\u0027s task list and updates its status to","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"     * \"not done.\" It constructs and returns a confirmation message that includes the task\u0027s details, indicating to the","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"     * user that the task status has been successfully updated.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"     * @return A string message confirming the task has been marked as not done, along with the task\u0027s details.","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    public String unmark() {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"        storage.load().get(index - 1).unmark();","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"        String temp \u003d \"OK, I\u0027ve marked this task as not done yet: \\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"        temp +\u003d storage.load().get(index - 1).toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"        return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"rahhulleee":50}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.exception;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":" * The DukeException class represents a custom exception specific to the Duke application.","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":" * This exception is used to handle errors and exceptional situations within the Duke application. It extends","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * the standard Java Exception class and is designed to provide a mechanism for capturing and handling","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * application-specific issues that may arise during the execution of Duke\u0027s functionalities.","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"     * This constructor is used to create instances of DukeException with a custom error message that describes","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"     * the nature of the exception. It allows for informative and user-friendly messages to be associated with","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"     * instances of this exception, aiding in the identification and resolution of issues within the Duke application.","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"        super(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"rahhulleee":24}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"import java.util.Comparator;","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.AddTask;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.DeleteTask;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.FindTask;","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.ListTask;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.MarkTask;","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"import duke.actions.UnmarkTask;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Deadlines;","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Events;","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":" * The Parser class is responsible for interpreting user input and executing corresponding task operations.","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":" * It serves as the intermediary between the user interface and the application\u0027s logic, parsing the input","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":" * commands to perform actions such as adding, listing, marking, unmarking, deleting tasks, and handling","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":" * task-related exceptions. The class supports a variety of commands, including \"todo\", \"deadline\", \"event\",","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":" * \"mark\", \"unmark\", and \"delete\", each requiring specific input formats and handling potential input errors","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":" * through custom exceptions.","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":" * Upon receiving input, the Parser decodes the command, validates it, and then initiates the appropriate action","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":" * by creating instances of action classes like AddTask, DeleteTask, ListTask, MarkTask, and UnmarkTask, or directly","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":" * manipulating tasks through the storage class. It also provides feedback or error messages based on the outcomes","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":" * of operations or the nature of exceptions encountered.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":" * @see duke.storage.Storage","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":" * @see duke.tasks.Task","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":" * @see duke.exception.DukeException","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"public class Parser {","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    public Parser(Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"     * Parses the user input and executes the corresponding task operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result or feedback of the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"    public String parse(String input) {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"        ArrayList\u003cTask\u003e inventory \u003d storage.load();","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"            assert inventory.size() \u003c 0 : \"Task List should not have a negative number of tasks\";","lastModifiedDate":"2024-02-18"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"            if (input.toLowerCase().equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-02-09"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"                return handleListCommand(input);","lastModifiedDate":"2024-02-18"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.toLowerCase().startsWith(\"mark\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"                return handleMarkCommand(input, inventory);","lastModifiedDate":"2024-02-18"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.toLowerCase().startsWith(\"unmark\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"                return handleUnmarkCommand(input, inventory);","lastModifiedDate":"2024-02-18"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.toLowerCase().startsWith(\"todo\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"                return handleTodoCommand(input);","lastModifiedDate":"2024-02-18"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.toLowerCase().startsWith(\"deadline\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"                return handleDeadlineCommand(input);","lastModifiedDate":"2024-02-18"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.toLowerCase().startsWith(\"event\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"                return handleEventCommand(input);","lastModifiedDate":"2024-02-18"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"                return handleDeleteCommand(input, inventory);","lastModifiedDate":"2024-02-18"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2024-02-18"},{"lineNumber":76,"author":{"gitId":"rahhulleee"},"content":"                return handleFindCommand(input);","lastModifiedDate":"2024-02-18"},{"lineNumber":77,"author":{"gitId":"rahhulleee"},"content":"            } else if (input.startsWith(\"sort\")) {","lastModifiedDate":"2024-02-23"},{"lineNumber":78,"author":{"gitId":"rahhulleee"},"content":"                return handleSort(input);","lastModifiedDate":"2024-02-23"},{"lineNumber":79,"author":{"gitId":"rahhulleee"},"content":"            } ","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"rahhulleee"},"content":"            else {","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"rahhulleee"},"content":"                return \"OOPS!!! I\u0027m sorry, but that\u0027s an invalid command :-(\";","lastModifiedDate":"2024-02-18"},{"lineNumber":82,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":83,"author":{"gitId":"rahhulleee"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-18"},{"lineNumber":84,"author":{"gitId":"rahhulleee"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-18"},{"lineNumber":85,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":86,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":87,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":88,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":89,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"list\" command, displaying the list of tasks.","lastModifiedDate":"2024-02-18"},{"lineNumber":90,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":91,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the list of tasks.","lastModifiedDate":"2024-02-18"},{"lineNumber":92,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":93,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":94,"author":{"gitId":"rahhulleee"},"content":"    private String handleListCommand(String input) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":95,"author":{"gitId":"rahhulleee"},"content":"        if (!input.trim().equals(\"list\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":96,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! This is an invalid call of list command.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":97,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-10"},{"lineNumber":98,"author":{"gitId":"rahhulleee"},"content":"            ListTask lister \u003d new ListTask(storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":99,"author":{"gitId":"rahhulleee"},"content":"            return lister.list();","lastModifiedDate":"2024-02-01"},{"lineNumber":100,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":101,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":102,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":103,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":104,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"mark\" command, marking a specified task as done.","lastModifiedDate":"2024-02-18"},{"lineNumber":105,"author":{"gitId":"rahhulleee"},"content":"     * @param input     The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":106,"author":{"gitId":"rahhulleee"},"content":"     * @param inventory The list of tasks.","lastModifiedDate":"2024-02-18"},{"lineNumber":107,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the mark operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":108,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":109,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":110,"author":{"gitId":"rahhulleee"},"content":"    private String handleMarkCommand(String input, ArrayList\u003cTask\u003e inventory) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":111,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"mark\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":112,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Invalid Command, highlight which task to mark\");","lastModifiedDate":"2024-01-29"},{"lineNumber":113,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":114,"author":{"gitId":"rahhulleee"},"content":"            int index \u003d Integer.parseInt(input.substring(5));","lastModifiedDate":"2024-01-29"},{"lineNumber":115,"author":{"gitId":"rahhulleee"},"content":"            if (index \u003c 1 || index \u003e inventory.size()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":116,"author":{"gitId":"rahhulleee"},"content":"                throw new DukeException(\"OOPS!!! The task number you are trying to mark does not exist. \");","lastModifiedDate":"2024-02-01"},{"lineNumber":117,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"rahhulleee"},"content":"            MarkTask marker \u003d new MarkTask(storage, index);","lastModifiedDate":"2024-02-01"},{"lineNumber":119,"author":{"gitId":"rahhulleee"},"content":"            return marker.mark();","lastModifiedDate":"2024-02-01"},{"lineNumber":120,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":121,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":122,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":123,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":124,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"unmark\" command, marking a specified task as not done.","lastModifiedDate":"2024-02-18"},{"lineNumber":125,"author":{"gitId":"rahhulleee"},"content":"     * @param input     The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":126,"author":{"gitId":"rahhulleee"},"content":"     * @param inventory The list of tasks.","lastModifiedDate":"2024-02-18"},{"lineNumber":127,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the unmark operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":128,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":129,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":130,"author":{"gitId":"rahhulleee"},"content":"    private String handleUnmarkCommand(String input, ArrayList\u003cTask\u003e inventory) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":131,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"unmark\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":132,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Invalid Command, highlight which task to unmark\");","lastModifiedDate":"2024-01-29"},{"lineNumber":133,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":134,"author":{"gitId":"rahhulleee"},"content":"            int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2024-01-29"},{"lineNumber":135,"author":{"gitId":"rahhulleee"},"content":"            if (index \u003c 1 || index \u003e inventory.size()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":136,"author":{"gitId":"rahhulleee"},"content":"                throw new DukeException(\"OOPS!!! The task number you are trying to unmark does not exist. \");","lastModifiedDate":"2024-02-01"},{"lineNumber":137,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":138,"author":{"gitId":"rahhulleee"},"content":"            UnmarkTask unmarker \u003d new UnmarkTask(storage, index);","lastModifiedDate":"2024-02-01"},{"lineNumber":139,"author":{"gitId":"rahhulleee"},"content":"            return unmarker.unmark();","lastModifiedDate":"2024-02-01"},{"lineNumber":140,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":141,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":142,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":143,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":144,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"todo\" command, adding a new todo task.","lastModifiedDate":"2024-02-18"},{"lineNumber":145,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":146,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the add operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":147,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":148,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":149,"author":{"gitId":"rahhulleee"},"content":"    private String handleTodoCommand(String input) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":150,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"todo\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":151,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":152,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":153,"author":{"gitId":"rahhulleee"},"content":"            String task \u003d input.substring(5);","lastModifiedDate":"2024-01-29"},{"lineNumber":154,"author":{"gitId":"rahhulleee"},"content":"            ToDo todoTask \u003d new ToDo(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":155,"author":{"gitId":"rahhulleee"},"content":"            AddTask adder \u003d new AddTask(storage, todoTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":156,"author":{"gitId":"rahhulleee"},"content":"            adder.add();","lastModifiedDate":"2024-02-01"},{"lineNumber":157,"author":{"gitId":"rahhulleee"},"content":"            return adder.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":158,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":159,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":160,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":161,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":162,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"deadline\" command, adding a new deadline task.","lastModifiedDate":"2024-02-18"},{"lineNumber":163,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":164,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the add operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":165,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":166,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":167,"author":{"gitId":"rahhulleee"},"content":"    private String handleDeadlineCommand(String input) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":168,"author":{"gitId":"rahhulleee"},"content":"        ArrayList\u003cTask\u003e inventory \u003d storage.load();","lastModifiedDate":"2024-02-18"},{"lineNumber":169,"author":{"gitId":"rahhulleee"},"content":"        String validFormat \u003d \"Please input in format: *deadline* *TASK* /*by yyyy-mm-dd TIME*\";","lastModifiedDate":"2024-02-10"},{"lineNumber":170,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"deadline\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":171,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":172,"author":{"gitId":"rahhulleee"},"content":"        } else if (!input.contains(\"/\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":173,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Your deadline command\u0027s format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":174,"author":{"gitId":"rahhulleee"},"content":"        } else if (input.substring(9).split(\"/\").length \u003c 2) {","lastModifiedDate":"2024-02-10"},{"lineNumber":175,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Your deadline command\u0027s format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":176,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-10"},{"lineNumber":177,"author":{"gitId":"rahhulleee"},"content":"            String[] parts \u003d input.substring(9).split(\"/\");","lastModifiedDate":"2024-01-29"},{"lineNumber":178,"author":{"gitId":"rahhulleee"},"content":"            LocalDateTime dateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":179,"author":{"gitId":"rahhulleee"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":180,"author":{"gitId":"rahhulleee"},"content":"                String dateTimeString \u003d parts[1].substring(3).trim();","lastModifiedDate":"2024-01-31"},{"lineNumber":181,"author":{"gitId":"rahhulleee"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":182,"author":{"gitId":"rahhulleee"},"content":"                dateTime \u003d LocalDateTime.parse(dateTimeString, formatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":183,"author":{"gitId":"rahhulleee"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-10"},{"lineNumber":184,"author":{"gitId":"rahhulleee"},"content":"                throw new DukeException(\"OOPS!!! The date format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":185,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":186,"author":{"gitId":"rahhulleee"},"content":"            Deadlines deadlineTask \u003d new Deadlines(parts[0], dateTime);","lastModifiedDate":"2024-02-01"},{"lineNumber":187,"author":{"gitId":"rahhulleee"},"content":"            AddTask adder \u003d new AddTask(storage, deadlineTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":188,"author":{"gitId":"rahhulleee"},"content":"            adder.add();","lastModifiedDate":"2024-02-01"},{"lineNumber":189,"author":{"gitId":"rahhulleee"},"content":"            String temp \u003d adder.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":190,"author":{"gitId":"rahhulleee"},"content":"            String similarities \u003d \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":191,"author":{"gitId":"rahhulleee"},"content":"            int counter \u003d 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":192,"author":{"gitId":"rahhulleee"},"content":"            for (int i \u003d 0; i \u003c inventory.size() - 1; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":193,"author":{"gitId":"rahhulleee"},"content":"                Task t \u003d inventory.get(i);","lastModifiedDate":"2024-01-31"},{"lineNumber":194,"author":{"gitId":"rahhulleee"},"content":"                if (!t.identifier().equals(\"[D]\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":195,"author":{"gitId":"rahhulleee"},"content":"                    continue;","lastModifiedDate":"2024-02-01"},{"lineNumber":196,"author":{"gitId":"rahhulleee"},"content":"                }","lastModifiedDate":"2024-02-01"},{"lineNumber":197,"author":{"gitId":"rahhulleee"},"content":"                if (t.getDeadline().equals(dateTime.toLocalDate())) {","lastModifiedDate":"2024-02-01"},{"lineNumber":198,"author":{"gitId":"rahhulleee"},"content":"                    similarities +\u003d counter + \": \" + t.toString() + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":199,"author":{"gitId":"rahhulleee"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":200,"author":{"gitId":"rahhulleee"},"content":"                counter++;","lastModifiedDate":"2024-01-31"},{"lineNumber":201,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":202,"author":{"gitId":"rahhulleee"},"content":"            if (similarities.isBlank()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":203,"author":{"gitId":"rahhulleee"},"content":"                temp +\u003d \"\\n\\n\\nThere are no other deadlines on the same day as this Task\u0027s deadline :)\";","lastModifiedDate":"2024-01-31"},{"lineNumber":204,"author":{"gitId":"rahhulleee"},"content":"                return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":205,"author":{"gitId":"rahhulleee"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":206,"author":{"gitId":"rahhulleee"},"content":"                temp +\u003d \"\\n\\n\\nThe following are the tasks with the same deadlines!: \\n\" + similarities;","lastModifiedDate":"2024-01-31"},{"lineNumber":207,"author":{"gitId":"rahhulleee"},"content":"                return temp;","lastModifiedDate":"2024-02-01"},{"lineNumber":208,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":209,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":210,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":211,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":212,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":213,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"event\" command, adding a new event task.","lastModifiedDate":"2024-02-18"},{"lineNumber":214,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":215,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the add operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":216,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":217,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":218,"author":{"gitId":"rahhulleee"},"content":"    private String handleEventCommand(String input) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":219,"author":{"gitId":"rahhulleee"},"content":"        String validFormat \u003d \"Please input in the format: Event *TASK* /*from YYYY-MM-DD TIME* /*to YYYY-MM-DD TIME*\";","lastModifiedDate":"2024-02-18"},{"lineNumber":220,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"event\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":221,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! The description of an event cannot be empty. \" + validFormat);","lastModifiedDate":"2024-02-18"},{"lineNumber":222,"author":{"gitId":"rahhulleee"},"content":"        } else if (!input.contains(\"/\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":223,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Your event command\u0027s format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":224,"author":{"gitId":"rahhulleee"},"content":"        } else if (input.substring(6).split(\"/\").length \u003c 3) {","lastModifiedDate":"2024-01-29"},{"lineNumber":225,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Your event command\u0027s format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":226,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-10"},{"lineNumber":227,"author":{"gitId":"rahhulleee"},"content":"            String[] parts \u003d input.substring(6).split(\"/\");","lastModifiedDate":"2024-01-29"},{"lineNumber":228,"author":{"gitId":"rahhulleee"},"content":"            LocalDateTime dateTime1;","lastModifiedDate":"2024-01-31"},{"lineNumber":229,"author":{"gitId":"rahhulleee"},"content":"            LocalDateTime dateTime2;","lastModifiedDate":"2024-01-31"},{"lineNumber":230,"author":{"gitId":"rahhulleee"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":231,"author":{"gitId":"rahhulleee"},"content":"                String dateTimeString1 \u003d parts[1].substring(5).trim();","lastModifiedDate":"2024-01-31"},{"lineNumber":232,"author":{"gitId":"rahhulleee"},"content":"                String dateTimeString2 \u003d parts[2].substring(3).trim();","lastModifiedDate":"2024-01-31"},{"lineNumber":233,"author":{"gitId":"rahhulleee"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":234,"author":{"gitId":"rahhulleee"},"content":"                dateTime1 \u003d LocalDateTime.parse(dateTimeString1, formatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":235,"author":{"gitId":"rahhulleee"},"content":"                dateTime2 \u003d LocalDateTime.parse(dateTimeString2, formatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":236,"author":{"gitId":"rahhulleee"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-02-23"},{"lineNumber":237,"author":{"gitId":"rahhulleee"},"content":"                throw new DukeException(\"OOPS!!! The date format is invalid. \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":238,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":239,"author":{"gitId":"rahhulleee"},"content":"            Events eventTask \u003d new Events(parts[0], dateTime1, dateTime2);","lastModifiedDate":"2024-02-01"},{"lineNumber":240,"author":{"gitId":"rahhulleee"},"content":"            AddTask adder \u003d new AddTask(storage, eventTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":241,"author":{"gitId":"rahhulleee"},"content":"            adder.add();","lastModifiedDate":"2024-02-01"},{"lineNumber":242,"author":{"gitId":"rahhulleee"},"content":"            return adder.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":243,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":244,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":245,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":246,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":247,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"delete\" command, deleting a specified task.","lastModifiedDate":"2024-02-18"},{"lineNumber":248,"author":{"gitId":"rahhulleee"},"content":"     * @param input     The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":249,"author":{"gitId":"rahhulleee"},"content":"     * @param inventory The list of tasks.","lastModifiedDate":"2024-02-18"},{"lineNumber":250,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the result of the delete operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":251,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":252,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":253,"author":{"gitId":"rahhulleee"},"content":"    private String handleDeleteCommand(String input, ArrayList\u003cTask\u003e inventory) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":254,"author":{"gitId":"rahhulleee"},"content":"        String validFormat \u003d \"Please input in format: delete *index*\";","lastModifiedDate":"2024-02-10"},{"lineNumber":255,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"delete\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":256,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!!! Invalid delete command \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":257,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":258,"author":{"gitId":"rahhulleee"},"content":"            int index \u003d Integer.parseInt(input.substring(7));","lastModifiedDate":"2024-01-29"},{"lineNumber":259,"author":{"gitId":"rahhulleee"},"content":"            if (index \u003c 1 || index \u003e inventory.size()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":260,"author":{"gitId":"rahhulleee"},"content":"                throw new DukeException(\"OOPS!!! The task number you are trying to delete does not exist. \");","lastModifiedDate":"2024-02-01"},{"lineNumber":261,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":262,"author":{"gitId":"rahhulleee"},"content":"            DeleteTask deleter \u003d new DeleteTask(storage, index);","lastModifiedDate":"2024-02-01"},{"lineNumber":263,"author":{"gitId":"rahhulleee"},"content":"            deleter.delete();","lastModifiedDate":"2024-02-01"},{"lineNumber":264,"author":{"gitId":"rahhulleee"},"content":"            return deleter.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":265,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":266,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":267,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":268,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-18"},{"lineNumber":269,"author":{"gitId":"rahhulleee"},"content":"     * Handles the \"find\" command, finding tasks that match a specified keyword.","lastModifiedDate":"2024-02-18"},{"lineNumber":270,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user input command.","lastModifiedDate":"2024-02-18"},{"lineNumber":271,"author":{"gitId":"rahhulleee"},"content":"     * @return A string representing the tasks that match the keyword.","lastModifiedDate":"2024-02-18"},{"lineNumber":272,"author":{"gitId":"rahhulleee"},"content":"     * @throws DukeException If an error occurs during the operation.","lastModifiedDate":"2024-02-18"},{"lineNumber":273,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-18"},{"lineNumber":274,"author":{"gitId":"rahhulleee"},"content":"    private String handleFindCommand(String input) throws DukeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":275,"author":{"gitId":"rahhulleee"},"content":"        String validFormat \u003d \"Please input in format: find *Task*\";","lastModifiedDate":"2024-02-10"},{"lineNumber":276,"author":{"gitId":"rahhulleee"},"content":"        if (input.trim().equals(\"find\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":277,"author":{"gitId":"rahhulleee"},"content":"            throw new DukeException(\"OOPS!! Invalid find command \" + validFormat);","lastModifiedDate":"2024-02-10"},{"lineNumber":278,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":279,"author":{"gitId":"rahhulleee"},"content":"            String task \u003d input.substring(5);","lastModifiedDate":"2024-02-03"},{"lineNumber":280,"author":{"gitId":"rahhulleee"},"content":"            FindTask finder \u003d new FindTask(storage, task);","lastModifiedDate":"2024-02-03"},{"lineNumber":281,"author":{"gitId":"rahhulleee"},"content":"            finder.createMatches();","lastModifiedDate":"2024-02-03"},{"lineNumber":282,"author":{"gitId":"rahhulleee"},"content":"            return finder.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":283,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":284,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":285,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":286,"author":{"gitId":"rahhulleee"},"content":"    private String handleSort(String input) throws DukeException {","lastModifiedDate":"2024-02-23"},{"lineNumber":287,"author":{"gitId":"rahhulleee"},"content":"        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e(storage.load());","lastModifiedDate":"2024-02-23"},{"lineNumber":288,"author":{"gitId":"rahhulleee"},"content":"        temp.sort(new TaskComparator());","lastModifiedDate":"2024-02-23"},{"lineNumber":289,"author":{"gitId":"rahhulleee"},"content":"        String result \u003d \"Here is the SORTED Task List!: \\n\";","lastModifiedDate":"2024-02-23"},{"lineNumber":290,"author":{"gitId":"rahhulleee"},"content":"        for (Task i : temp) {","lastModifiedDate":"2024-02-23"},{"lineNumber":291,"author":{"gitId":"rahhulleee"},"content":"            result +\u003d i.toString() + \"\\n\";","lastModifiedDate":"2024-02-23"},{"lineNumber":292,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":293,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":294,"author":{"gitId":"rahhulleee"},"content":"        return result;","lastModifiedDate":"2024-02-23"},{"lineNumber":295,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":296,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":297,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-23"},{"lineNumber":298,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":299,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":300,"author":{"gitId":"rahhulleee"},"content":"class TaskComparator implements Comparator\u003cTask\u003e {","lastModifiedDate":"2024-02-23"},{"lineNumber":301,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":302,"author":{"gitId":"rahhulleee"},"content":"    public int compare(Task task1, Task task2) {","lastModifiedDate":"2024-02-23"},{"lineNumber":303,"author":{"gitId":"rahhulleee"},"content":"        // Compare ToDo tasks, place them at the back","lastModifiedDate":"2024-02-23"},{"lineNumber":304,"author":{"gitId":"rahhulleee"},"content":"        if (task1 instanceof ToDo \u0026\u0026 task2 instanceof ToDo) {","lastModifiedDate":"2024-02-23"},{"lineNumber":305,"author":{"gitId":"rahhulleee"},"content":"            return 0;","lastModifiedDate":"2024-02-23"},{"lineNumber":306,"author":{"gitId":"rahhulleee"},"content":"        } else if (task1 instanceof ToDo) {","lastModifiedDate":"2024-02-23"},{"lineNumber":307,"author":{"gitId":"rahhulleee"},"content":"            return 1;","lastModifiedDate":"2024-02-23"},{"lineNumber":308,"author":{"gitId":"rahhulleee"},"content":"        } else if (task2 instanceof ToDo) {","lastModifiedDate":"2024-02-23"},{"lineNumber":309,"author":{"gitId":"rahhulleee"},"content":"            return -1;","lastModifiedDate":"2024-02-23"},{"lineNumber":310,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":311,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":312,"author":{"gitId":"rahhulleee"},"content":"        // Compare Deadline and Events tasks based on their deadlines","lastModifiedDate":"2024-02-23"},{"lineNumber":313,"author":{"gitId":"rahhulleee"},"content":"        LocalDateTime deadline1 \u003d getTaskDeadline(task1);","lastModifiedDate":"2024-02-23"},{"lineNumber":314,"author":{"gitId":"rahhulleee"},"content":"        LocalDateTime deadline2 \u003d getTaskDeadline(task2);","lastModifiedDate":"2024-02-23"},{"lineNumber":315,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":316,"author":{"gitId":"rahhulleee"},"content":"        return deadline1.compareTo(deadline2);","lastModifiedDate":"2024-02-23"},{"lineNumber":317,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":318,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":319,"author":{"gitId":"rahhulleee"},"content":"    private LocalDateTime getTaskDeadline(Task task) {","lastModifiedDate":"2024-02-23"},{"lineNumber":320,"author":{"gitId":"rahhulleee"},"content":"        if (task instanceof Deadlines) {","lastModifiedDate":"2024-02-23"},{"lineNumber":321,"author":{"gitId":"rahhulleee"},"content":"            return ((Deadlines) task).getAbsoluteDeadline();","lastModifiedDate":"2024-02-23"},{"lineNumber":322,"author":{"gitId":"rahhulleee"},"content":"        } else if (task instanceof Events) {","lastModifiedDate":"2024-02-23"},{"lineNumber":323,"author":{"gitId":"rahhulleee"},"content":"            return ((Events) task).getStart();","lastModifiedDate":"2024-02-23"},{"lineNumber":324,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-23"},{"lineNumber":325,"author":{"gitId":"rahhulleee"},"content":"            // ToDo tasks have no deadline","lastModifiedDate":"2024-02-23"},{"lineNumber":326,"author":{"gitId":"rahhulleee"},"content":"            return LocalDateTime.MAX;","lastModifiedDate":"2024-02-23"},{"lineNumber":327,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":328,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":329,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"rahhulleee":329}},{"path":"src/main/java/duke/rahbot/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.rahbot;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" * Represents a dialog box in the chat interface of a chatbot application.","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":" * This class is responsible for creating a dialog box containing a message","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":" * and an associated image. Dialog boxes can be customized for different speakers","lastModifiedDate":"2024-02-10"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":" * in the chat, such as the user or the chatbot itself.","lastModifiedDate":"2024-02-10"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"    private Label text;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a DialogBox with specified text and image.","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * The DialogBox aligns its content to the top right by default and applies","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * predefined padding and spacing for aesthetic spacing.","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * @param l The label containing the text for the dialog box.","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     * @param iv The ImageView containing the image to be displayed alongside the text.","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"        text \u003d l;","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"        text.setWrapText(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"        displayPicture.setPreserveRatio(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"        displayPicture.setFitHeight(100.0); // Consider removing setFitWidth for aspect ratio preservation","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"        this.setPadding(new Insets(10)); // Add padding around the HBox contents","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"        this.setSpacing(10); // Add spacing between the elements","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"     * Flips the dialog box horizontally, placing the image on the left and text on the right.","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     * This method is used to visually differentiate between dialog boxes of different speakers.","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    private void flip() {","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     * Factory method to create a DialogBox for the user\u0027s dialog.","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"     * The dialog box is not flipped, keeping the default alignment with the image on the right.","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"     * @param l The label containing the user\u0027s text.","lastModifiedDate":"2024-02-10"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"     * @param iv The ImageView containing the user\u0027s image.","lastModifiedDate":"2024-02-10"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"     * @return A DialogBox instance configured for the user\u0027s dialog.","lastModifiedDate":"2024-02-10"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-09"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2024-02-09"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"     * Factory method to create a DialogBox for the Duke\u0027s (chatbot\u0027s) dialog.","lastModifiedDate":"2024-02-10"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"     * The dialog box is flipped, placing the image on the left and text on the right,","lastModifiedDate":"2024-02-10"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"     * to differentiate the chatbot\u0027s messages from the user\u0027s messages.","lastModifiedDate":"2024-02-10"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"     * @param l The label containing Duke\u0027s text.","lastModifiedDate":"2024-02-10"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"     * @param iv The ImageView containing Duke\u0027s image.","lastModifiedDate":"2024-02-10"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"     * @return A DialogBox instance configured for Duke\u0027s dialog, with flipped alignment.","lastModifiedDate":"2024-02-10"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-09"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2024-02-09"},{"lineNumber":76,"author":{"gitId":"rahhulleee"},"content":"        db.flip();","lastModifiedDate":"2024-02-09"},{"lineNumber":77,"author":{"gitId":"rahhulleee"},"content":"        return db;","lastModifiedDate":"2024-02-09"},{"lineNumber":78,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":79,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-09"},{"lineNumber":80,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"rahhulleee":80}},{"path":"src/main/java/duke/rahbot/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.rahbot;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import duke.parser.Parser;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import duke.ui.Output;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-10"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"import javafx.util.Duration;","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":" * Main application class for Duke, a JavaFX application that facilitates interactive chat.","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":" * Duke is a GUI-based chatbot that allows users to interact with the application through","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":" * a graphical interface. It supports adding, deleting, and listing tasks, among other functionalities.","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":" * This class sets up the primary stage and scene for the application, initializing the chat interface.","lastModifiedDate":"2024-02-10"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"public class Duke extends Application {","lastModifiedDate":"2024-02-10"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"    private Scene scene;","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/me.jpg\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/brothers.jpeg\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     * Initializes images for the user and Duke, and sets up other necessary components.","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"     * This constructor is used to prepare any preliminary data or resources required by the application.","lastModifiedDate":"2024-02-10"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"    public Duke() {","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"        // ...","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     * Starts the main application stage, setting up the layout, scene, and event handlers.","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     * This method initializes the graphical user interface, including input fields, buttons,","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     * and display areas for messages.","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"     * @param stage The primary stage for this application, onto which the scene is set.","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-02-09"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-09"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"        // Step 1. Setting up required components","lastModifiedDate":"2024-02-09"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"        // The container for the content of the chat to scroll.","lastModifiedDate":"2024-02-09"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2024-02-09"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2024-02-09"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2024-02-09"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2024-02-09"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2024-02-09"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2024-02-09"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2024-02-09"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2024-02-09"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"        // Step 2. Formatting the window to look as expected","lastModifiedDate":"2024-02-09"},{"lineNumber":76,"author":{"gitId":"rahhulleee"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2024-02-09"},{"lineNumber":77,"author":{"gitId":"rahhulleee"},"content":"        stage.setResizable(false);","lastModifiedDate":"2024-02-09"},{"lineNumber":78,"author":{"gitId":"rahhulleee"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":79,"author":{"gitId":"rahhulleee"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":80,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":81,"author":{"gitId":"rahhulleee"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":82,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":83,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2024-02-09"},{"lineNumber":84,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2024-02-09"},{"lineNumber":85,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2024-02-09"},{"lineNumber":86,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":87,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":88,"author":{"gitId":"rahhulleee"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":89,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":90,"author":{"gitId":"rahhulleee"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2024-02-09"},{"lineNumber":91,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":92,"author":{"gitId":"rahhulleee"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":93,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":94,"author":{"gitId":"rahhulleee"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":95,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":96,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":97,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":98,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":99,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":100,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":101,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":102,"author":{"gitId":"rahhulleee"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2024-02-09"},{"lineNumber":103,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":104,"author":{"gitId":"rahhulleee"},"content":"        // Here, after setting up the UI but before the stage is shown","lastModifiedDate":"2024-02-09"},{"lineNumber":105,"author":{"gitId":"rahhulleee"},"content":"        showWelcomeMessage();","lastModifiedDate":"2024-02-09"},{"lineNumber":106,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":107,"author":{"gitId":"rahhulleee"},"content":"        // Add functionality to handle user input.","lastModifiedDate":"2024-02-09"},{"lineNumber":108,"author":{"gitId":"rahhulleee"},"content":"        addInputHandlers();","lastModifiedDate":"2024-02-09"},{"lineNumber":109,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":110,"author":{"gitId":"rahhulleee"},"content":"        stage.setScene(scene);","lastModifiedDate":"2024-02-09"},{"lineNumber":111,"author":{"gitId":"rahhulleee"},"content":"        stage.show();","lastModifiedDate":"2024-02-09"},{"lineNumber":112,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":113,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":114,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":115,"author":{"gitId":"rahhulleee"},"content":"     * Adds event handlers for user input, including button clicks and text field submissions.","lastModifiedDate":"2024-02-10"},{"lineNumber":116,"author":{"gitId":"rahhulleee"},"content":"     * This method ensures that when the user interacts with the input controls, the appropriate","lastModifiedDate":"2024-02-10"},{"lineNumber":117,"author":{"gitId":"rahhulleee"},"content":"     * actions are taken to process and respond to the input.","lastModifiedDate":"2024-02-10"},{"lineNumber":118,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":119,"author":{"gitId":"rahhulleee"},"content":"    private void addInputHandlers() {","lastModifiedDate":"2024-02-09"},{"lineNumber":120,"author":{"gitId":"rahhulleee"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2024-02-09"},{"lineNumber":121,"author":{"gitId":"rahhulleee"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-09"},{"lineNumber":122,"author":{"gitId":"rahhulleee"},"content":"        });","lastModifiedDate":"2024-02-09"},{"lineNumber":123,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":124,"author":{"gitId":"rahhulleee"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2024-02-09"},{"lineNumber":125,"author":{"gitId":"rahhulleee"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-09"},{"lineNumber":126,"author":{"gitId":"rahhulleee"},"content":"        });","lastModifiedDate":"2024-02-09"},{"lineNumber":127,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":128,"author":{"gitId":"rahhulleee"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2024-02-09"},{"lineNumber":129,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":130,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":131,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":132,"author":{"gitId":"rahhulleee"},"content":"     * Displays a welcome message to the user upon application start.","lastModifiedDate":"2024-02-10"},{"lineNumber":133,"author":{"gitId":"rahhulleee"},"content":"     * This method is called during the initialization phase to greet the user.","lastModifiedDate":"2024-02-10"},{"lineNumber":134,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":135,"author":{"gitId":"rahhulleee"},"content":"    private void showWelcomeMessage() {","lastModifiedDate":"2024-02-09"},{"lineNumber":136,"author":{"gitId":"rahhulleee"},"content":"        Output output \u003d new Output(new Parser(new Storage()), new Storage());","lastModifiedDate":"2024-02-09"},{"lineNumber":137,"author":{"gitId":"rahhulleee"},"content":"        String welcomeMsg \u003d output.welcome();","lastModifiedDate":"2024-02-09"},{"lineNumber":138,"author":{"gitId":"rahhulleee"},"content":"        HBox dialogHBox \u003d createDialogHBox(welcomeMsg, duke); // Use the duke Image object","lastModifiedDate":"2024-02-09"},{"lineNumber":139,"author":{"gitId":"rahhulleee"},"content":"        dialogContainer.getChildren().add(dialogHBox); // Add HBox to the dialog container","lastModifiedDate":"2024-02-09"},{"lineNumber":140,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":141,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":142,"author":{"gitId":"rahhulleee"},"content":"     * Creates a horizontal box containing a message and an associated image.","lastModifiedDate":"2024-02-10"},{"lineNumber":143,"author":{"gitId":"rahhulleee"},"content":"     * This method is used to format the display of messages in the chat interface.","lastModifiedDate":"2024-02-10"},{"lineNumber":144,"author":{"gitId":"rahhulleee"},"content":"     * @param text The message text to be displayed.","lastModifiedDate":"2024-02-10"},{"lineNumber":145,"author":{"gitId":"rahhulleee"},"content":"     * @param image The image associated with the message.","lastModifiedDate":"2024-02-10"},{"lineNumber":146,"author":{"gitId":"rahhulleee"},"content":"     * @return An HBox containing the message and image.","lastModifiedDate":"2024-02-10"},{"lineNumber":147,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":148,"author":{"gitId":"rahhulleee"},"content":"    private HBox createDialogHBox(String text, Image image) {","lastModifiedDate":"2024-02-09"},{"lineNumber":149,"author":{"gitId":"rahhulleee"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2024-02-09"},{"lineNumber":150,"author":{"gitId":"rahhulleee"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":151,"author":{"gitId":"rahhulleee"},"content":"        ImageView imageView \u003d new ImageView(image);","lastModifiedDate":"2024-02-09"},{"lineNumber":152,"author":{"gitId":"rahhulleee"},"content":"        imageView.setFitHeight(100); // Adjust based on your UI needs","lastModifiedDate":"2024-02-09"},{"lineNumber":153,"author":{"gitId":"rahhulleee"},"content":"        imageView.setFitWidth(100); // Adjust based on your UI needs","lastModifiedDate":"2024-02-09"},{"lineNumber":154,"author":{"gitId":"rahhulleee"},"content":"        imageView.setPreserveRatio(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":155,"author":{"gitId":"rahhulleee"},"content":"        HBox hbox \u003d new HBox(10); // 10 is the spacing between elements in the HBox","lastModifiedDate":"2024-02-09"},{"lineNumber":156,"author":{"gitId":"rahhulleee"},"content":"        hbox.setAlignment(Pos.CENTER_LEFT); // Aligns children within the HBox","lastModifiedDate":"2024-02-09"},{"lineNumber":157,"author":{"gitId":"rahhulleee"},"content":"        hbox.getChildren().addAll(imageView, textToAdd);","lastModifiedDate":"2024-02-09"},{"lineNumber":158,"author":{"gitId":"rahhulleee"},"content":"        return hbox;","lastModifiedDate":"2024-02-09"},{"lineNumber":159,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":160,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":161,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":162,"author":{"gitId":"rahhulleee"},"content":"     * Generates a label with specified text, enabling word wrapping.","lastModifiedDate":"2024-02-10"},{"lineNumber":163,"author":{"gitId":"rahhulleee"},"content":"     * This utility method is used to create labels for displaying messages in the chat.","lastModifiedDate":"2024-02-10"},{"lineNumber":164,"author":{"gitId":"rahhulleee"},"content":"     * @param text The text to be displayed in the label.","lastModifiedDate":"2024-02-10"},{"lineNumber":165,"author":{"gitId":"rahhulleee"},"content":"     * @return A label configured to display the specified text.","lastModifiedDate":"2024-02-10"},{"lineNumber":166,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":167,"author":{"gitId":"rahhulleee"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2024-02-09"},{"lineNumber":168,"author":{"gitId":"rahhulleee"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2024-02-09"},{"lineNumber":169,"author":{"gitId":"rahhulleee"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2024-02-09"},{"lineNumber":170,"author":{"gitId":"rahhulleee"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2024-02-09"},{"lineNumber":171,"author":{"gitId":"rahhulleee"},"content":"        return textToAdd;","lastModifiedDate":"2024-02-09"},{"lineNumber":172,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":173,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":174,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":175,"author":{"gitId":"rahhulleee"},"content":"     * Processes user input, generates a response, and updates the chat interface.","lastModifiedDate":"2024-02-10"},{"lineNumber":176,"author":{"gitId":"rahhulleee"},"content":"     * This method handles the logic for receiving user input, generating a response","lastModifiedDate":"2024-02-10"},{"lineNumber":177,"author":{"gitId":"rahhulleee"},"content":"     * from Duke, and displaying both the user\u0027s message and Duke\u0027s reply in the chat.","lastModifiedDate":"2024-02-10"},{"lineNumber":178,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":179,"author":{"gitId":"rahhulleee"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-09"},{"lineNumber":180,"author":{"gitId":"rahhulleee"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2024-02-09"},{"lineNumber":181,"author":{"gitId":"rahhulleee"},"content":"        Label dukeText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2024-02-09"},{"lineNumber":182,"author":{"gitId":"rahhulleee"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-09"},{"lineNumber":183,"author":{"gitId":"rahhulleee"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2024-02-09"},{"lineNumber":184,"author":{"gitId":"rahhulleee"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(duke))","lastModifiedDate":"2024-02-09"},{"lineNumber":185,"author":{"gitId":"rahhulleee"},"content":"        );","lastModifiedDate":"2024-02-09"},{"lineNumber":186,"author":{"gitId":"rahhulleee"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-09"},{"lineNumber":187,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":188,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":189,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":190,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":191,"author":{"gitId":"rahhulleee"},"content":"     * Generates a response to the user\u0027s input.","lastModifiedDate":"2024-02-10"},{"lineNumber":192,"author":{"gitId":"rahhulleee"},"content":"     * This method encapsulates the logic for processing user commands and generating","lastModifiedDate":"2024-02-10"},{"lineNumber":193,"author":{"gitId":"rahhulleee"},"content":"     * responses. It is a key part of the chatbot\u0027s functionality.","lastModifiedDate":"2024-02-10"},{"lineNumber":194,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user\u0027s input as a String.","lastModifiedDate":"2024-02-10"},{"lineNumber":195,"author":{"gitId":"rahhulleee"},"content":"     * @return A String containing Duke\u0027s response to the input.","lastModifiedDate":"2024-02-10"},{"lineNumber":196,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":197,"author":{"gitId":"rahhulleee"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2024-02-09"},{"lineNumber":198,"author":{"gitId":"rahhulleee"},"content":"        Storage storage \u003d new Storage();","lastModifiedDate":"2024-02-09"},{"lineNumber":199,"author":{"gitId":"rahhulleee"},"content":"        Parser parser \u003d new Parser(storage);","lastModifiedDate":"2024-02-09"},{"lineNumber":200,"author":{"gitId":"rahhulleee"},"content":"        Output output \u003d new Output(parser, storage);","lastModifiedDate":"2024-02-09"},{"lineNumber":201,"author":{"gitId":"rahhulleee"},"content":"        String response \u003d output.execute(input);","lastModifiedDate":"2024-02-09"},{"lineNumber":202,"author":{"gitId":"rahhulleee"},"content":"        //writing into the file","lastModifiedDate":"2024-02-09"},{"lineNumber":203,"author":{"gitId":"rahhulleee"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":204,"author":{"gitId":"rahhulleee"},"content":"            storage.writeToFile(storage.load());","lastModifiedDate":"2024-02-09"},{"lineNumber":205,"author":{"gitId":"rahhulleee"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":206,"author":{"gitId":"rahhulleee"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2024-02-09"},{"lineNumber":207,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":208,"author":{"gitId":"rahhulleee"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-09"},{"lineNumber":209,"author":{"gitId":"rahhulleee"},"content":"            String byeMessage \u003d output.execute(input); // Assume this returns the \"Bye\" message","lastModifiedDate":"2024-02-09"},{"lineNumber":210,"author":{"gitId":"rahhulleee"},"content":"            Platform.runLater(() -\u003e {","lastModifiedDate":"2024-02-09"},{"lineNumber":211,"author":{"gitId":"rahhulleee"},"content":"                PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5)); // Adjust the delay as needed","lastModifiedDate":"2024-02-09"},{"lineNumber":212,"author":{"gitId":"rahhulleee"},"content":"                delay.setOnFinished(e -\u003e Platform.exit());","lastModifiedDate":"2024-02-09"},{"lineNumber":213,"author":{"gitId":"rahhulleee"},"content":"                delay.play();","lastModifiedDate":"2024-02-09"},{"lineNumber":214,"author":{"gitId":"rahhulleee"},"content":"            });","lastModifiedDate":"2024-02-09"},{"lineNumber":215,"author":{"gitId":"rahhulleee"},"content":"            return byeMessage;","lastModifiedDate":"2024-02-09"},{"lineNumber":216,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-09"},{"lineNumber":217,"author":{"gitId":"rahhulleee"},"content":"            return response;","lastModifiedDate":"2024-02-09"},{"lineNumber":218,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":219,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":220,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":221,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"rahhulleee":221}},{"path":"src/main/java/duke/rahbot/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.rahbot;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"public class Launcher {","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"        Application.launch(Duke.class, args);","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"rahhulleee":13}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" * Manages storage operations for Duke application tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":" * This class handles the loading, adding, and saving of task objects to a file.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":" * It maintains an in-memory list of tasks for quick access and manipulation.","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":" * The storage is implemented using a file-based approach, where tasks are written","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":" * to and read from a specified file. The file is stored in a directory named \"data\"","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":" * within the project\u0027s root directory.","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"public class Storage {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"    // Constants for file and directory names","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"    private static final String FILE_NAME \u003d \"rah.txt\";","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"    private static final Path PROJECT_DIR \u003d Paths.get(System.getProperty(\"user.dir\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"    private static final Path DATA_DIR \u003d Paths.get(PROJECT_DIR.toString(), \"data\");","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    private static final Path FILE_PATH \u003d Paths.get(DATA_DIR.toString(), FILE_NAME);","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"    // In-memory list of tasks","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     * Writes the given list of tasks to the file specified in {@code FILE_PATH}.","lastModifiedDate":"2024-02-10"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"     * Overwrites the existing content of the file.","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-10"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"     * @param inventory The list of tasks to be written to the file.","lastModifiedDate":"2024-02-10"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-02-10"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e inventory) throws IOException {","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"        File file \u003d FILE_PATH.toFile();","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"        // Ensure the directory exists","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"        try (FileWriter fw \u003d new FileWriter(file, false)) { // false to overwrite","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"            for (Task task : inventory) {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"                fw.write(task.toString() + System.lineSeparator());","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     * Adds a task to the in-memory list of tasks.","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     * @param t The task to be added.","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"    public void add(Task t) {","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"        tasks.add(t);","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"     * Retrieves the in-memory list of tasks.","lastModifiedDate":"2024-02-10"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-10"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"     * @return An ArrayList containing the tasks stored in memory.","lastModifiedDate":"2024-02-10"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"        return tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"     * Returns a string representation of the tasks stored in the in-memory list.","lastModifiedDate":"2024-02-10"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-10"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"     * @return A formatted string listing the tasks.","lastModifiedDate":"2024-02-10"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":76,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"rahhulleee"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"rahhulleee"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"rahhulleee"},"content":"        for (Task s : tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"rahhulleee"},"content":"            result.append(count).append(\". \").append(s.toString()).append(\"\\n\");","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"rahhulleee"},"content":"            count++;","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"rahhulleee"},"content":"        return result.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"}],"authorContributionMap":{"rahhulleee":87}},{"path":"src/main/java/duke/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * A class representing a Deadlines task, a type of Task in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * Inherits from the Task class.","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * Provides additional functionality to handle tasks with specific deadlines.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * @author SITHANATHAN RAHUL","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * @version CS2103T AY23/24 Semester 2","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    private LocalDateTime actualDeadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a Deadlines task with the given description and deadline.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * The task is initially marked as not completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"     * @param description    A String describing the Deadlines task.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * @param actualDeadline The LocalDateTime representing the deadline of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"    public Deadlines(String description, LocalDateTime actualDeadline) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"        super(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"        this.actualDeadline \u003d actualDeadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"     * Returns the deadline date of the Deadlines task.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"     * @return LocalDate representing the deadline date of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"        return this.getAbsoluteDeadline().toLocalDate();","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"     * Returns the absolute deadline of the Deadlines task.","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"     * @return LocalDateTime representing the absolute deadline of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    public LocalDateTime getAbsoluteDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"        return this.actualDeadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String representation of the Deadlines task, indicating its completion status and deadline.","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"     * @return A formatted String indicating the completion status, description, and deadline of the Deadlines task.","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\u0027hrs\u0027\");","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"        if (this.isMarked()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"            return \"[D][X] \" + super.toString() + \"(by: \" + this.getAbsoluteDeadline().format(outputFormatter) + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"            return \"[D][ ] \" + super.toString() + \"(by: \" + this.getAbsoluteDeadline().format(outputFormatter) + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String identifier for the Deadlines task.","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"     * @return A String identifier specific to Deadlines tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"    public String identifier() {","lastModifiedDate":"2024-01-25"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"        return \"[D]\";","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"rahhulleee":72}},{"path":"src/main/java/duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * A class representing an Events task, a type of Task in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * Inherits from the Task class.","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * Provides additional functionality to handle events with specific start and end times.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" * @author SITHANATHAN RAHUL","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":" * @version CS2103T AY23/24 Semester 2","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"public class Events extends Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"    private LocalDateTime actualStart;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    private LocalDateTime actualEnd;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * Constructs an Events task with the given description, start time, and end time.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     * The task is initially marked as not completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"     * @param description  A String describing the Events task.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * @param actualStart  The LocalDateTime representing the start time of the event.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * @param actualEnd    The LocalDateTime representing the end time of the event.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"    public Events(String description, LocalDateTime actualStart, LocalDateTime actualEnd) {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"        super(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"        this.actualStart \u003d actualStart;","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"        this.actualEnd \u003d actualEnd;","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String representation of the Events task, indicating its completion status and event times.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"     * @return A formatted String indicating the completion status, description, and event times of the Events task.","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\u0027hrs\u0027\");","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"        if (this.isMarked()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"            return \"[E][X] \"","lastModifiedDate":"2024-02-10"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"                + super.toString()","lastModifiedDate":"2024-02-10"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"                +","lastModifiedDate":"2024-02-10"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"                \"(from: \" + this.actualStart.format(outputFormatter)","lastModifiedDate":"2024-02-10"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"                +","lastModifiedDate":"2024-02-10"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"                \" to: \" + this.actualEnd.format(outputFormatter)","lastModifiedDate":"2024-02-10"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"                + \")\";","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"            return \"[E][ ] \"","lastModifiedDate":"2024-02-10"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"                + super.toString()","lastModifiedDate":"2024-02-10"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"                + \"(from: \" + this.actualStart.format(outputFormatter)","lastModifiedDate":"2024-02-10"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"                + \", to: \" + this.actualEnd.format(outputFormatter) + \")\";","lastModifiedDate":"2024-02-10"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String identifier for the Events task.","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"     * @return A String identifier specific to Events tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"    public String identifier() {","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"        return \"[E]\";","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"        return this.actualStart;","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"     * Returns the deadline of the Events task.","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"     * Since Events tasks do not have traditional deadlines, it returns null.","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"     * @return null since Events tasks do not have traditional deadlines.","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"        return null;","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"rahhulleee":76}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":" * An abstract class representing a generic Task in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * All specific task types should extend this class.","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * Provides basic functionality for task manipulation such as marking and retrieving deadlines.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * @author SITHANATHAN RAHUL","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" * @version CS2103T AY23/24 Semester 2","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"    private String description;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"    private boolean marked;","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a Task with the given description.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"     * The task is initially marked as not completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"     * @param description A String describing the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    Task(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"        this.marked \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     * Marks the task as completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"    public void mark() {","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"        this.marked \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"     * Unmarks the task as completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"        this.marked \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"     * Checks if the task is marked as completed.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"     * @return true if the task is marked as completed, false otherwise.","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"    public boolean isMarked() {","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"        return this.marked;","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"        return this.description;","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String representation of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     * @return A String describing the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"        return this.description;","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"     * Abstract method to be implemented by subclasses.","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String identifier specific to the type of task.","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"     * @return A String identifier for the task type.","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"    public abstract String identifier();","lastModifiedDate":"2024-02-10"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"     * Abstract method to be implemented by subclasses.","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"     * Returns the deadline of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"     * @return LocalDate representing the deadline of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"    public abstract LocalDate getDeadline();","lastModifiedDate":"2024-02-10"},{"lineNumber":74,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"rahhulleee":75}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":" * A class that represents a ToDo task, a type of Task in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * Inherits from the Task class.","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * @author SITHANATHAN RAHUL","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" * @version CS2103T AY23/24 Semester 2","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"     * Constructs a ToDo task with the given description.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"     * @param description A String describing the ToDo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"        super(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String representation of the ToDo task, indicating its completion status.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"     * @return A formatted String indicating the completion status and description of the ToDo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"        if (this.isMarked()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"            return \"[T][X] \" + super.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"            return \"[T][ ] \" + super.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     * Returns a String identifier for the ToDo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"     * @return A String identifier specific to ToDo tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"    public String identifier() {","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"        return \"[T]\";","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"     * Returns the deadline of the ToDo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"     * Since ToDo tasks do not have deadlines, it returns the current date.","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     * @return LocalDate representing the current date.","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"    public LocalDate getDeadline() {","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"        return LocalDate.now();","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"rahhulleee":52}},{"path":"src/main/java/duke/ui/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import duke.parser.Parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"/**","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":" * Represents the output interface for the Duke application.","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":" * This class handles the presentation of information to the user.","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":" */","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"public class Output {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"     * The ASCII art representation of the Duke logo.","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"    public static final String LOGO \u003d \" _____   _____  _    _ \\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"                + \"|  __ \\\\ / ____|| |  | |\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"                + \"| |__) | (___  | |__| |\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"                + \"|  _  / \\\\___ \\\\ |  __  |\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"                + \"| | \\\\ \\\\ ____) || |  | |\\n\"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"                + \"|_|  \\\\_|_____/ |_|  |_|\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"rahhulleee"},"content":"    private Parser parser;","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rahhulleee"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rahhulleee"},"content":"     * Constructs an Output object with the specified Parser and Storage.","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rahhulleee"},"content":"     * @param parser The Parser object used for processing user input.","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rahhulleee"},"content":"     * @param storage The Storage object used for managing data storage.","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rahhulleee"},"content":"    public Output(Parser parser, Storage storage) {","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"rahhulleee"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"rahhulleee"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"rahhulleee"},"content":"     * Creates a decorative layer around the provided string for better visual separation.","lastModifiedDate":"2024-02-10"},{"lineNumber":35,"author":{"gitId":"rahhulleee"},"content":"     * @param s The string to be encapsulated within the decorative layer.","lastModifiedDate":"2024-02-10"},{"lineNumber":36,"author":{"gitId":"rahhulleee"},"content":"     * @return A string with a decorative layer around the provided input.","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":38,"author":{"gitId":"rahhulleee"},"content":"    public static String layer(String s) {","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"rahhulleee"},"content":"        String line \u003d \"_______________________________________________________\";","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"rahhulleee"},"content":"        return line + \"\\n\" + s + \"\\n\" + line;","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":44,"author":{"gitId":"rahhulleee"},"content":"     * Generates a welcome message for the user, including the Duke logo.","lastModifiedDate":"2024-02-10"},{"lineNumber":45,"author":{"gitId":"rahhulleee"},"content":"     * @return A welcome message string.","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"rahhulleee"},"content":"    public String welcome() {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"rahhulleee"},"content":"        return layer(\"Hello! I\u0027m \\n\" + LOGO + \"What can I do for you?\");","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":52,"author":{"gitId":"rahhulleee"},"content":"     * Generates a farewell message for the user.","lastModifiedDate":"2024-02-10"},{"lineNumber":53,"author":{"gitId":"rahhulleee"},"content":"     * @return A farewell message string.","lastModifiedDate":"2024-02-10"},{"lineNumber":54,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rahhulleee"},"content":"    public String bye() {","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"rahhulleee"},"content":"        return layer(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"rahhulleee"},"content":"    /**","lastModifiedDate":"2024-02-10"},{"lineNumber":60,"author":{"gitId":"rahhulleee"},"content":"     * Executes the specified input command and returns the result.","lastModifiedDate":"2024-02-10"},{"lineNumber":61,"author":{"gitId":"rahhulleee"},"content":"     * If the input is \"bye\", returns the farewell message. Otherwise, processes the input with the parser.","lastModifiedDate":"2024-02-10"},{"lineNumber":62,"author":{"gitId":"rahhulleee"},"content":"     * @param input The user\u0027s input command.","lastModifiedDate":"2024-02-10"},{"lineNumber":63,"author":{"gitId":"rahhulleee"},"content":"     * @return The result of executing the input command.","lastModifiedDate":"2024-02-10"},{"lineNumber":64,"author":{"gitId":"rahhulleee"},"content":"     */","lastModifiedDate":"2024-02-10"},{"lineNumber":65,"author":{"gitId":"rahhulleee"},"content":"    public String execute(String input) {","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"rahhulleee"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"rahhulleee"},"content":"            return this.bye();","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"rahhulleee"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"rahhulleee"},"content":"            return layer(this.parser.parse(input));","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"rahhulleee"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"}],"authorContributionMap":{"rahhulleee":73}},{"path":"src/test/java/duke/tests/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tests;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Deadlines;","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"    public void deadlineToStringTest() {","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.of(2020, 1, 1, 19, 0);","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"        assertEquals(\"[D][ ] Find Bill(by: 1/1/2020 1900hrs)\", new Deadlines(\"Find Bill\", dateTime).toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"rahhulleee":17}},{"path":"src/test/java/duke/tests/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tests;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.Events;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"public class EventTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"    public void eventToStringTest() {","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"        LocalDateTime dateTime1 \u003d LocalDateTime.of(2020, 1, 1, 15, 0);","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"        LocalDateTime dateTime2 \u003d LocalDateTime.of(2020, 1, 1, 16, 0);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"rahhulleee"},"content":"        assertEquals(\"[E][ ] Meet Prof Damith(from: 1/1/2020 1500hrs, to: 1/1/2020 1600hrs)\",","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"rahhulleee"},"content":"                    new Events(\"Meet Prof Damith\", dateTime1, dateTime2).toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"rahhulleee":19}},{"path":"src/test/java/duke/tests/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rahhulleee"},"content":"package duke.tests;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"rahhulleee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"rahhulleee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rahhulleee"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"rahhulleee"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"rahhulleee"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"rahhulleee"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"rahhulleee"},"content":"    public void todoToStringTest() {","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rahhulleee"},"content":"        assertEquals(\"[T][ ] homework\", new ToDo(\"homework\").toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"rahhulleee"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"rahhulleee"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"rahhulleee":15}}]
