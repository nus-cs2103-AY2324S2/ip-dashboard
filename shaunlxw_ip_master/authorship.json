[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"checkstyle {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"    mainClass.set(\"shon.Launcher\")","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"    mainClassName \u003d \"shon.Launcher\"","lastModifiedDate":"2024-02-22"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"    archiveBaseName \u003d \"shon\"","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"shaunlxw":23}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"# Shon User Guide","lastModifiedDate":"2024-02-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"![Screenshot of Shon chatbot](Ui.png)","lastModifiedDate":"2024-02-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"Shon is a chatbot application that helps you easily manage your tasks and your notes!","lastModifiedDate":"2024-02-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"There are 3 types of tasks it can help you track:","lastModifiedDate":"2024-02-24"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"1. **Todo**: tasks with a description","lastModifiedDate":"2024-02-24"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"2. **Deadline**: tasks with a description and a given date and time as deadline","lastModifiedDate":"2024-02-24"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"3. **Event**: tasks with a description, and a from and to date time of the event","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"## General Commands","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"### Viewing help: `help`","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"Shows a message with all the available commands.","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"Format: `help`","lastModifiedDate":"2024-02-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"Output:","lastModifiedDate":"2024-02-24"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"The following command are available:","lastModifiedDate":"2024-02-24"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"1. help: displays this current list of commands available","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"2. tlist: displays your current task list","lastModifiedDate":"2024-02-24"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"3. todo \u003cdesc\u003e: adds a Todo task into your task list with the description","lastModifiedDate":"2024-02-24"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"4. deadline \u003cdesc\u003e /by \u003cdatetime\u003e: adds a Deadline task into your task list with the description and datetime.","lastModifiedDate":"2024-02-24"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"Datetime must be given in dd/mm/yyyy hhmm","lastModifiedDate":"2024-02-24"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"5. event \u003cdesc\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e: adds an Event task into your task list with the description and","lastModifiedDate":"2024-02-24"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"duration. Datetime must be given in dd/mm/yyyy hhmm","lastModifiedDate":"2024-02-24"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"6. mark \u003cidx\u003e: marks the task at given index as done","lastModifiedDate":"2024-02-24"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"7. unmark \u003cidx\u003e: unmarks the task at given index as done","lastModifiedDate":"2024-02-24"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"8. deltask \u003cidx\u003e: deletes the task at given index","lastModifiedDate":"2024-02-24"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"9. find \u003ckeyword\u003e: finds all tasks with matching keyword","lastModifiedDate":"2024-02-24"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"10. nlist: displays your current note list","lastModifiedDate":"2024-02-24"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"11. note \u003ctext\u003e: adds a note with the given text to your note list","lastModifiedDate":"2024-02-24"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"12. delnote \u003cidx\u003e: deletes the note at the given index","lastModifiedDate":"2024-02-24"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"13. bye: exits the app","lastModifiedDate":"2024-02-24"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2024-02-24"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"Exits the program.","lastModifiedDate":"2024-02-24"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"Format: `bye`","lastModifiedDate":"2024-02-24"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"## Task-Related Commands","lastModifiedDate":"2024-02-24"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"### Listing all tasks: `tlist`","lastModifiedDate":"2024-02-24"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"Shows a list of all your tasks and their completion status.","lastModifiedDate":"2024-02-24"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"Format: `tlist`","lastModifiedDate":"2024-02-24"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"Here are the tasks in your list:","lastModifiedDate":"2024-02-24"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"1.[T][X] read book","lastModifiedDate":"2024-02-24"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"2.[D][ ] quiz (by: 25 Feb 2024 1200)","lastModifiedDate":"2024-02-24"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"3.[E][ ] meeting (from: 26 Feb 2024 0900 to: 26 Feb 2024 1100)","lastModifiedDate":"2024-02-24"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"\u003e The`[T]`, `[D]`, and `[E]` indicates that the task is a Todo task, Deadline task, and Event","lastModifiedDate":"2024-02-24"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"\u003e task respectively.","lastModifiedDate":"2024-02-24"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"### Adding a Todo task: `todo`","lastModifiedDate":"2024-02-24"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"Adds a Todo task with the given description to the list of tasks.","lastModifiedDate":"2024-02-24"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2024-02-24"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"Example input: `todo read book`","lastModifiedDate":"2024-02-24"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2024-02-24"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"  [T][ ] read book","lastModifiedDate":"2024-02-24"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"Now you have 1 task in the list.","lastModifiedDate":"2024-02-24"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"### Adding a Deadline task: `deadline`","lastModifiedDate":"2024-02-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"Adds a Deadline task with the given description and the datetime as deadline to the list of tasks.","lastModifiedDate":"2024-02-24"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"Format: `deadline DESCRIPTION /by DD/MM/YYYY HHMM`","lastModifiedDate":"2024-02-24"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"Example input: `deadline assignment /by 25/02/2024 1300`","lastModifiedDate":"2024-02-24"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2024-02-24"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"  [D][ ] assignment (by: 25 Feb 2024 1300)","lastModifiedDate":"2024-02-24"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2024-02-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"### Adding an Event task: `event`","lastModifiedDate":"2024-02-24"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"Adds an Event task with the given description and a from and to datetime to the list of tasks.","lastModifiedDate":"2024-02-24"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"Format: `event DESCRIPTION /from DD/MM/YYYY HHMM /to DD/MM/YYYY HHMM`","lastModifiedDate":"2024-02-24"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"Example input: `event meeting /from 26/02/2024 0900 /to 26/02/2024 1100`","lastModifiedDate":"2024-02-24"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2024-02-24"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"  [E][ ] meeting (by: 25 Feb 2024 1300)","lastModifiedDate":"2024-02-24"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2024-02-24"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"### Marking a task: `mark`","lastModifiedDate":"2024-02-24"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"Marks a task as done.","lastModifiedDate":"2024-02-24"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"Format: `mark INDEX`","lastModifiedDate":"2024-02-24"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"* Marks the task at the specified `INDEX` as done, with an `X`.","lastModifiedDate":"2024-02-24"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"* The index refers to the index number shown when you use the `tlist` command.","lastModifiedDate":"2024-02-24"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2024-02-24"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"Example input: `mark 1`","lastModifiedDate":"2024-02-24"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2024-02-24"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"  [T][X] read book","lastModifiedDate":"2024-02-24"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"### Unmarking a task: `unmark`","lastModifiedDate":"2024-02-24"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"Marks a task as not done.","lastModifiedDate":"2024-02-24"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2024-02-24"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"* Marks the task at the specified `INDEX` as not done, by removing the `X`.","lastModifiedDate":"2024-02-24"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"* The index refers to the index number shown when you use the `tlist` command.","lastModifiedDate":"2024-02-24"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2024-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"Example input: \u0027unmark 1\u0027","lastModifiedDate":"2024-02-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2024-02-24"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"  [T][ ] read book","lastModifiedDate":"2024-02-24"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"### Deleting a task: `deltask`","lastModifiedDate":"2024-02-24"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"Deletes the specified task from the list of tasks.","lastModifiedDate":"2024-02-24"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"Format: `deltask INDEX`","lastModifiedDate":"2024-02-24"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"* Deletes the task at the specified INDEX.","lastModifiedDate":"2024-02-24"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"* The index refers to the index number shown when you use the `tlist` command.","lastModifiedDate":"2024-02-24"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2024-02-24"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"Example input: `deltask 2`","lastModifiedDate":"2024-02-24"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2024-02-24"},{"lineNumber":161,"author":{"gitId":"shaunlxw"},"content":"  [D][ ] quiz (by: 25 Feb 2024 2359)","lastModifiedDate":"2024-02-24"},{"lineNumber":162,"author":{"gitId":"shaunlxw"},"content":"Now you have 1 task in the list.","lastModifiedDate":"2024-02-24"},{"lineNumber":163,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":164,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":165,"author":{"gitId":"shaunlxw"},"content":"### Finding tasks by keyword: `find`","lastModifiedDate":"2024-02-24"},{"lineNumber":166,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":167,"author":{"gitId":"shaunlxw"},"content":"Finds tasks where their descriptions contain any of the given keywords.","lastModifiedDate":"2024-02-24"},{"lineNumber":168,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":169,"author":{"gitId":"shaunlxw"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2024-02-24"},{"lineNumber":170,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":171,"author":{"gitId":"shaunlxw"},"content":"\u003e Item(s) in square brackets are optional.","lastModifiedDate":"2024-02-24"},{"lineNumber":172,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":173,"author":{"gitId":"shaunlxw"},"content":"* The search is case-insensitive e.g. `book` will match `Book`.","lastModifiedDate":"2024-02-24"},{"lineNumber":174,"author":{"gitId":"shaunlxw"},"content":"* Partial matching is allowed e.g. \u0027bo\u0027 search will yield \u0027book\u0027 as a result.","lastModifiedDate":"2024-02-24"},{"lineNumber":175,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":176,"author":{"gitId":"shaunlxw"},"content":"Example input: `find bo`","lastModifiedDate":"2024-02-24"},{"lineNumber":177,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":178,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":179,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":180,"author":{"gitId":"shaunlxw"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2024-02-24"},{"lineNumber":181,"author":{"gitId":"shaunlxw"},"content":"1.[T][X] read book","lastModifiedDate":"2024-02-24"},{"lineNumber":182,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":183,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":184,"author":{"gitId":"shaunlxw"},"content":"## Note-Related Commands","lastModifiedDate":"2024-02-24"},{"lineNumber":185,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":186,"author":{"gitId":"shaunlxw"},"content":"### Listing all notes: `nlist`","lastModifiedDate":"2024-02-24"},{"lineNumber":187,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":188,"author":{"gitId":"shaunlxw"},"content":"Shows a list of all your notes.","lastModifiedDate":"2024-02-24"},{"lineNumber":189,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":190,"author":{"gitId":"shaunlxw"},"content":"Format: `nlist`","lastModifiedDate":"2024-02-24"},{"lineNumber":191,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":192,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":193,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":194,"author":{"gitId":"shaunlxw"},"content":"Here are your notes:","lastModifiedDate":"2024-02-24"},{"lineNumber":195,"author":{"gitId":"shaunlxw"},"content":"1. shoe size US10","lastModifiedDate":"2024-02-24"},{"lineNumber":196,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":197,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":198,"author":{"gitId":"shaunlxw"},"content":"### Adding a note: `note`","lastModifiedDate":"2024-02-24"},{"lineNumber":199,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":200,"author":{"gitId":"shaunlxw"},"content":"Adds a note to the list of notes.","lastModifiedDate":"2024-02-24"},{"lineNumber":201,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":202,"author":{"gitId":"shaunlxw"},"content":"Format: `note TEXT`","lastModifiedDate":"2024-02-24"},{"lineNumber":203,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":204,"author":{"gitId":"shaunlxw"},"content":"Example input: `note shoe size US10`","lastModifiedDate":"2024-02-24"},{"lineNumber":205,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":206,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":207,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":208,"author":{"gitId":"shaunlxw"},"content":"Got it. I\u0027ve added this note:","lastModifiedDate":"2024-02-24"},{"lineNumber":209,"author":{"gitId":"shaunlxw"},"content":"  shoe size US10","lastModifiedDate":"2024-02-24"},{"lineNumber":210,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":211,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":212,"author":{"gitId":"shaunlxw"},"content":"### Deleting a note: `delnote`","lastModifiedDate":"2024-02-24"},{"lineNumber":213,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":214,"author":{"gitId":"shaunlxw"},"content":"Deletes the specified note from the list of notes.","lastModifiedDate":"2024-02-24"},{"lineNumber":215,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":216,"author":{"gitId":"shaunlxw"},"content":"Format: `delnote INDEX`","lastModifiedDate":"2024-02-24"},{"lineNumber":217,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":218,"author":{"gitId":"shaunlxw"},"content":"* Deletes the note at the specified INDEX.","lastModifiedDate":"2024-02-24"},{"lineNumber":219,"author":{"gitId":"shaunlxw"},"content":"* The index refers to the index number shown when you use the `nlist` command.","lastModifiedDate":"2024-02-24"},{"lineNumber":220,"author":{"gitId":"shaunlxw"},"content":"* The index must be a positive integer 1, 2, 3, ...","lastModifiedDate":"2024-02-24"},{"lineNumber":221,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":222,"author":{"gitId":"shaunlxw"},"content":"Example input: `delnote 2`","lastModifiedDate":"2024-02-24"},{"lineNumber":223,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":224,"author":{"gitId":"shaunlxw"},"content":"Example output:","lastModifiedDate":"2024-02-24"},{"lineNumber":225,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":226,"author":{"gitId":"shaunlxw"},"content":"This note has been deleted:","lastModifiedDate":"2024-02-24"},{"lineNumber":227,"author":{"gitId":"shaunlxw"},"content":"  shoe size US10","lastModifiedDate":"2024-02-24"},{"lineNumber":228,"author":{"gitId":"shaunlxw"},"content":"```","lastModifiedDate":"2024-02-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":230,"author":{"gitId":"shaunlxw"},"content":"## Saving Data","lastModifiedDate":"2024-02-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":232,"author":{"gitId":"shaunlxw"},"content":"Shon chatbot data are saved in the hard disk automatically after any command","lastModifiedDate":"2024-02-24"},{"lineNumber":233,"author":{"gitId":"shaunlxw"},"content":"that changes the data. There is no need to save manually.","lastModifiedDate":"2024-02-24"}],"authorContributionMap":{"-":16,"shaunlxw":217}},{"path":"src/main/java/shon/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class Launcher {","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"shaunlxw":12}},{"path":"src/main/java/shon/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private Shon shon \u003d new Shon();","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * Loads FXML, sets the stage, and show stage.","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * @param stage the primary stage for this application, onto which","lastModifiedDate":"2024-02-22"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     *     the application scene can be set.","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * Applications may create other stages, if needed, but they will not be","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     *     primary stages.","lastModifiedDate":"2024-02-22"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-22"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-22"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-22"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setShon(shon);","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            stage.setTitle(\"Shon\");","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"            stage.show();","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-22"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":39}},{"path":"src/main/java/shon/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-24"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import shon.component.ShonDialogBox;","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"import shon.component.UserDialogBox;","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.CommandException;","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-22"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    private Shon shon;","lastModifiedDate":"2024-02-22"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userImage.png\"));","lastModifiedDate":"2024-02-24"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    private Image shonImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/botImage.png\"));","lastModifiedDate":"2024-02-24"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * Sets auto scroll, and displays greeting message.","lastModifiedDate":"2024-02-22"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"        // set auto scroll","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * Sets the chatbot to the Shon instance provided.","lastModifiedDate":"2024-02-22"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     * @param s The Shon instance to be used.","lastModifiedDate":"2024-02-22"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"    public void setShon(Shon s) {","lastModifiedDate":"2024-02-22"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"        shon \u003d s;","lastModifiedDate":"2024-02-22"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"        dialogContainer.getChildren().addAll(new ShonDialogBox(this.shon.greet(), shonImage));","lastModifiedDate":"2024-02-24"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Shon\u0027s reply","lastModifiedDate":"2024-02-22"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     * and then appends them to the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-22"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"        String input \u003d userInput.getText().strip();","lastModifiedDate":"2024-02-22"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        dialogContainer.getChildren().addAll(new UserDialogBox(input, userImage));","lastModifiedDate":"2024-02-24"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"            dialogContainer.getChildren().addAll(new ShonDialogBox(shon.getResponse(input), shonImage));","lastModifiedDate":"2024-02-24"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException | CommandException | DateTimeParseException e) {","lastModifiedDate":"2024-02-24"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"            dialogContainer.getChildren().addAll(ShonDialogBox.getErrorDialog(e.getMessage(), shonImage));","lastModifiedDate":"2024-02-24"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-22"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":68}},{"path":"src/main/java/shon/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.command.ExitCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.command.HelpCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.command.note.AddNoteCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.command.note.DeleteNoteCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import shon.command.note.ShowNotesCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.AddDeadlineCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.AddEventCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.AddTodoCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.DeleteTaskCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.FindCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.ListCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.MarkCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"import shon.command.task.UnmarkCommand;","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.CommandException;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":" * Represents a Parser that makes sense of the user\u0027s inputs.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"public class Parser {","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    /** The allowed set of actions that the user can do */","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    private enum Action {","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        TLIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELTASK, FIND, BYE, NOTE, NLIST, DELNOTE, HELP","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * Parses the user\u0027s input into a command with the appropriate parameters.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     * @return Command to be executed.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * @throws CommandException If given user input is empty, or a command not allowed in \u003ccode\u003eAction\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If given parameters for that command is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    public static Command parse(String input, TaskList tasks, NoteList notes)","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"            throws CommandException, ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        Action action \u003d Parser.getAction(input);","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"        assert action !\u003d null : \"Action in Parser#parse is null\";","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        switch (action) {","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        case TLIST:","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            return new ListCommand(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        case MARK:","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"            return new MarkCommand(tasks, Parser.getIdx(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"        case UNMARK:","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"            return new UnmarkCommand(tasks, Parser.getIdx(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"        case TODO:","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"            return new AddTodoCommand(tasks, Parser.getDescription(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"            return new AddDeadlineCommand(tasks, Parser.getDescription(input), Parser.getBy(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"        case EVENT:","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"            return new AddEventCommand(tasks, Parser.getDescription(input), Parser.getFrom(input), Parser.getTo(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"        case DELTASK:","lastModifiedDate":"2024-02-23"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"            return new DeleteTaskCommand(tasks, Parser.getIdx(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"        case FIND:","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"            return new FindCommand(tasks, Parser.getKeyword(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        case BYE:","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"        case NOTE:","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"            return new AddNoteCommand(notes, Parser.getText(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"        case NLIST:","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"            return new ShowNotesCommand(notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"        case DELNOTE:","lastModifiedDate":"2024-02-23"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"            return new DeleteNoteCommand(notes, Parser.getIdx(input));","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        case HELP:","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"            return new HelpCommand();","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"        default:","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"Sorry. I have a problem with that command.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"     * Returns the type of action/command to take. Identified by the first word of user\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"     * @return \u003ccode\u003eAction\u003c/code\u003e from the allowed set of actions.","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"     * @throws CommandException If input is empty or not a command not allowed in \u003ccode\u003eAction\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"    private static Action getAction(String input) throws CommandException {","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"        // check for empty command","lastModifiedDate":"2024-02-22"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"        if (input.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"Please enter a command.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"            // guaranteed to have at least one item in split since input is stripped and empty string checked","lastModifiedDate":"2024-02-22"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"            return Action.valueOf(input.split(\" \")[0].toUpperCase());","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-)\");","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"     * Returns the index for \u003ccode\u003emark\u003c/code\u003e, \u003ccode\u003eunmark\u003c/code\u003e and \u003ccode\u003edelete\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"     * @return Index required for the action.","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If no index is entered, multiple indexes are entered, or the value entered","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"     *     is not a number.","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"    private static int getIdx(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \");","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"        // no index given","lastModifiedDate":"2024-02-22"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter which task number to mark.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"        // more than one index given","lastModifiedDate":"2024-02-22"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003e 2) {","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter only one task number to mark.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"            return Integer.parseInt(parameters[1].strip());","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter a valid number for task number.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"     * Returns the description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"     * @return Description of the task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the description is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"    private static String getDescription(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"        // No description entered","lastModifiedDate":"2024-02-22"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":139,"author":{"gitId":"shaunlxw"},"content":"        // remove the \"/by\" parameter if any","lastModifiedDate":"2024-02-22"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d description.split(\"/by\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"        description \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"        // remove the \"/from\" parameter if any. assumes that \"/to\" is placed after the \"/from\" parameter","lastModifiedDate":"2024-02-22"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"        // if \"/to\" is in front of the \"/from\" parameter, it will be detected by the getTo() method.","lastModifiedDate":"2024-02-22"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d description.split(\"/from\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"        description \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"        // checks for empty description","lastModifiedDate":"2024-02-22"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty\");","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"        return description;","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"     * Returns the by parameter for \u003ccode\u003edeadline\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"     * @return The by parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is a deadline command but \u003ccode\u003e\"/by\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"shaunlxw"},"content":"     *     or if the given \u003ccode\u003e/by\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"shaunlxw"},"content":"    private static String getBy(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":164,"author":{"gitId":"shaunlxw"},"content":"        Parser.checkContains(input, \"/by\");","lastModifiedDate":"2024-02-22"},{"lineNumber":165,"author":{"gitId":"shaunlxw"},"content":"        Parser.checkNotEmptyAfter(input, \"/by\");","lastModifiedDate":"2024-02-22"},{"lineNumber":166,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":167,"author":{"gitId":"shaunlxw"},"content":"        return input.split(\"/by\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":168,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":169,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":170,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"shaunlxw"},"content":"     * Returns the from parameter for \u003ccode\u003eevent\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"shaunlxw"},"content":"     * @return The from parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is an event command but \u003ccode\u003e\"/from\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":176,"author":{"gitId":"shaunlxw"},"content":"     *     or if the given \u003ccode\u003e/from\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":177,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":178,"author":{"gitId":"shaunlxw"},"content":"    private static String getFrom(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":179,"author":{"gitId":"shaunlxw"},"content":"        Parser.checkContains(input, \"/from\");","lastModifiedDate":"2024-02-22"},{"lineNumber":180,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":181,"author":{"gitId":"shaunlxw"},"content":"        // drop the first action word","lastModifiedDate":"2024-02-22"},{"lineNumber":182,"author":{"gitId":"shaunlxw"},"content":"        input \u003d input.split(\" \", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":183,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":184,"author":{"gitId":"shaunlxw"},"content":"        // check for characters after \"/from\"","lastModifiedDate":"2024-02-22"},{"lineNumber":185,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\"/from\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":186,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":187,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event from date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":188,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":189,"author":{"gitId":"shaunlxw"},"content":"        String from \u003d parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":190,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":191,"author":{"gitId":"shaunlxw"},"content":"        // check for characters before \"/to\"","lastModifiedDate":"2024-02-22"},{"lineNumber":192,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d from.split(\"/to\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":193,"author":{"gitId":"shaunlxw"},"content":"        from \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":194,"author":{"gitId":"shaunlxw"},"content":"        if (from.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":195,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event from date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":196,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":197,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":198,"author":{"gitId":"shaunlxw"},"content":"        return from;","lastModifiedDate":"2024-02-04"},{"lineNumber":199,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":200,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":201,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":202,"author":{"gitId":"shaunlxw"},"content":"     * Returns the to parameter for \u003ccode\u003eevent\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":203,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":204,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":205,"author":{"gitId":"shaunlxw"},"content":"     * @return The to parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":206,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is an event command but \u003ccode\u003e\"/to\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":207,"author":{"gitId":"shaunlxw"},"content":"     *     or if the given \u003ccode\u003e/to\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":208,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":209,"author":{"gitId":"shaunlxw"},"content":"    private static String getTo(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":210,"author":{"gitId":"shaunlxw"},"content":"        Parser.checkContains(input, \"/to\");","lastModifiedDate":"2024-02-22"},{"lineNumber":211,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":212,"author":{"gitId":"shaunlxw"},"content":"        // get strings after \"/from\"","lastModifiedDate":"2024-02-22"},{"lineNumber":213,"author":{"gitId":"shaunlxw"},"content":"        // split on \"/from\" is guaranteed to have at least 2 items since getFrom() is called first","lastModifiedDate":"2024-02-04"},{"lineNumber":214,"author":{"gitId":"shaunlxw"},"content":"        String to \u003d input.split(\"/from\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":215,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":216,"author":{"gitId":"shaunlxw"},"content":"        // check if \"/to\" is in the string after \"/from\"","lastModifiedDate":"2024-02-22"},{"lineNumber":217,"author":{"gitId":"shaunlxw"},"content":"        if (!to.contains(\"/to\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":218,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"\\\"/to\\\" must come after \\\"/from\\\".\");","lastModifiedDate":"2024-02-04"},{"lineNumber":219,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":220,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":221,"author":{"gitId":"shaunlxw"},"content":"        Parser.checkNotEmptyAfter(input, \"/to\");","lastModifiedDate":"2024-02-22"},{"lineNumber":222,"author":{"gitId":"shaunlxw"},"content":"        return to.split(\"/to\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":223,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":224,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":225,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":226,"author":{"gitId":"shaunlxw"},"content":"     * Returns the keyword of the \u003ccode\u003efind\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":227,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":228,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":229,"author":{"gitId":"shaunlxw"},"content":"     * @return The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":230,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If no keyword is given.","lastModifiedDate":"2024-02-05"},{"lineNumber":231,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":232,"author":{"gitId":"shaunlxw"},"content":"    private static String getKeyword(String input) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":233,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":234,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":235,"author":{"gitId":"shaunlxw"},"content":"        // check for empty keyword","lastModifiedDate":"2024-02-22"},{"lineNumber":236,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":237,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter a keyword to find by.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":238,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":239,"author":{"gitId":"shaunlxw"},"content":"        return parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":240,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":241,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":242,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":243,"author":{"gitId":"shaunlxw"},"content":"     * Checks that input contains keyword.","lastModifiedDate":"2024-02-22"},{"lineNumber":244,"author":{"gitId":"shaunlxw"},"content":"     * @param input The input to check.","lastModifiedDate":"2024-02-22"},{"lineNumber":245,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to find in input.","lastModifiedDate":"2024-02-22"},{"lineNumber":246,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If keyword is not found in input.","lastModifiedDate":"2024-02-22"},{"lineNumber":247,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":248,"author":{"gitId":"shaunlxw"},"content":"    private static void checkContains(String input, String keyword) throws ParameterException {","lastModifiedDate":"2024-02-22"},{"lineNumber":249,"author":{"gitId":"shaunlxw"},"content":"        if (!input.contains(keyword)) {","lastModifiedDate":"2024-02-22"},{"lineNumber":250,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please indicate from date/time after \\\"\" + keyword + \"\\\".\");","lastModifiedDate":"2024-02-22"},{"lineNumber":251,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-22"},{"lineNumber":252,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":253,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":254,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":255,"author":{"gitId":"shaunlxw"},"content":"     * Checks input is not empty after the given word.","lastModifiedDate":"2024-02-22"},{"lineNumber":256,"author":{"gitId":"shaunlxw"},"content":"     * @param input The input to check.","lastModifiedDate":"2024-02-22"},{"lineNumber":257,"author":{"gitId":"shaunlxw"},"content":"     * @param word Checks for input after this word.","lastModifiedDate":"2024-02-22"},{"lineNumber":258,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If there are no further input after word.","lastModifiedDate":"2024-02-22"},{"lineNumber":259,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":260,"author":{"gitId":"shaunlxw"},"content":"    private static void checkNotEmptyAfter(String input, String word) throws ParameterException {","lastModifiedDate":"2024-02-22"},{"lineNumber":261,"author":{"gitId":"shaunlxw"},"content":"        if (input.endsWith(word)) {","lastModifiedDate":"2024-02-22"},{"lineNumber":262,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(word + \" date/time cannot be empty.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":263,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-22"},{"lineNumber":264,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":265,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":266,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":267,"author":{"gitId":"shaunlxw"},"content":"     * Returns the text of the note.","lastModifiedDate":"2024-02-23"},{"lineNumber":268,"author":{"gitId":"shaunlxw"},"content":"     * @param input The input of the user.","lastModifiedDate":"2024-02-23"},{"lineNumber":269,"author":{"gitId":"shaunlxw"},"content":"     * @return The text of the note.","lastModifiedDate":"2024-02-23"},{"lineNumber":270,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given text of the note is empty.","lastModifiedDate":"2024-02-23"},{"lineNumber":271,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":272,"author":{"gitId":"shaunlxw"},"content":"    private static String getText(String input) throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":273,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-23"},{"lineNumber":274,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":275,"author":{"gitId":"shaunlxw"},"content":"        // Check empty note","lastModifiedDate":"2024-02-23"},{"lineNumber":276,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-23"},{"lineNumber":277,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Note cannot be empty.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":278,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":279,"author":{"gitId":"shaunlxw"},"content":"        return parameters[1].strip();","lastModifiedDate":"2024-02-23"},{"lineNumber":280,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":281,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":281}},{"path":"src/main/java/shon/Shon.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.CommandException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":" * Represents a chatbot that maintains a Todo List.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"public class Shon {","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    private NoteList notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * Creates a \u003ccode\u003eShon\u003c/code\u003e chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public Shon() {","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        this.tasks \u003d storage.loadTasks();","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        this.notes \u003d storage.loadNotes();","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        assert this.storage !\u003d null : \"No storage initialised in Shon\";","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        assert this.tasks !\u003d null : \"No tasklist initialised in Shon\";","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     * Parses the input into a command, executes command and return the result.","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @param input Input given by the user.","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     * @return String representing the result of the command.","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    public String getResponse(String input)","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"            throws ParameterException, CommandException, DateTimeParseException {","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        Command command \u003d Parser.parse(input, this.tasks, this.notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"        return executeCommand(command);","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * Executes and saves the changes to the tasklist into the storage.","lastModifiedDate":"2024-02-22"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * @param command The command to be executed.","lastModifiedDate":"2024-02-22"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     * @return String representing the result of the command.","lastModifiedDate":"2024-02-22"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If any parameters to the command is invalid.","lastModifiedDate":"2024-02-22"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If date/time passed into command is in invalid format.","lastModifiedDate":"2024-02-22"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    private String executeCommand(Command command) throws ParameterException, DateTimeParseException {","lastModifiedDate":"2024-02-22"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-24"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"            String output \u003d command.execute();","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"            this.storage.updateData(this.tasks, this.notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"            return output;","lastModifiedDate":"2024-02-22"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-24"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"            String parsedString \u003d e.getParsedString();","lastModifiedDate":"2024-02-24"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"            String errorMsg \u003d parsedString + \" is not a valid date/time. \"","lastModifiedDate":"2024-02-24"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"                    + \"Please enter the date/time in \\\"dd/mm/yyyy hhmm\\\" format with valid values.\";","lastModifiedDate":"2024-02-24"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"            throw new DateTimeParseException(errorMsg, parsedString, e.getErrorIndex());","lastModifiedDate":"2024-02-24"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"     * Returns greeting message.","lastModifiedDate":"2024-02-24"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"     * @return Greeting message as a String.","lastModifiedDate":"2024-02-24"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    public String greet() {","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        return \"Hello! I\u0027m Shon, your friendly bot that keeps track of your tasks and notes. What can I do for you?\";","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"shaunlxw":70}},{"path":"src/main/java/shon/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.io.File;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":" * Represents a storage that stores the user\u0027s lists.","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"public class Storage {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    /** The file object storing the data for the user\u0027s todo list */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    private File tasks;","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /** The file object storing the data for the user\u0027s notes list */","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    private File notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    /** The different type of task encoded in the data file */","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    private enum TaskType {","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        T, D, E","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * Returns a \u003ccode\u003eStorage\u003c/code\u003e object with the data found at filepath. If no pre-existing data exists, a new file","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * along with any relevant parent directory is created.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @throws Error If an IO error occurred while trying to create the new data file. Suggests potential errors in","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *     creating the relevant parent directories, or bug in storage initialisation.","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    public Storage() {","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"            File dir \u003d new File(\"./data\");","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"            this.tasks \u003d new File(\"./data/tasks.txt\");","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"            this.notes \u003d new File(\"./data/notes.txt\");","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"            boolean isNewDir \u003d dir.mkdirs();","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"            boolean isNewTasks \u003d this.tasks.createNewFile();","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"            boolean isNewNotes \u003d this.notes.createNewFile();","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"            assert dir.exists() : \"Parent directory(s) for storage is not created\";","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"            assert this.tasks.exists() : \"Storage file for tasks is not created\";","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            assert this.notes.exists() : \"Storage file for notes is not created\";","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            throw new Error(\"There is an error in creating/opening the \\\"Shon.txt\\\" file.\"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"                    + \" Check if new directory is created.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     * Loads the pre-existing task list from the stored data file.","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"     * @return \u003ccode\u003eTaskList\u003c/code\u003e loaded with the tasks and data from the existing data.","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"     * @throws Error If the data file is not found. Suggests that data file does not exist and","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     *     potential errors in storage initialisation.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    public TaskList loadTasks() {","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"            assert this.tasks.exists() : \"Storage file for tasks is not created\";","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"            Scanner scanner \u003d new Scanner(this.tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"            TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"                TaskType taskType \u003d TaskType.valueOf(String.valueOf(data.charAt(0)));","lastModifiedDate":"2024-02-22"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"                switch (taskType) {","lastModifiedDate":"2024-02-22"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"                case T:","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"                    addTodo(data, tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"                case D:","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"                    addDeadline(data, tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"                case E:","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"                    addEvent(data, tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"                default:","lastModifiedDate":"2024-02-22"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"                    System.out.println(\"Storage is in wrong format.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"            return tasks;","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"            throw new Error(\"Check that new tasks file is created (if needed) in initializer.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"    private void addTodo(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 3);","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"        assert d[0].equals(\"T\") : \"Provided data is not a Todo storage data\";","lastModifiedDate":"2024-02-22"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1];","lastModifiedDate":"2024-02-22"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d d[2];","lastModifiedDate":"2024-02-22"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"        list.addTodo(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"    private void addDeadline(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 4);","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"        assert d[0].equals(\"D\") : \"Provided data is not a Deadline storage data\";","lastModifiedDate":"2024-02-22"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1];","lastModifiedDate":"2024-02-22"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d d[2];","lastModifiedDate":"2024-02-22"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"        String by \u003d d[3];","lastModifiedDate":"2024-02-22"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"        list.addDeadline(description, by, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"    private void addEvent(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 5);","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"        assert d[0].equals(\"E\") : \"Provided data is not an Event storage data\";","lastModifiedDate":"2024-02-22"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1];","lastModifiedDate":"2024-02-22"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d d[2];","lastModifiedDate":"2024-02-22"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"        String from \u003d d[3];","lastModifiedDate":"2024-02-22"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"        String to \u003d d[4];","lastModifiedDate":"2024-02-22"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"        list.addEvent(description, from, to, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"     * Writes to the data file with the updated data in the TaskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks TaskList to be formatted and stored.","lastModifiedDate":"2024-02-22"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"    public void updateData(TaskList tasks, NoteList notes) {","lastModifiedDate":"2024-02-23"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"            FileWriter tasksWriter \u003d new FileWriter(this.tasks.getPath());","lastModifiedDate":"2024-02-23"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"            FileWriter notesWriter \u003d new FileWriter(this.notes.getPath());","lastModifiedDate":"2024-02-23"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"            for (String line : tasks.formatData()) {","lastModifiedDate":"2024-02-22"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"                tasksWriter.write(line);","lastModifiedDate":"2024-02-23"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"                tasksWriter.write(System.lineSeparator());","lastModifiedDate":"2024-02-23"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"            tasksWriter.close();","lastModifiedDate":"2024-02-23"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"            for (String text : notes.formatData()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"                notesWriter.write(text);","lastModifiedDate":"2024-02-23"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"                notesWriter.write(System.lineSeparator());","lastModifiedDate":"2024-02-23"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"            notesWriter.close();","lastModifiedDate":"2024-02-23"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"            System.out.println(\"Error writing to data file.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":139,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"     * Loads the pre-existing note list from the stored data file.","lastModifiedDate":"2024-02-23"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"     * @return \u003ccode\u003eNoteList\u003c/code\u003e loaded with the tasks and data from the existing data.","lastModifiedDate":"2024-02-23"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"     * @throws Error If the data file is not found. Suggests that data file does not exist and","lastModifiedDate":"2024-02-23"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"     *     potential errors in storage initialisation.","lastModifiedDate":"2024-02-23"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"    public NoteList loadNotes() {","lastModifiedDate":"2024-02-23"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-23"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"            assert this.notes.exists() : \"Storage file for notes is not created\";","lastModifiedDate":"2024-02-23"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"            Scanner scanner \u003d new Scanner(this.notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"            NoteList notes \u003d new NoteList();","lastModifiedDate":"2024-02-23"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"                notes.addNote(scanner.nextLine());","lastModifiedDate":"2024-02-23"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"            return notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-23"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"            throw new Error(\"Check that new tasks file is created (if needed) in initializer.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"shaunlxw":160}},{"path":"src/main/java/shon/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents a command for Shon bot.","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * Executes the command.","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * @return The result of the command.","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If parameters provided to the command are missing or take invalid values.","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the command requires a datetime parameter but it is invalid","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *     or in the wrong format.","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public abstract String execute() throws ParameterException, DateTimeParseException;","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":19}},{"path":"src/main/java/shon/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to exit the chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * Exits the chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        Platform.exit();","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        return \"Bye\";","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":17}},{"path":"src/main/java/shon/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.util.List;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents the command that displays the list of available commands.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * Shows the list of available commands.","lastModifiedDate":"2024-02-24"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * @return The result of the command.","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"        List\u003cString\u003e outputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"The following command are available:\");","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"help: displays this current list of commands available\");","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"tlist: displays your current task list\");","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"todo \u003cdesc\u003e: adds a Todo task into your task list with the description\");","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"deadline \u003cdesc\u003e /by \u003cdatetime\u003e: adds a Deadline task into your task list with the\"","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"                + \"description and datetime. Datetime must be given in dd/mm/yyyy hhmm\");","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"event \u003cdesc\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e: adds an Event task into your task list\"","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"                + \"with the description and duration. Datetime must be given in dd/mm/yyyy hhmm\");","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"mark \u003cidx\u003e: marks the task at given index as done\");","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"unmark \u003cidx\u003e: unmarks the task at given index as done\");","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"deltask \u003cidx\u003e: deletes the task at given index\");","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"find \u003ckeyword\u003e: finds all tasks with matching keyword\");","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"nlist: displays your current note list\");","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"note \u003ctext\u003e: adds a note with the given text to your note list\");","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"delnote \u003cidx\u003e: deletes the note at the given index\");","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"bye: exits the app\");","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 1; i \u003c outputs.size(); i++) {","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"            outputs.set(i, i + \". \" + outputs.get(i));","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", outputs);","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":38}},{"path":"src/main/java/shon/command/note/AddNoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add a note to the NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class AddNoteCommand extends NoteCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private String text;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a AddNoteCommand with the associated NoteList and text to add.","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param notes The associated NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param text The text on the note to add.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public AddNoteCommand(NoteList notes, String text) {","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        super(notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.text \u003d text;","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.notes.addNote(this.text));","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":26}},{"path":"src/main/java/shon/command/note/DeleteNoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to delete a note.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class DeleteNoteCommand extends NoteCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a DeleteNoteCommand with the associated NoteList and the index of the note to delete.","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param notes The associated NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the note to delete.","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public DeleteNoteCommand(NoteList notes, int idx) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        super(notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.notes.deleteNote(idx));","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":27}},{"path":"src/main/java/shon/command/note/NoteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command that can be executed to carry out an action for notes.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"abstract class NoteCommand extends Command {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    protected NoteList notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a NoteCommand with the associated NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param notes The NoteList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    public NoteCommand(NoteList notes) {","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        this.notes \u003d notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":19}},{"path":"src/main/java/shon/command/note/ShowNotesCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.note.NoteList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to show the list of notes.","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class ShowNotesCommand extends NoteCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * Creates a ShowNotesCommand with the associated NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * @param notes The NoteList containing the notes to show.","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public ShowNotesCommand(NoteList notes) {","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        super(notes);","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.notes.showNotes());","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":21}},{"path":"src/main/java/shon/command/task/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add a \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class AddDeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    private String by;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    public AddDeadlineCommand(TaskList tasks, String description, String by) {","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"        super(tasks, description);","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eDeadline\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the expected parse format.","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws DateTimeParseException {","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.addDeadline(this.description, this.by));","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":34}},{"path":"src/main/java/shon/command/task/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add an \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class AddEventCommand extends AddTaskCommand {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    private String from;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private String to;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add an \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public AddEventCommand(TaskList tasks, String description, String from, String to) {","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        super(tasks, description);","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eEvent\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given from or to datetime does not adhere to the expected parse format.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws DateTimeParseException {","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.addEvent(this.description, this.from, this.to));","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":37}},{"path":"src/main/java/shon/command/task/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * The abstract class that represents a command to add a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"abstract class AddTaskCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    protected String description;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param description the description of the task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public AddTaskCommand(TaskList tasks, String description) {","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":21}},{"path":"src/main/java/shon/command/task/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add a \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class AddTodoCommand extends AddTaskCommand {","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    public AddTodoCommand(TaskList tasks, String description) {","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"        super(tasks, description);","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eTodo\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.addTodo(this.description));","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":27}},{"path":"src/main/java/shon/command/task/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to delete a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class DeleteTaskCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to delete a task indicated by idx.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public DeleteTaskCommand(TaskList tasks, int idx) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Deletes the task from the tasks \u003ccode\u003eTaskList\u003c/code\u003e, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.deleteTask(this.idx));","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":32}},{"path":"src/main/java/shon/command/task/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents a find command to show tasks with description containing keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class FindCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /** The keyword to look for in task descriptions */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private String keyword;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to find tasks with description containing keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public FindCommand(TaskList tasks, String keyword) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Outputs the tasks with description containing the keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.filterByKeyword(this.keyword));","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":31}},{"path":"src/main/java/shon/command/task/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to list the tasks in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class ListCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * Creates a ListCommand with the associated tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    public ListCommand(TaskList tasks) {","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * List the tasks in the tasks \u003ccode\u003eTaskList\u003c/code\u003e in a user-friendly format.","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    public String execute() {","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.getTasks());","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":26}},{"path":"src/main/java/shon/command/task/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to mark a specific task in the \u003ccode\u003eTaskList\u003c/code\u003e as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class MarkCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new mark command to mark the task indicated by idx as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public MarkCommand(TaskList tasks, int idx) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx in the \u003ccode\u003eTaskList\u003c/code\u003e as done, and","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.mark(this.idx));","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":33}},{"path":"src/main/java/shon/command/task/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command that can be executed to carry out an action for tasks.","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"abstract class TaskCommand extends Command {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    protected TaskList tasks;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a TaskCommand with the given TaskList.","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList involved with this TaskCommand.","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    public TaskCommand(TaskList tasks) {","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":19}},{"path":"src/main/java/shon/command/task/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to mark a specific task in the \u003ccode\u003eTaskList\u003c/code\u003e as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class UnmarkCommand extends TaskCommand {","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new mark command to mark the task indicated by idx as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The TaskList associated with this command.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public UnmarkCommand(TaskList tasks, int idx) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        super(tasks);","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx in the \u003ccode\u003eTaskList\u003c/code\u003e as not done, and","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    public String execute() throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        return String.join(\"\\n\", this.tasks.unmark(this.idx));","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":34}},{"path":"src/main/java/shon/component/ShonDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.component;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.paint.Paint;","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"import shon.MainWindow;","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-22"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":" * Represents the dialog box of Shon.","lastModifiedDate":"2024-02-24"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"public class ShonDialogBox extends HBox {","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    private Circle circle;","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     * Creates a dialog box for Shon.","lastModifiedDate":"2024-02-24"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @param text The message to be displayed.","lastModifiedDate":"2024-02-24"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * @param img The image of Shon bot.","lastModifiedDate":"2024-02-24"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    public ShonDialogBox(String text, Image img) {","lastModifiedDate":"2024-02-24"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ShonDialogBox.fxml\"));","lastModifiedDate":"2024-02-24"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"            this.flip();","lastModifiedDate":"2024-02-24"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-22"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-22"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        circle.setFill(new ImagePattern(img));","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-22"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    private void flip() {","lastModifiedDate":"2024-02-22"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-22"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-22"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-22"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-22"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    public static ShonDialogBox getErrorDialog(String text, Image img) {","lastModifiedDate":"2024-02-24"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        ShonDialogBox db \u003d new ShonDialogBox(text, img);","lastModifiedDate":"2024-02-24"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"        db.dialog.setTextFill(Paint.valueOf(\"#E70000\"));","lastModifiedDate":"2024-02-24"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"        return db;","lastModifiedDate":"2024-02-22"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":64}},{"path":"src/main/java/shon/component/UserDialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.component;","lastModifiedDate":"2024-02-24"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-24"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-24"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-24"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-24"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-24"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-24"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.paint.ImagePattern;","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2024-02-24"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import shon.MainWindow;","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":" * Represents the user\u0027s dialog box.","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"public class UserDialogBox extends HBox {","lastModifiedDate":"2024-02-24"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-24"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-24"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    @FXML","lastModifiedDate":"2024-02-24"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    private Circle circle;","lastModifiedDate":"2024-02-24"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Creates a dialog box for user.","lastModifiedDate":"2024-02-24"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param text The message to be displayed.","lastModifiedDate":"2024-02-24"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @param img The anon image of user.","lastModifiedDate":"2024-02-24"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    public UserDialogBox(String text, Image img) {","lastModifiedDate":"2024-02-24"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-24"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UserDialogBox.fxml\"));","lastModifiedDate":"2024-02-24"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-24"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-24"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-24"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-24"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-24"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-24"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        circle.setFill(new ImagePattern(img));","lastModifiedDate":"2024-02-24"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-24"}],"authorContributionMap":{"shaunlxw":41}},{"path":"src/main/java/shon/exception/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.exception;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represent the exception when an invalid command is input. This can be due to an empty user input, or an","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" * action/command not from the allowed set of actions.","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     * Creates the exception with the given message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * @param message The message in the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public CommandException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        super(message);","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"shaunlxw":16}},{"path":"src/main/java/shon/exception/ParameterException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.exception;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represent the exception when an invalid parameter is input for that command.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public class ParameterException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"     * Creates the exception with the given message.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * @param message The message in the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    public ParameterException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"        super(message);","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"shaunlxw":15}},{"path":"src/main/java/shon/note/Note.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represents a note that contains small snippets of textual information the user wants","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" * to record.","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"public class Note {","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     * The text of the note.","lastModifiedDate":"2024-02-24"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    private String text;","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new note with the given text.","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param text The text of the note.","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public Note(String text) {","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        this.text \u003d text;","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        return text;","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":25}},{"path":"src/main/java/shon/note/NoteList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.note;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.util.List;","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents the list containing all the notes of the user.","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class NoteList {","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private List\u003cNote\u003e notes;","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a NoteList with an initial capacity of 100.","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public NoteList() {","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        this.notes \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * Adds a new note to the NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param text The text of the note to be added.","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @return The result of the command.","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    public String[] addNote(String text) {","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        this.notes.add(new Note(text));","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        return new String[] {\"Got it. I\u0027ve added this note:\", \"  \" + text};","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * Deletes the note at the given index.","lastModifiedDate":"2024-02-23"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the note to be deleted.","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @return The result of the delete command.","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    public String[] deleteNote(int idx) throws ParameterException {","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        if (this.notes.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Your list of notes is empty. Nothing to delete.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        // check invalid index","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.notes.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid note number to delete from the list.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        Note note \u003d this.notes.get(idx - 1);","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"        this.notes.remove(idx - 1);","lastModifiedDate":"2024-02-23"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"This note has been deleted:\", \"  \" + note};","lastModifiedDate":"2024-02-23"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"     * Formats and outputs the notes in the NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"     * @return String array of the text of notes in the NoteList.","lastModifiedDate":"2024-02-23"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"    public String[] showNotes() {","lastModifiedDate":"2024-02-23"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"        // check for empty notelist","lastModifiedDate":"2024-02-23"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"        if (this.notes.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-23"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"            return new String[]{\"Your list of notes is currently empty.\"};","lastModifiedDate":"2024-02-23"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"        List\u003cString\u003e outputs \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"        outputs.add(\"Here are your notes:\");","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 0; i \u003c this.notes.size(); i++) {","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"            outputs.add(i + 1 + \". \" + this.notes.get(i));","lastModifiedDate":"2024-02-23"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"        return outputs.toArray(new String[0]);","lastModifiedDate":"2024-02-23"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"     * Returns the notes in a storage-appropriate format.","lastModifiedDate":"2024-02-23"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the notes in the list, in a storage-appropriate format.","lastModifiedDate":"2024-02-23"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-23"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"    public String[] formatData() {","lastModifiedDate":"2024-02-23"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"        return this.notes.stream().map(Note::toString).toArray(String[]::new);","lastModifiedDate":"2024-02-23"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"shaunlxw":76}},{"path":"src/main/java/shon/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents a deadline task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for reading/storing the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter ioFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for displaying the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLL yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /** The by datetime of the task */","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime by;","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new Deadline with the given description, by datetime, and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of this \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the format of ioFormatter.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    public Deadline(String description, String by, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        this.by \u003d LocalDateTime.parse(by, ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @return [D] to indicate \u003ccode\u003eDeadline\u003c/code\u003e, completion status marked by X if done, task description,","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     * and the due datetime.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"                this.by.format(displayFormatter));","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. D represents \u003ccode\u003eDeadline\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * status, task description and by datetime with format of ioFormatter. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        return \"D\" + \" | \" + this.formatTask() + \" | \" + this.by.format(ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     * Sets the display datetime format to the given pattern.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"     * @param pattern The pattern to set the display datetime to.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    public static void setDisplayFormatter(String pattern) {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        Deadline.displayFormatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":62}},{"path":"src/main/java/shon/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents an event task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for reading/storing the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter ioFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for displaying the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLL yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /** The from datetime of the task */","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime from;","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    /** The to datetime of the task */","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime to;","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new event with the given description, from datetime, to datetime, and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of this \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of this \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the format of ioFormatter.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public Event(String description, String from, String to, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        this.from \u003d LocalDateTime.parse(from, ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        this.to \u003d LocalDateTime.parse(to, ioFormatter);;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"     * @return [E] to indicate \u003ccode\u003eEvent\u003c/code\u003e, completion status marked by X if done, task description,","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"     *     from datetime, and to datetime.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\",","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"                super.toString(), this.from.format(displayFormatter), this.to.format(displayFormatter));","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. E represents \u003ccode\u003eEvent\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     * status, task description, from datetime and to datetime with format of ioFormatter. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        return \"E\" + \" | \" + this.formatTask() + \" | \" + this.from.format(ioFormatter) + \" | \"","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"                + this.to.format(ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"     * Sets the display datetime format to the given pattern.","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"     * @param pattern The pattern to set the display datetime to.","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"    public static void setDisplayFormatter(String pattern) {","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        Event.displayFormatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":67}},{"path":"src/main/java/shon/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represents a generic task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    private String description;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    /** The completion status of the task */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new task with the given description and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-24"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the completion status of the task.","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @return \"X\" if the task is done, \" \" otherwise.","lastModifiedDate":"2024-02-24"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-24"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * Sets the task\u0027s completion status to done.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @see Task#toString()","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    public String markAsDone() {","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        return this.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"     * Sets the task\u0027s completion status to not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * @see Task#toString()","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    public String markAsNotDone() {","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"        return this.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the task. Completion status marked by X if done.","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     * @return Task\u0027s completion status and description.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"     * Formats task to be stored. 0 represents not done, 1 represents done.","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"     * @return Completion status and description, separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    protected String formatTask() {","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        return (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"    public abstract String formatData();","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"     * Checks if task description contains keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"     * @return true if task description contains keyword, false otherwise.","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"        return this.description.toLowerCase().contains(keyword.toLowerCase());","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":87}},{"path":"src/main/java/shon/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.util.List;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" * Represents the todo list of the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"public class TaskList {","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e with a capacity of 100.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * Adds the tasks to the list and returns the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    private String[] add(Task task) {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        this.tasks.add(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Got it. I\u0027ve added this task:\", \"  \" + task,","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"                String.format(\"Now you have %s %s in the list.\", size, size \u003c 2 ? \"task\" : \"tasks\")};","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eTodo\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    public String[] addTodo(String description) {","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Todo(description, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eTodo\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eTodo\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    public void addTodo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Todo(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"    public String[] addDeadline(String description, String by) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Deadline(description, by, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eDeadline\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"    public void addDeadline(String description, String by, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Deadline(description, by, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"     * Adds an \u003ccode\u003eEvent\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"    public String[] addEvent(String description, String from, String to) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Event(description, from, to, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"     * Adds an \u003ccode\u003eEvent\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eEvent\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"    public void addEvent(String description, String from, String to, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Event(description, from, to, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks in the list in a user-appropriate format. Indicates so when the list is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of Strings representing the tasks in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"    public String[] getTasks() {","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"        // check for empty tasklist","lastModifiedDate":"2024-02-22"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"            return new String[]{\"Your list of tasks is currently empty.\"};","lastModifiedDate":"2024-02-23"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"        String[] outputs \u003d new String[this.tasks.size() + 1];","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"        outputs[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 1; i \u003c this.tasks.size() + 1; i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"            outputs[i] \u003d i + \". \" + this.tasks.get(i - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"        return outputs;","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the index given is larger than the number of tasks in the list, or if","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"     *     the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"    public String[] mark(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"        // check invalid index","lastModifiedDate":"2024-02-22"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":139,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d task.markAsDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Nice! I\u0027ve marked this task as done:\", \"  \" + description};","lastModifiedDate":"2024-01-26"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the index given is larger than the number of tasks in the list, or if","lastModifiedDate":"2024-02-05"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"     *     the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"    public String[] unmark(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"        // check invalid index","lastModifiedDate":"2024-02-22"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d task.markAsNotDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":161,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"OK, I\u0027ve marked this task as not done yet:\", \"  \" + description};","lastModifiedDate":"2024-01-26"},{"lineNumber":162,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":164,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"shaunlxw"},"content":"     * Deletes the task indicated by the idx from the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":168,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":169,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the list is empty, if the index given is larger than the number of tasks in the","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"shaunlxw"},"content":"     *     list, or if the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"shaunlxw"},"content":"    public String[] deleteTask(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"shaunlxw"},"content":"        // check empty list","lastModifiedDate":"2024-02-22"},{"lineNumber":174,"author":{"gitId":"shaunlxw"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Your list of tasks is empty. Nothing to delete.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":176,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":177,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":178,"author":{"gitId":"shaunlxw"},"content":"        // check invalid index","lastModifiedDate":"2024-02-22"},{"lineNumber":179,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":180,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number to delete from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":181,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":182,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":183,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":184,"author":{"gitId":"shaunlxw"},"content":"        this.tasks.remove(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":185,"author":{"gitId":"shaunlxw"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":186,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Noted. I\u0027ve removed this task:\", \"  \" + task,","lastModifiedDate":"2024-01-27"},{"lineNumber":187,"author":{"gitId":"shaunlxw"},"content":"                String.format(\"Now you have %s %s in the list.\", size, size \u003c 2 ? \"task\" : \"tasks\")};","lastModifiedDate":"2024-01-27"},{"lineNumber":188,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":189,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":190,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":191,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks and data in a storage-appropriate format.","lastModifiedDate":"2024-02-05"},{"lineNumber":192,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":193,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the tasks in the list, in a storage-appropriate format.","lastModifiedDate":"2024-02-05"},{"lineNumber":194,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":195,"author":{"gitId":"shaunlxw"},"content":"    public String[] formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":196,"author":{"gitId":"shaunlxw"},"content":"        return this.tasks.stream().map(Task::formatData).toArray(String[]::new);","lastModifiedDate":"2024-02-23"},{"lineNumber":197,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":198,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":199,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":200,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks with description containing the given keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":201,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":202,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":203,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of Strings representing the matching tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":204,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":205,"author":{"gitId":"shaunlxw"},"content":"    public String[] filterByKeyword(String keyword) {","lastModifiedDate":"2024-02-05"},{"lineNumber":206,"author":{"gitId":"shaunlxw"},"content":"        List\u003cString\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":207,"author":{"gitId":"shaunlxw"},"content":"        filteredTasks.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":208,"author":{"gitId":"shaunlxw"},"content":"        for (Task task : this.tasks) {","lastModifiedDate":"2024-02-22"},{"lineNumber":209,"author":{"gitId":"shaunlxw"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":210,"author":{"gitId":"shaunlxw"},"content":"                filteredTasks.add(filteredTasks.size() + \".\" + task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":211,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":212,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":213,"author":{"gitId":"shaunlxw"},"content":"        return filteredTasks.size() \u003d\u003d 1","lastModifiedDate":"2024-02-05"},{"lineNumber":214,"author":{"gitId":"shaunlxw"},"content":"               ? new String[]{\"There are no tasks matching the keyword \" + keyword + \".\"}","lastModifiedDate":"2024-02-05"},{"lineNumber":215,"author":{"gitId":"shaunlxw"},"content":"               : filteredTasks.toArray(new String[0]);","lastModifiedDate":"2024-02-05"},{"lineNumber":216,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":217,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":217}},{"path":"src/main/java/shon/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represents a todo task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new todo with the given description and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eTodo\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * @return [T] to indicate \u003ccode\u003eTodo\u003c/code\u003e, completion status marked by X if done and task description.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. T represents \u003ccode\u003eTodo\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * status. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        return \"T\" + \" | \" + this.formatTask();","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":37}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"shon.MainWindow\"\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":19}},{"path":"src/main/resources/view/ShonDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"250.0\" style\u003d\"-fx-background-color: #E0E0E0; -fx-background-radius: 10;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"12.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"            \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#1f93ff\" radius\u003d\"20.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"         \u003c/HBox.margin\u003e\u003c/Circle\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":25}},{"path":"src/main/resources/view/UserDialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"250.0\" style\u003d\"-fx-background-color: #B1D9FE; -fx-background-radius: 10;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"12.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"         \u003c/padding\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"         \u003c/HBox.margin\u003e\u003c/Label\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#1f93ff\" radius\u003d\"20.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"         \u003c/HBox.margin\u003e\u003c/Circle\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"shaunlxw":25}},{"path":"src/test/java/shon/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import shon.task.TaskList;","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    public void getList_emptyList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"        assertArrayEquals(new String[]{\"Your list of tasks is currently empty.\"}, new TaskList().getTasks());","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    public void mark_emptyList_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new String[0], new TaskList().mark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    public void mark_normalList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            list.addTodo(\"Read book\");","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[]{\"Nice! I\u0027ve marked this task as done:\", \"  [T][X] Read book\"}, list.mark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    public void mark_invalidIndex_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[0], list.mark(-1));","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_emptyList_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new String[0], new TaskList().unmark(2));","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_normalList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"            list.addTodo(\"Read book\");","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[]{\"OK, I\u0027ve marked this task as not done yet:\", \"  [T][ ] Read book\"}, list.unmark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_invalidIndex_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[0], list.unmark(-2));","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"    public void addTodo_defaultFalse() {","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"        assertArrayEquals(new String[]{\"Got it. I\u0027ve added this task:\", \"  [T][ ] Read book\",","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"                \"Now you have 1 task in the list.\"}, list.addTodo(\"Read book\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":87}},{"path":"src/test/java/shon/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class EventTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        Event event1 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[E][ ] Project meeting (from: 06 Feb 2024 0000 to: 06 Feb 2024 1200)\", event1.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        Event event2 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[E][X] Project meeting (from: 06 Feb 2024 0000 to: 06 Feb 2024 1200)\", event2.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public void testFormatData() {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        Event event1 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"E | 0 | Project meeting | 06/02/2024 0000 | 06/02/2024 1200\", event1.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"        Event event2 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"E | 1 | Project meeting | 06/02/2024 0000 | 06/02/2024 1200\", event2.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    public void constructor_invalidDateTime_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new Event(\"\", \"06/02/2024 0000\", \"06/02/2024 0000\", false),","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"                    new Event(\"Project Meeting\",\"06/02/2024 0000\", \"b\", false));","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Text \u0027b\u0027 could not be parsed at index 0\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new Event(\"\", \"06/12/2024 0000\", \"06/13/2024/0000\", false),","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"                    new Event(\"Project Meeting\",\"06/12/2024 0000\", \"06/13/2024/0000\", false));","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Text \u002706/13/2024/0000\u0027 could not be parsed at index 10\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":48}},{"path":"src/test/java/shon/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"        Todo todo1 \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[T][ ] Read book\", todo1.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"        Todo todo2 \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[T][X] Read book\", todo2.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public void testFormatData() {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        Todo todo1 \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"T | 0 | Read book\", todo1.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        Todo todo2 \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"T | 1 | Read book\", todo2.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"todo read book","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"todo join sports club","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"mark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"mark 4","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"todo borrow book","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"list","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"list","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"bye","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"java -classpath ..\\bin Shon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"shaunlxw":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"java -classpath ../bin Shon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"shaunlxw":1}}]
