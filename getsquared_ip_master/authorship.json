[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"    mainClass.set(\"toothless.Toothless\")","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"    archiveBaseName \u003d \"toothless\"","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"getsquared":2,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"# Toothless User Guide","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Update the title above to match the actual product name","lastModifiedDate":"2024-01-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"// Product screenshot goes here","lastModifiedDate":"2024-01-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"// Product intro goes here","lastModifiedDate":"2024-01-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"// Describe the action and its outcome.","lastModifiedDate":"2024-01-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"// Give examples of usage","lastModifiedDate":"2024-01-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Example: `keyword (optional arguments)`","lastModifiedDate":"2024-01-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"// A description of the expected outcome goes here","lastModifiedDate":"2024-01-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2024-01-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Feature ABC","lastModifiedDate":"2024-01-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Feature XYZ","lastModifiedDate":"2024-01-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07"}],"authorContributionMap":{"getsquared":1,"-":29}},{"path":"src/main/java/toothless/Toothless.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import toothless.exception.ToothlessException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"import toothless.parser.Parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import toothless.storage.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import toothless.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"import toothless.ui.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":" * The main class for the Toothless TaskList chatbot.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"public class Toothless {","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"    private boolean isRunning;","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"    private Parser parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"     * The main method and entry point of the program. ","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"     * @param args Command-line arguments passed to the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"        Toothless toothless \u003d new Toothless(\"./data/tasklist.txt\");","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"        toothless.run();","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"     * A private constructor to initialize the chatbot.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"     * @param filepath A String indicating the filepath where data would be stored.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"    private Toothless(String filepath) {","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"        ","lastModifiedDate":"2024-01-22"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"            this.storage \u003d new Storage(filepath);","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"            this.tasks \u003d new TaskList(this.storage.loadStorage());","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"        } catch (ToothlessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"            ui.printMessage(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"            ui.printMessage(\"Sorry, tasklist.txt is corrupted. Starting a blank tasklist.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"            this.tasks \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"     * The main loop of the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"    private void run() {","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"        this.isRunning \u003d true;","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"        ui.printWelcome();","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"        ","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"        while (this.isRunning) {","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"            try {","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"                String userInput \u003d ui.readCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"                ui.printLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"                parser.parseInput(userInput, tasks, ui);","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"                this.isRunning \u003d parser.isStillRunning();","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"            } catch (ToothlessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"                ui.printMessage(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"            } finally {","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"                ui.printLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"        ","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"            storage.saveToStorage(tasks.getTasks());","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"            ui.printMessage(\"Successfully saved task data to tasklist.txt.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"        } catch (ToothlessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"            ui.printMessage(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"        ","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"getsquared":74,"-":2}},{"path":"src/main/java/toothless/exception/ToothlessException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.exception;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":" * Exception class for Toothless chatbot.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"public class ToothlessException extends Exception {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize the exception.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"     * @param message The message for the exception to be thrown.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"    public ToothlessException(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"        super(message);","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"getsquared":15}},{"path":"src/main/java/toothless/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import toothless.exception.ToothlessException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"import toothless.task.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import toothless.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import toothless.ui.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":" * A class that parses, resolves and validates user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"public class Parser {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    private boolean isRunning \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"     * Sets isRunning boolean to false for stopping program.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"    private void makeExit() {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"        this.isRunning \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"     * Returns isRunning boolean.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"     * @return A boolean that indicates if program is still running.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"    public boolean isStillRunning() {","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"        return isRunning;","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"     * The main method that parses user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"     * @param userInput User input string to be parsed.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"     * @param tasks TaskList class that is operated on when user command is executed.","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"     * @param ui Ui class used to print messages.","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if user input is invalid.","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"    public void parseInput(String userInput, TaskList tasks, Ui ui) throws ToothlessException {","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"        if (userInput.equals(\"bye\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"            ui.printMessage(\"Bye. Purr-lease chat again soon!\");","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"            makeExit();","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"            ui.printList(tasks.getTasks(), ","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"                    \"\\tOops! Looks like you haven\u0027t added any tasks yet!\", \"\");","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"mark \") || userInput.equals(\"mark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"            int listIndex \u003d validateListInput(userInput, \"mark\", tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"            Task markedTask \u003d tasks.markTask(listIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"            ui.printMarkedTask(markedTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"unmark \") || userInput.equals(\"unmark\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"            int listIndex \u003d validateListInput(userInput, \"unmark\", tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"            Task unmarkedTask \u003d tasks.unmarkTask(listIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"            ui.printUnmarkedTask(unmarkedTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"todo \") || userInput.equals(\"todo\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"            String taskDescription \u003d validateToDoInput(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"            Task newTask \u003d tasks.addToDoToList(taskDescription);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"            ui.printNewTask(newTask, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"deadline \") || userInput.equals(\"deadline\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"            String[] deadlineAttributes \u003d validateDeadlineInput(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"            Task newTask \u003d tasks.addDeadlineToList(deadlineAttributes[0], deadlineAttributes[1]);","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"            ui.printNewTask(newTask, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"event \") || userInput.equals(\"event\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"            String[] eventAttributes \u003d validateEventInput(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"            Task newTask \u003d tasks.addEventToList(eventAttributes[0], eventAttributes[1], eventAttributes[2]);","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"            ui.printNewTask(newTask, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"delete \") || userInput.equals(\"delete\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"            int listIndex \u003d validateListInput(userInput, \"delete\", tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"            Task deletedTask \u003d tasks.deleteTask(listIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"            ui.printDeletedTask(deletedTask, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"        } else if (userInput.startsWith(\"find \") || userInput.equals(\"find\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"            String keyword \u003d validateFindInput(userInput);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"            ArrayList\u003cTask\u003e keywordTasks \u003d tasks.findKeyword(keyword);","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"            ui.printList(keywordTasks, ","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"                    \"\\tOops! Looks like there are no tasks matching the keyword!\",","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"                    \"\\tHere are the meow-tching tasks in your list:\\n\");","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, I don\u0027t understand what that means D:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"getsquared"},"content":"     * Validates the user input for commands dealing with list item.","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"getsquared"},"content":"     * @param listInput User input string for list item to be validated.","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"getsquared"},"content":"     * @param command The user command that uses the list item.","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"getsquared"},"content":"     * @param taskListSize The size of the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"getsquared"},"content":"     * @return Integer of the list index to be retrieved.","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if user input is invalid or in the wrong format.","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"getsquared"},"content":"    public int validateListInput(String listInput, String command, int taskListSize) throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"getsquared"},"content":"        // split string by spaces","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"getsquared"},"content":"        String[] markInputSplit \u003d listInput.strip().split(\"\\\\s+\");","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"getsquared"},"content":"            if (markInputSplit.length \u003e 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"getsquared"},"content":"                throw new ToothlessException(","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"getsquared"},"content":"                        String.format(\"Sorry, purr-lease only include one numeric argument after %s.\", command));","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"getsquared"},"content":"            } else if (markInputSplit.length \u003c 2 || markInputSplit[1].isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"getsquared"},"content":"                throw new ToothlessException(String.format(\"Sorry, purr-lease state a list index to %s.\", command));","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"getsquared"},"content":"            // try parsing integer","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"getsquared"},"content":"            int listIndex \u003d Integer.parseInt(markInputSplit[1]);","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"getsquared"},"content":"            // check index bounds","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"getsquared"},"content":"            if (listIndex \u003c 1 || listIndex \u003e taskListSize) {","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"getsquared"},"content":"                throw new ToothlessException(\"Apurrlogies, there\u0027s no task at that index.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"getsquared"},"content":"            return listIndex;","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"getsquared"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(String.format(\"Sorry, purr-lease use a numeric list index to %s.\", command));","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":111,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":112,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":113,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"getsquared"},"content":"     * Validates the user input for todo command.","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"getsquared"},"content":"     * @param toDoInput User input string for todo command.","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"getsquared"},"content":"     * @return The todo task description.","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if task description is empty.","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"getsquared"},"content":"    public String validateToDoInput(String toDoInput) throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":121,"author":{"gitId":"getsquared"},"content":"        String taskDescription \u003d toDoInput.replace(\"todo \", \"\").strip();","lastModifiedDate":"2024-02-03"},{"lineNumber":122,"author":{"gitId":"getsquared"},"content":"        if (taskDescription.isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":123,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Apurrlogies, the task description cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":124,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"getsquared"},"content":"        return taskDescription;","lastModifiedDate":"2024-02-03"},{"lineNumber":126,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":127,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":129,"author":{"gitId":"getsquared"},"content":"     * Validates the user input for deadline command.","lastModifiedDate":"2024-02-04"},{"lineNumber":130,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":131,"author":{"gitId":"getsquared"},"content":"     * @param deadlineInput User input string for deadline command.","lastModifiedDate":"2024-02-04"},{"lineNumber":132,"author":{"gitId":"getsquared"},"content":"     * @return String array containing task description and /by field.","lastModifiedDate":"2024-02-04"},{"lineNumber":133,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if user input is invalid or in the wrong format.","lastModifiedDate":"2024-02-04"},{"lineNumber":134,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":135,"author":{"gitId":"getsquared"},"content":"    public String[] validateDeadlineInput(String deadlineInput) throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":136,"author":{"gitId":"getsquared"},"content":"        String[] deadlineAttributes \u003d deadlineInput.replace(\"deadline \", \"\")","lastModifiedDate":"2024-02-03"},{"lineNumber":137,"author":{"gitId":"getsquared"},"content":"                .strip().split(\"\\\\s+/by\\\\s+\");","lastModifiedDate":"2024-02-03"},{"lineNumber":138,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":139,"author":{"gitId":"getsquared"},"content":"        if (deadlineAttributes.length !\u003d 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":140,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":141,"author":{"gitId":"getsquared"},"content":"                    \"deadline [description] /by [yyyy-mm-dd hh:mm].\");","lastModifiedDate":"2024-02-03"},{"lineNumber":142,"author":{"gitId":"getsquared"},"content":"        } else if (deadlineAttributes[0].isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":143,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Apurrlogies, the task description cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":144,"author":{"gitId":"getsquared"},"content":"        } else if (deadlineAttributes[1].isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":145,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Apurrlogies, the /by field cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":146,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":147,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":148,"author":{"gitId":"getsquared"},"content":"        return deadlineAttributes;","lastModifiedDate":"2024-02-03"},{"lineNumber":149,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":150,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":151,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"getsquared"},"content":"     * Validates the user input for event command.","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"getsquared"},"content":"     * @param eventInput User input string for event command.","lastModifiedDate":"2024-02-04"},{"lineNumber":155,"author":{"gitId":"getsquared"},"content":"     * @return String array containing task description, /from field and /to field.","lastModifiedDate":"2024-02-04"},{"lineNumber":156,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if user input is invalid or in the wrong format.","lastModifiedDate":"2024-02-04"},{"lineNumber":157,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":158,"author":{"gitId":"getsquared"},"content":"    public String[] validateEventInput(String eventInput) throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":159,"author":{"gitId":"getsquared"},"content":"        String[] eventAttributes \u003d new String[3];","lastModifiedDate":"2024-02-03"},{"lineNumber":160,"author":{"gitId":"getsquared"},"content":"        String[] tempAttributes \u003d eventInput.replace(\"event \", \"\")","lastModifiedDate":"2024-02-03"},{"lineNumber":161,"author":{"gitId":"getsquared"},"content":"                .strip().split(\"\\\\s+/from\\\\s+|\\\\s+/to\\\\s+\");","lastModifiedDate":"2024-02-03"},{"lineNumber":162,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":163,"author":{"gitId":"getsquared"},"content":"        int fromIndex \u003d eventInput.indexOf(\"/from\");","lastModifiedDate":"2024-02-03"},{"lineNumber":164,"author":{"gitId":"getsquared"},"content":"        int toIndex \u003d eventInput.indexOf(\"/to\");","lastModifiedDate":"2024-02-03"},{"lineNumber":165,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":166,"author":{"gitId":"getsquared"},"content":"        if (tempAttributes.length !\u003d 3) {","lastModifiedDate":"2024-02-03"},{"lineNumber":167,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":168,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\");","lastModifiedDate":"2024-02-03"},{"lineNumber":169,"author":{"gitId":"getsquared"},"content":"        } else if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2024-02-03"},{"lineNumber":170,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, purr-lease remember to include the /from and /to fields.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":171,"author":{"gitId":"getsquared"},"content":"        } else if (tempAttributes[0].isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":172,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Apurrlogies, the task description cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":173,"author":{"gitId":"getsquared"},"content":"        } else if (tempAttributes[1].isBlank() || tempAttributes[2].isBlank()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":174,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException((\"Apurrlogies, the /from and /to fields cannot be empty.\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":175,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":176,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":177,"author":{"gitId":"getsquared"},"content":"        eventAttributes[0] \u003d tempAttributes[0];","lastModifiedDate":"2024-02-03"},{"lineNumber":178,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":179,"author":{"gitId":"getsquared"},"content":"        if (fromIndex \u003c toIndex) {","lastModifiedDate":"2024-02-03"},{"lineNumber":180,"author":{"gitId":"getsquared"},"content":"            eventAttributes[1] \u003d tempAttributes[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":181,"author":{"gitId":"getsquared"},"content":"            eventAttributes[2] \u003d tempAttributes[2];","lastModifiedDate":"2024-02-03"},{"lineNumber":182,"author":{"gitId":"getsquared"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":183,"author":{"gitId":"getsquared"},"content":"            eventAttributes[1] \u003d tempAttributes[2];","lastModifiedDate":"2024-02-03"},{"lineNumber":184,"author":{"gitId":"getsquared"},"content":"            eventAttributes[2] \u003d tempAttributes[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":185,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":186,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":187,"author":{"gitId":"getsquared"},"content":"        return eventAttributes;","lastModifiedDate":"2024-02-03"},{"lineNumber":188,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":189,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":190,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":191,"author":{"gitId":"getsquared"},"content":"     * Validates the user input for find command.","lastModifiedDate":"2024-02-04"},{"lineNumber":192,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":193,"author":{"gitId":"getsquared"},"content":"     * @param findInput The user input for find command.","lastModifiedDate":"2024-02-04"},{"lineNumber":194,"author":{"gitId":"getsquared"},"content":"     * @return The keyword to be found.","lastModifiedDate":"2024-02-04"},{"lineNumber":195,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if keyword is blank.","lastModifiedDate":"2024-02-04"},{"lineNumber":196,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":197,"author":{"gitId":"getsquared"},"content":"    public String validateFindInput(String findInput) throws ToothlessException {","lastModifiedDate":"2024-02-04"},{"lineNumber":198,"author":{"gitId":"getsquared"},"content":"        String keyword \u003d findInput.replace(\"find \", \"\").strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":199,"author":{"gitId":"getsquared"},"content":"        if (keyword.isBlank()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":200,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Apurrlogies, the keyword cannot be empty.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":201,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":202,"author":{"gitId":"getsquared"},"content":"        return keyword;","lastModifiedDate":"2024-02-04"},{"lineNumber":203,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":204,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"getsquared":204}},{"path":"src/main/java/toothless/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import toothless.exception.ToothlessException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"import toothless.task.Deadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import toothless.task.Event;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import toothless.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"import toothless.task.ToDo;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":" * A class to deal with loading data from and saving data to file in computer.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"public class Storage {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"    private String filePath;","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    private File file;","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"    private static final DateTimeFormatter DATETIME_PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize storage.","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"     * @param filePath A String indicating the filepath where data would be stored.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if file failed to be created.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"    public Storage(String filePath) throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"            if (!file.exists()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"                if (!file.getParentFile().exists()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"                    file.getParentFile().mkdirs();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"                file.createNewFile();","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"     * Loads data from file into ArrayList of Task objects.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"     * @return ArrayList of Task objects with data from file.","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if file is corrupted.","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"    public ArrayList\u003cTask\u003e loadStorage() throws ToothlessException {","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"            Scanner tasklistScanner \u003d new Scanner(this.file);","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"            while (tasklistScanner.hasNext()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"                try {","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"                    String line \u003d tasklistScanner.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"                    String[] taskArgs \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"                    String taskType \u003d taskArgs[0];","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"                    boolean isDone \u003d taskArgs[1].equals(\"0\") ? false : true;","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"                    String taskDescription \u003d taskArgs[2];","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"                    ","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"                    if (taskType.equals(\"T\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"                        ToDo newToDo \u003d new ToDo(taskDescription, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"                        tasks.add(newToDo);","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"                    } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"                        LocalDateTime deadlineBy \u003d LocalDateTime.parse(taskArgs[3], DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"                        Deadline newDeadline \u003d new Deadline(taskDescription, isDone, deadlineBy);","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"                        tasks.add(newDeadline);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"                    } else if (taskArgs[0].equals(\"E\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"                        LocalDateTime eventFrom \u003d LocalDateTime.parse(taskArgs[3], DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"                        LocalDateTime eventTo \u003d LocalDateTime.parse(taskArgs[4], DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"                        Event newEvent \u003d new Event(taskDescription, isDone, eventFrom, eventTo);","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"                        tasks.add(newEvent);","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"                    } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"                        throw new ToothlessException(\"Sorry, tasklist.txt seems to contain a corrupted task type.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"                    }","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"getsquared"},"content":"                    throw new ToothlessException(\"Sorry, tasks seem to have missing arguments.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"getsquared"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"getsquared"},"content":"                    throw new ToothlessException(\"Sorry, task seems to have corrupted datetime. \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"getsquared"},"content":"                            \"The format should be yyyy-mm-dd hh:mm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"getsquared"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"getsquared"},"content":"            tasklistScanner.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"getsquared"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"getsquared"},"content":"        } ","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"getsquared"},"content":"        return tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"getsquared"},"content":"     * Saves data from ArrayList of Tasks to data file.","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"getsquared"},"content":"     * @param tasks ArrayList of Tasks to save into file.","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if saving failed.","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"getsquared"},"content":"    public void saveToStorage(ArrayList\u003cTask\u003e tasks) throws ToothlessException {","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"getsquared"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath, false);","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"getsquared"},"content":"            for (Task t : tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"getsquared"},"content":"                fw.write(t.toStorageString() + System.lineSeparator());","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"getsquared"},"content":"            fw.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"getsquared"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, saving to tasklist.txt failed.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"getsquared":113}},{"path":"src/main/java/toothless/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"    private LocalDateTime by;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a new Deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"     * @param by A LocalDateTime for the deadline due of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a Deadline with an isDone value.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"     * @param isDone A Boolean to describe if the task is done.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"     * @param by A LocalDateTime for the deadline due of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime by) {","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"        return \"D | \" + super.toStorageString() + \" | \" + ","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"                this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + ","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"                this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm\")) + \")\";","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"getsquared":43}},{"path":"src/main/java/toothless/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"    private LocalDateTime from;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"    private LocalDateTime to;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a new Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"     * @param from A LocalDateTime for the start of the Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"     * @param to A LocalDateTime for the end of the Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a new Event with an isDone value.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"     * @param isDone A Boolean to describe if the task is done.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"     * @param from A LocalDateTime for the start of the Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"     * @param to A LocalDateTime for the end of the Event.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"    public Event(String description, boolean isDone, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"        return \"E | \" + super.toStorageString() + String.format(\" | %s | %s\", ","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"                this.from.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")), ","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"                this.to.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"        return \"[E]\" + super.toString() + String.format(\" (from: %s to: %s)\", ","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"                this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm\")), ","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"                this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy, HH:mm\")));","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"getsquared":50}},{"path":"src/main/java/toothless/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":" * Abstract class to represent something to be done.  ","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"    private String description;","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a new task.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a task with an isDone value.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"     * @param isDone A Boolean to describe if the task is done.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"     * Returns the done status icon of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"     * @return The String indicating X if done, and nothing if not.","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done duke.task with X","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-01-22"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"     * Returns a binary of the done status of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"     * @return The String indicating 1 if done, and 0 if not.","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"    public String getStatusBinary() { ","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"        return (this.isDone ? \"1\" : \"0\"); ","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-22"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2024-01-22"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"     * Returns a String representing the task formatted for storage in data file.","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"     * @return String representing the task formatted for storage in data file.","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"    public String toStorageString() { ","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"        return String.format(\"%s | %s\", this.getStatusBinary(), this.description); ","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"     * Returns a String representing the task formatted for printing.","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"     * @return String representing the task formatted for printing. ","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"getsquared":81}},{"path":"src/main/java/toothless/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import toothless.exception.ToothlessException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":" * A TaskList class to store and operate on tasks in list. ","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"public class TaskList {","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"    private static final DateTimeFormatter DATETIME_PARSE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize new TaskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize new TaskList with given ArrayList.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"     * @param taskArrayList ArrayList with Tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"        this.tasks \u003d taskArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"     * @return integer of number of tasks in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"    public int size() {","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"        return tasks.size();","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"     * Getter for ArrayList of Tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"     * @return ArrayList of Tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"        return this.tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"     * Marks a task in the list as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"     * @param index Index of task to mark as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"     * @return Marked task.","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"    public Task markTask(int index) {","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"        Task task \u003d tasks.get(index - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"        task.markAsDone();","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"        return task;","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"     * Marks a task in the list as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"     * @param index Index of task to mark as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"     * @return Unmarked task.","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"    public Task unmarkTask(int index) {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"        Task task \u003d tasks.get(index - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"        task.unmarkAsDone();","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"        return task;","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"     * Deletes a task in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"     * @param index Index of task to delete.","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"     * @return Deleted task.","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"getsquared"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"getsquared"},"content":"        Task deletedTask \u003d tasks.get(index - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"getsquared"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"getsquared"},"content":"        return deletedTask;","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":88,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":89,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"getsquared"},"content":"     * Finds and returns a list of tasks with given keyword.","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"getsquared"},"content":"     * @param keyword A String to search in tasklist.","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"getsquared"},"content":"     * @return List of tasks with keyword.","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"getsquared"},"content":"    public ArrayList\u003cTask\u003e findKeyword(String keyword) {","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"getsquared"},"content":"        ArrayList\u003cTask\u003e keywordTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"getsquared"},"content":"        for (Task currentTask : this.tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"getsquared"},"content":"            if (currentTask.toString().contains(keyword)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"getsquared"},"content":"                keywordTasks.add(currentTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"getsquared"},"content":"        return keywordTasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"getsquared"},"content":"     * Adds ToDo task to list.","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"getsquared"},"content":"     * @param taskDescription String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"getsquared"},"content":"     * @return New ToDo task.","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"getsquared"},"content":"    public Task addToDoToList(String taskDescription) {","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"getsquared"},"content":"        Task newTask \u003d new ToDo(taskDescription);","lastModifiedDate":"2024-01-30"},{"lineNumber":113,"author":{"gitId":"getsquared"},"content":"        tasks.add(newTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"getsquared"},"content":"        return newTask;","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"getsquared"},"content":"     * Adds Deadline task to list.","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"getsquared"},"content":"     * @param taskDescription String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"getsquared"},"content":"     * @param by              String for datetime deadline the task is due by.","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"getsquared"},"content":"     * @return New Deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if datetime fails to parse.","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":125,"author":{"gitId":"getsquared"},"content":"    public Task addDeadlineToList(String taskDescription, String by) throws ToothlessException {","lastModifiedDate":"2024-02-04"},{"lineNumber":126,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":127,"author":{"gitId":"getsquared"},"content":"            LocalDateTime deadlineBy \u003d LocalDateTime.parse(by, DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"getsquared"},"content":"            Task newTask \u003d new Deadline(taskDescription, deadlineBy);","lastModifiedDate":"2024-02-02"},{"lineNumber":129,"author":{"gitId":"getsquared"},"content":"            tasks.add(newTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":130,"author":{"gitId":"getsquared"},"content":"            return newTask;","lastModifiedDate":"2024-02-04"},{"lineNumber":131,"author":{"gitId":"getsquared"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":132,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, /by field datetime should use the following format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":133,"author":{"gitId":"getsquared"},"content":"                    \"[yyyy-mm-dd hh:mm].\");","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":136,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":137,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"getsquared"},"content":"     * Adds Event task to list.","lastModifiedDate":"2024-02-04"},{"lineNumber":139,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"getsquared"},"content":"     * @param taskDescription String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":141,"author":{"gitId":"getsquared"},"content":"     * @param from            String for datetime start of event.","lastModifiedDate":"2024-02-04"},{"lineNumber":142,"author":{"gitId":"getsquared"},"content":"     * @param to              String for datetime end of event.","lastModifiedDate":"2024-02-04"},{"lineNumber":143,"author":{"gitId":"getsquared"},"content":"     * @return New Event task.","lastModifiedDate":"2024-02-04"},{"lineNumber":144,"author":{"gitId":"getsquared"},"content":"     * @throws ToothlessException if datetime fails to parse.","lastModifiedDate":"2024-02-04"},{"lineNumber":145,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":146,"author":{"gitId":"getsquared"},"content":"    public Task addEventToList(String taskDescription, String from, String to) throws ToothlessException {","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":148,"author":{"gitId":"getsquared"},"content":"            LocalDateTime eventFrom \u003d LocalDateTime.parse(from, DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":149,"author":{"gitId":"getsquared"},"content":"            LocalDateTime eventTo \u003d LocalDateTime.parse(to, DATETIME_PARSE_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":150,"author":{"gitId":"getsquared"},"content":"            Task newTask \u003d new Event(taskDescription, eventFrom, eventTo);","lastModifiedDate":"2024-02-02"},{"lineNumber":151,"author":{"gitId":"getsquared"},"content":"            tasks.add(newTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"getsquared"},"content":"            return newTask;","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"getsquared"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":154,"author":{"gitId":"getsquared"},"content":"            throw new ToothlessException(\"Sorry, /from and /to field datetime should use the following format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":155,"author":{"gitId":"getsquared"},"content":"                    \"[yyyy-mm-dd hh:mm].\");","lastModifiedDate":"2024-02-02"},{"lineNumber":156,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":157,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":158,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":159,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"getsquared":159}},{"path":"src/main/java/toothless/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":" * A simple task with only a description.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a new ToDo.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"     * A public constructor to initialize a ToDo with an isDone value.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"     * @param description A String to describe the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"     * @param isDone A Boolean to describe if the task is done.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    public String toStorageString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"        return \"T | \" + super.toStorageString();","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"getsquared":35}},{"path":"src/main/java/toothless/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import toothless.task.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":" * Class for dealing with interactions with the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"public class Ui {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"    private Scanner scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"     * A public constructor for the Ui class.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"    public Ui() {","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"     * Reads command from the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"     * @return String of the command.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"    public String readCommand() {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"        return scanner.nextLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"     * Prints the given message.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"     * @param message String to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"        System.out.println(\"\\t\" + message);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"     * Prints a line to separate messages.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"    public void printLine() {","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"     * Prints the welcome message.","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"    public void printWelcome() {","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"        printLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"        String introMessage \u003d \" /\\\\_/\\\\\\n\" +","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"                \"\\t( o.o )\\n\" +","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"                \"\\t \u003e ^ \u003c\\n\" +","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"                \"\\tNya-ice to meet you! I\u0027m Toothless :D\\n\" +","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"                \"\\tWhat can I do for you?\";","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"        printMessage(introMessage);","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"        printLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"     * \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"     * Prints new task message.","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"     * @param newTask      New Task to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"     * @param taskListSize Size of tasklist.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"    public void printNewTask(Task newTask, int taskListSize) {","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"        String message \u003d","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"                String.format(\"\\tGot it. I\u0027ve added this task:\\n\\t\\t%s\\n\\tNya-ow you have %d tasks in the list.\",","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"                        newTask, taskListSize);","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"        System.out.println(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"     * Prints deleted task message.","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"     * @param deletedTask  Deleted Task to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"     * @param taskListSize Size of tasklist.","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"    public void printDeletedTask(Task deletedTask, int taskListSize) {","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"        String message \u003d","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"getsquared"},"content":"                String.format(\"\\tNoted. I\u0027ve remeowved this task:\\n\\t\\t%s\\n\\tNya-ow you have %d tasks in the list.\",","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"getsquared"},"content":"                        deletedTask, taskListSize);","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"getsquared"},"content":"        System.out.println(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"getsquared"},"content":"     * Prints marked task message.","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"getsquared"},"content":"     * @param markedTask Marked Task to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"getsquared"},"content":"    public void printMarkedTask(Task markedTask) {","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"getsquared"},"content":"        System.out.println(\"\\tAmeowzing! I\u0027ve marked this task as done:\\n\\t\" + markedTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"getsquared"},"content":"     * Prints unmarked task message.","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"getsquared"},"content":"     * @param unmarkedTask Unmarked Task to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"getsquared"},"content":"    public void printUnmarkedTask(Task unmarkedTask) {","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"getsquared"},"content":"        System.out.println(\"\\tOK, I\u0027ve marked this task as not done yet:\\n\\t\" + unmarkedTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"getsquared"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"getsquared"},"content":"     * Prints the TaskList in order.","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"getsquared"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"getsquared"},"content":"     * @param taskArrayList The ArrayList of Tasks to be printed.","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"getsquared"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"getsquared"},"content":"    public void printList(ArrayList\u003cTask\u003e taskArrayList, String noTasksMessage, String introMessage) {","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"getsquared"},"content":"        if (taskArrayList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"getsquared"},"content":"            System.out.println(noTasksMessage);","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"getsquared"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"getsquared"},"content":"            String listString \u003d introMessage;","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"getsquared"},"content":"            for (int i \u003d 1; i \u003c\u003d taskArrayList.size(); i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"getsquared"},"content":"                listString +\u003d \"\\t\";","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"getsquared"},"content":"                listString +\u003d i + \". \" + taskArrayList.get(i - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"getsquared"},"content":"                if (i \u003c taskArrayList.size()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"getsquared"},"content":"                    listString +\u003d \"\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"getsquared"},"content":"                }","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"getsquared"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"getsquared"},"content":"            System.out.println(listString);","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"getsquared":125}},{"path":"src/test/java/toothless/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_normalInput_success() throws Exception{","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"        // /from is before /to","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"        assertArrayEquals(new String[]{\"dinner\", \"2024-02-02 18:00\", \"2024-02-02 20:30\"}, ","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"                new Parser().validateEventInput(\"event dinner /from 2024-02-02 18:00 /to 2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"        // /to is before /from","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"        assertArrayEquals(new String[]{\"party\", \"2024-02-02 21:00\", \"2024-02-02 23:59\"},","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"                new Parser().validateEventInput(\"event party /to 2024-02-02 23:59 /from 2024-02-02 21:00\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"        // extra whitespace","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"        assertArrayEquals(new String[]{\"dinner\", \"2024-02-02 18:00\", \"2024-02-02 20:30\"},","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"                new Parser().validateEventInput(\"event   dinner   /from    2024-02-02 18:00   /to   2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"    ","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_emptyInput_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{}, new Parser().validateEventInput(\"event\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_emptyDescription_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{null, \"2024-02-02 18:00\", \"2024-02-02 20:30\"}, ","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"getsquared"},"content":"                    new Parser().validateEventInput(\"event  /from 2024-02-02 18:00 /to 2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_emptyFrom_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{\"dinner\", null, \"2024-02-02 20:30\"}, ","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"getsquared"},"content":"                    new Parser().validateEventInput(\"event dinner /from    /to 2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_emptyTo_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{\"dinner\", \"2024-02-02 18:00\", null}, ","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"getsquared"},"content":"                    new Parser().validateEventInput(\"event dinner /from 2024-02-02 18:00 /to    \"));","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_doubleFrom_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{\"dinner\", \"2024-02-02 18:00\", null}, ","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"getsquared"},"content":"                    new Parser().validateEventInput(\"event dinner /from 2024-02-02 18:00 /from 2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease remember to include the /from and /to fields.\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"getsquared"},"content":"    public void validateEventInput_extraFields_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"getsquared"},"content":"            assertArrayEquals(new String[]{\"dinner\", \"2024-02-02 18:00\", null},","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"getsquared"},"content":"                    new Parser().validateEventInput(\"event dinner /from 2024-02-02 18:00\" +","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"getsquared"},"content":"                            \" /from 2024-02-02 20:30 /to 2024-02-02 20:30\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, purr-lease use the format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"getsquared"},"content":"                    \"event [description] /from [yyyy-mm-dd hh:mm] /to [yyyy-mm-dd hh:mm]\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"getsquared":93}},{"path":"src/test/java/toothless/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"package toothless.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"    public void addEventToList_normalInput_success() throws Exception {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"        tasks.addEventToList(\"event\", \"2024-02-02 18:30\", \"2024-02-02 22:00\");","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"        assertEquals(\"[E][ ] event (from: Feb 2 2024, 18:30 to: Feb 2 2024, 22:00)\", ","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"                tasks.getTasks().get(0).toString());","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"    public void addEventToList_wrongDateTime_exceptionThrown() {","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"getsquared"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"getsquared"},"content":"            tasks.addEventToList(\"event\", \"2024-13-02 25:30\", \"10pm\");","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"getsquared"},"content":"            fail();","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"getsquared"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"getsquared"},"content":"            assertEquals(\"Sorry, /from and /to field datetime should use the following format: \" +","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"getsquared"},"content":"                    \"[yyyy-mm-dd hh:mm].\", e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"getsquared"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"getsquared"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"getsquared"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"getsquared":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"getsquared"},"content":"aaa","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"getsquared"},"content":"todo ","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"getsquared"},"content":"todo read book","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"getsquared"},"content":"deadline return book /by","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"getsquared"},"content":"deadline return book /by 2024-02-02 20:24","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"getsquared"},"content":"event dinner /from 5pm /to 7pm","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"getsquared"},"content":"event dinner /from 2024-02-02 18:00 /to 2024-02-02 20:30 ","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"getsquared"},"content":"event party /to 2024-02-02 23:59 /from 2024-02-02 21:00","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"getsquared"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"mark 3","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"getsquared"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"getsquared"},"content":"unmark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"getsquared"},"content":"mark 5","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"getsquared"},"content":"unmark ","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"getsquared"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"getsquared"},"content":"delete 4","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"getsquared"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"find book","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"getsquared"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"getsquared":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"getsquared"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\toothless\\*.java","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"getsquared"},"content":"java -classpath ..\\bin toothless.Toothless \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"getsquared":2,"-":19}}]
