[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"# luke.luke project template","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"3. After that, locate the `src/main/java/luke.luke.java` file, right-click it, and choose `Run luke.luke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LWS49":2,"-":22}},{"path":"src/main/java/luke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"    protected String by;","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    protected LocalDateTime byDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"    protected boolean hasByDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"    protected DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"M/dd/yyyy HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"    protected DateTimeFormatter dateTimeStringFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu hh:mma\");","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"     * Constructs a Deadline object with the given description and deadline.","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"     * @param by the deadline of the task, in the format \"M/dd/yyyy HHmm\" (e.g., \"2/12/2022 1800\")","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"            this.byDate \u003d LocalDateTime.parse(by, dateTimeFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"            this.hasByDate \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"            this.by \u003d by;","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"            this.hasByDate \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"            System.out.println(e);","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"     * @return a string representation of the deadline task","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"        if (hasByDate) {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + dateTimeStringFormatter.format(byDate) + \")\";","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"            return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":49}},{"path":"src/main/java/luke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":" * Represents a task with a scheduled event with a start and end time.","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"    protected String from;","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    protected String to;","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"    protected LocalDateTime fromDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"    protected boolean hasFromDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"    protected LocalDateTime toDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"    protected boolean hasToDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"    protected DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"M/dd/yyyy HHmm\");","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"    protected DateTimeFormatter dateTimeStringFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM uuuu hh:mma\");","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"     * Constructs an Event object with the given description, start date, and end date.","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"     * @param description the description of the event","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"     * @param from the start date of the event, in the format \"M/dd/yyyy HHmm\" (e.g., \"2/12/2022 1800\")","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"     * @param to the end date of the event, in the format \"M/dd/yyyy HHmm\" (e.g., \"2/12/2022 2200\")","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"            this.fromDate \u003d LocalDateTime.parse(from, dateTimeFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"            this.hasFromDate \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"            this.from \u003d from;","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"            this.hasFromDate \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"            this.toDate \u003d LocalDateTime.parse(to, dateTimeFormatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"            this.hasToDate \u003d true;","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"            this.to \u003d to;","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"            this.hasToDate \u003d false;","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"     * @return a string representation of the event task","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"        if (hasFromDate \u0026\u0026 hasToDate) {","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"            return \"[E]\" + super.toString() + \" (from: \" + dateTimeStringFormatter.format(fromDate)","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"                    + \" to: \" + dateTimeStringFormatter.format(toDate) + \")\";","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"        } else if (hasFromDate) {","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"            return \"[E]\" + super.toString() + \" (from: \" + dateTimeStringFormatter.format(fromDate)","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"                    + \" to: \" + to + \")\";","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"        } else if (hasToDate) {","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"            return \"[E]\" + super.toString() + \" (from: \" + from","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"                    + \" to: \" + dateTimeStringFormatter.format(toDate) + \")\";","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"            return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":68,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":69,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":69}},{"path":"src/main/java/luke/Luke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"public class Luke {","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"    public Luke(String filePath) {","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"            taskList \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"            ui \u003d new Ui(taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"        } catch (LukeException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"            ui \u003d new Ui();","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"    public void run() {","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"        ui.welcome();","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"        ui.handleInput();","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"        storage.saveFile(taskList);","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"        ui.end();","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"        new Luke(\"data/tasks.txt\").run();","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"LWS49":31}},{"path":"src/main/java/luke/LukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":" * Custom exception class for Luke program.","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":" * \u003cp\u003e","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":" * Represents exceptions that can occur during the execution of the Luke program.","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":" * \u003c/p\u003e","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"public class LukeException extends Exception {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"     * Enumeration of exception types.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"    public enum ExceptionType {","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"        commandInvalid,","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"        taskNumberInvalid,","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"        descriptionEmpty,","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"        deadlineEmpty,","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"        deadlineWrongFormat,","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"        eventWrongFormat,","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"        eventFromEmpty,","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"        eventToEmpty,","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"        findKeywordEmpty","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"    private ExceptionType type;","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"     * Constructs a LukeException object with the specified exception type.","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"     * @param type the type of exception","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"    public LukeException(ExceptionType type) {","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"        super();","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"        this.type \u003d type;","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"     * Constructs a default LukeException if no type is given object.","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"    public LukeException() {","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"        super();","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"     * Returns a message describing the exception.","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"     * @return a message describing the exception","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"    @Override","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"    public String getMessage() {","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"        return switch (type) {","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"            case commandInvalid -\u003e \"Invalid command/task type.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"            case taskNumberInvalid -\u003e \"Task does not exist. Please give a valid task number.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"            case descriptionEmpty -\u003e \"Invalid command. The description cannot be empty.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"            case deadlineEmpty -\u003e \"Invalid command. The deadline cannot be empty.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"            case deadlineWrongFormat -\u003e \"Invalid command. The deadline format as follows needs to be followed: \" +","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"                    \"deadline (description) /by (deadline).\";","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"            case eventWrongFormat -\u003e \"Invalid command. The deadline format as follows needs to be followed: \" +","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"                    \"event (description) /from (start) /to (end).\";","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"            case eventFromEmpty -\u003e \"Invalid command. The from section cannot be empty.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"            case eventToEmpty -\u003e \"Invalid command. The to section cannot be empty.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"            case findKeywordEmpty -\u003e \"Invalid command. The find command must be followed by a keyword.\";","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"            default -\u003e this.toString();","lastModifiedDate":"2024-02-13"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"        };","lastModifiedDate":"2024-02-13"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"LWS49":67}},{"path":"src/main/java/luke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":" * Parses user input and executes corresponding commands.","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"public class Parser {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"    private String[] validCommands;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"     * Constructs a Parser object with the specified valid commands and task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"     * @param validCommands an array of valid commands","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"     * @param taskList the task list to be operated on","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"    Parser(String[] validCommands, TaskList taskList) {","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"        this.validCommands \u003d validCommands;","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"     * Checks if the input command is valid.","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the command is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"    protected void isInputValid(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"        String command \u003d inputArr[0];","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"        for (String validCommand: validCommands) {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"            if (command.equals(validCommand)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"                return;","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"        throw new LukeException(LukeException.ExceptionType.commandInvalid);","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"     * Retrieves the command from the input string.","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"     * @return the command extracted from the input","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"    protected String getCommand(String input) {","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"        return inputArr[0];","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"     * Lists all tasks in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"     * @param taskList the task list to be listed","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"    protected void commandList(TaskList taskList) {","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"        taskList.list();","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"     * Marks a task as done in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"     * @return the task that was marked as done","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the task number is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"    protected Task commandMark(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":68,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":69,"author":{"gitId":"LWS49"},"content":"        int taskNo \u003d Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2024-02-13"},{"lineNumber":70,"author":{"gitId":"LWS49"},"content":"        int noTasks \u003d taskList.getNoTasks();","lastModifiedDate":"2024-02-13"},{"lineNumber":71,"author":{"gitId":"LWS49"},"content":"        if (taskNo \u003e\u003d noTasks || taskNo \u003c 0) {","lastModifiedDate":"2024-02-13"},{"lineNumber":72,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.taskNumberInvalid);","lastModifiedDate":"2024-02-13"},{"lineNumber":73,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-02-13"},{"lineNumber":74,"author":{"gitId":"LWS49"},"content":"            taskList.markTask(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":75,"author":{"gitId":"LWS49"},"content":"            return taskList.getTask(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":76,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":77,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":78,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":79,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":80,"author":{"gitId":"LWS49"},"content":"     * Unmarks a task in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":81,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":82,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":83,"author":{"gitId":"LWS49"},"content":"     * @return the task that was unmarked","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the task number is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":85,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":86,"author":{"gitId":"LWS49"},"content":"    protected Task commandUnmark(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":87,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":88,"author":{"gitId":"LWS49"},"content":"        int taskNo \u003d Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2024-02-13"},{"lineNumber":89,"author":{"gitId":"LWS49"},"content":"        int noTasks \u003d taskList.getNoTasks();","lastModifiedDate":"2024-02-13"},{"lineNumber":90,"author":{"gitId":"LWS49"},"content":"        if (taskNo \u003e\u003d noTasks || taskNo \u003c 0) {","lastModifiedDate":"2024-02-13"},{"lineNumber":91,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.taskNumberInvalid);","lastModifiedDate":"2024-02-13"},{"lineNumber":92,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-02-13"},{"lineNumber":93,"author":{"gitId":"LWS49"},"content":"            taskList.unmarkTask(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":94,"author":{"gitId":"LWS49"},"content":"            return taskList.getMostRecentTask();","lastModifiedDate":"2024-02-13"},{"lineNumber":95,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":96,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":97,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":98,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":99,"author":{"gitId":"LWS49"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":100,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":101,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":102,"author":{"gitId":"LWS49"},"content":"     * @return the task that was deleted","lastModifiedDate":"2024-02-16"},{"lineNumber":103,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the task number is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":104,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":105,"author":{"gitId":"LWS49"},"content":"    protected Task commandDelete(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":106,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":107,"author":{"gitId":"LWS49"},"content":"        int taskNo \u003d Integer.parseInt(inputArr[1]) - 1;","lastModifiedDate":"2024-02-13"},{"lineNumber":108,"author":{"gitId":"LWS49"},"content":"        int noTasks \u003d taskList.getNoTasks();","lastModifiedDate":"2024-02-13"},{"lineNumber":109,"author":{"gitId":"LWS49"},"content":"        if (taskNo \u003e\u003d noTasks || taskNo \u003c 0) {","lastModifiedDate":"2024-02-13"},{"lineNumber":110,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.taskNumberInvalid);","lastModifiedDate":"2024-02-13"},{"lineNumber":111,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-02-13"},{"lineNumber":112,"author":{"gitId":"LWS49"},"content":"            Task deletedTask \u003d taskList.deleteEvent(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":113,"author":{"gitId":"LWS49"},"content":"            return deletedTask;","lastModifiedDate":"2024-02-13"},{"lineNumber":114,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":115,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":117,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":118,"author":{"gitId":"LWS49"},"content":"     * Adds a todo task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":119,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":120,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":121,"author":{"gitId":"LWS49"},"content":"     * @return the todo task that was added","lastModifiedDate":"2024-02-16"},{"lineNumber":122,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the description is empty","lastModifiedDate":"2024-02-16"},{"lineNumber":123,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":124,"author":{"gitId":"LWS49"},"content":"    protected Task commandTodo(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":125,"author":{"gitId":"LWS49"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":126,"author":{"gitId":"LWS49"},"content":"        if (inputArr.length \u003d\u003d 1 || inputArr[1].trim().isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":127,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.descriptionEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":128,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":129,"author":{"gitId":"LWS49"},"content":"        taskList.addTodo(inputArr[1].trim());","lastModifiedDate":"2024-02-13"},{"lineNumber":130,"author":{"gitId":"LWS49"},"content":"        return taskList.getMostRecentTask();","lastModifiedDate":"2024-02-13"},{"lineNumber":131,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":132,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":133,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":134,"author":{"gitId":"LWS49"},"content":"     * Adds a deadline task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":135,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":136,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":137,"author":{"gitId":"LWS49"},"content":"     * @return the deadline task that was added","lastModifiedDate":"2024-02-16"},{"lineNumber":138,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the description or deadline format is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":139,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":140,"author":{"gitId":"LWS49"},"content":"    protected Task commandDeadline(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":141,"author":{"gitId":"LWS49"},"content":"        String[] deadlineSplitBy \u003d input.split(\"/by\");","lastModifiedDate":"2024-02-13"},{"lineNumber":142,"author":{"gitId":"LWS49"},"content":"        String deadlineDescription \u003d deadlineSplitBy[0].substring(9).trim();","lastModifiedDate":"2024-02-13"},{"lineNumber":143,"author":{"gitId":"LWS49"},"content":"        if (deadlineDescription.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":144,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.descriptionEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":145,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":146,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":147,"author":{"gitId":"LWS49"},"content":"        if (deadlineSplitBy.length !\u003d 2) {","lastModifiedDate":"2024-02-13"},{"lineNumber":148,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.deadlineWrongFormat);","lastModifiedDate":"2024-02-13"},{"lineNumber":149,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":150,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":151,"author":{"gitId":"LWS49"},"content":"        String by \u003d deadlineSplitBy[1].trim();","lastModifiedDate":"2024-02-13"},{"lineNumber":152,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":153,"author":{"gitId":"LWS49"},"content":"        if (by.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":154,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.deadlineEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":155,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"LWS49"},"content":"        taskList.addDeadline(deadlineDescription, by);","lastModifiedDate":"2024-02-13"},{"lineNumber":157,"author":{"gitId":"LWS49"},"content":"        return taskList.getMostRecentTask();","lastModifiedDate":"2024-02-13"},{"lineNumber":158,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":159,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":161,"author":{"gitId":"LWS49"},"content":"     * Adds an event task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":162,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":163,"author":{"gitId":"LWS49"},"content":"     * @param input the user input command","lastModifiedDate":"2024-02-16"},{"lineNumber":164,"author":{"gitId":"LWS49"},"content":"     * @return the event task that was added","lastModifiedDate":"2024-02-16"},{"lineNumber":165,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if the description or event format is invalid","lastModifiedDate":"2024-02-16"},{"lineNumber":166,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":167,"author":{"gitId":"LWS49"},"content":"    protected Task commandEvent(String input) throws LukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":168,"author":{"gitId":"LWS49"},"content":"        String[] eventSplitFrom \u003d input.split(\"/from\");","lastModifiedDate":"2024-02-13"},{"lineNumber":169,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"LWS49"},"content":"        if (eventSplitFrom.length !\u003d 2) {","lastModifiedDate":"2024-02-13"},{"lineNumber":171,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.eventWrongFormat);","lastModifiedDate":"2024-02-13"},{"lineNumber":172,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":174,"author":{"gitId":"LWS49"},"content":"        String eventDescription \u003d eventSplitFrom[0].substring(6).trim();","lastModifiedDate":"2024-02-16"},{"lineNumber":175,"author":{"gitId":"LWS49"},"content":"        String[] eventSplitTo \u003d eventSplitFrom[1].split(\"/to\");","lastModifiedDate":"2024-02-13"},{"lineNumber":176,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":177,"author":{"gitId":"LWS49"},"content":"        if (eventSplitTo.length !\u003d 2) {","lastModifiedDate":"2024-02-13"},{"lineNumber":178,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.eventWrongFormat);","lastModifiedDate":"2024-02-13"},{"lineNumber":179,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":180,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":181,"author":{"gitId":"LWS49"},"content":"        String from \u003d eventSplitTo[0].trim();","lastModifiedDate":"2024-02-13"},{"lineNumber":182,"author":{"gitId":"LWS49"},"content":"        String to \u003d eventSplitTo[1].trim();","lastModifiedDate":"2024-02-13"},{"lineNumber":183,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":184,"author":{"gitId":"LWS49"},"content":"        if (eventDescription.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":185,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.descriptionEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":186,"author":{"gitId":"LWS49"},"content":"        } else if (from.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":187,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.eventFromEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":188,"author":{"gitId":"LWS49"},"content":"        } else if (to.isEmpty()) {","lastModifiedDate":"2024-02-13"},{"lineNumber":189,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.eventToEmpty);","lastModifiedDate":"2024-02-13"},{"lineNumber":190,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":191,"author":{"gitId":"LWS49"},"content":"        taskList.addEvent(eventDescription, from, to);","lastModifiedDate":"2024-02-13"},{"lineNumber":192,"author":{"gitId":"LWS49"},"content":"        return taskList.getMostRecentTask();","lastModifiedDate":"2024-02-13"},{"lineNumber":193,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":194,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":195,"author":{"gitId":"LWS49"},"content":"    protected String commandFind(String input) throws LukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":196,"author":{"gitId":"LWS49"},"content":"        String keyword \u003d input.substring(4).trim();","lastModifiedDate":"2024-02-16"},{"lineNumber":197,"author":{"gitId":"LWS49"},"content":"        if (keyword.isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":198,"author":{"gitId":"LWS49"},"content":"            throw new LukeException(LukeException.ExceptionType.findKeywordEmpty);","lastModifiedDate":"2024-02-16"},{"lineNumber":199,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":200,"author":{"gitId":"LWS49"},"content":"        return keyword;","lastModifiedDate":"2024-02-16"},{"lineNumber":201,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":202,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":202}},{"path":"src/main/java/luke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import java.io.File;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":" * Handles the loading and saving of tasks from and to a file.","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"public class Storage {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"    private final String filepath;","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"    private final File file;","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"     * @param filepath the file path for storing tasks","lastModifiedDate":"2024-02-16"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"    Storage(String filepath) {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"        this.file \u003d new File(filepath);","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"     * Loads tasks from the file.","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"     * @return an ArrayList containing the tasks loaded from the file","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"     * @throws LukeException if an error occurs during file loading","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"    public ArrayList\u003cString\u003e loadFile() throws LukeException {","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"        ArrayList\u003cString\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"            File directory \u003d file.getParentFile();","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"                directory.mkdirs();","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"            if (!file.exists()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"                file.createNewFile();","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"            System.out.println(\"Failed to save file: \" + e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"            Scanner myReader \u003d new Scanner(file);","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"            while (myReader.hasNextLine()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"                String data \u003d myReader.nextLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"                if (data !\u003d \"\") {","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"                    taskList.add(data);","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"                }","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"            myReader.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"            System.out.println(\"File not found.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"        return taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"     * Saves tasks to the file.","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"     * @param taskListObject the TaskList object containing the tasks to be saved","lastModifiedDate":"2024-02-16"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":68,"author":{"gitId":"LWS49"},"content":"    public void saveFile(TaskList taskListObject) {","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"LWS49"},"content":"            ArrayList\u003cTask\u003e taskList \u003d taskListObject.getTaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"LWS49"},"content":"            FileWriter writer \u003d new FileWriter(filepath);","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"LWS49"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"LWS49"},"content":"                writer.write(task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"LWS49"},"content":"                writer.write(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"LWS49"},"content":"            writer.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"LWS49"},"content":"            System.out.println(\"Successfully saved file to local.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"LWS49"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"LWS49"},"content":"            System.out.println(\"An error occurred while saving.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"LWS49"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":83}},{"path":"src/main/java/luke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"public class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"    protected boolean done;","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"    protected String description;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"    public Task (String description) {","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"        this.done \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"        if (done) {","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"            return \"[X] \" + description;","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"        } else {","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"            return \"[ ] \" + description;","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"    public void setToDone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"        this.done \u003d true;","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"    public void setToNotDone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"        this.done \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"     * Returns the description of the task.","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"     * @return description of the task","lastModifiedDate":"2024-02-16"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"    public String getDescription() { return this.description; }","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"LWS49":34}},{"path":"src/main/java/luke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"/**","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":" * Represents a list of tasks.","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":" */","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"public class TaskList {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"    private int noTasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"     * Constructs a TaskList object with tasks loaded from the specified list.","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"     * @param saveTaskList the list of tasks loaded from file","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"    TaskList(ArrayList\u003cString\u003e saveTaskList) {","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"        if (!saveTaskList.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"            saveTaskList.forEach(this::loadToTaskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"        this.noTasks \u003d this.taskList.size();","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"     * Constructs an empty TaskList object.","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"    TaskList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"        this.noTasks \u003d 0;","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"     * Loads a task from a string and adds it to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"     * @param taskString the string representing the task","lastModifiedDate":"2024-02-16"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"    private void loadToTaskList(String taskString) {","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"        String taskType \u003d taskString.substring(1, 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"            case \"T\":","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"                Todo todo \u003d new Todo(taskString.substring(7).trim());","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"                taskList.add(todo);","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"            case \"D\":","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"                String[] deadlineSplit \u003d taskString.split(\"by: \");","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"                String deadlineDescription \u003d deadlineSplit[0].substring(7, deadlineSplit[0].length() - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"                String by \u003d deadlineSplit[1].substring(0, deadlineSplit[1].length() - 1).trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"                Deadline deadline \u003d new Deadline(deadlineDescription, by);","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"                taskList.add(deadline);","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"            case \"E\":","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"                String[] eventFirstSplit \u003d taskString.split(\"from: \");","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"                String[] eventSecondSplit \u003d eventFirstSplit[1].split(\" to: \");","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"                String eventDescription \u003d eventFirstSplit[0].substring(7, eventFirstSplit[0].length() - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"                String from \u003d eventSecondSplit[0].trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"                String to \u003d eventSecondSplit[1].substring(0, eventSecondSplit[1].length() - 1).trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"                Event event \u003d new Event(eventDescription, from, to);","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"                taskList.add(event);","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"                break;","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"     * Marks the task at the specified index as done.","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"     * @param taskNo the index of the task to be marked","lastModifiedDate":"2024-02-16"},{"lineNumber":68,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":69,"author":{"gitId":"LWS49"},"content":"    public void markTask(int taskNo) {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"LWS49"},"content":"        taskList.get(taskNo).setToDone();","lastModifiedDate":"2024-02-13"},{"lineNumber":71,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":74,"author":{"gitId":"LWS49"},"content":"     * Unmarks the task at the specified index as not done.","lastModifiedDate":"2024-02-16"},{"lineNumber":75,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":76,"author":{"gitId":"LWS49"},"content":"     * @param taskNo the index of the task to be unmarked","lastModifiedDate":"2024-02-16"},{"lineNumber":77,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":78,"author":{"gitId":"LWS49"},"content":"    public void unmarkTask(int taskNo) {","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"LWS49"},"content":"        taskList.get(taskNo).setToNotDone();","lastModifiedDate":"2024-02-13"},{"lineNumber":80,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":83,"author":{"gitId":"LWS49"},"content":"     * Lists all tasks in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":84,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":85,"author":{"gitId":"LWS49"},"content":"    public void list() {","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"LWS49"},"content":"        for (int i \u003d 0; i \u003c noTasks; i++) {","lastModifiedDate":"2024-02-13"},{"lineNumber":87,"author":{"gitId":"LWS49"},"content":"            System.out.println((i + 1) + \". \" + taskList.get(i).toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":92,"author":{"gitId":"LWS49"},"content":"     * Adds a todo task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":94,"author":{"gitId":"LWS49"},"content":"     * @param description the description of the todo task","lastModifiedDate":"2024-02-16"},{"lineNumber":95,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":96,"author":{"gitId":"LWS49"},"content":"    public void addTodo(String description) {","lastModifiedDate":"2024-02-13"},{"lineNumber":97,"author":{"gitId":"LWS49"},"content":"        Todo todo \u003d new Todo(description);","lastModifiedDate":"2024-02-13"},{"lineNumber":98,"author":{"gitId":"LWS49"},"content":"        taskList.add(todo);","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"LWS49"},"content":"        noTasks++;","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":103,"author":{"gitId":"LWS49"},"content":"     * Adds a deadline task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":104,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":105,"author":{"gitId":"LWS49"},"content":"     * @param deadlineDescription the description of the deadline task","lastModifiedDate":"2024-02-16"},{"lineNumber":106,"author":{"gitId":"LWS49"},"content":"     * @param by the deadline of the task","lastModifiedDate":"2024-02-16"},{"lineNumber":107,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":108,"author":{"gitId":"LWS49"},"content":"    public void addDeadline(String deadlineDescription, String by) {","lastModifiedDate":"2024-02-13"},{"lineNumber":109,"author":{"gitId":"LWS49"},"content":"        Deadline deadline \u003d new Deadline(deadlineDescription, by);","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"LWS49"},"content":"        taskList.add(deadline);","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"LWS49"},"content":"        noTasks++;","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":115,"author":{"gitId":"LWS49"},"content":"     * Adds an event task to the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":116,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":117,"author":{"gitId":"LWS49"},"content":"     * @param eventDescription the description of the event task","lastModifiedDate":"2024-02-16"},{"lineNumber":118,"author":{"gitId":"LWS49"},"content":"     * @param from the starting date/time of the event","lastModifiedDate":"2024-02-16"},{"lineNumber":119,"author":{"gitId":"LWS49"},"content":"     * @param to the ending date/time of the event","lastModifiedDate":"2024-02-16"},{"lineNumber":120,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":121,"author":{"gitId":"LWS49"},"content":"    public void addEvent(String eventDescription, String from, String to) {","lastModifiedDate":"2024-02-13"},{"lineNumber":122,"author":{"gitId":"LWS49"},"content":"        Event event \u003d new Event(eventDescription, from, to);","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"LWS49"},"content":"        taskList.add(event);","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"LWS49"},"content":"        noTasks++;","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":128,"author":{"gitId":"LWS49"},"content":"     * Deletes the task at the specified index from the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":129,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":130,"author":{"gitId":"LWS49"},"content":"     * @param taskNo the index of the task to be deleted","lastModifiedDate":"2024-02-16"},{"lineNumber":131,"author":{"gitId":"LWS49"},"content":"     * @return the deleted task","lastModifiedDate":"2024-02-16"},{"lineNumber":132,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":133,"author":{"gitId":"LWS49"},"content":"    public Task deleteEvent(int taskNo) {","lastModifiedDate":"2024-02-13"},{"lineNumber":134,"author":{"gitId":"LWS49"},"content":"        Task taskDeleted \u003d taskList.get(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":135,"author":{"gitId":"LWS49"},"content":"        taskList.remove(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":136,"author":{"gitId":"LWS49"},"content":"        noTasks--;","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"LWS49"},"content":"        return taskDeleted;","lastModifiedDate":"2024-02-13"},{"lineNumber":138,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":139,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":141,"author":{"gitId":"LWS49"},"content":"     * Searches for tasks containing the specified keyword in their descriptions.","lastModifiedDate":"2024-02-16"},{"lineNumber":142,"author":{"gitId":"LWS49"},"content":"     * Creates a new TaskList containing tasks matching the keyword.","lastModifiedDate":"2024-02-16"},{"lineNumber":143,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":144,"author":{"gitId":"LWS49"},"content":"     * @param keyword the keyword to search for in task descriptions","lastModifiedDate":"2024-02-16"},{"lineNumber":145,"author":{"gitId":"LWS49"},"content":"     * @return a new TaskList containing tasks with descriptions matching the keyword","lastModifiedDate":"2024-02-16"},{"lineNumber":146,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":147,"author":{"gitId":"LWS49"},"content":"    public TaskList search(String keyword) {","lastModifiedDate":"2024-02-16"},{"lineNumber":148,"author":{"gitId":"LWS49"},"content":"        ArrayList\u003cString\u003e tasksWithKeyword \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-16"},{"lineNumber":149,"author":{"gitId":"LWS49"},"content":"        for (Task task: taskList) {","lastModifiedDate":"2024-02-16"},{"lineNumber":150,"author":{"gitId":"LWS49"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-02-16"},{"lineNumber":151,"author":{"gitId":"LWS49"},"content":"                tasksWithKeyword.add(task.toString());","lastModifiedDate":"2024-02-16"},{"lineNumber":152,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":153,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":154,"author":{"gitId":"LWS49"},"content":"        return new TaskList(tasksWithKeyword);","lastModifiedDate":"2024-02-16"},{"lineNumber":155,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":156,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":157,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":158,"author":{"gitId":"LWS49"},"content":"     * Returns the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":159,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":160,"author":{"gitId":"LWS49"},"content":"     * @return the task list","lastModifiedDate":"2024-02-16"},{"lineNumber":161,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":162,"author":{"gitId":"LWS49"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"LWS49"},"content":"        return taskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":164,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":167,"author":{"gitId":"LWS49"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":168,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":169,"author":{"gitId":"LWS49"},"content":"     * @return the number of tasks","lastModifiedDate":"2024-02-16"},{"lineNumber":170,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":171,"author":{"gitId":"LWS49"},"content":"    public int getNoTasks() {","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"LWS49"},"content":"        return noTasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":175,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":176,"author":{"gitId":"LWS49"},"content":"     * Returns the task at the specified index in the task list.","lastModifiedDate":"2024-02-16"},{"lineNumber":177,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":178,"author":{"gitId":"LWS49"},"content":"     * @param taskNo the index of the task to retrieve","lastModifiedDate":"2024-02-16"},{"lineNumber":179,"author":{"gitId":"LWS49"},"content":"     * @return the task at the specified index","lastModifiedDate":"2024-02-16"},{"lineNumber":180,"author":{"gitId":"LWS49"},"content":"     * @throws IndexOutOfBoundsException if the index is out of range","lastModifiedDate":"2024-02-16"},{"lineNumber":181,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":182,"author":{"gitId":"LWS49"},"content":"    public Task getTask(int taskNo) {","lastModifiedDate":"2024-02-13"},{"lineNumber":183,"author":{"gitId":"LWS49"},"content":"        return taskList.get(taskNo);","lastModifiedDate":"2024-02-13"},{"lineNumber":184,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":185,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":186,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":187,"author":{"gitId":"LWS49"},"content":"     * Returns the most recently added task.","lastModifiedDate":"2024-02-16"},{"lineNumber":188,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":189,"author":{"gitId":"LWS49"},"content":"     * @return the most recent task","lastModifiedDate":"2024-02-16"},{"lineNumber":190,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":191,"author":{"gitId":"LWS49"},"content":"    public Task getMostRecentTask() { return taskList.get(noTasks - 1); }","lastModifiedDate":"2024-02-13"},{"lineNumber":192,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":192}},{"path":"src/main/java/luke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"        super(description);","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"    @Override","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"    public String toString() {","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"LWS49":13}},{"path":"src/main/java/luke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"public class Ui {","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"    protected String input;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"    protected String command;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"    protected TaskList taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"    protected String[] validCommands \u003d {\"bye\", \"list\", \"unmark\", \"mark\", \"todo\", \"event\", \"deadline\", \"delete\", \"find\"};","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"    protected Parser parser;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"    Ui() {","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"        this.input \u003d \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"        this.parser \u003d new Parser(validCommands, taskList);","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"    Ui(TaskList taskList) {","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"        this.input \u003d \"\";","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"        this.parser \u003d new Parser(validCommands, taskList);","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"LWS49"},"content":"    protected void handleInput() {","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"LWS49"},"content":"        while (!this.command.equals(\"bye\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"LWS49"},"content":"            try {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"LWS49"},"content":"                parser.isInputValid(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"LWS49"},"content":"                this.command \u003d parser.getCommand(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"LWS49"},"content":"            } catch (LukeException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"LWS49"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"LWS49"},"content":"                this.input \u003d \"\";","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"LWS49"},"content":"                this.command \u003d \"\";","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"LWS49"},"content":"            switch (this.command) {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"LWS49"},"content":"                case \"list\":","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"LWS49"},"content":"                    this.list();","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"LWS49"},"content":"                    parser.commandList(taskList);","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"LWS49"},"content":"                case \"mark\":","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"LWS49"},"content":"                        Task taskMarked \u003d parser.commandMark(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"LWS49"},"content":"                        markSuccess(taskMarked);","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"LWS49"},"content":"                case \"unmark\":","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"LWS49"},"content":"                        Task taskUnmarked \u003d parser.commandUnmark(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"LWS49"},"content":"                        unmarkSuccess(taskUnmarked);","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"LWS49"},"content":"                case \"delete\":","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"LWS49"},"content":"                        Task taskDeleted \u003d parser.commandDelete(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"LWS49"},"content":"                        deleteSuccess(taskDeleted, taskList.getNoTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":62,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":63,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-13"},{"lineNumber":64,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":65,"author":{"gitId":"LWS49"},"content":"                case \"todo\":","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":67,"author":{"gitId":"LWS49"},"content":"                        Task todoAdded \u003d parser.commandTodo(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":68,"author":{"gitId":"LWS49"},"content":"                        taskSuccessfullyAdded(todoAdded, taskList.getNoTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":69,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":70,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":71,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-13"},{"lineNumber":72,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":73,"author":{"gitId":"LWS49"},"content":"                case \"deadline\":","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":75,"author":{"gitId":"LWS49"},"content":"                        Task deadlineAdded \u003d parser.commandDeadline(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":76,"author":{"gitId":"LWS49"},"content":"                        taskSuccessfullyAdded(deadlineAdded, taskList.getNoTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":77,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":78,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":79,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-13"},{"lineNumber":80,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":81,"author":{"gitId":"LWS49"},"content":"                case \"event\":","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-13"},{"lineNumber":83,"author":{"gitId":"LWS49"},"content":"                        Task eventAdded \u003d parser.commandEvent(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":84,"author":{"gitId":"LWS49"},"content":"                        taskSuccessfullyAdded(eventAdded, taskList.getNoTasks());","lastModifiedDate":"2024-02-13"},{"lineNumber":85,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":86,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":87,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-13"},{"lineNumber":89,"author":{"gitId":"LWS49"},"content":"                case \"find\":","lastModifiedDate":"2024-02-16"},{"lineNumber":90,"author":{"gitId":"LWS49"},"content":"                    try {","lastModifiedDate":"2024-02-16"},{"lineNumber":91,"author":{"gitId":"LWS49"},"content":"                        String keyword \u003d parser.commandFind(this.input);","lastModifiedDate":"2024-02-16"},{"lineNumber":92,"author":{"gitId":"LWS49"},"content":"                        TaskList tasksFound \u003d taskList.search(keyword);","lastModifiedDate":"2024-02-16"},{"lineNumber":93,"author":{"gitId":"LWS49"},"content":"                        if (tasksFound.getNoTasks() \u003d\u003d 0) {","lastModifiedDate":"2024-02-16"},{"lineNumber":94,"author":{"gitId":"LWS49"},"content":"                            System.out.println(\"No tasks with the keyword found.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":95,"author":{"gitId":"LWS49"},"content":"                        } else {","lastModifiedDate":"2024-02-16"},{"lineNumber":96,"author":{"gitId":"LWS49"},"content":"                            tasksSuccessfullyFound(tasksFound);","lastModifiedDate":"2024-02-16"},{"lineNumber":97,"author":{"gitId":"LWS49"},"content":"                        }","lastModifiedDate":"2024-02-16"},{"lineNumber":98,"author":{"gitId":"LWS49"},"content":"                    } catch (LukeException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":99,"author":{"gitId":"LWS49"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-02-16"},{"lineNumber":100,"author":{"gitId":"LWS49"},"content":"                    }","lastModifiedDate":"2024-02-16"},{"lineNumber":101,"author":{"gitId":"LWS49"},"content":"                    break;","lastModifiedDate":"2024-02-16"},{"lineNumber":102,"author":{"gitId":"LWS49"},"content":"            }","lastModifiedDate":"2024-02-13"},{"lineNumber":103,"author":{"gitId":"LWS49"},"content":"            Scanner scanner \u003d new Scanner (System.in);","lastModifiedDate":"2024-02-13"},{"lineNumber":104,"author":{"gitId":"LWS49"},"content":"            this.input \u003d scanner.nextLine();","lastModifiedDate":"2024-02-13"},{"lineNumber":105,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"LWS49"},"content":"    public void showLoadingError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"File not found.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"LWS49"},"content":"    public void welcome() {","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"LWS49"},"content":"        String name \u003d \"Luke\";","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Hello! I\u0027m \" + name + \"\\nWhat can I do for you?\");","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"LWS49"},"content":"        Scanner scanner \u003d new Scanner (System.in);","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"LWS49"},"content":"        this.input \u003d scanner.nextLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"LWS49"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":117,"author":{"gitId":"LWS49"},"content":"            parser.isInputValid(this.input);","lastModifiedDate":"2024-02-13"},{"lineNumber":118,"author":{"gitId":"LWS49"},"content":"            this.command \u003d parser.getCommand(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"LWS49"},"content":"        } catch (LukeException e){","lastModifiedDate":"2024-02-13"},{"lineNumber":120,"author":{"gitId":"LWS49"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":121,"author":{"gitId":"LWS49"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"LWS49"},"content":"    private void list() {","lastModifiedDate":"2024-02-13"},{"lineNumber":125,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"LWS49"},"content":"    private void markSuccess(Task task) {","lastModifiedDate":"2024-02-16"},{"lineNumber":129,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"LWS49"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"LWS49"},"content":"    private void unmarkSuccess(Task task) {","lastModifiedDate":"2024-02-16"},{"lineNumber":134,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"LWS49"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":136,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"LWS49"},"content":"    private void deleteSuccess(Task task, int noTasks) {","lastModifiedDate":"2024-02-16"},{"lineNumber":139,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"LWS49"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Now you have \" + noTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"LWS49"},"content":"    private void taskSuccessfullyAdded(Task task, int noTasks) {","lastModifiedDate":"2024-02-16"},{"lineNumber":145,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"I\u0027ve added this task: \");","lastModifiedDate":"2024-02-13"},{"lineNumber":146,"author":{"gitId":"LWS49"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Now you have \" + noTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"LWS49"},"content":"    /**","lastModifiedDate":"2024-02-16"},{"lineNumber":151,"author":{"gitId":"LWS49"},"content":"     * Displays a message indicating successful retrieval of tasks matching a keyword","lastModifiedDate":"2024-02-16"},{"lineNumber":152,"author":{"gitId":"LWS49"},"content":"     * and the tasks with the keyword.","lastModifiedDate":"2024-02-16"},{"lineNumber":153,"author":{"gitId":"LWS49"},"content":"     *","lastModifiedDate":"2024-02-16"},{"lineNumber":154,"author":{"gitId":"LWS49"},"content":"     * @param taskListWithKeyword the TaskList containing tasks matching the keyword","lastModifiedDate":"2024-02-16"},{"lineNumber":155,"author":{"gitId":"LWS49"},"content":"     */","lastModifiedDate":"2024-02-16"},{"lineNumber":156,"author":{"gitId":"LWS49"},"content":"    private void tasksSuccessfullyFound(TaskList taskListWithKeyword) {","lastModifiedDate":"2024-02-16"},{"lineNumber":157,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-16"},{"lineNumber":158,"author":{"gitId":"LWS49"},"content":"        taskListWithKeyword.list();","lastModifiedDate":"2024-02-16"},{"lineNumber":159,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":160,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":161,"author":{"gitId":"LWS49"},"content":"    public void end() {","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"LWS49"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":164,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"LWS49":164}},{"path":"src/test/java/luke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"public class EventTest {","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"    @Test","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"    public void testEventDate() {","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"        Deadline testDeadline \u003d new Deadline(\"return book\", \"2/12/2019 1800\");","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"        assertEquals(testDeadline.toString(), \"[D][ ] return book (by: 12 Feb 2019 06:00pm)\");","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"LWS49":13}},{"path":"src/test/java/luke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"package luke;","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"public class StorageTest {","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"    @Test","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"    public void testLoadTasksFromFiles() throws LukeException {","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"        Storage storage \u003d new Storage(\"src/test/java/Luke/StorageTest.txt\");","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"        String list \u003d \"[E][ ] project meeting   (from: Mon 2pm to: 4pm)\";","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"        TaskList testList \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"        assertEquals(list, testList.getTaskList().get(0).toString());","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"}","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"LWS49":15}},{"path":"src/test/java/luke/StorageTest.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"[E][ ] project meeting  (from: Mon 2pm to: 4pm)","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"LWS49":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LWS49"},"content":"todo borrow book","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"LWS49"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"LWS49"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"LWS49"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"LWS49"},"content":"mark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"LWS49"},"content":"mark 2","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"LWS49"},"content":"unmark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"LWS49"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"LWS49"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"delete 4","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"LWS49"},"content":"delete 3","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"LWS49"},"content":"hehe","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"LWS49"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"LWS49"},"content":"deadline read book by 3","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"LWS49"},"content":"deadline read book /start 3","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"LWS49"},"content":"deadline /by 3","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"LWS49"},"content":"deadline read book /by","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"event project meeting /from Mon 2pm to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"LWS49"},"content":"event project meeting /fro Mon 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"LWS49"},"content":"event project meeting /fro Mon 2pm /until 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"LWS49"},"content":"event /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"LWS49"},"content":"event project meeting /from /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"LWS49"},"content":"event project meeting /from Mon 2pm /to","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"LWS49"},"content":"bye","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"LWS49":24}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"LWS49"},"content":"javac  -cp C:\\Users\\user\\ip\\src\\main\\java -Xlint:none -d C:\\Users\\user\\ip\\bin C:\\Users\\user\\ip\\src\\main\\java\\*.java","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"LWS49"},"content":"java -classpath C:\\Users\\user\\ip\\bin Luke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LWS49":2,"-":19}}]
