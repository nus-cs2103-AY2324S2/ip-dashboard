[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"    archiveFileName \u003d \"duke.jar\"","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"checkstyle {","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"Jolonauh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"Jolonauh":22,"-":41}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"T,false,minecraft speedrun","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"T,false,myhomework","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"T,false,a,2025-01-02","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"Jolonauh":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke;","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.graphics.Main;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"public class Launcher {","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":13}},{"path":"src/main/java/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":" * AddCommand class represents a command to add a new task to the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    private String taskType;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    private String taskDescription;","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate deadline;","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate eventStart;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate eventEnd;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"     * Constructs an AddCommand object for adding a todo task.","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     * @param taskType        The type of task to add (todo).","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the todo task.","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"    public AddCommand(String taskType, String taskDescription) {","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"        assert taskType.equals(\"todo\") : \"Task should be a todo\";","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"     * Constructs an AddCommand object for adding a deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"     * @param taskType        The type of task to add (deadline).","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"     * @param deadline        The deadline of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"    public AddCommand(String taskType, String taskDescription, LocalDate deadline) {","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        assert taskType.equals(\"deadline\") : \"Task should be a deadline\";","lastModifiedDate":"2024-02-15"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"     * Constructs an AddCommand object for adding an event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"     * @param taskType        The type of task to add (event).","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"     * @param eventStart      The start date of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"     * @param eventEnd        The end date of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"    public AddCommand(String taskType, String taskDescription, LocalDate eventStart, LocalDate eventEnd) {","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"        assert taskType.equals(\"event\") : \"Task should be an event\";","lastModifiedDate":"2024-02-15"},{"lineNumber":62,"author":{"gitId":"Jolonauh"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"Jolonauh"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"Jolonauh"},"content":"        this.eventStart \u003d eventStart;","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"Jolonauh"},"content":"        this.eventEnd \u003d eventEnd;","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":69,"author":{"gitId":"Jolonauh"},"content":"     * Executes the add command by creating the corresponding task and adding it to the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":70,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":71,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":72,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler.","lastModifiedDate":"2024-02-09"},{"lineNumber":73,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":74,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":76,"author":{"gitId":"Jolonauh"},"content":"        Task task \u003d createTask();","lastModifiedDate":"2024-02-17"},{"lineNumber":77,"author":{"gitId":"Jolonauh"},"content":"        taskList.add(task);","lastModifiedDate":"2024-02-17"},{"lineNumber":78,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":79,"author":{"gitId":"Jolonauh"},"content":"        return \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2024-02-17"},{"lineNumber":80,"author":{"gitId":"Jolonauh"},"content":"                + \"  \" + task + \"\\n\"","lastModifiedDate":"2024-02-17"},{"lineNumber":81,"author":{"gitId":"Jolonauh"},"content":"                + String.format(\"Now you have %d tasks in the list.%n\", taskList.size());","lastModifiedDate":"2024-02-17"},{"lineNumber":82,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":84,"author":{"gitId":"Jolonauh"},"content":"    private Task createTask() {","lastModifiedDate":"2024-02-17"},{"lineNumber":85,"author":{"gitId":"Jolonauh"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"Jolonauh"},"content":"        if (this.taskType.equals(\"todo\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"Jolonauh"},"content":"            task \u003d new Todo(this.taskDescription);","lastModifiedDate":"2024-02-06"},{"lineNumber":88,"author":{"gitId":"Jolonauh"},"content":"        } else if (this.taskType.equals(\"deadline\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"Jolonauh"},"content":"            task \u003d new Deadline(this.taskDescription, this.deadline);","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"Jolonauh"},"content":"        } else {","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"Jolonauh"},"content":"            task \u003d new Event(this.taskDescription, this.eventStart, this.eventEnd);","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"Jolonauh"},"content":"        return task;","lastModifiedDate":"2024-02-17"},{"lineNumber":94,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":95,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":95}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * Command is an abstract class representing a command to be executed by the application.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * It provides an execute method that subclasses must implement to carry out the specific command.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     * Executes the command with the given task list and storage.","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    public abstract String execute(TaskList taskList, Storage storage) throws DukeException;","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"     * @return true if the command is an exit command, false otherwise.","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"        return false;","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":29}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * DeleteCommand class represents a command to delete a task from the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    private int index;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a DeleteCommand object with the specified index of the task to delete.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     * Executes the delete command by removing the task at the specified index from the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler.","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! There are no tasks to delete.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"        Task removed \u003d taskList.remove(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"        return \"Noted. I\u0027ve removed this task\\n\"","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"                + \"  \" + removed + \"\\n\"","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"                + String.format(\"Now you have %d tasks in the list.%n\", taskList.size());","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":43}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":" * ExitCommand class represents a command to exit the application.","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"     * Executes the exit command by displaying a farewell message.","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"     * Indicates that this command is an exit command.","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"     * @return true since this command is an exit command.","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"        return true;","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":31}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * FindCommand class represents a command to search for tasks containing a specific keyword.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    private String searchTerm;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a FindCommand object with the specified search term.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     * @param searchTerm The search term to find in tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    public FindCommand(String searchTerm) {","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        this.searchTerm \u003d searchTerm.toLowerCase();","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     * Executes the find command by searching for tasks containing the search term.","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     * Displays the matching tasks, if any, or a message if no matches are found.","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks to search.","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"        TaskList searchResults \u003d getSearchResults(taskList);","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"        if (searchResults.size() !\u003d 0) {","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"            return searchResults.toString();","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"        } else {","lastModifiedDate":"2024-02-17"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"            return \"Sorry, there are no matching entries.\";","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"    private TaskList getSearchResults(TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        TaskList searchResults \u003d new TaskList();","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"            Task currTask \u003d taskList.get(i);","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"            if (currTask.match(searchTerm)) {","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"                searchResults.add(currTask);","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"        return searchResults;","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Jolonauh":54}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":" * ListCommand class represents a command to list all tasks in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"     * Executes the list command by displaying all tasks in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     * If the task list is empty, it displays a message indicating no tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks to display.","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"            return \"Yay! You have no tasks!\";","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        } else {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"            return \"Here are the tasks in your list:\\n\" + taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":26}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * MarkCommand class represents a command to mark or unmark a task as done.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    private int index;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"    private String command;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a MarkCommand object with the specified index and command.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     * @param index   The index of the task to mark or unmark.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"     * @param command The command to execute (mark or unmark).","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    public MarkCommand(int index, String command) {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"        super();","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"        this.command \u003d command;","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     * Executes the mark or unmark command by marking or unmarking the specified task as done.","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(String.format(\"OOPS!!! There are no tasks to %s.\", command));","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"        Task target \u003d taskList.get(index);","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"        if (command.equals(\"mark\")) {","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"            target.markDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"        } else {","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"            target.unmarkDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"Nice! I\u0027ve %sed this task as done:%n\\n\", command) + \"  \" + target;","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":49}},{"path":"src/main/java/duke/commands/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.commands;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * UnknownCommand class represents a command that is not recognized by the application.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * It extends the Command class and provides methods to execute the command.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     * Executes the unknown command by throwing an exception indicating that the command is not recognized.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * @param storage  The storage handler (not used in this command).","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException Always throws an exception indicating that the command is not recognized.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    public String execute(TaskList taskList, Storage storage) throws DukeException {","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        throw new DukeException(\"OOPS!!! The command you provided is not recognized.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":23}},{"path":"src/main/java/duke/dataprocessing/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.dataprocessing;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.AddCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.Command;","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.UnknownCommand;","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":" * CommandParser class parses user input to create corresponding Command objects.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":" * It interprets the user\u0027s commands and arguments to determine the appropriate action to take.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"public class CommandParser {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"     * Parses the full command entered by the user and creates the corresponding Command object.","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"     * @param fullCommand The full command entered by the user.","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"     * @return The Command object representing the parsed command.","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during parsing or if the command is invalid.","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"        assert fullCommand !\u003d null : \"command should exist\";","lastModifiedDate":"2024-02-15"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"        String mainCommand \u003d fullCommand.split(\" \")[0];","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"        String subCommands \u003d fullCommand.substring(fullCommand.indexOf(\u0027 \u0027) + 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"        boolean isSingleCommand \u003d fullCommand.indexOf(\u0027 \u0027) \u003d\u003d -1;","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"        switch (mainCommand) {","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        case \"list\":","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"            checkIsNotSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"            return new ListCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"        case \"bye\":","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"        case \"mark\":","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"        case \"unmark\": {","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"            checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"            int index \u003d Integer.parseInt(subCommands) - 1;","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"            return new MarkCommand(index, mainCommand);","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"            checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"            return new AddCommand(mainCommand, subCommands);","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"            return parseDeadline(mainCommand, subCommands, isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"        case \"event\":","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"            return parseEvent(mainCommand, subCommands, isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"        case \"delete\":","lastModifiedDate":"2024-02-17"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"            checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"            int index \u003d Integer.parseInt(subCommands) - 1;","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"        case \"find\":","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"            checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"Jolonauh"},"content":"            return new FindCommand(subCommands);","lastModifiedDate":"2024-02-17"},{"lineNumber":63,"author":{"gitId":"Jolonauh"},"content":"        default:","lastModifiedDate":"2024-02-17"},{"lineNumber":64,"author":{"gitId":"Jolonauh"},"content":"            return new UnknownCommand();","lastModifiedDate":"2024-02-17"},{"lineNumber":65,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":66,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":67,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"Jolonauh"},"content":"    private static void checkIsSingleCommand(boolean isSingleCommand) throws DukeException {","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"Jolonauh"},"content":"        if (isSingleCommand) {","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Some arguments are missing.\");","lastModifiedDate":"2024-02-17"},{"lineNumber":71,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":73,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":74,"author":{"gitId":"Jolonauh"},"content":"    private static void checkIsNotSingleCommand(boolean isSingleCommand) throws DukeException {","lastModifiedDate":"2024-02-17"},{"lineNumber":75,"author":{"gitId":"Jolonauh"},"content":"        if (!isSingleCommand) {","lastModifiedDate":"2024-02-17"},{"lineNumber":76,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Some arguments are missing.\");","lastModifiedDate":"2024-02-17"},{"lineNumber":77,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":78,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":79,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":80,"author":{"gitId":"Jolonauh"},"content":"    private static AddCommand parseDeadline(","lastModifiedDate":"2024-02-17"},{"lineNumber":81,"author":{"gitId":"Jolonauh"},"content":"            String mainCommand, String subCommands, boolean isSingleCommand","lastModifiedDate":"2024-02-17"},{"lineNumber":82,"author":{"gitId":"Jolonauh"},"content":"    ) throws DukeException {","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"Jolonauh"},"content":"        checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":84,"author":{"gitId":"Jolonauh"},"content":"        String[] deadlineCommands \u003d subCommands.split(\" /by \");","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"Jolonauh"},"content":"        if (deadlineCommands.length !\u003d 2) {","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Invalid arguments provided.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":88,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"Jolonauh"},"content":"        LocalDate deadline \u003d DateTimeParser.parse(deadlineCommands[1]);","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"Jolonauh"},"content":"        return new AddCommand(mainCommand, deadlineCommands[0], deadline);","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":94,"author":{"gitId":"Jolonauh"},"content":"    private static AddCommand parseEvent(","lastModifiedDate":"2024-02-17"},{"lineNumber":95,"author":{"gitId":"Jolonauh"},"content":"            String mainCommand, String subCommands, boolean isSingleCommand","lastModifiedDate":"2024-02-17"},{"lineNumber":96,"author":{"gitId":"Jolonauh"},"content":"    ) throws DukeException {","lastModifiedDate":"2024-02-17"},{"lineNumber":97,"author":{"gitId":"Jolonauh"},"content":"        checkIsSingleCommand(isSingleCommand);","lastModifiedDate":"2024-02-17"},{"lineNumber":98,"author":{"gitId":"Jolonauh"},"content":"        String[] eventCommands \u003d subCommands.split(\" /from \");","lastModifiedDate":"2024-02-06"},{"lineNumber":99,"author":{"gitId":"Jolonauh"},"content":"        if (eventCommands.length !\u003d 2) {","lastModifiedDate":"2024-02-06"},{"lineNumber":100,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Invalid arguments provided.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":101,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":102,"author":{"gitId":"Jolonauh"},"content":"        String[] startEnd \u003d eventCommands[1].split(\" /to \");","lastModifiedDate":"2024-02-06"},{"lineNumber":103,"author":{"gitId":"Jolonauh"},"content":"        if (startEnd.length !\u003d 2) {","lastModifiedDate":"2024-02-06"},{"lineNumber":104,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Invalid arguments provided.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":105,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":107,"author":{"gitId":"Jolonauh"},"content":"        LocalDate start \u003d DateTimeParser.parse(startEnd[0]);","lastModifiedDate":"2024-02-06"},{"lineNumber":108,"author":{"gitId":"Jolonauh"},"content":"        LocalDate end \u003d DateTimeParser.parse(startEnd[1]);","lastModifiedDate":"2024-02-06"},{"lineNumber":109,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":110,"author":{"gitId":"Jolonauh"},"content":"        if (end.isBefore(start)) {","lastModifiedDate":"2024-02-06"},{"lineNumber":111,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Your end date is before your start date.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":112,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":113,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":114,"author":{"gitId":"Jolonauh"},"content":"        return new AddCommand(mainCommand, eventCommands[0], start, end);","lastModifiedDate":"2024-02-06"},{"lineNumber":115,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":116,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":116}},{"path":"src/main/java/duke/dataprocessing/DateTimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.dataprocessing;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" * DateTimeParser class provides methods to parse date strings into LocalDate objects.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"public class DateTimeParser {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     * Parses the specified date string into a LocalDate object.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * @param date The date string to parse.","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * @return The parsed LocalDate object.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during parsing.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    public static LocalDate parse(String date) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"            LocalDate parsedDate \u003d LocalDate.parse(date);","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"            if (parsedDate.isBefore(LocalDate.now())) {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"                throw new DukeException(\"OOPS!!! The date you provided is already passed.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"            return parsedDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! deadline should be in the format: yyyy-mm-dd.\\n\"","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"                    + \"Please check if your date is valid\");","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":31}},{"path":"src/main/java/duke/dataprocessing/Decoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.dataprocessing;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":" * Decoder class provides methods to decode task information from string representations.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"public class Decoder {","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * Decodes the specified string representation of a task into a Task object.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     * @param s The string representation of the task.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"     * @return The Task object decoded from the string representation.","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs during decoding.","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    public static Task decodeTask(String s) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"        String[] attributes \u003d s.split(\",\");","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"            switch (attributes[0]) {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"            case \"T\":","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"                task \u003d new Todo(attributes[2]);","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"            case \"D\":","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"                task \u003d new Deadline(attributes[2], LocalDate.parse(attributes[3]));","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"            case \"E\":","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"                task \u003d new Event(attributes[2], LocalDate.parse(attributes[3]), LocalDate.parse(attributes[4]));","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"                break;","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"            default:","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"                throw new DukeException(\"OOPS!!! File input is invalid.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"            if (Boolean.parseBoolean(attributes[1])) {","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"                task.markDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"            } else {","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"                task.unmarkDone();","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! File input is invalid.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"        return task;","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":53}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.exceptions;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":" * DukeException class represents an exception specific to the Duke application.","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":" * It extends the Exception class and provides a constructor to create Duke-specific exceptions.","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"    private String errorMessage;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     * @param errorMessage The error message for the exception.","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":18}},{"path":"src/main/java/duke/graphics/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.graphics;","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"    private void flip() {","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-13"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"        db.flip();","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"        return db;","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":61}},{"path":"src/main/java/duke/graphics/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.graphics;","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.logic.Logic;","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    private Logic logic \u003d new Logic();","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setLogic(logic);","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().displayGreeting();","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"            stage.show();","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":34}},{"path":"src/main/java/duke/graphics/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.graphics;","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.logic.Logic;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    private Logic logic;","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"    public void setLogic(Logic d) {","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"        logic \u003d d;","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"    @FXML","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        String response \u003d logic.getResponse(input);","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"        );","lastModifiedDate":"2024-02-13"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-13"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"     * Displays a greeting message from Duke when the application starts.","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"    public void displayGreeting() {","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"                DialogBox.getDukeDialog(\"Hello! I\u0027m MicroManager\\nWhat can I do for you?\", dukeImage)","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"        );","lastModifiedDate":"2024-02-13"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":61}},{"path":"src/main/java/duke/logic/Logic.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.logic;","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import duke.commands.Command;","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import duke.dataprocessing.CommandParser;","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import duke.storage.TaskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":" * Duke is a task management application that allows users to manage their tasks through a command-line interface.","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":" * Users can add, delete, mark as done, and list tasks. Tasks are saved to a file for persistence between sessions.","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":" * Duke also provides error handling and a user-friendly interface.","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"public class Logic {","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    private final String SAVE_FILE \u003d \"./data/tasks.txt\";","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-13"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a Duke object with the specified file path for task storage.","lastModifiedDate":"2024-02-13"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-13"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    public Logic() {","lastModifiedDate":"2024-02-13"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"            storage \u003d new Storage(SAVE_FILE);","lastModifiedDate":"2024-02-15"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"            taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-13"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-13"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2024-02-13"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"        assert input !\u003d null : \"There should be an input\";","lastModifiedDate":"2024-02-15"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"            Command inputCommand \u003d CommandParser.parse(input);","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"            if (inputCommand.isExit()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"                Platform.exit();","lastModifiedDate":"2024-02-13"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-13"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"            String consoleText \u003d inputCommand.execute(taskList, storage);","lastModifiedDate":"2024-02-17"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"            storage.update(taskList);","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"            return consoleText;","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-13"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"            return \"Error occurred executing command.\";","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":49}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.io.File;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"import java.util.List;","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"import duke.dataprocessing.Decoder;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":" * Storage class handles the loading and updating of tasks from/to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":" * It reads tasks from a specified file and writes tasks back to the same file.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"public class Storage {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    private String filepath;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    public Storage(String filepath) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     * Loads tasks from the file specified by the file path.","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     * @return A list of tasks loaded from the file.","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs while loading tasks from the file.","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    public List\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        File f \u003d new File(filepath);","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"        Scanner s \u003d null;","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"            s \u003d new Scanner(f);","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! File is not found.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"            Task decodedTask \u003d Decoder.decodeTask(s.nextLine());","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"            taskList.add(decodedTask);","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        return taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"     * Updates the file with the tasks from the given task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks to be written to the file.","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If an error occurs while updating the file.","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"    public void update(TaskList taskList) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"        assert taskList !\u003d null : \"A task list should exist\";","lastModifiedDate":"2024-02-15"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"            FileWriter fw \u003d new FileWriter(filepath);","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"            writeToStorage(taskList, fw);","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"            fw.close();","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! An error occurred with the save file. Try again\");","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":65,"author":{"gitId":"Jolonauh"},"content":"    private void writeToStorage(TaskList taskList, FileWriter fw) throws DukeException, IOException {","lastModifiedDate":"2024-02-17"},{"lineNumber":66,"author":{"gitId":"Jolonauh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-17"},{"lineNumber":67,"author":{"gitId":"Jolonauh"},"content":"            String parsedTask \u003d taskList.get(i).toFileString();","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"Jolonauh"},"content":"            fw.write(parsedTask + \"\\n\");","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":70,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":71,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":71}},{"path":"src/main/java/duke/storage/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.util.List;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":" * TaskList class represents a list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":" * It provides methods for adding, removing, and accessing tasks in the list.","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"public class TaskList {","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a TaskList object with the given list of tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     * @param taskList The list of tasks to initialize the TaskList.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"    public void add(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"        this.taskList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"    public int size() {","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"        return this.taskList.size();","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"     * Retrieves the task at the specified index in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Jolonauh"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Jolonauh"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"Jolonauh"},"content":"     * @throws DukeException If the index is invalid.","lastModifiedDate":"2024-02-09"},{"lineNumber":56,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":57,"author":{"gitId":"Jolonauh"},"content":"    public Task get(int index) throws DukeException {","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"Jolonauh"},"content":"        boolean isOutOfBounds \u003d index \u003c 0 || index \u003e taskList.size() - 1;","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"Jolonauh"},"content":"        if (isOutOfBounds) {","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"Jolonauh"},"content":"            throw new DukeException(\"OOPS!!! Invalid index provided.\");","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"Jolonauh"},"content":"        return this.taskList.get(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":66,"author":{"gitId":"Jolonauh"},"content":"     * Removes and returns the task at the specified index in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":67,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":68,"author":{"gitId":"Jolonauh"},"content":"     * @param index The index of the task to remove.","lastModifiedDate":"2024-02-09"},{"lineNumber":69,"author":{"gitId":"Jolonauh"},"content":"     * @return The removed task.","lastModifiedDate":"2024-02-09"},{"lineNumber":70,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":71,"author":{"gitId":"Jolonauh"},"content":"    public Task remove(int index) {","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"Jolonauh"},"content":"        Task target \u003d this.taskList.get(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":73,"author":{"gitId":"Jolonauh"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2024-02-06"},{"lineNumber":74,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"Jolonauh"},"content":"        return target;","lastModifiedDate":"2024-02-06"},{"lineNumber":76,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":79,"author":{"gitId":"Jolonauh"},"content":"     * Returns a string representation of the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":80,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":81,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":82,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":83,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":84,"author":{"gitId":"Jolonauh"},"content":"    public String toString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"Jolonauh"},"content":"        StringBuilder taskListString \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":87,"author":{"gitId":"Jolonauh"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":88,"author":{"gitId":"Jolonauh"},"content":"            taskListString.append(i + 1).append(\".\").append(taskList.get(i));","lastModifiedDate":"2024-02-06"},{"lineNumber":89,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"Jolonauh"},"content":"            if (i \u003c taskList.size() - 1) {","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"Jolonauh"},"content":"                taskListString.append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"Jolonauh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"Jolonauh"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":95,"author":{"gitId":"Jolonauh"},"content":"        return taskListString.toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":96,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":97,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Jolonauh":97}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":" * Deadline class represents a task with a deadline in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * It extends the Task class and provides methods to manage deadline tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate deadline;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a Deadline object with the specified task description and deadline.","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * @param deadline        The deadline of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    public Deadline(String taskDescription, LocalDate deadline) {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"        super(taskDescription);","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"     * Converts the deadline task to a string representation for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the deadline task for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"T,%b,%s,%s\", isDone, taskDescription, deadline);","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"     * Overrides the toString method in the Task class.","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"[D][%s] %s (by: %s)\",","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"                this.isDone ? \"X\" : \" \",","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"                this.taskDescription,","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"                this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"Jolonauh":47}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":" * Event class represents a task with an event duration in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":" * It extends the Task class and provides methods to manage event tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate start;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    private LocalDate end;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     * Constructs an Event object with the specified task description, start date, and end date.","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     * @param start           The start date of the event.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     * @param end             The end date of the event.","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    public Event(String taskDescription, LocalDate start, LocalDate end) {","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        super(taskDescription);","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"        this.end \u003d end;","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     * Converts the event task to a string representation for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the event task for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"T,%b,%s,%s,%s\", isDone, taskDescription, start, end);","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"     * Overrides the toString method in the Task class.","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"[E][%s] %s (from: %s to: %s)\",","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"                this.isDone ? \"X\" : \" \",","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"                this.taskDescription,","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"                this.start.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")),","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"                this.end.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"        );","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":52,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"Jolonauh":52}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":" * Task class represents a task in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":" * It is an abstract class and provides methods to manage tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"    protected String taskDescription;","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a Task object with the specified task description.","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the task.","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    public Task(String taskDescription) {","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    public void markDone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"    public void unmarkDone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"     * Checks if the task description contains a specified string (case-insensitive).","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Jolonauh"},"content":"     * @param s The string to search for in the task description.","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Jolonauh"},"content":"     * @return true if the task description contains the string, false otherwise.","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Jolonauh"},"content":"    public boolean match(String s) {","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"Jolonauh"},"content":"        return taskDescription.toLowerCase().contains(s);","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Jolonauh"},"content":"     * Converts the task to a string representation for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the task for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"Jolonauh"},"content":"    public abstract String toFileString();","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"Jolonauh":51}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":" * Todo class represents a todo task in the task list.","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":" * It extends the Task class and provides methods to manage todo tasks.","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"     * Constructs a Todo object with the specified task description.","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"     * @param taskDescription The description of the todo task.","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    public Todo(String taskDescription) {","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"        super(taskDescription);","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"     * Converts the todo task to a string representation for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the todo task for saving to a file.","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"T,%b,%s\", this.isDone, this.taskDescription);","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"     * Returns a string representation of the todo task.","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"     * Overrides the toString method in the Task class.","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"     *","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Jolonauh"},"content":"     * @return A string representation of the todo task.","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Jolonauh"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Jolonauh"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"Jolonauh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"Jolonauh"},"content":"        return String.format(\"[T][%s] %s\", this.isDone ? \"X\" : \" \", this.taskDescription);","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"Jolonauh":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.graphics.MainWindow\"\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"Jolonauh":19}},{"path":"src/test/java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    @Test","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"    public void testUnmarkedFileStringConversion() throws DukeException {","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"        Deadline testDeadline \u003d new Deadline(\"task\", LocalDate.parse(\"2025-01-02\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"        assertEquals(\"[D][ ] task (by: Jan 2 2025)\", testDeadline.toString());","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"    @Test","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    public void testMarkedFileStringConversion() {","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"        Deadline testDeadline \u003d new Deadline(\"task\", LocalDate.parse(\"2025-01-02\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"        testDeadline.markDone();","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"        assertEquals(\"[D][X] task (by: Jan 2 2025)\", testDeadline.toString());","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Jolonauh":25}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"package duke.tasks;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"    @Test","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"    public void testUnmarkedFileStringConversion() {","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"        Todo testTodo \u003d new Todo(\"task\");","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"        assertEquals(\"[T][ ] task\", testTodo.toString());","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"    @Test","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"    public void testMarkedFileStringConversion() {","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"        Todo testTodo \u003d new Todo(\"task\");","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"        testTodo.markDone();","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"        assertEquals(\"[T][X] task\", testTodo.toString());","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Jolonauh":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jolonauh"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"Jolonauh"},"content":"list arg1","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"Jolonauh"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"Jolonauh"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"Jolonauh"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"Jolonauh"},"content":"todo borrow book","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"Jolonauh"},"content":"mark","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"Jolonauh"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"Jolonauh"},"content":"mark 0","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"Jolonauh"},"content":"mark 5","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"Jolonauh"},"content":"mark a","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"Jolonauh"},"content":"unmark -2","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"Jolonauh"},"content":"unmark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"Jolonauh"},"content":"unmark .","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"Jolonauh"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"Jolonauh"},"content":"deadline","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"deadline return book","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"Jolonauh"},"content":"deadline return book /by Sunday /by Saturday","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"Jolonauh"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"Jolonauh"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"Jolonauh"},"content":"event","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"event project meeting","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"Jolonauh"},"content":"event project meeting /from Mon 2pm /to 4pm /to 8pm","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"Jolonauh"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"Jolonauh"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"Jolonauh"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"Jolonauh"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"Jolonauh"},"content":"invalid input","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"Jolonauh"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"Jolonauh":29}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Jolonauh"},"content":"REM run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jolonauh":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"Jolonauh"},"content":"# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jolonauh":1,"-":37}}]
