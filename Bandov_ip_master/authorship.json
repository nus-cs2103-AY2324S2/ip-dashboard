[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"checkstyle {","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"    toolVersion \u003d \"8.23\"","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    configFile \u003d rootProject.file(\"config/checkstyle/checkstyle.xml\")","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"    ignoreFailures \u003d false","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"    showViolations \u003d true","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"    maxWarnings \u003d 0","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"    maxErrors \u003d 0","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"    sourceSets \u003d [sourceSets.main]","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Bandov":13,"-":41}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":" * The Deadline class represents a task with a deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"    protected LocalDate by;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"     * Constructor for Deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"     * @param by The deadline of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"        super(description);","lastModifiedDate":"2024-01-20"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-20"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"        return \"[D]\" + (isDone ? \"[X] \" : \"[ ] \") + super.description + \" (by: \" + by + \")\";","lastModifiedDate":"2024-01-20"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"     * Returns the string representation of the deadline to be stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"     * @return The string representation of the deadline to be stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"        return \"D\" + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" +  by;","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"     * Returns a Deadline instance from the string representation of the deadline stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"     * @param str The string representation of the deadline stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"     * @return The Deadline instance from the string representation of the deadline stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"    public static Deadline fromFileString(String str) {","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"        String[] parts \u003d str.split(\" \\\\| \");","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"        if (!parts[0].equals(\"D\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"            return null;","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"        LocalDate by \u003d LocalDate.parse(parts[3].trim());","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"        Deadline deadline \u003d new Deadline(description, by);","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"        if (isDone) {","lastModifiedDate":"2024-01-27"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"            deadline.markAsDone();","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"        return deadline;","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"     * Returns the date of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"     * @return The date of the deadline.","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"    public String getDate() {","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"        return by.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"Bandov":73}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":" * The Duke class is the main class of the Duke application.","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":" * It is responsible for the initialization of the Storage and TaskList instances.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":" * It also contains the main method that serves as the entry point for the Duke application.","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"public class Duke {","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"    private static TaskList tasks;","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"     * Constructor for Duke.","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"     * Initializes the Storage and TaskList instances.","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"     * @param filePath The path to the file where the task list is stored.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If an error occurs while loading the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"    public Duke(String filePath) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-22"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"            Ui.showLoadingError();","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"     * The main method that serves as the entry point for the Duke application.","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"     * Initializes the Duke instance and processes the user input until the \"bye\" command is given.","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"            Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"            Ui.showLoadingError();","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"Hello! I\u0027m Bob!\", \"What can I do for you?\");","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"        while (isRunning) {","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"            String message \u003d scanner.nextLine();","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"            Ui.parse(tasks, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"            isRunning \u003d !message.equals(\"bye\");","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"        Storage.saveCurrentList(tasks);","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"        System.out.println(\"------------------------------------------\");","lastModifiedDate":"2024-01-20"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Bandov":62,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":" * The DukeException class represents an exception specific to the Duke application.","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"     * Constructor for DukeException.","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"     * @param message The error message.","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"        super(message);","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"Bandov":16}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":" * Represents an event task with a description, start time, and end time.","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":" * It extends the Task class by adding time-specific information.","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"     * Constructs an Event task with the specified description, start time, and end time.","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"     * @param description The description of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"        super(description);","lastModifiedDate":"2024-01-20"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-20"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-20"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"     * Returns a string representation of the event task, including its type, status, description, and timing.","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"        return \"[E]\" + (isDone ? \"[X] \" : \"[ ] \") + super.description + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-01-20"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     * Returns a string representation of the event task formatted for file storage.","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"     * @return A string formatted for file storage.","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"        return \"E\" + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" +  from + \" - \" + to;","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"     * Creates an Event object from a string representation formatted for file storage.","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"     * @param str The string representation of the event from a file.","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"     * @return An Event object, or null if the string format is invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"    public static Event fromFileString(String str) {","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"        String[] parts \u003d str.split(\" \\\\| \");","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"        if (!parts[0].equals(\"E\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"            return null; // or throw an exception","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"        String[] times \u003d parts[3].split(\" - \");","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"        if (times.length \u003c 2) {","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"            return null;","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"        String from \u003d times[0].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"        String to \u003d times[1].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");","lastModifiedDate":"2024-01-25"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"        LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(from, formatter);","lastModifiedDate":"2024-01-25"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"        LocalDateTime dateTimeTo \u003d LocalDateTime.parse(to, formatter);","lastModifiedDate":"2024-01-25"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-01-25"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"        Event event \u003d new Event(description, dateTimeFrom, dateTimeTo);","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"        if (isDone) {","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"            event.markAsDone();","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"Bandov"},"content":"        return event;","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":76,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":77,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"Bandov"},"content":"     * Returns the start time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":79,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"Bandov"},"content":"     * @return A string representation of the start time.","lastModifiedDate":"2024-01-27"},{"lineNumber":81,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":82,"author":{"gitId":"Bandov"},"content":"    public String getFromDate() {","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"Bandov"},"content":"        return from.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":87,"author":{"gitId":"Bandov"},"content":"     * Returns the end time of the event.","lastModifiedDate":"2024-01-27"},{"lineNumber":88,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"Bandov"},"content":"     * @return A string representation of the end time.","lastModifiedDate":"2024-01-27"},{"lineNumber":90,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"Bandov"},"content":"    public String getToDate() {","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"Bandov"},"content":"        return to.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":93,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"Bandov":94}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":" * The Parser class represents a parser that parses the user input.","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"public class Parser {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"     * Parses the user input for a \"todo\" command and adds a new Todo task to the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"     * It throws an exception if the input does not contain a description for the todo.","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"     * @param list The TaskList to which the new todo task is added.","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the todo description is empty.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"    public static void handleTodo(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"        if (message.trim().equals(\"todo\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"        String description \u003d message.substring(5).trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"        Task task \u003d new Task(description);","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"        list.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"Got it. I\u0027ve added this task:\", task.toString(),","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"                \"Now you have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"deadline\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"     * Adds a deadline task to the task list with a specified due date.","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"     * @param list The task list to add the deadline to.","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the deadline or its date/time format is incorrect.","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"    public static void handleDeadline(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"        String[] parts \u003d message.split(\"/by\", 2);","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The deadline date/time is missing buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"        String description \u003d parts[0].substring(9).trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"        String by \u003d parts[1].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"            LocalDate date \u003d LocalDate.parse(by, formatter);","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"            Deadline task \u003d new Deadline(description, date);","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"            list.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"            Ui.printWithLines(\"Got it. I\u0027ve added this task:\", task.toString(),","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"                    \"Now you have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The deadline date format is incorrect. Please use yyyy-MM-dd format.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"event\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"     * Adds an event task to the task list with specified start and end times.","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"     * @param list The task list to add the event to.","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the event time is missing or the date/time format is incorrect.","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"    public static void handleEvent(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"        String[] parts \u003d message.split(\" /from \", 2);","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"        if (parts.length \u003c 2 || !parts[1].contains(\" /to \")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The event time is missing or incomplete buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":74,"author":{"gitId":"Bandov"},"content":"        String description \u003d parts[0].substring(6).trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"Bandov"},"content":"        String[] timeParts \u003d parts[1].split(\" /to \", 2);","lastModifiedDate":"2024-01-25"},{"lineNumber":76,"author":{"gitId":"Bandov"},"content":"        String fromTime \u003d timeParts[0].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":77,"author":{"gitId":"Bandov"},"content":"        String toTime \u003d timeParts[1].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":78,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":79,"author":{"gitId":"Bandov"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2024-01-25"},{"lineNumber":80,"author":{"gitId":"Bandov"},"content":"            LocalDateTime dateTimeFrom \u003d LocalDateTime.parse(fromTime, formatter);","lastModifiedDate":"2024-01-25"},{"lineNumber":81,"author":{"gitId":"Bandov"},"content":"            LocalDateTime dateTimeTo \u003d LocalDateTime.parse(toTime, formatter);","lastModifiedDate":"2024-01-25"},{"lineNumber":82,"author":{"gitId":"Bandov"},"content":"            Event task \u003d new Event(description, dateTimeFrom, dateTimeTo);","lastModifiedDate":"2024-01-25"},{"lineNumber":83,"author":{"gitId":"Bandov"},"content":"            list.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":84,"author":{"gitId":"Bandov"},"content":"            Ui.printWithLines(\"Got it. I\u0027ve added this task:\", task.toString(),","lastModifiedDate":"2024-01-27"},{"lineNumber":85,"author":{"gitId":"Bandov"},"content":"                    \"Now you have \" + list.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":86,"author":{"gitId":"Bandov"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":87,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The deadline date format is incorrect. \"","lastModifiedDate":"2024-01-27"},{"lineNumber":88,"author":{"gitId":"Bandov"},"content":"                    + \"Please use yyyy-MM-dd HH:mm format.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":90,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":91,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":92,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":93,"author":{"gitId":"Bandov"},"content":"     * Handles the \"list\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":94,"author":{"gitId":"Bandov"},"content":"     * Displays all tasks in the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":95,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":96,"author":{"gitId":"Bandov"},"content":"     * @param list The task list to display.","lastModifiedDate":"2024-01-27"},{"lineNumber":97,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":98,"author":{"gitId":"Bandov"},"content":"    public static void handleList(TaskList list) {","lastModifiedDate":"2024-01-25"},{"lineNumber":99,"author":{"gitId":"Bandov"},"content":"        ArrayList\u003cString\u003e taskDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-25"},{"lineNumber":100,"author":{"gitId":"Bandov"},"content":"        taskDescriptions.add(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-01-25"},{"lineNumber":101,"author":{"gitId":"Bandov"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-01-25"},{"lineNumber":102,"author":{"gitId":"Bandov"},"content":"            taskDescriptions.add((i + 1) + \". \" + list.get(i).toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":103,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":104,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(taskDescriptions.toArray(new String[0]));","lastModifiedDate":"2024-01-25"},{"lineNumber":105,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":106,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":107,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":108,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"mark\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":109,"author":{"gitId":"Bandov"},"content":"     * Marks a task as done based on the specified task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":110,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":111,"author":{"gitId":"Bandov"},"content":"     * @param list The task list containing the task to be marked.","lastModifiedDate":"2024-01-27"},{"lineNumber":112,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":113,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the task number is missing or invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":114,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":115,"author":{"gitId":"Bandov"},"content":"    public static void handleMark(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":116,"author":{"gitId":"Bandov"},"content":"        if (message.trim().equals(\"mark\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":117,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The task number is missing buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":118,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":119,"author":{"gitId":"Bandov"},"content":"        int index \u003d Integer.parseInt(message.substring(5).trim()) - 1;","lastModifiedDate":"2024-01-25"},{"lineNumber":120,"author":{"gitId":"Bandov"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":121,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! Task number is invalid buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":122,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":123,"author":{"gitId":"Bandov"},"content":"        Task task \u003d list.get(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":124,"author":{"gitId":"Bandov"},"content":"        task.markAsDone();","lastModifiedDate":"2024-01-25"},{"lineNumber":125,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"Nice! I\u0027ve marked this task as done:\", task.toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":126,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":127,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":128,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":129,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"unmark\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":130,"author":{"gitId":"Bandov"},"content":"     * Marks a task as not done based on the specified task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":131,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":132,"author":{"gitId":"Bandov"},"content":"     * @param list The task list containing the task to be unmarked.","lastModifiedDate":"2024-01-27"},{"lineNumber":133,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":134,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the task number is missing or invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":135,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":136,"author":{"gitId":"Bandov"},"content":"    public static void handleUnmark(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":137,"author":{"gitId":"Bandov"},"content":"        if (message.trim().equals(\"unmark\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":138,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The task number is missing buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":139,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":140,"author":{"gitId":"Bandov"},"content":"        int index \u003d Integer.parseInt(message.substring(7).trim()) - 1;","lastModifiedDate":"2024-01-25"},{"lineNumber":141,"author":{"gitId":"Bandov"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":142,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! Task number is invalid buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":143,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":144,"author":{"gitId":"Bandov"},"content":"        Task task \u003d list.get(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":145,"author":{"gitId":"Bandov"},"content":"        task.unMarkAsDone();","lastModifiedDate":"2024-01-25"},{"lineNumber":146,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"OK, I\u0027ve marked this task as not done yet:\", task.toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":147,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":148,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":149,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":150,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"delete\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":151,"author":{"gitId":"Bandov"},"content":"     * Deletes a task from the task list based on the specified task number.","lastModifiedDate":"2024-01-27"},{"lineNumber":152,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":153,"author":{"gitId":"Bandov"},"content":"     * @param list The task list from which to delete the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":154,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":155,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the task number is missing or invalid.","lastModifiedDate":"2024-01-27"},{"lineNumber":156,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":157,"author":{"gitId":"Bandov"},"content":"    public static void deleteTask(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":158,"author":{"gitId":"Bandov"},"content":"        if (message.trim().equals(\"delete\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":159,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The task number is missing buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":160,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":161,"author":{"gitId":"Bandov"},"content":"        int index \u003d Integer.parseInt(message.substring(7).trim()) - 1;","lastModifiedDate":"2024-01-25"},{"lineNumber":162,"author":{"gitId":"Bandov"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":163,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! Task number is invalid buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":164,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":165,"author":{"gitId":"Bandov"},"content":"        Task task \u003d list.get(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":166,"author":{"gitId":"Bandov"},"content":"        list.remove(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":167,"author":{"gitId":"Bandov"},"content":"        Ui.printWithLines(\"OK, I\u0027ve deleted this task:\", task.toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":168,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":169,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":170,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":171,"author":{"gitId":"Bandov"},"content":"     * Parses and handles the \"find\" command.","lastModifiedDate":"2024-01-27"},{"lineNumber":172,"author":{"gitId":"Bandov"},"content":"     * Finds all tasks in the task list that contain the specified keyword.","lastModifiedDate":"2024-01-27"},{"lineNumber":173,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":174,"author":{"gitId":"Bandov"},"content":"     * @param list The task list to search for matching tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":175,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":176,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the keyword is missing.","lastModifiedDate":"2024-01-27"},{"lineNumber":177,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":178,"author":{"gitId":"Bandov"},"content":"    public static void findTask(TaskList list, String message) throws DukeException {","lastModifiedDate":"2024-01-27"},{"lineNumber":179,"author":{"gitId":"Bandov"},"content":"        if (message.trim().equals(\"find\")) {","lastModifiedDate":"2024-01-27"},{"lineNumber":180,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"OOPS!!! The keyword is missing buddy.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":181,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":182,"author":{"gitId":"Bandov"},"content":"        String keyword \u003d message.substring(5).trim();","lastModifiedDate":"2024-01-27"},{"lineNumber":183,"author":{"gitId":"Bandov"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d list.find(keyword);","lastModifiedDate":"2024-01-27"},{"lineNumber":184,"author":{"gitId":"Bandov"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-01-27"},{"lineNumber":185,"author":{"gitId":"Bandov"},"content":"            Ui.printWithLines(\"No matching task found.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":186,"author":{"gitId":"Bandov"},"content":"        } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":187,"author":{"gitId":"Bandov"},"content":"            Ui.printWithLines(\"Here is the matching tasks in your list: \");","lastModifiedDate":"2024-01-27"},{"lineNumber":188,"author":{"gitId":"Bandov"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2024-01-27"},{"lineNumber":189,"author":{"gitId":"Bandov"},"content":"                System.out.println((i + 1) + \". \" + matchingTasks.get(i).toString());","lastModifiedDate":"2024-01-27"},{"lineNumber":190,"author":{"gitId":"Bandov"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":191,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":192,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":193,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Bandov":193}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.io.File;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":" * The Storage class is responsible for handling file operations including","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":" * loading tasks from a file and saving tasks to a file.","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"public class Storage {","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    protected Scanner scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"    protected static String filePath;","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"    protected File file;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"     * Creates a Storage object which initializes a Scanner for reading from a file.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"     * The file path is specified by the provided string.","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"     * @param filePath The file path of the storage file.","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If the file is not found.","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"    public Storage(String filePath) throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"            Storage.filePath \u003d filePath;","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"            this.file \u003d new File(filePath);","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"            this.scanner \u003d new Scanner(file);","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"            throw new DukeException(\"Error loading file\");","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"     * Writes the given text to a file at the specified file path.","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     * @param filePath The file path where the text is to be written.","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     * @param textToAdd The text to write to the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"        FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"        fw.close();","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"     * Saves the current list of tasks to the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"     * @param list The task list to be saved.","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"     * @throws IOException If an I/O error occurs during writing.","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"    public static void saveCurrentList(TaskList list) throws IOException {","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"        for (Task task : list.getList()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"            sb.append(task.toFileString());","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"        writeToFile(filePath, sb.toString());","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"     * Loads tasks from the file and returns them as an ArrayList of Task objects.","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"     * @throws DukeException If an error occurs while reading from the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-25"},{"lineNumber":74,"author":{"gitId":"Bandov"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"Bandov"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2024-01-25"},{"lineNumber":76,"author":{"gitId":"Bandov"},"content":"            String type \u003d line.substring(0, 1);","lastModifiedDate":"2024-01-25"},{"lineNumber":77,"author":{"gitId":"Bandov"},"content":"            switch (type) {","lastModifiedDate":"2024-01-25"},{"lineNumber":78,"author":{"gitId":"Bandov"},"content":"            case \"T\":","lastModifiedDate":"2024-01-25"},{"lineNumber":79,"author":{"gitId":"Bandov"},"content":"                list.add(Task.fromFileString(line));","lastModifiedDate":"2024-01-25"},{"lineNumber":80,"author":{"gitId":"Bandov"},"content":"                break;","lastModifiedDate":"2024-01-25"},{"lineNumber":81,"author":{"gitId":"Bandov"},"content":"            case \"D\":","lastModifiedDate":"2024-01-25"},{"lineNumber":82,"author":{"gitId":"Bandov"},"content":"                list.add(Deadline.fromFileString(line));","lastModifiedDate":"2024-01-25"},{"lineNumber":83,"author":{"gitId":"Bandov"},"content":"                break;","lastModifiedDate":"2024-01-25"},{"lineNumber":84,"author":{"gitId":"Bandov"},"content":"            case \"E\":","lastModifiedDate":"2024-01-25"},{"lineNumber":85,"author":{"gitId":"Bandov"},"content":"                list.add(Event.fromFileString(line));","lastModifiedDate":"2024-01-25"},{"lineNumber":86,"author":{"gitId":"Bandov"},"content":"                break;","lastModifiedDate":"2024-01-25"},{"lineNumber":87,"author":{"gitId":"Bandov"},"content":"            default:","lastModifiedDate":"2024-01-27"},{"lineNumber":88,"author":{"gitId":"Bandov"},"content":"                throw new DukeException(\"Error loading file\");","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"Bandov"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":90,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":91,"author":{"gitId":"Bandov"},"content":"        return list;","lastModifiedDate":"2024-01-25"},{"lineNumber":92,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":93,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Bandov":93}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":" * Represents a task with a description and a completion status.","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":" * This class serves as the base class for more specific types of tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"public class Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"    protected String description;","lastModifiedDate":"2024-01-20"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-20"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"     * Constructs a Task with the specified description. The task is initially not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-20"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-20"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-20"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"     * Returns the description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-20"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"        return description;","lastModifiedDate":"2024-01-20"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"     * Returns the completion status of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"     * @return true if the task is done, false otherwise.","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-01-20"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"        return isDone;","lastModifiedDate":"2024-01-20"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-20"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"        isDone \u003d true;","lastModifiedDate":"2024-01-20"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"    public void unMarkAsDone() {","lastModifiedDate":"2024-01-20"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-01-20"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"     * Returns a string representation of the task,","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"     * including its type, completion status, and description.","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"        return \"[T]\" + (isDone ? \"[X] \" : \"[ ] \") + description;","lastModifiedDate":"2024-01-20"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"     * Returns a string representation of the task formatted for file storage,","lastModifiedDate":"2024-01-27"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"     * including its type, completion status, and description.","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"     * @return A string formatted for file storage.","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"        return \"T\" + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2024-01-25"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":74,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":75,"author":{"gitId":"Bandov"},"content":"     * Returns a Task instance from the string representation of the task stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":76,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"Bandov"},"content":"     * @param str The string representation of the task stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"Bandov"},"content":"     * @return The Task instance from the string representation of the task stored in the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":79,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"Bandov"},"content":"    public static Task fromFileString(String str) {","lastModifiedDate":"2024-01-25"},{"lineNumber":81,"author":{"gitId":"Bandov"},"content":"        String[] parts \u003d str.split(\" \\\\| \");","lastModifiedDate":"2024-01-25"},{"lineNumber":82,"author":{"gitId":"Bandov"},"content":"        if (!parts[0].equals(\"T\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":83,"author":{"gitId":"Bandov"},"content":"            return null;","lastModifiedDate":"2024-01-25"},{"lineNumber":84,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":85,"author":{"gitId":"Bandov"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2024-01-25"},{"lineNumber":86,"author":{"gitId":"Bandov"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-01-25"},{"lineNumber":87,"author":{"gitId":"Bandov"},"content":"        Task task \u003d new Task(description);","lastModifiedDate":"2024-01-25"},{"lineNumber":88,"author":{"gitId":"Bandov"},"content":"        if (isDone) {","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"Bandov"},"content":"            task.markAsDone();","lastModifiedDate":"2024-01-27"},{"lineNumber":90,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"Bandov"},"content":"        return task;","lastModifiedDate":"2024-01-25"},{"lineNumber":92,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":93,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"Bandov":94}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":" * The TaskList class represents a list of tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":" * It encapsulates an ArrayList of Task objects and","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":" * provides methods to manipulate the list.","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"public class TaskList {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"     * Constructs a TaskList with the specified list of tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"     * @param list An ArrayList of Task objects.","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"        this.list \u003d list;","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"     * @param task The Task object to be added.","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    public void add(Task task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"        list.add(task);","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     * Removes a task from the task list at the specified index.","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"    public void remove(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"        list.remove(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"     * Retrieves a task from the task list at the specified index.","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"     * @param index The index of the task to be retrieved.","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"     * @return The Task object at the specified index.","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"    public Task get(int index) {","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"        return list.get(index);","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"     * @return The size of the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"    public int size() {","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"        return list.size();","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"     * Returns the ArrayList containing all the tasks.","lastModifiedDate":"2024-01-27"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2024-01-25"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"        return list;","lastModifiedDate":"2024-01-25"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":74,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":75,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":76,"author":{"gitId":"Bandov"},"content":"     * Finds all tasks in the task list that contain the specified keyword.","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"Bandov"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2024-01-27"},{"lineNumber":79,"author":{"gitId":"Bandov"},"content":"     * @return An ArrayList of Task objects that contain the keyword.","lastModifiedDate":"2024-01-27"},{"lineNumber":80,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":81,"author":{"gitId":"Bandov"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2024-01-27"},{"lineNumber":82,"author":{"gitId":"Bandov"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-27"},{"lineNumber":83,"author":{"gitId":"Bandov"},"content":"        for (Task task : list) {","lastModifiedDate":"2024-01-27"},{"lineNumber":84,"author":{"gitId":"Bandov"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-01-27"},{"lineNumber":85,"author":{"gitId":"Bandov"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":86,"author":{"gitId":"Bandov"},"content":"            }","lastModifiedDate":"2024-01-27"},{"lineNumber":87,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":88,"author":{"gitId":"Bandov"},"content":"        return matchingTasks;","lastModifiedDate":"2024-01-27"},{"lineNumber":89,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":90,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":91,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":92,"author":{"gitId":"Bandov"},"content":"     * Returns a string representation of the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":93,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":94,"author":{"gitId":"Bandov"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2024-01-27"},{"lineNumber":95,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":96,"author":{"gitId":"Bandov"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":97,"author":{"gitId":"Bandov"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":98,"author":{"gitId":"Bandov"},"content":"        return list.toString();","lastModifiedDate":"2024-01-25"},{"lineNumber":99,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":100,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Bandov":100}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"package duke;","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"/**","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":" * The Ui class is responsible for handling user interactions.","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":" * It provides methods to display messages to the user and parse user input.","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":" */","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"public class Ui {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"    Scanner scanner;","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"     * Constructs a Ui object, initializing a scanner to read user input.","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    public Ui() {","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"     * Prints one or more messages to the console, each separated by a line.","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"     * @param messages An array of messages to be printed.","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"    public static void printWithLines(String... messages) {","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"        System.out.println(\"------------------------------------------\");","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"        for (String message : messages) {","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"            System.out.println(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"     * Displays an error message when there is an error loading the file.","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    public static void showLoadingError() {","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"        printWithLines(\"Error loading file\");","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"    /**","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"     * Parses and processes the user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"     * It delegates the command handling to the Parser class.","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"     *","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"     * @param list The TaskList to be used for executing commands.","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"     * @param message The user input string.","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"     */","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"    public static void parse(TaskList list, String message) {","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"            if (message.startsWith(\"todo\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"                Parser.handleTodo(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"deadline\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"                Parser.handleDeadline(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"event\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"                Parser.handleEvent(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"            } else if (message.equals(\"list\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"                Parser.handleList(list);","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"mark\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"                Parser.handleMark(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"unmark\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"                Parser.handleUnmark(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"delete\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"                Parser.deleteTask(list, message);","lastModifiedDate":"2024-01-25"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"            } else if (message.startsWith(\"find\")) {","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"                Parser.findTask(list, message);","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"            } else if (!message.equals(\"bye\")) {","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means buddy.\");","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"            printWithLines(e.getMessage());","lastModifiedDate":"2024-01-25"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Bandov":71}},{"path":"src/main/java/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"then","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"    mkdir ../bin","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"fi","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"# delete output from previous run","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"then","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"fi","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"if ! javac -Xlint:none -d ../bin /Users/dom/ip/src/main/java/duke/Duke.java","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"then","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    exit 1","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"fi","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"java Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"# compare the output to the expected output","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"then","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"    exit 0","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"else","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2024-01-24"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    exit 1","lastModifiedDate":"2024-01-24"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"fi","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"Bandov":35}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"import duke.*;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"class ParserTest {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"    private TaskList list;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"    void setUp() {","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"        list \u003d new TaskList();","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"        // Mocking Ui methods or ensure that Ui methods can run in a test environment","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"    void handleTodo_validInput_addsTodo() {","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"            Parser.handleTodo(list, \"todo read book\");","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"            assertEquals(1, list.size());","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"            Task addedTask \u003d list.get(0);","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"read book\", addedTask.getDescription());","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"            fail(\"Exception should not be thrown for valid input\");","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"    void handleTodo_emptyDescription_throwsDukeException() {","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"        Executable todoWithEmptyDescription \u003d () -\u003e Parser.handleTodo(list, \"todo\");","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"        assertThrows(DukeException.class, todoWithEmptyDescription, \"Exception was expected for empty todo description\");","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"    void handleTodo_validInput_addsDeadline() {","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"            Parser.handleDeadline(list, \"deadline read book /by 2020-02-02\");","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"            assertEquals(1, list.size());","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"            Deadline addedTask \u003d (Deadline) list.get(0);","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"read book\", addedTask.getDescription());","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"2020-02-02\", addedTask.getDate());","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"            fail(\"Exception should not be thrown for valid input\");","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"    void handleDeadline_emptyDescription_throwsDukeException() {","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"        Executable todoWithEmptyDescription \u003d () -\u003e Parser.handleDeadline(list, \"deadline\");","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"Bandov"},"content":"        assertThrows(DukeException.class, todoWithEmptyDescription, \"Exception was expected for empty todo description\");","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Bandov"},"content":"    void handleTodo_validInput_addsEvent() {","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Bandov"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Bandov"},"content":"            Parser.handleEvent(list, \"event read book /from 2020-02-02 23:00 /to 2020-02-03 23:15\");","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"Bandov"},"content":"            assertEquals(1, list.size());","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Bandov"},"content":"            Event addedTask \u003d (Event) list.get(0);","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"read book\", addedTask.getDescription());","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"2020-02-02T23:00\", addedTask.getFromDate());","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Bandov"},"content":"            assertEquals(\"2020-02-03T23:15\", addedTask.getToDate());","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"Bandov"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"Bandov"},"content":"            fail(\"Exception should not be thrown for valid input\");","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"Bandov"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"Bandov"},"content":"    void handleEvent_emptyDescription_throwsDukeException() {","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"Bandov"},"content":"        Executable todoWithEmptyDescription \u003d () -\u003e Parser.handleDeadline(list, \"event\");","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"Bandov"},"content":"        assertThrows(DukeException.class, todoWithEmptyDescription, \"Exception was expected for empty todo description\");","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Bandov":73}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"import duke.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import duke.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import duke.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"class StorageTest {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"    private Path tempFile;","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"    void setUp() throws IOException, DukeException {","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"        // Create a temporary file","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"        tempFile \u003d Files.createTempFile(\"test\", \".txt\");","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"        // Initialize Storage with the temporary file path","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"        storage \u003d new Storage(tempFile.toString());","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"    @AfterEach","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"    void tearDown() throws IOException {","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"        // Delete the temporary file after each test","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"        Files.deleteIfExists(tempFile);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"    void saveAndLoad_TodoTask() throws IOException, DukeException {","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Bandov"},"content":"        list.add(new Task(\"read book\")); // Assuming Task is a valid type for simplicity","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Bandov"},"content":"        // Save the list to the file","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Bandov"},"content":"        Storage.saveCurrentList(list);","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Bandov"},"content":"        // Load the list back","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Bandov"},"content":"        ArrayList\u003cTask\u003e loadedList \u003d storage.load();","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Bandov"},"content":"        // Check if the loaded list matches the saved list","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Bandov"},"content":"        assertEquals(1, loadedList.size());","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Bandov"},"content":"        assertEquals(\"read book\", loadedList.get(0).getDescription());","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Bandov":50}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"import duke.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"import duke.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"public class TaskListTest {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"    void setUp() {","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"    @Test","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"    void testAddTask() {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"        Task task \u003d new Task(\"Read book\");","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"        assertEquals(1, tasks.size());","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Bandov":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bandov"},"content":"todo Read a book","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"Bandov"},"content":"deadline Submit assignment /by 2024-01-30","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"Bandov"},"content":"event Team meeting /from 2024-01-25 10:00 /to 2024-01-25 12:00","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"Bandov"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"Bandov"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"Bandov"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"Bandov"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"Bandov"},"content":"deadline Finish project","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"Bandov"},"content":"event Conference /from 2024-01-28","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"Bandov"},"content":"mark 100","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"Bandov"},"content":"unmark 100","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"Bandov"},"content":"unmark","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"Bandov"},"content":"dance","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"Bandov"},"content":"todo Complete Java project","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"Bandov"},"content":"deadline File taxes /by 2024-04-15","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"event Birthday Party /from 2024-03-10 18:00 /to 2024-03-10 22:00","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"Bandov"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"Bandov"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"Bandov"},"content":"unmark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"Bandov"},"content":"deadline Prepare presentation /by 2024-03-05","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"Bandov"},"content":"event Workshop /from 2024-02-20 09:00 /to 2024-02-20 12:00","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"Bandov"},"content":"todo Clean the house","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"delete 1","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"Bandov"},"content":"delete 3","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"Bandov"},"content":"delete 100","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"delete","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"Bandov"},"content":"todo Grocery Shopping","lastModifiedDate":"2024-01-24"},{"lineNumber":28,"author":{"gitId":"Bandov"},"content":"todo Call Mom","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"Bandov"},"content":"deadline Renew Insurance /by 2024-05-01","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"Bandov"},"content":"event Doctor\u0027s Appointment /from 2024-04-20 15:00 /to 2024-04-20 16:00","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"Bandov"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"Bandov"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":33,"author":{"gitId":"Bandov"},"content":"mark 5","lastModifiedDate":"2024-01-24"},{"lineNumber":34,"author":{"gitId":"Bandov"},"content":"unmark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"Bandov":35}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Bandov"},"content":"if ! javac -Xlint:none -d ../bin /Users/dom/ip/src/main/java/*.java","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Bandov"},"content":"java -cp ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"Bandov"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"Bandov"},"content":"","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"Bandov":4,"-":31}}]
