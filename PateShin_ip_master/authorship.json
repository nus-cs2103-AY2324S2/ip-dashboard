[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"# duke.Duke project template","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"PateShin":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"checkstyle {","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"PateShin":21,"-":41}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"# FICIN","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"![FICIN Chat Bot](Ui.png)","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"FICIN is **VERY EASY** chat bot which can help you to track and record your tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"## **Features:**","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"* Loading \u0026 Saving Task","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"* Addition of tasks with ```TODO```, ```DEADLINE```, ```EVENT```","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"  * Date Command for Deadline and Event (```TODAY```, ```TOMORROW```)","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"* Show lists of Tasks with ```LIST```","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"* Deletion of tasks with ```DELETE```","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"* Search tasks with ```FIND```","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"* Mark the task is done/undone with ```MARK``` and ```UNMARK```","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"* Show commands that can guide user with ```HELP```","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"## **User Guide**","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"____________________________________","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"### **TODO**: ","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"Simply record your task.","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"Command format: ```todo \u003ctask\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"//Example of Todo","lastModifiedDate":"2024-02-22"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"Todo Study ","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"### **DEADLINE**: ","lastModifiedDate":"2024-02-22"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"Set deadline for your task with command ```/by```.","lastModifiedDate":"2024-02-22"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"* The format of date can be either ```YYYY/MM/dd```or ```YYYY/MM/dd HHmm```.","lastModifiedDate":"2024-02-22"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"* It also allows to type ```today``` and/or ```tomorrow``` in ```/by```.","lastModifiedDate":"2024-02-22"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"Command format: ```deadline \u003ctask\u003e /by YYYY/MM/dd HHmm```","lastModifiedDate":"2024-02-22"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"\u003cbr\u003e or \u003cbr\u003e ","lastModifiedDate":"2024-02-22"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"Command format: ```deadline \u003ctask\u003e /by YYYY/MM/dd```","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"// Example of Deadline","lastModifiedDate":"2024-02-22"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"Deadline Assignment /by tomorrow","lastModifiedDate":"2024-02-22"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"### **EVENT**: ","lastModifiedDate":"2024-02-22"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"Set event time for your task with command ```/from ... /to ...```.","lastModifiedDate":"2024-02-22"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"* The format of date can be either ```YYYY/MM/dd```or ```YYYY/MM/dd HHmm```.","lastModifiedDate":"2024-02-22"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"* It also allows to type ```today``` and/or ```tomorrow``` in ```/from``` and ```/to```.","lastModifiedDate":"2024-02-22"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"Command format: ```event \u003ctask\u003e /from YYYY/MM/dd HHmm /to YYYY/MM/dd HHmm```","lastModifiedDate":"2024-02-22"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"\u003cbr\u003e **or** \u003cbr\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"Command format: ```event \u003ctask\u003e /from YYYY/MM/dd /to YYYY/MM/dd```","lastModifiedDate":"2024-02-22"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"\u003cbr\u003e **or** \u003cbr\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"Command format: ```event \u003ctask\u003e /from YYYY/MM/dd /to YYYY/MM/dd HHmm```","lastModifiedDate":"2024-02-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"// Example of Event","lastModifiedDate":"2024-02-22"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"Event Travel /from today /to 2024/04/29 ","lastModifiedDate":"2024-02-22"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"// Set deadline with specific hour (11pm)","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"Event Travel /from 2024/02/26 /to 2024/04/29 2300 ","lastModifiedDate":"2024-02-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"### **LIST**:","lastModifiedDate":"2024-02-22"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"List every tasks which are saved","lastModifiedDate":"2024-02-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"Command format: ```list```","lastModifiedDate":"2024-02-22"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"list // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":" Here is the list of tasks:","lastModifiedDate":"2024-02-22"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":" 1.[T][ ] Study life","lastModifiedDate":"2024-02-22"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":" 2.[D][ ] IP (by: Feb 22 2024)","lastModifiedDate":"2024-02-22"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"### **DELETE**:","lastModifiedDate":"2024-02-22"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"Delete task which is not needed by typing its number starting from 1","lastModifiedDate":"2024-02-22"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"Command format: ```delete \u003ctask number\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"// Same task list is given ","lastModifiedDate":"2024-02-22"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"delete 1 // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":" Got it. I have removed this task:","lastModifiedDate":"2024-02-22"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"   [T][ ] Study Life","lastModifiedDate":"2024-02-22"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":" Now you have 1 tasks in the list.","lastModifiedDate":"2024-02-22"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"### **FIND**:","lastModifiedDate":"2024-02-22"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"Search specific task with keyword","lastModifiedDate":"2024-02-22"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"Command format: ```find \u003ctask\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"find IP // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":" Here is the list of tasks:","lastModifiedDate":"2024-02-22"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":" 1.[D][ ] IP (by: Feb 22 2024)","lastModifiedDate":"2024-02-22"},{"lineNumber":100,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":101,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":102,"author":{"gitId":"PateShin"},"content":"### **MARK \u0026 UNMARK**:","lastModifiedDate":"2024-02-22"},{"lineNumber":103,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":104,"author":{"gitId":"PateShin"},"content":"Mark \u0026 Unmark the task","lastModifiedDate":"2024-02-22"},{"lineNumber":105,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":106,"author":{"gitId":"PateShin"},"content":"**Mark:**","lastModifiedDate":"2024-02-22"},{"lineNumber":107,"author":{"gitId":"PateShin"},"content":"Command format: ```mark \u003ctask number\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":108,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":109,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":110,"author":{"gitId":"PateShin"},"content":"mark 1 // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":111,"author":{"gitId":"PateShin"},"content":" Great! I have marked the task as done:","lastModifiedDate":"2024-02-22"},{"lineNumber":112,"author":{"gitId":"PateShin"},"content":"   [D][X] IP (by: Feb 22 2024)","lastModifiedDate":"2024-02-22"},{"lineNumber":113,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":114,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":115,"author":{"gitId":"PateShin"},"content":"**Unmark:** Command format: ```unmark \u003ctask number\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":116,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":117,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":118,"author":{"gitId":"PateShin"},"content":"unmark 1 // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":119,"author":{"gitId":"PateShin"},"content":" Sure, I have marked this task as not done yet:","lastModifiedDate":"2024-02-22"},{"lineNumber":120,"author":{"gitId":"PateShin"},"content":"   [D][ ] IP (by: Feb 22 2024)","lastModifiedDate":"2024-02-22"},{"lineNumber":121,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":122,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":123,"author":{"gitId":"PateShin"},"content":"### **HELP**:","lastModifiedDate":"2024-02-22"},{"lineNumber":124,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":125,"author":{"gitId":"PateShin"},"content":"Shows the list of commands that is used in the Chat bot","lastModifiedDate":"2024-02-22"},{"lineNumber":126,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":127,"author":{"gitId":"PateShin"},"content":"Command format: ```help```","lastModifiedDate":"2024-02-22"},{"lineNumber":128,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":129,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":130,"author":{"gitId":"PateShin"},"content":"help // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":131,"author":{"gitId":"PateShin"},"content":"Here are the available commands:","lastModifiedDate":"2024-02-22"},{"lineNumber":132,"author":{"gitId":"PateShin"},"content":"  - help: show commands","lastModifiedDate":"2024-02-22"},{"lineNumber":133,"author":{"gitId":"PateShin"},"content":"  - list: List all tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":134,"author":{"gitId":"PateShin"},"content":"  - find \u003cword\u003e: Find tasks","lastModifiedDate":"2024-02-22"},{"lineNumber":135,"author":{"gitId":"PateShin"},"content":"  - todo \u003ctask\u003e: Add a todo task","lastModifiedDate":"2024-02-22"},{"lineNumber":136,"author":{"gitId":"PateShin"},"content":"  - deadline \u003ctask\u003e /by \u003cdate\u003e: Add a deadline task","lastModifiedDate":"2024-02-22"},{"lineNumber":137,"author":{"gitId":"PateShin"},"content":"  - event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e: Add an event task","lastModifiedDate":"2024-02-22"},{"lineNumber":138,"author":{"gitId":"PateShin"},"content":"    - date can be done by YYYY/MM/dd or YYYY/MM/dd HHmm ","lastModifiedDate":"2024-02-22"},{"lineNumber":139,"author":{"gitId":"PateShin"},"content":"    - today \u0026 tomorrow can be used for date","lastModifiedDate":"2024-02-22"},{"lineNumber":140,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":141,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":142,"author":{"gitId":"PateShin"},"content":"### **BYE**","lastModifiedDate":"2024-02-22"},{"lineNumber":143,"author":{"gitId":"PateShin"},"content":"_**CAUTION! Tasks can only be saved after ```bye``` command properly proceed**_","lastModifiedDate":"2024-02-22"},{"lineNumber":144,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":145,"author":{"gitId":"PateShin"},"content":"Type ```bye``` on Chat bot to exit","lastModifiedDate":"2024-02-22"},{"lineNumber":146,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":147,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":148,"author":{"gitId":"PateShin"},"content":"bye // User Input","lastModifiedDate":"2024-02-22"},{"lineNumber":149,"author":{"gitId":"PateShin"},"content":"Bye! See you again!","lastModifiedDate":"2024-02-22"},{"lineNumber":150,"author":{"gitId":"PateShin"},"content":"```","lastModifiedDate":"2024-02-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":152,"author":{"gitId":"PateShin"},"content":"### **Saving**","lastModifiedDate":"2024-02-22"},{"lineNumber":153,"author":{"gitId":"PateShin"},"content":"Tasks are automatically saved in ```../data/tasks.txt``` after ```bye``` command typed properly","lastModifiedDate":"2024-02-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":155,"author":{"gitId":"PateShin"},"content":"### Summarized Guide","lastModifiedDate":"2024-02-22"},{"lineNumber":156,"author":{"gitId":"PateShin"},"content":"  *  ```todo \u003ctask\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":157,"author":{"gitId":"PateShin"},"content":"  *  ```deadline \u003ctask\u003e /by \u003cdate\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":158,"author":{"gitId":"PateShin"},"content":"  *  ```event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":159,"author":{"gitId":"PateShin"},"content":"  *  ```list```","lastModifiedDate":"2024-02-22"},{"lineNumber":160,"author":{"gitId":"PateShin"},"content":"  *  ```delete \u003ctask number\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":161,"author":{"gitId":"PateShin"},"content":"  *  ```find \u003cword\u003e```","lastModifiedDate":"2024-02-22"},{"lineNumber":162,"author":{"gitId":"PateShin"},"content":"  *  ```mark 1``` \u0026 ```unmark 1```","lastModifiedDate":"2024-02-22"},{"lineNumber":163,"author":{"gitId":"PateShin"},"content":"  *  ```help```","lastModifiedDate":"2024-02-22"},{"lineNumber":164,"author":{"gitId":"PateShin"},"content":"  *  ```bye```","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"PateShin":148,"-":16}},{"path":"src/main/java/duke/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * The AddCommand class represents a command to add a new task to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes the add command to add a new task to the task list based on user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The task list to which the new task will be added.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param ui        The user interface for displaying messages.","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input specifying the new task to be added.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If the user input is empty or if the input format is unrecognized.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"        if (userInput.trim().isEmpty()) { // Checks for empty or whitespace-only strings","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"The description of a task cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            Task newTask \u003d Parser.parseTask(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"            if (newTask !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"                taskList.addTask(newTask);","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"                ui.showTaskAdded(newTask, taskList.getSize());","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"            } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Error processing task input: \" + e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":38}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * The Command class is an abstract class representing a generic command in the Duke application.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * Specific commands (e.g., AddCommand, DeleteCommand) will extend this class and implement the \u0027execute\u0027 method","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * to perform actions specific to each command based on the user input, modifying or querying the task list as needed.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes the command based on the provided task list, user interface, and user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * This method must be implemented by all subclasses to define the specific behavior of each command.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param taskList   The task list on which the command will operate,","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     *                   allowing commands to modify or query the task list.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @param ui         The user interface for displaying messages to the user, enabling interaction and feedback.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * @param userInput  The user input specifying the command and its arguments,","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *                   which determines the actions to be performed.","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue executing the command or if the command encounters an error,","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     *                   providing error handling.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    public abstract void execute(TaskList taskList, Ui ui, String userInput) throws DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"PateShin":25}},{"path":"src/main/java/duke/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":" * Represents the possible types of commands that can be used.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"public enum CommandType {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"    LIST, TODO, DEADLINE, EVENT, MARK, UNMARK, DELETE, BYE, FIND, HELP","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":8}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * The DeleteCommand class represents a command to delete a task from the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes the delete command to remove a task from the task list based on user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * This method parses the user input to determine the index of the task to be deleted and then","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * attempts to delete the task from the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The task list from which the task will be deleted.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @param ui        The user interface for displaying messages.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input specifying the task index to be deleted.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue executing the command or if the task index is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            int taskIndex \u003d Parser.extractTaskIndex(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"            if (taskIndex \u003c\u003d 0 || taskIndex \u003e taskList.getSize()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"                throw new DukeException(\"Invalid task number. Please try again.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"            Task removedTask \u003d taskList.deleteTask(taskIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"            ui.showTaskDeleted(removedTask, taskList.getSize());","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid number format. Please enter a valid task number.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"An error occurred while trying to delete the task: \" + e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":37}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.Priority;","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    private static final Color COLOR_USER \u003d Color.BLUEVIOLET;","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"    private static final Color CHAT_COLOR \u003d Color.VIOLET;","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"    DialogBox(String text, Image img, Color backgroundColor) {","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"        // Set the HBox to stretch and fill its content horizontally","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"        HBox.setHgrow(this, Priority.ALWAYS);","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"        // Create a VBox to contain the DialogBox","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"        VBox vbox \u003d new VBox(this);","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"        vbox.setFillWidth(true); // Set the VBox to stretch and fill its content vertically","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"        applyStyling(backgroundColor);","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"    private void applyStyling(Color backgroundColor) {","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"        dialog.setStyle(\"-fx-background-color: \" + toHex(backgroundColor) + \"; \"","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"                + \"-fx-background-radius: 10; \"","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"                + \"-fx-padding: 10px; \"","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"                + \"-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 1), 10, 0, 0, 2); \"","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"                + \"-fx-background-insets: 0;\");","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"    private String toHex(Color color) {","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"        return String.format(\"#%02X%02X%02X\",","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"                (int) (color.getRed() * 255),","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"                (int) (color.getGreen() * 255),","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"                (int) (color.getBlue() * 255));","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"    private void flip() {","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"        return new DialogBox(text, img, COLOR_USER);","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"        var db \u003d new DialogBox(text, img, CHAT_COLOR);","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"        db.flip();","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"        return db;","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":91}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" * The Duke class is the main class of the FICIN Chat bot.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    private static TaskList taskList; // Using duke.task.TaskList to manage tasks","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"    private static Ui ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * Entry point of the Duke application.","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"        ui.showWelcome();","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"        taskList \u003d new TaskList(); // Initialize the duke.task.TaskList","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            taskList.getTasks().addAll(Storage.loadTasks()); // Load tasks from storage","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            System.out.println(e);","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2024-02-15"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"            new Ui().showHelp();","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"        assert taskList !\u003d null : \"taskList should not be null after initialization\";","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"        new Duke().run();","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"     * Handles the main functionality of the Duke application.","lastModifiedDate":"2024-02-22"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"     * Continuously reads user input, processes commands, and executes tasks until the user enters \"bye\".","lastModifiedDate":"2024-02-22"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"    public void run() {","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"        String userInput;","lastModifiedDate":"2024-01-25"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"        do {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"            ui.showLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"            userInput \u003d ui.readCommand();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"            assert userInput !\u003d null \u0026\u0026 !userInput.trim().isEmpty() : \"userInput should not be null or empty\";","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"            try {","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"                Parser.processCommand(userInput).execute(taskList, ui, userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"            ui.showLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"        } while (!userInput.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"     * Generates a response to user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"     * @param input User input.","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"     * @return Response as a string.","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"    String getResponse(String input) {","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"        // Following has debugged by Chat GPT","lastModifiedDate":"2024-02-22"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"        PrintStream previous \u003d System.out;","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"        System.setOut(new PrintStream(baos));","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"        if (ui \u003d\u003d null || taskList \u003d\u003d null) {","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"            ui \u003d new Ui();","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"            try {","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"                taskList.getTasks().addAll(Storage.loadTasks());","lastModifiedDate":"2024-02-22"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"                return \"Failed to load tasks: \" + e.getMessage();","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"        assert ui !\u003d null : \"Ui should not be null\";","lastModifiedDate":"2024-02-14"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"        assert taskList !\u003d null : \"TaskList should not be null\";","lastModifiedDate":"2024-02-14"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"            Parser.processCommand(input).execute(taskList, ui, input);","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"            System.out.println(e.getMessage()); // This goes to the ByteArrayOutputStream","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"        // Restore original System.out","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"        System.out.flush();","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"        System.setOut(previous);","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"        return baos.toString().trim();","lastModifiedDate":"2024-02-15"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"PateShin":87,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":" * Represents application-specific exceptions in the Duke application.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":" * This class extends the standard Java Exception class to provide custom error","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * handling capabilities tailored to the Duke application\u0027s needs.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"     * Constructs a new DukeException with the specified detail message.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"     * The detail message is saved for later retrieval by the Throwable.getMessage() method.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * @param message The error message associated with the exception. This message provides","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     *                more details about the cause of the exception and is intended to be","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     *                meaningful to humans.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"        super(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"PateShin":21}},{"path":"src/main/java/duke/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * Represents a command to exit the Duke application. This command handles any necessary","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * finalization before the application shuts down, such as saving the current state of the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"     * Executes the exit command by performing necessary cleanup actions such as saving tasks","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * and displaying a goodbye message. This method ensures the application is closed gracefully.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The task list, which may be saved to persistent storage as part of exit processing.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param ui        The user interface for displaying the goodbye message and closing any resources.","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input leading to the execution of this command (not directly used here).","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue during the execution of the command, such as an error","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     *                       saving tasks to storage.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"            Storage.saveTasks(taskList.getTasks());","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            ui.showGoodbye();","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Failed to save tasks before exiting: \" + e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        } finally {","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"            ui.closeScanner();","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"PateShin":32}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":" * Represents a command to search for tasks based on a provided keyword or query.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":" * This class extends the abstract Command class and implements the search functionality","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":" * to find and display tasks that contain the query within their description.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * Executes the \"find\" command to search for tasks in the given TaskList","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * based on the user\u0027s input query. It identifies tasks that contain the","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * query string in their description as represented by their toString() method.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The TaskList containing the tasks to be searched.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     * @param ui        The Ui interface to interact with the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     * @param userInput The complete user input string including the command and the search query.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If the search query is not provided or an error occurs during execution.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        if (userInput.trim().equals(\"find\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Please enter a search query after \u0027find\u0027.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"        String query \u003d userInput.substring(5).trim().toLowerCase();","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"        // Utilizing Java Streams to filter tasks","lastModifiedDate":"2024-02-15"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"        List\u003cTask\u003e matchingTasks \u003d taskList.getTasks().stream()","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"                .filter(task -\u003e task.toString().toLowerCase().contains(query))","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"            ui.showNoTask();","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"            ui.showTasks(matchingTasks);","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"PateShin":45}},{"path":"src/main/java/duke/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * The HelpCommand class represents a command to display help to the user.","lastModifiedDate":"2024-02-15"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * It extends the Command class and implements the execute method.","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2024-02-15"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-15"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"     * Executes to display help to the user.","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-15"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The task list (not used in this command).","lastModifiedDate":"2024-02-15"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * @param ui        The user interface to interact with the user.","lastModifiedDate":"2024-02-15"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input (not used in this command).","lastModifiedDate":"2024-02-15"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-15"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) {","lastModifiedDate":"2024-02-15"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"        ui.showHelp();","lastModifiedDate":"2024-02-15"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"PateShin":22}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * Serves as an entry point to launch the JavaFX application, avoiding classpath issues.","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" *","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * This class is designed to circumvent common classpath issues such as:","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" * - JavaFX classes not being found due to incorrect classpath configuration.","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":" *","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":" * Using this class helps ensure that the application starts smoothly across different","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":" * environments by initiating the JavaFX application in a separate class.","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"public class Launcher {","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":18}},{"path":"src/main/java/duke/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" * Represents a command to list all tasks currently stored in the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * This class extends the Command class, providing specific behavior to enumerate","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * all tasks and display them to the user through the provided UI interface.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes the list command, retrieving all tasks from the provided TaskList","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * and displaying them via the UI interface. This method allows users to view","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * a summary of all tasks currently tracked by the application.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The TaskList from which to retrieve and display tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @param ui        The Ui interface used for displaying the list of tasks to the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input that triggered this command.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *                  It is not used here, but required by the method signature).","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            ui.showNoTask();","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            ui.showTasks(taskList.getTasks());","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":30}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"            stage.show();","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-15"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import javafx.animation.PauseTransition;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"import javafx.scene.text.Font;","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"import javafx.util.Duration;","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":" * Controller class for the main window of the Duke chat application.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":" * This class handles user interaction, input processing, and displaying conversation dialogues.","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    private static TaskList taskList;","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"    // Images for user and Duke (bot) avatars","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"    private final Image userImage \u003d new Image(Objects.requireNonNull(","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"            this.getClass().getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"    private final Image ficinImage \u003d new Image(Objects.requireNonNull(","lastModifiedDate":"2024-02-22"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"            this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"     * Initializes the main window controller.","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"     * Sets up scroll pane, button, and text field properties.","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"     * Displays a welcome message from Duke when the application starts.","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2024-02-15"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-15"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"            taskList.getTasks().addAll(Storage.loadTasks()); // Load tasks from storage","lastModifiedDate":"2024-02-15"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-15"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"            System.out.println(e);","lastModifiedDate":"2024-02-15"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-15"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"        // Bind scroll pane to dialog container to automatically scroll to the bottom","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"        // Set fonts for send button and user input field","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"        sendButton.setFont(Font.font(\"Helvetica\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"        userInput.setFont(Font.font(\"Helvetica\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"        // Show help if no tasks are loaded","lastModifiedDate":"2024-02-15"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"        if (taskList.getSize() \u003d\u003d 0) {","lastModifiedDate":"2024-02-15"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"            String helpMessage \u003d \"Welcome! I\u0027m FICIN.\\nWhat can I do for you?\\n\"","lastModifiedDate":"2024-02-15"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"                    + \"\\nHere are the available commands:\\n\"","lastModifiedDate":"2024-02-15"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"                    + \"  - help: show commands\\n\"","lastModifiedDate":"2024-02-15"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"                    + \"  - list: List all tasks\\n\"","lastModifiedDate":"2024-02-15"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"                    + \"  - find \u003cword\u003e: Find tasks\\n\"","lastModifiedDate":"2024-02-22"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"                    + \"  - todo \u003ctask\u003e: Add a todo task\\n\"","lastModifiedDate":"2024-02-22"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"                    + \"  - deadline \u003ctask\u003e /by \u003cdate\u003e: Add a deadline task\\n\"","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"                    + \"  - event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e: Add an event task\\n\"","lastModifiedDate":"2024-02-22"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"                    + \"     - date can be written by YYYY/MM/dd or YYYY/MM/dd HHmm\\n\"","lastModifiedDate":"2024-02-22"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"                    + \"     - today \u0026 tomorrow can be used for date\";","lastModifiedDate":"2024-02-22"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"            dialogContainer.getChildren().add(","lastModifiedDate":"2024-02-15"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"                    DialogBox.getDukeDialog(helpMessage, ficinImage)","lastModifiedDate":"2024-02-22"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"            );","lastModifiedDate":"2024-02-15"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"        } else {","lastModifiedDate":"2024-02-15"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"            // Display a welcome message from Duke when the application starts","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"            String greeting \u003d \"Welcome! I\u0027m FICIN.\\nWhat can I do for you?\";","lastModifiedDate":"2024-02-08"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"            dialogContainer.getChildren().add(","lastModifiedDate":"2024-02-08"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"                    DialogBox.getDukeDialog(greeting, ficinImage)","lastModifiedDate":"2024-02-22"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"            );","lastModifiedDate":"2024-02-08"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"     * Sets the Duke instance for this MainWindow controller.","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"     * @param ficin The Duke instance to be set.","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"    public void setDuke(Duke ficin) {","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"        duke \u003d ficin;","lastModifiedDate":"2024-02-08"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":"     * Handles user input processing.","lastModifiedDate":"2024-02-08"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":"     * Gets user input, passes it to Duke for response, and displays the conversation dialogue.","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"PateShin"},"content":"     * Clears the user input after processing.","lastModifiedDate":"2024-02-08"},{"lineNumber":101,"author":{"gitId":"PateShin"},"content":"     * If the user input is \"bye\", it triggers application exit after a short delay.","lastModifiedDate":"2024-02-08"},{"lineNumber":102,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":103,"author":{"gitId":"PateShin"},"content":"     * @throws InterruptedException if interrupted while waiting for application exit.","lastModifiedDate":"2024-02-08"},{"lineNumber":104,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":105,"author":{"gitId":"PateShin"},"content":"    @FXML","lastModifiedDate":"2024-02-08"},{"lineNumber":106,"author":{"gitId":"PateShin"},"content":"    private void handleUserInput() throws InterruptedException {","lastModifiedDate":"2024-02-08"},{"lineNumber":107,"author":{"gitId":"PateShin"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"PateShin"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"PateShin"},"content":"        // Display user and Duke dialogue boxes","lastModifiedDate":"2024-02-08"},{"lineNumber":111,"author":{"gitId":"PateShin"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"PateShin"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"PateShin"},"content":"                DialogBox.getDukeDialog(response, ficinImage)","lastModifiedDate":"2024-02-22"},{"lineNumber":114,"author":{"gitId":"PateShin"},"content":"        );","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":116,"author":{"gitId":"PateShin"},"content":"        // Clear user input after processing","lastModifiedDate":"2024-02-08"},{"lineNumber":117,"author":{"gitId":"PateShin"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-08"},{"lineNumber":118,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":119,"author":{"gitId":"PateShin"},"content":"        // If user input is \"bye\", exit the application after a short delay","lastModifiedDate":"2024-02-08"},{"lineNumber":120,"author":{"gitId":"PateShin"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":121,"author":{"gitId":"PateShin"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(1.5));","lastModifiedDate":"2024-02-08"},{"lineNumber":122,"author":{"gitId":"PateShin"},"content":"            pause.setOnFinished(event -\u003e Platform.exit());","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"PateShin"},"content":"            pause.play();","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":126}},{"path":"src/main/java/duke/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * The MarkCommand class represents a command to mark a task as done in the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes the mark command to mark a task as done in the task list based on user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * @param taskList   The task list containing the task to be marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param ui         The user interface for displaying messages.","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param userInput  The user input specifying the task index to be marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue executing the command or if the task index is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"        int taskIndex \u003d Parser.extractTaskIndex(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"        Task task \u003d taskList.markTaskAsDone(taskIndex);","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        if (task !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            ui.showTaskDone(task);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid task number. Please try again.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"PateShin":32}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":" * Handles parsing of user input into commands, tasks, and task details for the Duke application.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":" * Provides utility methods to interpret user commands and to extract relevant details for task creation.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"public class Parser {","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     * Parses the command from user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     * @return The CommandType corresponding to the parsed command.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If the command is not recognized.","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    public static CommandType parseCommand(String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"        String[] parts \u003d userInput.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"        String commandStr \u003d parts[0].toUpperCase();","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"            return CommandType.valueOf(commandStr);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"     * Processes the user input and creates the appropriate Command object.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"     * @return The Command object corresponding to the user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue processing the command.","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"    public static Command processCommand(String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"            CommandType command \u003d Parser.parseCommand(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"            switch (command) {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"            case LIST:","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"                return new ListCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"            case MARK:","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"                return new MarkCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"            case UNMARK:","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"                return new UnmarkCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"            case DELETE:","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"                return new DeleteCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"            case BYE:","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"                return new ExitCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"            case TODO:","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"                // Fallthrough","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"                // Fallthrough","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"            case EVENT:","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"                return new AddCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"            case FIND:","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"                return new FindCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"            case HELP:","lastModifiedDate":"2024-02-15"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"                return new HelpCommand();","lastModifiedDate":"2024-02-15"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"            default:","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"     * Parses task details from user input and creates a Task object.","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input string containing task details.","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"     * @return The Task object created based on the input.","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue parsing the task or if the task type is not recognized.","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"    public static Task parseTask(String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"        String[] parts \u003d userInput.split(\"\\\\s+\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"        String taskType \u003d parts[0].toLowerCase();","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"        String taskDetails \u003d parts[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-25"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"            return new Todo(taskDetails);","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-25"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":"            return parseDeadline(taskDetails);","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":"        case \"event\":","lastModifiedDate":"2024-01-25"},{"lineNumber":100,"author":{"gitId":"PateShin"},"content":"            return parseEvent(taskDetails);","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"PateShin"},"content":"        default:","lastModifiedDate":"2024-01-25"},{"lineNumber":102,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":104,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":105,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":106,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"PateShin"},"content":"     * Parses deadline details from user input and creates a Deadline object.","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"PateShin"},"content":"     * @param taskDetails The task details string containing the description and deadline.","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"PateShin"},"content":"     * @return The Deadline object created based on the input.","lastModifiedDate":"2024-02-03"},{"lineNumber":111,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue parsing the deadline or if the format is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":112,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":113,"author":{"gitId":"PateShin"},"content":"    private static Deadline parseDeadline(String taskDetails) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":114,"author":{"gitId":"PateShin"},"content":"        String[] parts \u003d taskDetails.split(\"/by\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":115,"author":{"gitId":"PateShin"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid deadline format. Please include \u0027/by\u0027 followed by the deadline.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":118,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"PateShin"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":120,"author":{"gitId":"PateShin"},"content":"        String by \u003d parts[1].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":121,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":122,"author":{"gitId":"PateShin"},"content":"        LocalDateTime dateTime \u003d parseDateTime(by);","lastModifiedDate":"2024-02-03"},{"lineNumber":123,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":124,"author":{"gitId":"PateShin"},"content":"        return new Deadline(description, dateTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":126,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":127,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"PateShin"},"content":"     * Parses event details from user input and creates an Event object.","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"PateShin"},"content":"     * @param taskDetails The task details string containing the description and event details.","lastModifiedDate":"2024-02-03"},{"lineNumber":131,"author":{"gitId":"PateShin"},"content":"     * @return The Event object created based on the input.","lastModifiedDate":"2024-02-03"},{"lineNumber":132,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue parsing the event or if the format is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":133,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":134,"author":{"gitId":"PateShin"},"content":"    private static Event parseEvent(String taskDetails) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":135,"author":{"gitId":"PateShin"},"content":"        String[] parts \u003d taskDetails.split(\"/from\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":136,"author":{"gitId":"PateShin"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":137,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid event format. Please include \u0027/from\u0027 \"","lastModifiedDate":"2024-02-08"},{"lineNumber":138,"author":{"gitId":"PateShin"},"content":"                    + \"followed by start time and \u0027/to\u0027 followed by end time.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":139,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":140,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":141,"author":{"gitId":"PateShin"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":142,"author":{"gitId":"PateShin"},"content":"        String[] dateAndTime \u003d parts[1].split(\"/to\", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":143,"author":{"gitId":"PateShin"},"content":"        if (dateAndTime.length \u003c 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":144,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid event format. Please include \u0027/from\u0027 \"","lastModifiedDate":"2024-02-08"},{"lineNumber":145,"author":{"gitId":"PateShin"},"content":"                    + \"followed by start time and \u0027/to\u0027 followed by end time.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":146,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":147,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":148,"author":{"gitId":"PateShin"},"content":"        String start \u003d dateAndTime[0].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":149,"author":{"gitId":"PateShin"},"content":"        String end \u003d dateAndTime[1].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":150,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":151,"author":{"gitId":"PateShin"},"content":"        LocalDateTime startTime \u003d parseDateTime(start);","lastModifiedDate":"2024-02-03"},{"lineNumber":152,"author":{"gitId":"PateShin"},"content":"        LocalDateTime endTime \u003d parseDateTime(end);","lastModifiedDate":"2024-02-03"},{"lineNumber":153,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":154,"author":{"gitId":"PateShin"},"content":"        // Check if the start time is before the end time","lastModifiedDate":"2024-02-03"},{"lineNumber":155,"author":{"gitId":"PateShin"},"content":"        if (startTime.isAfter(endTime)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":156,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid event times. The start time is after the end time.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":157,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":158,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":159,"author":{"gitId":"PateShin"},"content":"        return new Event(description, startTime, endTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":160,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":161,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":162,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":163,"author":{"gitId":"PateShin"},"content":"     * Parses date and time from a string and creates a LocalDateTime object.","lastModifiedDate":"2024-02-03"},{"lineNumber":164,"author":{"gitId":"PateShin"},"content":"     * Validates that the date is not before the current date.","lastModifiedDate":"2024-02-14"},{"lineNumber":165,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":166,"author":{"gitId":"PateShin"},"content":"     * @param dateTimeStr The string containing date and time information.","lastModifiedDate":"2024-02-03"},{"lineNumber":167,"author":{"gitId":"PateShin"},"content":"     * @return The LocalDateTime object created based on the input.","lastModifiedDate":"2024-02-03"},{"lineNumber":168,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue parsing the date and time, if the format is invalid,","lastModifiedDate":"2024-02-14"},{"lineNumber":169,"author":{"gitId":"PateShin"},"content":"     *                       or if the date is before today.","lastModifiedDate":"2024-02-14"},{"lineNumber":170,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":171,"author":{"gitId":"PateShin"},"content":"    public static LocalDateTime parseDateTime(String dateTimeStr) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":172,"author":{"gitId":"PateShin"},"content":"        LocalDateTime parsedDateTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":173,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":174,"author":{"gitId":"PateShin"},"content":"            if (dateTimeStr.equalsIgnoreCase(\"today\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":175,"author":{"gitId":"PateShin"},"content":"                parsedDateTime \u003d LocalDateTime.now().with(LocalTime.MIN);","lastModifiedDate":"2024-02-14"},{"lineNumber":176,"author":{"gitId":"PateShin"},"content":"            } else if (dateTimeStr.equalsIgnoreCase(\"tomorrow\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":177,"author":{"gitId":"PateShin"},"content":"                parsedDateTime \u003d LocalDateTime.now().plusDays(1).with(LocalTime.MAX);","lastModifiedDate":"2024-02-14"},{"lineNumber":178,"author":{"gitId":"PateShin"},"content":"            } else if (dateTimeStr.contains(\" \")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":179,"author":{"gitId":"PateShin"},"content":"                parsedDateTime \u003d LocalDateTime.parse(dateTimeStr, DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2024-02-14"},{"lineNumber":180,"author":{"gitId":"PateShin"},"content":"            } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":181,"author":{"gitId":"PateShin"},"content":"                LocalDate date \u003d LocalDate.parse(dateTimeStr, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":182,"author":{"gitId":"PateShin"},"content":"                parsedDateTime \u003d date.atStartOfDay();","lastModifiedDate":"2024-02-14"},{"lineNumber":183,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":184,"author":{"gitId":"PateShin"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":185,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid date/time format. Please use \"","lastModifiedDate":"2024-02-08"},{"lineNumber":186,"author":{"gitId":"PateShin"},"content":"                    + \"\u0027yyyy/MM/dd HHmm\u0027, \u0027yyyy/MM/dd\u0027, \u0027today\u0027, or \u0027tomorrow\u0027.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":187,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":188,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":189,"author":{"gitId":"PateShin"},"content":"        // Check if the parsed date is before today","lastModifiedDate":"2024-02-14"},{"lineNumber":190,"author":{"gitId":"PateShin"},"content":"        if (parsedDateTime.toLocalDate().isBefore(LocalDate.now())) {","lastModifiedDate":"2024-02-14"},{"lineNumber":191,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"The date cannot be in the past.\");","lastModifiedDate":"2024-02-14"},{"lineNumber":192,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":193,"author":{"gitId":"PateShin"},"content":"        return parsedDateTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":194,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":195,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":196,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":197,"author":{"gitId":"PateShin"},"content":"     * Extracts the task index from user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":198,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":199,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input string containing the task index.","lastModifiedDate":"2024-02-03"},{"lineNumber":200,"author":{"gitId":"PateShin"},"content":"     * @return The extracted task index.","lastModifiedDate":"2024-02-03"},{"lineNumber":201,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue extracting the index or if it\u0027s not a valid integer.","lastModifiedDate":"2024-02-03"},{"lineNumber":202,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":203,"author":{"gitId":"PateShin"},"content":"    public static int extractTaskIndex(String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":204,"author":{"gitId":"PateShin"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":205,"author":{"gitId":"PateShin"},"content":"            return Integer.parseInt(userInput.split(\"\\\\s+\")[1]);","lastModifiedDate":"2024-01-25"},{"lineNumber":206,"author":{"gitId":"PateShin"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":207,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid task number. Please provide a valid task number.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":208,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":209,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":210,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"PateShin":210}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.io.File;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":" * The Storage class is responsible for managing the storage and retrieval of tasks in the Duke chat-bot application.","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":" * It handles saving tasks to a file and loading tasks from a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"public class Storage {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"     * Saves a list of tasks to a file.","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    public static void saveTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"        try (FileWriter writer \u003d new FileWriter(FILE_PATH)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"                writer.write(task.toFileString() + System.lineSeparator());","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"            System.err.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"     * Loads tasks from a file and returns them as a list.","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"     * @return A list of tasks loaded from the file.","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue loading tasks from the file.","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"    public static List\u003cTask\u003e loadTasks() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"        createEmptyFile();","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(FILE_PATH))) {","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"            String line;","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"                Task task \u003d createTaskFromLine(line);","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"                    tasks.add(task);","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"            System.err.println(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"        return tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"     * Creates an empty file and directory if they do not exist.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If there is an issue creating the file or directory.","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"    private static void createEmptyFile() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"        File directory \u003d new File(\"./data\");","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"        File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"            directory.mkdir();","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"            try {","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"                file.createNewFile();","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"                throw new DukeException(\"File Creation Failed\");","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"     * Creates a Task from a line of text read from the file.","lastModifiedDate":"2024-02-14"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"     * This method creates and returns a specified Task subclass (Todo, Deadline, or Event)","lastModifiedDate":"2024-02-14"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"     * by parsing a structured string representing a task and extracting pertinent information.","lastModifiedDate":"2024-02-14"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"     * @param line The formatted text line with separated sections that represents a task.","lastModifiedDate":"2024-02-14"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"     * @return The Task created from the line, or null if the line cannot be break into a valid task.","lastModifiedDate":"2024-02-14"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"    private static Task createTaskFromLine(String line) {","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"        String[] parts \u003d line.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"        if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":"            String taskType \u003d parts[0].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":"            String status \u003d parts[1].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"PateShin"},"content":"            String description \u003d parts[2].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"PateShin"},"content":"            Task task;","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"PateShin"},"content":"            switch (taskType) {","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"PateShin"},"content":"            case \"T\":","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"PateShin"},"content":"                task \u003d new Todo(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"PateShin"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"PateShin"},"content":"            case \"D\":","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"PateShin"},"content":"                if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"PateShin"},"content":"                    String dateTimeString \u003d parts[3].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"PateShin"},"content":"                    if (dateTimeString.contains(\" \")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":111,"author":{"gitId":"PateShin"},"content":"                        LocalDateTime byDateTime \u003d LocalDateTime.parse(dateTimeString,","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"PateShin"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"PateShin"},"content":"                        task \u003d new Deadline(description, byDateTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":114,"author":{"gitId":"PateShin"},"content":"                    } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":115,"author":{"gitId":"PateShin"},"content":"                        LocalDate byDate \u003d LocalDate.parse(dateTimeString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"PateShin"},"content":"                        task \u003d new Deadline(description, byDate);","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"PateShin"},"content":"                    }","lastModifiedDate":"2024-02-03"},{"lineNumber":118,"author":{"gitId":"PateShin"},"content":"                } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"PateShin"},"content":"                    task \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":120,"author":{"gitId":"PateShin"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":121,"author":{"gitId":"PateShin"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":122,"author":{"gitId":"PateShin"},"content":"            case \"E\":","lastModifiedDate":"2024-02-03"},{"lineNumber":123,"author":{"gitId":"PateShin"},"content":"                if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2024-02-03"},{"lineNumber":124,"author":{"gitId":"PateShin"},"content":"                    String dateAndTime \u003d parts[3].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"PateShin"},"content":"                    String[] event \u003d dateAndTime.split(\"-\");","lastModifiedDate":"2024-02-03"},{"lineNumber":126,"author":{"gitId":"PateShin"},"content":"                    if (event.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-03"},{"lineNumber":127,"author":{"gitId":"PateShin"},"content":"                        String start \u003d event[0].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"PateShin"},"content":"                        String end \u003d event[1].trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"PateShin"},"content":"                        // Parse the event start and end times","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"PateShin"},"content":"                        LocalDateTime startTime \u003d LocalDateTime.parse(start,","lastModifiedDate":"2024-02-08"},{"lineNumber":131,"author":{"gitId":"PateShin"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":132,"author":{"gitId":"PateShin"},"content":"                        LocalDateTime endTime \u003d LocalDateTime.parse(end,","lastModifiedDate":"2024-02-08"},{"lineNumber":133,"author":{"gitId":"PateShin"},"content":"                                DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));","lastModifiedDate":"2024-02-08"},{"lineNumber":134,"author":{"gitId":"PateShin"},"content":"                        task \u003d new Event(description, startTime, endTime);","lastModifiedDate":"2024-02-03"},{"lineNumber":135,"author":{"gitId":"PateShin"},"content":"                    } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":136,"author":{"gitId":"PateShin"},"content":"                        task \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":137,"author":{"gitId":"PateShin"},"content":"                    }","lastModifiedDate":"2024-02-03"},{"lineNumber":138,"author":{"gitId":"PateShin"},"content":"                } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":139,"author":{"gitId":"PateShin"},"content":"                    task \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":140,"author":{"gitId":"PateShin"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":141,"author":{"gitId":"PateShin"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":142,"author":{"gitId":"PateShin"},"content":"            default:","lastModifiedDate":"2024-02-03"},{"lineNumber":143,"author":{"gitId":"PateShin"},"content":"                task \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":144,"author":{"gitId":"PateShin"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":145,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":146,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":147,"author":{"gitId":"PateShin"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":148,"author":{"gitId":"PateShin"},"content":"                if (status.equals(\"1\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":149,"author":{"gitId":"PateShin"},"content":"                    task.markAsDone();","lastModifiedDate":"2024-02-03"},{"lineNumber":150,"author":{"gitId":"PateShin"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":151,"author":{"gitId":"PateShin"},"content":"                return task;","lastModifiedDate":"2024-02-03"},{"lineNumber":152,"author":{"gitId":"PateShin"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":153,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":154,"author":{"gitId":"PateShin"},"content":"        return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":155,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":156,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":156}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" * The Ui class is responsible for handling user interface interactions and displaying messages to the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":" * It provides methods for displaying welcome messages, reading user input, showing task-related messages,","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":" * and handling errors.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"public class Ui {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"    private final Scanner scanner;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * Constructs an Ui object and initializes the scanner for user input.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    public Ui() {","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"     * Displays a line separator to separate different sections of messages.","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    public void showLine() {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"_________________________\");","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"     * Displays a welcome message when the application starts.","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"    public void showWelcome() {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"\\nHello! I\u0027m FICIN!\");","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"     * Reads a command from the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"    public String readCommand() {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"     * Displays a goodbye message when the user exits the application.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"    public void showGoodbye() {","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" \\nBye! See you again!\");","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"    public void showError(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" OH NO! \" + message);","lastModifiedDate":"2024-02-22"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"     * Displays a message indicating that a task has been added.","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"     * @param task           The task that was added.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"     * @param numberOfTasks  The total number of tasks after adding.","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"    public void showTaskAdded(Task task, int numberOfTasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Sure. I have added this task:\");","lastModifiedDate":"2024-02-22"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Now you have \" + numberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"     * Displays a message indicating that a task has been marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"    public void showTaskDone(Task task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Great! I have marked the task as done:\");","lastModifiedDate":"2024-02-22"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"     * Displays a message indicating that a task has been marked as not done.","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"    public void showTaskUndone(Task task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Sure, I have marked this task as not done yet:\");","lastModifiedDate":"2024-02-22"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"     * Displays a message indicating that a task has been deleted.","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":"     * @param task           The task that was deleted.","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":"     * @param numberOfTasks  The total number of tasks after deletion.","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"PateShin"},"content":"    public void showTaskDeleted(Task task, int numberOfTasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Got it. I have removed this task:\");","lastModifiedDate":"2024-02-22"},{"lineNumber":103,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Now you have \" + numberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":107,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":108,"author":{"gitId":"PateShin"},"content":"     * Displays a list of tasks to the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":109,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":110,"author":{"gitId":"PateShin"},"content":"     * @param tasks The list of tasks to be displayed.","lastModifiedDate":"2024-02-03"},{"lineNumber":111,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":112,"author":{"gitId":"PateShin"},"content":"    public void showTasks(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":113,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" Here is the list of tasks:\");","lastModifiedDate":"2024-02-22"},{"lineNumber":114,"author":{"gitId":"PateShin"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-03"},{"lineNumber":115,"author":{"gitId":"PateShin"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":118,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"PateShin"},"content":"     * Displays a message to inform the user that no results matching their search criteria were found.","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"PateShin"},"content":"     * This method shows a line separator, a notification message, and another line separator.","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"PateShin"},"content":"    public void showNoTask() {","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"PateShin"},"content":"        System.out.println(\" No task found\");","lastModifiedDate":"2024-02-22"},{"lineNumber":125,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":126,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"PateShin"},"content":"     * Closes the scanner used for user input.","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"PateShin"},"content":"    public void closeScanner() {","lastModifiedDate":"2024-02-03"},{"lineNumber":131,"author":{"gitId":"PateShin"},"content":"        scanner.close();","lastModifiedDate":"2024-02-03"},{"lineNumber":132,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":133,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":134,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-15"},{"lineNumber":135,"author":{"gitId":"PateShin"},"content":"     * Displays the available commands and their descriptions.","lastModifiedDate":"2024-02-15"},{"lineNumber":136,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-15"},{"lineNumber":137,"author":{"gitId":"PateShin"},"content":"    public void showHelp() {","lastModifiedDate":"2024-02-15"},{"lineNumber":138,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"Here are the available commands:\");","lastModifiedDate":"2024-02-15"},{"lineNumber":139,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - help: show commands\");","lastModifiedDate":"2024-02-15"},{"lineNumber":140,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - list: List all tasks\");","lastModifiedDate":"2024-02-15"},{"lineNumber":141,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - find \u003cword\u003e: Find tasks\");","lastModifiedDate":"2024-02-22"},{"lineNumber":142,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - todo \u003ctask\u003e: Add a todo task\");","lastModifiedDate":"2024-02-22"},{"lineNumber":143,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - deadline \u003ctask\u003e /by \u003cdate\u003e: Add a deadline task\");","lastModifiedDate":"2024-02-22"},{"lineNumber":144,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"  - event \u003ctask\u003e /from \u003cdate\u003e /to \u003cdate\u003e: Add an event task\");","lastModifiedDate":"2024-02-22"},{"lineNumber":145,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"    - date can be done by YYYY/MM/dd or YYYY/MM/dd HHmm \");","lastModifiedDate":"2024-02-22"},{"lineNumber":146,"author":{"gitId":"PateShin"},"content":"        System.out.println(\"    - today \u0026 tomorrow can be used for date\");","lastModifiedDate":"2024-02-22"},{"lineNumber":147,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":148,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":148}},{"path":"src/main/java/duke/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * The UnmarkCommand class represents a command to unmark a task in the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * It extends the Command class and implements the execute method.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     * Executes to unmark a task in the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     * @param taskList  The task list containing the tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"     * @param ui        The user interface to interact with the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"     * @param userInput The user input specifying the task index to be unmarked.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"     * @throws DukeException If an error occurs during the execution, such as an invalid task index.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    public void execute(TaskList taskList, Ui ui, String userInput) throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"        int taskIndex \u003d Parser.extractTaskIndex(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"        Task task \u003d taskList.unmarkTaskDone(taskIndex);","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        if (task !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            ui.showTaskUndone(task);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            throw new DukeException(\"Invalid task number. Please try again.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":30}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * Represents a task with a specific deadline. This class extends {@link Task} to include","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" * functionality for handling deadline dates and times.","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter FILE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter USER_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter USER_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    private final LocalDateTime byDateTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * Constructs a new Deadline instance with a description and deadline date and time.","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * @param description the description of the deadline task","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     * @param byDateTime the deadline date and time","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    public Deadline(String description, LocalDateTime byDateTime) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"        super(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        this.byDateTime \u003d byDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"     * Constructs a new Deadline instance with a description and a deadline date. The time is set to midnight.","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"     * @param description the description of the deadline task","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"     * @param byDate the deadline date","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"    public Deadline(String description, LocalDate byDate) {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"        super(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"        this.byDateTime \u003d byDate.atStartOfDay();","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"     * Returns a string representation of the deadline suitable for saving to a file.","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"     * The format includes the task type, status, description, and deadline date and time.","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"     * @return a formatted string representing the deadline for file storage","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"        return \"D | \" + getStatusNumber() + \" | \" + description + \" | \"","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"                + byDateTime.format(FILE_FORMATTER);","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"     * Returns a string representation of the deadline for display to the user.","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"     * The format includes the task type, status, description, and a user-friendly","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"     * representation of the deadline date and time.","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"     * @return a string representing the deadline in a format suitable for user viewing","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"    public String toString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"        builder.append(\"[D]\").append(super.toString()).append(\" (by: \")","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"                .append(byDateTime.format(USER_DATE_FORMATTER));","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"        if (byDateTime.toLocalTime().getHour() !\u003d 0 || byDateTime.toLocalTime().getMinute() !\u003d 0) {","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"            builder.append(\" at \").append(byDateTime.format(USER_TIME_FORMATTER));","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"        builder.append(\")\");","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"        return builder.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":73}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * Represents an event task that spans a specific time period.","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * This class extends {@link Task} and includes start and end times for the event.","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter FILE_DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\");","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter USER_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"hh:mm a\");","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"    private final LocalDateTime startTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    private final LocalDateTime endTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * Constructs an Event object with a description, start time, and end time.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * @param description A description of the event task.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     * @param startTime   The start time of the event.","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     * @param endTime     The end time of the event.","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"    public Event(String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        super(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"     * Converts the Event object to a string suitable for file storage.","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"     * @return A formatted string representing the Event object for file storage, using a predefined date-time format.","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"        return \"E | \" + getStatusNumber() + \" | \" + description + \" | \"","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"                + startTime.format(FILE_DATE_TIME_FORMATTER) + \" - \"","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"                + endTime.format(FILE_DATE_TIME_FORMATTER);","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"     * Provides a user-friendly string representation of the Event object.","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"     * This includes the type of the task, its status, description, and its start and end times in a readable format.","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"     * @return A string representing the Event object, formatted for easy reading.","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"    public String toString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"        builder.append(\"[E]\").append(super.toString()).append(\" (from: \")","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"                .append(formatDateTime(startTime)).append(\" to: \").append(formatDateTime(endTime)).append(\")\");","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"        return builder.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"     * Formats the date and time of the event for display,","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"     * showing the date and optionally the time if it is not midnight.","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"     * @param dateTime The LocalDateTime object to format.","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"     * @return A string representation of the date and, if applicable, time of the event.","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"    private String formatDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"        String datePart \u003d dateTime.format(USER_DATE_FORMATTER);","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"        if (dateTime.toLocalTime().getHour() !\u003d 0 || dateTime.toLocalTime().getMinute() !\u003d 0) {","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"            return datePart + \" at \" + dateTime.format(TIME_FORMATTER);","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"        return datePart;","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":" * The Task class represents a general task with a description and a completion status.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":" * It is a base class for specific task types like Todo, Deadline, and Event.","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"public class Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"    protected String description; // Changed to private for encapsulation","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    protected boolean isDone; // Changed to private for encapsulation","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"     * Constructs a Task object with a description and initializes it as not done.","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * @param description A description of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     * Marks the task as done by setting the completion status to true.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"     * Unmarks the task as done by setting the completion status to false.","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"     * Returns the status number of the task (0 for not done, 1 for done).","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"     * @return A string representing the task\u0027s completion status.","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"    public int getStatusNumber() {","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"        return (isDone ? 1 : 0); // Use \"1\" for done, \"0\" for not done","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"     * Returns the status icon of the task (\"[X]\" for done, \"[ ]\" for not done).","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"     * @return A string representing the task\u0027s completion status icon.","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"     * Converts the Task object to a string that can be saved to a file.","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"     * Subclasses (Todo, Deadline, Event) should implement this method.","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"     * @return An empty string, to be implemented in each subclass.","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"        // This base method is intended to be overridden by subclasses.","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"        return \"\"; // Subclass responsibility","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"     * Returns a string representation of the task in a user-friendly format.","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"     * @return A string representing the task\u0027s status icon and description.","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2024-01-25"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"        return this.isDone;","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"PateShin":82}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":" * The TaskList class represents a list of tasks that can be managed and manipulated.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":" * It provides methods for adding, retrieving, marking as done, unmarking, and deleting tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"public class TaskList {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * Retrieves the list of tasks stored in the TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"     * @return A list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        return tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"    public int getSize() {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"        return this.tasks.size();","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"PateShin"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"PateShin"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"PateShin"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"PateShin"},"content":"        this.tasks.add(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"PateShin"},"content":"     * Marks a task as done in the TaskList by its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"PateShin"},"content":"     * @param index The index of the task to be marked as done, 1-based.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"PateShin"},"content":"     * @return The task that was marked as done, or null if the index is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"PateShin"},"content":"    public Task markTaskAsDone(int index) {","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"PateShin"},"content":"        if (isValidIndex(index)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"PateShin"},"content":"            Task task \u003d this.tasks.get(index - 1); // Adjust for 0-based indexing","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"PateShin"},"content":"            task.markAsDone();","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"PateShin"},"content":"            return task;","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"PateShin"},"content":"        return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"PateShin"},"content":"     * Unmarks a task as done in the TaskList by its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"PateShin"},"content":"     * @param index The index of the task to be unmarked, 1-based.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"PateShin"},"content":"     * @return The task that was unmarked, or null if the index is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"PateShin"},"content":"    public Task unmarkTaskDone(int index) {","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"PateShin"},"content":"        if (isValidIndex(index)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"PateShin"},"content":"            Task task \u003d this.tasks.get(index - 1); // Adjust for 0-based indexing","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"PateShin"},"content":"            task.markAsNotDone();","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"PateShin"},"content":"            return task;","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"PateShin"},"content":"        return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"PateShin"},"content":"     * Deletes a task from the TaskList by its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"PateShin"},"content":"     * @param index The index of the task to be deleted, 1-based.","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"PateShin"},"content":"     * @return The task that was deleted, or null if the index is invalid.","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"PateShin"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"PateShin"},"content":"        if (isValidIndex(index)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"PateShin"},"content":"            return this.tasks.remove(index - 1); // Adjust for 0-based indexing","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"PateShin"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"PateShin"},"content":"        return null;","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"PateShin"},"content":"     * Checks if the given index is a valid index for accessing tasks in the TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"PateShin"},"content":"     * @param taskNum The index to be validated, 1-based.","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"PateShin"},"content":"     * @return True if the index is valid, false otherwise.","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"PateShin"},"content":"    private boolean isValidIndex(int taskNum) {","lastModifiedDate":"2024-02-08"},{"lineNumber":97,"author":{"gitId":"PateShin"},"content":"        return taskNum \u003e\u003d 1 \u0026\u0026 taskNum \u003c\u003d this.tasks.size();","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":99}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":" * The Todo class represents a task with no specific deadline or time.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"     * Constructs a Todo object with a description.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"     * @param description A description of the todo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"        super(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"     * Converts the Todo object to a string that can be saved to a file.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"     * @return A formatted string representing the Todo object.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"        // Format: T | [Status] | [Description]","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"        return \"T | \" + getStatusNumber() + \" | \" + description;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"     * Converts the Todo object to a user-friendly string representation.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"     * @return A string representing the Todo object in a user-friendly format.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"PateShin"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"PateShin"},"content":"    public String toString() {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"PateShin"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":38}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"arial\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"            \u003cfont\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"                \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"            \u003c/font\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"            \u003cclip\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"                \u003cCircle radius\u003d\"28\" centerX\u003d\"28\" centerY\u003d\"28\" /\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"            \u003c/clip\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"            \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"                \u003cInsets left\u003d\"10.0\"/\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"            \u003c/HBox.margin\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"            \u003ceffect\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"                \u003cjavafx.scene.effect.DropShadow color\u003d\"#000000\" spread\u003d\"0.9\" /\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"            \u003c/effect\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"PateShin"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"PateShin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"PateShin"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"PateShin"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"22.0\" /\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"PateShin"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"PateShin"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #343540;\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"43.0\" prefHeight\u003d\"515.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #343540; -fx-border-color: transparent;\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"518.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #171616;\"/\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"        \u003cLabel alignment\u003d\"CENTER\" layoutY\u003d\"-1.0\" prefHeight\u003d\"45.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #181616;\"/\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"        \u003cLabel alignment\u003d\"CENTER\" layoutY\u003d\"555.0\" prefHeight\u003d\"46.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #4A4A4A;\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"/\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"560.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"414.0\" promptText\u003d\"Message to FICIN\" style\u003d\"-fx-background-color: #9B9B9B; -fx-text-fill: white;\" /\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"428.0\" layoutY\u003d\"560.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"66.0\" style\u003d\"-fx-background-color: #5176FF;\" text\u003d\"Send\" textFill\u003d\"WHITE\" /\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"PateShin":22}},{"path":"src/test/java/duke/task/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"public class DukeTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    public void dummy() {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":12}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    public void testMarkDone() {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"        Task sub3 \u003d new Task(\"testSubject3\");","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"        sub3.markAsDone();","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"        assertTrue(sub3.isDone());","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"PateShin":14}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"package duke.task;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"PateShin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"PateShin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"PateShin"},"content":"class TodoTest {","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"PateShin"},"content":"    @Test","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"PateShin"},"content":"    void testStringifyTask() {","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"PateShin"},"content":"        Todo test1 \u003d new Todo(\"test1\");","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"PateShin"},"content":"        Todo test2 \u003d new Todo(\"test2\");","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"PateShin"},"content":"        test2.markAsDone();","lastModifiedDate":"2024-02-22"},{"lineNumber":13,"author":{"gitId":"PateShin"},"content":"        assertEquals(\"T | 0 | test1\", test1.toFileString(), \"Stringify an uncompleted task.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":14,"author":{"gitId":"PateShin"},"content":"        assertEquals(\"T | 1 | test2\", test2.toFileString(), \"Stringify a completed task.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":16,"author":{"gitId":"PateShin"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":17,"author":{"gitId":"PateShin"},"content":"    @Test","lastModifiedDate":"2024-02-22"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"    void testToString() {","lastModifiedDate":"2024-02-22"},{"lineNumber":19,"author":{"gitId":"PateShin"},"content":"        Todo test1 \u003d new Todo(\"test1\");","lastModifiedDate":"2024-02-22"},{"lineNumber":20,"author":{"gitId":"PateShin"},"content":"        Todo test2 \u003d new Todo(\"test2\");","lastModifiedDate":"2024-02-22"},{"lineNumber":21,"author":{"gitId":"PateShin"},"content":"        test2.markAsDone();","lastModifiedDate":"2024-02-22"},{"lineNumber":22,"author":{"gitId":"PateShin"},"content":"        assertEquals(\"[T][ ] test1\", test1.toString(),","lastModifiedDate":"2024-02-22"},{"lineNumber":23,"author":{"gitId":"PateShin"},"content":"                \"String of an uncompleted task.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":24,"author":{"gitId":"PateShin"},"content":"        assertEquals(\"[T][X] test2\", test2.toString(),","lastModifiedDate":"2024-02-22"},{"lineNumber":25,"author":{"gitId":"PateShin"},"content":"                \"String of a completed task.\");","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"PateShin"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":27,"author":{"gitId":"PateShin"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"PateShin":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"PateShin"},"content":"todo Coding","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"PateShin"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"PateShin":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"PateShin"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"PateShin":1,"-":20}}]
