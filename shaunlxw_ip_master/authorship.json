[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"checkstyle {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    mainClass.set(\"shon.Shon\")","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"    mainClassName \u003d \"shon.Shon\"","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    archiveBaseName \u003d \"shon\"","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"shaunlxw":8}},{"path":"src/main/java/shon/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.command.AddDeadlineCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.command.AddEventCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.command.AddTodoCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.command.DeleteTaskCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import shon.command.ExitCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.command.FindCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import shon.command.ListCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import shon.command.MarkCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import shon.command.UnmarkCommand;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.CommandException;","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":" * Represents a Parser that makes sense of the user\u0027s inputs.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"public class Parser {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    /** The allowed set of actions that the user can do */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    private enum Action {","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        LIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, FIND, BYE","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * Parses the user\u0027s input into a command with the appropriate parameters.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     * @return Command to be executed.","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @throws CommandException If given user input is empty, or a command not allowed in \u003ccode\u003eAction\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If given parameters for that command is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    public static Command parse(String input) throws CommandException, ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        Action action \u003d Parser.getAction(input);","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        switch (action) {","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        case LIST:","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"            return new ListCommand();","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        case MARK:","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"            return new MarkCommand(Parser.getIdx(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        case UNMARK:","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"            return new UnmarkCommand(Parser.getIdx(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        case TODO:","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"            return new AddTodoCommand(Parser.getDescription(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"            return new AddDeadlineCommand(Parser.getDescription(input), Parser.getBy(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"        case EVENT:","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"            return new AddEventCommand(Parser.getDescription(input), Parser.getFrom(input), Parser.getTo(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"        case DELETE:","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"            return new DeleteTaskCommand(Parser.getIdx(input));","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        case FIND:","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"            return new FindCommand(Parser.getKeyword(input));","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"        case BYE:","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"            return new ExitCommand();","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        default:","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"Sorry. I have a problem with that command.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"     * Returns the type of action/command to take. Identified by the first word of user\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"     * @return \u003ccode\u003eAction\u003c/code\u003e from the allowed set of actions.","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"     * @throws CommandException If input is empty or not a command not allowed in \u003ccode\u003eAction\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    private static Action getAction(String input) throws CommandException {","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        if (input.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"Please enter a command.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"            // guaranteed to have at least one item in split as input is stripped and empty string checked","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"            return Action.valueOf(input.split(\" \")[0].toUpperCase());","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"            throw new CommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-)\");","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"     * Returns the index for \u003ccode\u003emark\u003c/code\u003e, \u003ccode\u003eunmark\u003c/code\u003e and \u003ccode\u003edelete\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"     * @return Index required for the action.","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If no index is entered, multiple indexes are entered, or the value entered","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"     * is not a number.","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"    private static int getIdx(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \");","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter which task number to mark.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003e 2) {","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter only one task number to mark.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"            return Integer.parseInt(parameters[1].strip());","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter a valid number for task number.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"     * Returns the description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"     * @return Description of the task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the description is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"    private static String getDescription(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"        // check empty description for deadline","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d description.split(\"/by\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"        description \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"        // check empty description for event","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d description.split(\"/to\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"        description \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d description.split(\"/from\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"        description \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"        if (description.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Description cannot be empty\");","lastModifiedDate":"2024-02-04"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"        return description;","lastModifiedDate":"2024-02-04"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":139,"author":{"gitId":"shaunlxw"},"content":"     * Returns the by parameter for \u003ccode\u003edeadline\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"     * @return The by parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is a deadline command but \u003ccode\u003e\"/by\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"     * or if the given \u003ccode\u003e/by\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"    private static String getBy(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"        if (!input.contains(\"/by\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please indicate due date/time after \\\"/by\\\".\");","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"        // description is guaranteed to be not empty since getDescription() is called first","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"        if (input.endsWith(\"/by\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Deadline\u0027s due date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"        return input.split(\"/by\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"     * Returns the from parameter for \u003ccode\u003eevent\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"shaunlxw"},"content":"     * @return The from parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is an event command but \u003ccode\u003e\"/from\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"shaunlxw"},"content":"     * or if the given \u003ccode\u003e/from\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":164,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"shaunlxw"},"content":"    private static String getFrom(String input)  throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":166,"author":{"gitId":"shaunlxw"},"content":"        if (!input.contains(\"/from\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":167,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please indicate from date/time after \\\"/from\\\".\");","lastModifiedDate":"2024-02-04"},{"lineNumber":168,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":169,"author":{"gitId":"shaunlxw"},"content":"        // drop the first word","lastModifiedDate":"2024-02-04"},{"lineNumber":170,"author":{"gitId":"shaunlxw"},"content":"        input \u003d input.split(\" \", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":171,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\"/from\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"shaunlxw"},"content":"        // description is guaranteed to be not empty since getDescription() is called first","lastModifiedDate":"2024-02-04"},{"lineNumber":173,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event from date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":176,"author":{"gitId":"shaunlxw"},"content":"        String from \u003d parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":177,"author":{"gitId":"shaunlxw"},"content":"        parameters \u003d from.split(\"/to\", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":178,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":179,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event from date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":180,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":181,"author":{"gitId":"shaunlxw"},"content":"        from \u003d parameters[0].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":182,"author":{"gitId":"shaunlxw"},"content":"        if (from.equals(\"\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":183,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event from date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":184,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":185,"author":{"gitId":"shaunlxw"},"content":"        return from;","lastModifiedDate":"2024-02-04"},{"lineNumber":186,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":187,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":188,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":189,"author":{"gitId":"shaunlxw"},"content":"     * Returns the to parameter for \u003ccode\u003eevent\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":190,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":191,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":192,"author":{"gitId":"shaunlxw"},"content":"     * @return The to parameter as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":193,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the input is an event command but \u003ccode\u003e\"/to\"\u003c/code\u003e is not found in the input,","lastModifiedDate":"2024-02-05"},{"lineNumber":194,"author":{"gitId":"shaunlxw"},"content":"     * or if the given \u003ccode\u003e/to\u003c/code\u003e datetime is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":195,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":196,"author":{"gitId":"shaunlxw"},"content":"    private static String getTo(String input) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":197,"author":{"gitId":"shaunlxw"},"content":"        if (!input.contains(\"/to\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":198,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please indicate to date/time after \\\"/to\\\".\");","lastModifiedDate":"2024-02-04"},{"lineNumber":199,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":200,"author":{"gitId":"shaunlxw"},"content":"        // split on \"/from\" is guaranteed to have at least 2 items since getFrom() is called first","lastModifiedDate":"2024-02-04"},{"lineNumber":201,"author":{"gitId":"shaunlxw"},"content":"        String to \u003d input.split(\"/from\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":202,"author":{"gitId":"shaunlxw"},"content":"        if (!to.contains(\"/to\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":203,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"\\\"/to\\\" must come after \\\"/from\\\".\");","lastModifiedDate":"2024-02-04"},{"lineNumber":204,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":205,"author":{"gitId":"shaunlxw"},"content":"        if (to.endsWith(\"/to\")) {","lastModifiedDate":"2024-02-04"},{"lineNumber":206,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Event to date/time cannot be empty.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":207,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":208,"author":{"gitId":"shaunlxw"},"content":"        return to.split(\"/to\", 2)[1].strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":209,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":210,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":211,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":212,"author":{"gitId":"shaunlxw"},"content":"     * Returns the keyword of the \u003ccode\u003efind\u003c/code\u003e command.","lastModifiedDate":"2024-02-05"},{"lineNumber":213,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":214,"author":{"gitId":"shaunlxw"},"content":"     * @param input User\u0027s input.","lastModifiedDate":"2024-02-05"},{"lineNumber":215,"author":{"gitId":"shaunlxw"},"content":"     * @return The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":216,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If no keyword is given.","lastModifiedDate":"2024-02-05"},{"lineNumber":217,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":218,"author":{"gitId":"shaunlxw"},"content":"    private static String getKeyword(String input) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":219,"author":{"gitId":"shaunlxw"},"content":"        String[] parameters \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-05"},{"lineNumber":220,"author":{"gitId":"shaunlxw"},"content":"        if (parameters.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":221,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please enter a keyword to find by.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":222,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":223,"author":{"gitId":"shaunlxw"},"content":"        return parameters[1].strip();","lastModifiedDate":"2024-02-05"},{"lineNumber":224,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":225,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":225}},{"path":"src/main/java/shon/Shon.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.command.Command;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.CommandException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" * Represents a chatbot that maintains a Todo List.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"public class Shon {","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    private TaskList list;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * Creates a \u003ccode\u003eShon\u003c/code\u003e chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    public Shon() {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        this.storage \u003d new Storage(\"./data/Shon.txt\");","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        this.list \u003d storage.loadList();","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        new Shon().run();","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * Runs the chatbot and takes in commands from the standard input.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     * Terminates when the \u003ccode\u003ebye\u003c/code\u003e command is received.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    private void run() {","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        this.ui.greet();","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        while (!isExit) {","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"            try {","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"                String input \u003d this.ui.readInput();","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"                Command command \u003d Parser.parse(input);","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"                command.execute(this.list, this.ui);","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"                this.storage.updateData(this.list.formatData());","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            } catch (ParameterException | CommandException e) {","lastModifiedDate":"2024-01-27"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"                this.ui.print(e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"                this.ui.print(e.getParsedString() + \" is not a valid date/time\",","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"                        \"Please enter the date/time in \\\"dd/mm/yyyy hhmm\\\" format with valid values.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"shaunlxw":53}},{"path":"src/main/java/shon/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.io.File;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":" * Represents a storage that stores the user\u0027s todo list.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"public class Storage {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /** The file object storing the data for the user\u0027s todo list */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    private File file;","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    /** The different type of task encoded in the data file */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    private enum Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        T, D, E","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * Returns a \u003ccode\u003eStorage\u003c/code\u003e object with the data found at filepath. If no pre-existing data exists, a new file","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * along with any relevant parent directory is created.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param filepath The filepath to the file storing the user\u0027s todo list.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @throws Error If an IO error occurred while trying to create the new data file. Suggests potential errors in","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * creating the relevant parent directories, or bug in storage initialisation.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"            this.file \u003d new File(filepath);","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"            File dir \u003d this.file.getParentFile();","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            boolean isNewDir \u003d dir.mkdirs();","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"            boolean isNewFile \u003d this.file.createNewFile();","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"            throw new Error(\"There is an error in creating/opening the \\\"Shon.txt\\\" file.\"","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"                    + \" Check if new directory is created.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"     * Loads the pre-existing list from the stored data file.","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * @return \u003ccode\u003eTaskList\u003c/code\u003e loaded with the tasks and data from the existing data.","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * @throws Error If the data file is not found. Suggests that data file does not exist and","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     * potential errors in storage initialisation.","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"    public TaskList loadList() {","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"            Scanner scanner \u003d new Scanner(this.file);","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"                Task task \u003d Task.valueOf(String.valueOf(data.charAt(0)));","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"                switch (task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"                case T:","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"                    addTodo(data, list);","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"                case D:","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"                    addDeadline(data, list);","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"                case E:","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"                    addEvent(data, list);","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"                    break;","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"            return list;","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"            throw new Error(\"Check that new data file is created (if needed) in initializer.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"    private void addTodo(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 3);","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1], description \u003d d[2];","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"        list.addTodo(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"    private void addDeadline(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 4);","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1], description \u003d d[2], by \u003d d[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"        list.addDeadline(description, by, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"    private void addEvent(String data, TaskList list) {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"        String[] d \u003d data.split(\" \\\\| \", 5);","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"        String isDoneStatus \u003d d[1], description \u003d d[2], from \u003d d[3], to \u003d d[4];","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"        boolean isDone \u003d isDoneStatus.equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"        list.addEvent(description, from, to, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"     * Writes to the data file with the updated data in the TaskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"     * @param data Data that is string-formatted to be stored in the data file.","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"    public void updateData(String[] data) {","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"            FileWriter writer \u003d new FileWriter(this.file.getPath());","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"            for (String line : data) {","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"                writer.write(line);","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"                writer.write(System.lineSeparator());","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"            writer.close();","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"            System.out.println(\"Error writing to data file.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"shaunlxw":111}},{"path":"src/main/java/shon/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import java.util.List;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"import shon.task.Deadline;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"import shon.task.Event;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"import shon.task.Task;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"import shon.task.Todo;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":" * Represents the todo list of the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"public class TaskList {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e with a capacity of 100.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * Adds the tasks to the list and returns the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    private String[] add(Task task) {","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        this.tasks.add(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Got it. I\u0027ve added this task:\", \"  \" + task,","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"                String.format(\"Now you have %s %s in the list.\", size, size \u003c 2 ? \"task\" : \"tasks\")};","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eTodo\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    public String[] addTodo(String description) {","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Todo(description, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eTodo\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eTodo\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    public void addTodo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Todo(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"    public String[] addDeadline(String description, String by) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Deadline(description, by, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"     * Adds a \u003ccode\u003eDeadline\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eDeadline\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"    public void addDeadline(String description, String by, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Deadline(description, by, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"shaunlxw"},"content":"     * Adds an \u003ccode\u003eEvent\u003c/code\u003e task that is initially unmarked to the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String showing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"shaunlxw"},"content":"    public String[] addEvent(String description, String from, String to) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Event(description, from, to, false);","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"shaunlxw"},"content":"        return add(task);","lastModifiedDate":"2024-01-27"},{"lineNumber":98,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"shaunlxw"},"content":"     * Adds an \u003ccode\u003eEvent\u003c/code\u003e task to the list with the mark status as isDone.","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the \u003ccode\u003eEvent\u003c/code\u003e task as a boolean.","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"shaunlxw"},"content":"    public void addEvent(String description, String from, String to, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":109,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d new Event(description, from, to, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":110,"author":{"gitId":"shaunlxw"},"content":"        add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks in the list in a user-appropriate format. Indicates so when the list is empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of Strings representing the tasks in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"shaunlxw"},"content":"    public String[] getTasks() {","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"shaunlxw"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"shaunlxw"},"content":"            return new String[]{\"Your list is currently empty.\"};","lastModifiedDate":"2024-01-27"},{"lineNumber":121,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":122,"author":{"gitId":"shaunlxw"},"content":"        String[] outputs \u003d new String[this.tasks.size() + 1];","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"shaunlxw"},"content":"        outputs[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 1; i \u003c this.tasks.size() + 1; i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"shaunlxw"},"content":"            outputs[i] \u003d i + \".\" + this.tasks.get(i - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"shaunlxw"},"content":"        return outputs;","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":129,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":130,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":135,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the index given is larger than the number of tasks in the list, or if","lastModifiedDate":"2024-02-05"},{"lineNumber":136,"author":{"gitId":"shaunlxw"},"content":"     * the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"shaunlxw"},"content":"    public String[] mark(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":139,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":141,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":142,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d task.markAsDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":144,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Nice! I\u0027ve marked this task as done:\", \"  \" + description};","lastModifiedDate":"2024-01-26"},{"lineNumber":145,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":146,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":147,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":151,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the index given is larger than the number of tasks in the list, or if","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"shaunlxw"},"content":"     * the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"shaunlxw"},"content":"    public String[] unmark(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":157,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":158,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":159,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"shaunlxw"},"content":"        String description \u003d task.markAsNotDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":161,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"OK, I\u0027ve marked this task as not done yet:\", \"  \" + description};","lastModifiedDate":"2024-01-26"},{"lineNumber":162,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":164,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"shaunlxw"},"content":"     * Deletes the task indicated by the idx from the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":168,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the results of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":169,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the list is empty, if the index given is larger than the number of tasks in the","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"shaunlxw"},"content":"     * list, or if the index is a non-positive number.","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"shaunlxw"},"content":"    public String[] deleteTask(int idx) throws ParameterException {","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"shaunlxw"},"content":"        if (this.tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Your list is empty. Nothing to delete.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":175,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":176,"author":{"gitId":"shaunlxw"},"content":"        if (idx \u003e this.tasks.size() || idx \u003c 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":177,"author":{"gitId":"shaunlxw"},"content":"            throw new ParameterException(\"Please select a valid task number to delete from the list.\");","lastModifiedDate":"2024-01-27"},{"lineNumber":178,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":179,"author":{"gitId":"shaunlxw"},"content":"        Task task \u003d this.tasks.get(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":180,"author":{"gitId":"shaunlxw"},"content":"        this.tasks.remove(idx - 1);","lastModifiedDate":"2024-02-05"},{"lineNumber":181,"author":{"gitId":"shaunlxw"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":182,"author":{"gitId":"shaunlxw"},"content":"        return new String[]{\"Noted. I\u0027ve removed this task:\", \"  \" + task,","lastModifiedDate":"2024-01-27"},{"lineNumber":183,"author":{"gitId":"shaunlxw"},"content":"                String.format(\"Now you have %s %s in the list.\", size, size \u003c 2 ? \"task\" : \"tasks\")};","lastModifiedDate":"2024-01-27"},{"lineNumber":184,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":185,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":186,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":187,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks and data in a storage-appropriate format.","lastModifiedDate":"2024-02-05"},{"lineNumber":188,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":189,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of String representing the tasks in the list, in a storage-appropriate format.","lastModifiedDate":"2024-02-05"},{"lineNumber":190,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":191,"author":{"gitId":"shaunlxw"},"content":"    public String[] formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":192,"author":{"gitId":"shaunlxw"},"content":"        int size \u003d this.tasks.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":193,"author":{"gitId":"shaunlxw"},"content":"        String[] outputs \u003d new String[size];","lastModifiedDate":"2024-02-05"},{"lineNumber":194,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":195,"author":{"gitId":"shaunlxw"},"content":"            outputs[i] \u003d this.tasks.get(i).formatData();","lastModifiedDate":"2024-02-05"},{"lineNumber":196,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":197,"author":{"gitId":"shaunlxw"},"content":"        return outputs;","lastModifiedDate":"2024-02-05"},{"lineNumber":198,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":199,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":200,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":201,"author":{"gitId":"shaunlxw"},"content":"     * Returns the tasks with description containing the given keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":202,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":203,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":204,"author":{"gitId":"shaunlxw"},"content":"     * @return An array of Strings representing the matching tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":205,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":206,"author":{"gitId":"shaunlxw"},"content":"    public String[] filterByKeyword(String keyword) {","lastModifiedDate":"2024-02-05"},{"lineNumber":207,"author":{"gitId":"shaunlxw"},"content":"        List\u003cString\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":208,"author":{"gitId":"shaunlxw"},"content":"        filteredTasks.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":209,"author":{"gitId":"shaunlxw"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":210,"author":{"gitId":"shaunlxw"},"content":"            Task task \u003d this.tasks.get(i);","lastModifiedDate":"2024-02-05"},{"lineNumber":211,"author":{"gitId":"shaunlxw"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":212,"author":{"gitId":"shaunlxw"},"content":"                filteredTasks.add(filteredTasks.size() + \".\" + task.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":213,"author":{"gitId":"shaunlxw"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":214,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":215,"author":{"gitId":"shaunlxw"},"content":"        return filteredTasks.size() \u003d\u003d 1","lastModifiedDate":"2024-02-05"},{"lineNumber":216,"author":{"gitId":"shaunlxw"},"content":"               ? new String[]{\"There are no tasks matching the keyword \" + keyword + \".\"}","lastModifiedDate":"2024-02-05"},{"lineNumber":217,"author":{"gitId":"shaunlxw"},"content":"               : filteredTasks.toArray(new String[0]);","lastModifiedDate":"2024-02-05"},{"lineNumber":218,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":219,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":219}},{"path":"src/main/java/shon/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" * Represents the user interface that reads user inputs and outputs information to user.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"public class Ui {","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    private Scanner scanner;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new Ui that reads user input from standard input and outputs to standard output.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    public Ui() {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * Outputs a formatted preset greeting to standard output.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    public void greet() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        print(\"Hello! I\u0027m Shon\", \"What can I do for you?\");","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * Outputs a formatted preset goodbye to standard output.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    public void exit() {","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"        print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        this.scanner.close();","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * Reads one line of user input through standard input.","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * @return The given user input, stripped of white spaces.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    public String readInput() {","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        String input \u003d this.scanner.nextLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"        return input.strip();","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * Formats and outputs the given text. If messages is received as an array of String, each String in the array will","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * be printed out on a separate line.","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     * @param messages The text to be formatted and output. Varargs is used, messages could be a single String,","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     * multiple Strings, or an array of Strings.","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    public void print(String... messages) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        String line \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"        System.out.println(line);","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"        for (String msg : messages) {","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"            System.out.println(\"     \" + msg);","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"        System.out.println(line);","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"        System.out.println();","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":59}},{"path":"src/main/java/shon/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add a \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class AddDeadlineCommand extends AddTaskCommand {","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private String by;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of the \u003ccode\u003eDeadline\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    public AddDeadlineCommand(String description, String by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"        super(description);","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eDeadline\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e to add the \u003ccode\u003eDeadline\u003c/code\u003e task to.","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the expected parse format.","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) throws DateTimeParseException {","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.addDeadline(this.description, this.by));","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":36}},{"path":"src/main/java/shon/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add an \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class AddEventCommand extends AddTaskCommand{","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private String from;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    private String to;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add an \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of the \u003ccode\u003eEvent\u003c/code\u003e task as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public AddEventCommand(String description, String from, String to) {","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        super(description);","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eEvent\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e to add the \u003ccode\u003eDeadline\u003c/code\u003e task to.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given from or to datetime does not adhere to the expected parse format.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) throws DateTimeParseException {","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.addEvent(this.description, this.from, this.to));","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":39}},{"path":"src/main/java/shon/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * The abstract class that represents a command to add a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"abstract class AddTaskCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    protected String description;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * @param description the description of the task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    public AddTaskCommand(String description) {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":17}},{"path":"src/main/java/shon/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to add a \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class AddTodoCommand extends AddTaskCommand {","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to add a \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task to be added.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"        super(description);","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * Adds the \u003ccode\u003eTodo\u003c/code\u003e task to the list tasks, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e to add the \u003ccode\u003eDeadline\u003c/code\u003e task to.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) {","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.addTodo(this.description));","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":29}},{"path":"src/main/java/shon/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":" * Represents a command that can be executed to carry out an action.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Executes the specific command.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e to add the \u003ccode\u003eDeadline\u003c/code\u003e task to.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the index given in \u003ccode\u003emark\u003c/code\u003e, \u003ccode\u003eunmark\u003c/code\u003e or \u003ccode\u003edelete\u003c/code\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * command is not valid.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the datetime given in an \u003ccode\u003eAddTaskCommand\u003c/code\u003e does not adhere to the","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * expected parse format.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    public abstract void execute(TaskList tasks, Ui ui)","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"            throws ParameterException, DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * Returns false for all commands that are not \u003ccode\u003eExitCommand\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     * @return true if the command is \u003ccode\u003eExitCommand\u003c/code\u003e, false otherwise.","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        return false;","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":35}},{"path":"src/main/java/shon/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to delete a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to delete a task indicated by idx.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public DeleteTaskCommand(int idx) {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * Deletes the task from the tasks \u003ccode\u003eTaskList\u003c/code\u003e, and outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e to delete the \u003ccode\u003eTask\u003c/code\u003e from.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.deleteTask(this.idx));","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":33}},{"path":"src/main/java/shon/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to exit the chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * Exits the chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e is not used in this command.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) {","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        ui.exit();","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * Indicates to the chatbot to exit using a true value.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @return true","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        return true;","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":30}},{"path":"src/main/java/shon/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a find command to show tasks with description containing keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    /** The keyword to look for in task descriptions */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    private String keyword;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new command to find tasks with description containing keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * Outputs the tasks with description containing the keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e containing all the tasks to look through.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.filterByKeyword(this.keyword));","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":32}},{"path":"src/main/java/shon/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to list the tasks in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * List the tasks in the tasks \u003ccode\u003eTaskList\u003c/code\u003e in a user-friendly format.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e containing the tasks of the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) {","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.getTasks());","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":20}},{"path":"src/main/java/shon/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to mark a specific task in the \u003ccode\u003eTaskList\u003c/code\u003e as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new mark command to mark the task indicated by idx as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    public MarkCommand(int idx) {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx in the \u003ccode\u003eTaskList\u003c/code\u003e as done, and","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e containing the task to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.mark(this.idx));","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":35}},{"path":"src/main/java/shon/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.command;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import shon.TaskList;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import shon.Ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" * Represents a command to mark a specific task in the \u003ccode\u003eTaskList\u003c/code\u003e as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private int idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new mark command to mark the task indicated by idx as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"     * @param idx The index of the task to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    public UnmarkCommand(int idx) {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * Marks the task indicated by idx in the \u003ccode\u003eTaskList\u003c/code\u003e as not done, and","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * outputs the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @param tasks The \u003ccode\u003eTaskList\u003c/code\u003e containing the task to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * @param ui The \u003ccode\u003eUi\u003c/code\u003e used to output the result of the command.","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @throws ParameterException If the given index is invalid.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    public void execute(TaskList tasks, Ui ui) throws ParameterException {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        ui.print(tasks.unmark(this.idx));","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"shaunlxw":35}},{"path":"src/main/java/shon/exception/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.exception;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represent the exception when an invalid command is input. This can be due to an empty user input, or an","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" * action/command not from the allowed set of actions.","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     * Creates the exception with the given message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * @param message The message in the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public CommandException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        super(message);","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"shaunlxw":16}},{"path":"src/main/java/shon/exception/ParameterException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.exception;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represent the exception when an invalid parameter is input for that command.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public class ParameterException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"     * Creates the exception with the given message.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * @param message The message in the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    public ParameterException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"        super(message);","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"shaunlxw":15}},{"path":"src/main/java/shon/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents a deadline task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /** The by datetime of the task */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime by;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for reading/storing the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter ioFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for displaying the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLL yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new Deadline with the given description, by datetime, and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     * @param by The by datetime of this \u003ccode\u003eDeadline\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the format of ioFormatter.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    public Deadline(String description, String by, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"        this.by \u003d LocalDateTime.parse(by, ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eDeadline\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"     * @return [D] to indicate \u003ccode\u003eDeadline\u003c/code\u003e, completion status marked by X if done, task description,","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"     * and the due datetime.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"                this.by.format(displayFormatter));","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. D represents \u003ccode\u003eDeadline\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"     * status, task description and by datetime with format of ioFormatter. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        return \"D\" + \" | \" + this.formatTask() + \" | \" + this.by.format(ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"     * Sets the display datetime format to the given pattern.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"     * @param pattern The pattern to set the display datetime to.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    public static void setDisplayFormatter(String pattern) {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"        Deadline.displayFormatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":62}},{"path":"src/main/java/shon/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":" * Represents an event task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /** The from datetime of the task */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime from;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    /** The to datetime of the task */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    private LocalDateTime to;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for reading/storing the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter ioFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    /** The formatter for displaying the by datetime */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    private static DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLL yyyy HHmm\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new event with the given description, from datetime, to datetime, and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"     * @param from The from datetime of this \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"     * @param to The to datetime of this \u003ccode\u003eEvent\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * @throws DateTimeParseException If the given by datetime does not adhere to the format of ioFormatter.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public Event(String description, String from, String to, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"        this.from \u003d LocalDateTime.parse(from, ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        this.to \u003d LocalDateTime.parse(to, ioFormatter);;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eEvent\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"     * @return [E] to indicate \u003ccode\u003eEvent\u003c/code\u003e, completion status marked by X if done, task description,","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"     * from datetime, and to datetime.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\",","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"                super.toString(), this.from.format(displayFormatter), this.to.format(displayFormatter));","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. E represents \u003ccode\u003eEvent\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     * status, task description, from datetime and to datetime with format of ioFormatter. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        return \"E\" + \" | \" + this.formatTask() + \" | \" + this.from.format(ioFormatter) + \" | \"","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"                + this.to.format(ioFormatter);","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"     * Sets the display datetime format to the given pattern.","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"     * @param pattern The pattern to set the display datetime to.","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"    public static void setDisplayFormatter(String pattern) {","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        Event.displayFormatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":67}},{"path":"src/main/java/shon/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represents a generic task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    private String description;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    /** The completion status of the task */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new task with the given description and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"     * Sets the task\u0027s completion status to done.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     * @see Task#toString()","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"    public String markAsDone() {","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"        return this.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"     * Sets the task\u0027s completion status to not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"     * @see Task#toString()","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"    public String markAsNotDone() {","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"        return this.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the task. Completion status marked by X if done.","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"     * @return Task\u0027s completion status and description.","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"     * Formats task to be stored. 0 represents not done, 1 represents done.","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"     * @return Completion status and description, separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"    protected String formatTask() {","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"        return (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"    public abstract String formatData();","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"     * Checks if task description contains keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"     * @param keyword The keyword to look for in task descriptions.","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"     * @return true if task description contains keyword, false otherwise.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"        return this.description.toLowerCase().contains(keyword.toLowerCase());","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":83}},{"path":"src/main/java/shon/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":" * Represents a todo task in the \u003ccode\u003eTaskList\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"     * Creates a new todo with the given description and completion status.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"     * @param description The description of the \u003ccode\u003eTodo\u003c/code\u003e task.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"     * Returns the string representation of the \u003ccode\u003eTodo\u003c/code\u003e.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"     * @return [T] to indicate \u003ccode\u003eTodo\u003c/code\u003e, completion status marked by X if done and task description.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"     * Formats the data of the task to be stored. T represents \u003ccode\u003eTodo\u003c/code\u003e, 0/1 to represent completion","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"     * status. Fields are separated by \"|\".","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"     * @return The data of the task formatted to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"    public String formatData() {","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"        return \"T\" + \" | \" + this.formatTask();","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":37}},{"path":"src/test/java/shon/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"    public void getList_emptyList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        assertArrayEquals(new String[]{\"Your list is currently empty.\"}, new TaskList().getTasks());","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    public void mark_emptyList_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new String[0], new TaskList().mark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"    public void mark_normalList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"            list.addTodo(\"Read book\");","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[]{\"Nice! I\u0027ve marked this task as done:\", \"  [T][X] Read book\"}, list.mark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"    public void mark_invalidIndex_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[0], list.mark(-1));","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_emptyList_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new String[0], new TaskList().unmark(2));","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_normalList() {","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"shaunlxw"},"content":"            list.addTodo(\"Read book\");","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[]{\"OK, I\u0027ve marked this task as not done yet:\", \"  [T][ ] Read book\"}, list.unmark(1));","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"shaunlxw"},"content":"    public void unmark_invalidIndex_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"shaunlxw"},"content":"            TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"shaunlxw"},"content":"            assertArrayEquals(new String[0], list.unmark(-2));","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"shaunlxw"},"content":"        } catch (ParameterException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Please select a valid task number from the list.\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"shaunlxw"},"content":"    public void addTodo_defaultFalse() {","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"shaunlxw"},"content":"        TaskList list \u003d new TaskList();","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"shaunlxw"},"content":"        assertArrayEquals(new String[]{\"Got it. I\u0027ve added this task:\", \"  [T][ ] Read book\",","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"shaunlxw"},"content":"                \"Now you have 1 task in the list.\"}, list.addTodo(\"Read book\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":86}},{"path":"src/test/java/shon/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"import shon.exception.ParameterException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"public class EventTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        Event event1 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[E][ ] Project meeting (from: 06 Feb 2024 0000 to: 06 Feb 2024 1200)\", event1.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"        Event event2 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[E][X] Project meeting (from: 06 Feb 2024 0000 to: 06 Feb 2024 1200)\", event2.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"    public void testFormatData() {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        Event event1 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"E | 0 | Project meeting | 06/02/2024 0000 | 06/02/2024 1200\", event1.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"shaunlxw"},"content":"        Event event2 \u003d new Event(\"Project meeting\", \"06/02/2024 0000\", \"06/02/2024 1200\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"E | 1 | Project meeting | 06/02/2024 0000 | 06/02/2024 1200\", event2.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"shaunlxw"},"content":"    public void constructor_invalidDateTime_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new Event(\"\", \"06/02/2024 0000\", \"06/02/2024 0000\", false),","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"shaunlxw"},"content":"                    new Event(\"Project Meeting\",\"06/02/2024 0000\", \"b\", false));","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"shaunlxw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Text \u0027b\u0027 could not be parsed at index 0\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"shaunlxw"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(new Event(\"\", \"06/12/2024 0000\", \"06/13/2024/0000\", false),","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"shaunlxw"},"content":"                    new Event(\"Project Meeting\",\"06/12/2024 0000\", \"06/13/2024/0000\", false));","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"shaunlxw"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"shaunlxw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"shaunlxw"},"content":"            assertEquals(\"Text \u002706/13/2024/0000\u0027 could not be parsed at index 10\", e.getMessage());","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"shaunlxw"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":48}},{"path":"src/test/java/shon/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"package shon.task;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"    public void testStringConversion() {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"        Todo todo1 \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[T][ ] Read book\", todo1.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"shaunlxw"},"content":"        Todo todo2 \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"[T][X] Read book\", todo2.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"shaunlxw"},"content":"    @Test","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"    public void testFormatData() {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"shaunlxw"},"content":"        Todo todo1 \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"T | 0 | Read book\", todo1.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"shaunlxw"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"shaunlxw"},"content":"        Todo todo2 \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"        assertEquals(\"T | 1 | Read book\", todo2.formatData());","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"shaunlxw"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"shaunlxw"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"shaunlxw":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaunlxw"},"content":"todo read book","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"shaunlxw"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"shaunlxw"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"shaunlxw"},"content":"todo join sports club","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"shaunlxw"},"content":"mark 1","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"shaunlxw"},"content":"mark 4","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"shaunlxw"},"content":"todo borrow book","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"shaunlxw"},"content":"list","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"shaunlxw"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"shaunlxw"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"shaunlxw"},"content":"list","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"shaunlxw"},"content":"bye","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"shaunlxw":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"shaunlxw"},"content":"java -classpath ..\\bin Shon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"shaunlxw":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"shaunlxw"},"content":"java -classpath ../bin Shon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"shaunlxw":1}}]
