[{"path":"src/main/java/duchess/Duchess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":" * Duchess class represents the main class of the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":" * It initializes the necessary components and runs the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"public class Duchess {","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    private static final String FILE_PATH \u003d \"./data/duchess.txt\";","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Duchess object.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"     * Initializes storage, task list, and user interface components.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs during initialization","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"    public Duchess() throws DuchessException {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"        storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"        ArrayList\u003cTask\u003e tasksStored \u003d storage.loadData();","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"        if (!tasksStored.isEmpty()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"            taskList \u003d new TaskList(storage.loadData());","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"     * Main method to start the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"     * @param args command-line arguments (not used)","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"            new Duchess().run();","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DuchessException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"     * Runs the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"     * Displays opening greeting, interacts with user, and handles exceptions.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"    public void run() {","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"        ui.printOpeningGreeting();","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"            ui.printEcho(taskList, storage);","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DuchessException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-25"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"        } finally {","lastModifiedDate":"2024-01-25"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"            //Close scanner","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"            ui.closeScanner();","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ThatGirlJam":63,"-":2}},{"path":"src/main/java/duchess/DuchessException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":" * DuchessException is a custom exception class specific to the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":" * It extends the Exception class to represent exceptions that occur within Duchess.","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"public class DuchessException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a DuchessException with the specified detail message.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"     * @param message the detail message","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"    public DuchessException(String message) {","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"        super(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"ThatGirlJam":16}},{"path":"src/main/java/duchess/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Event;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.ToDo;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Deadline;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":" * Parser class provides methods to parse input strings into Task objects.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":" * It is responsible for parsing task information from file format strings.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"public class Parser {","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"     * Parses a task from a line read from a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"     * @param line the line read from the file","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"     * @return the Task object parsed from the line","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs during parsing","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"    public Task parseTaskFromFileString(String line) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"        // Parse the line and create task objects accordingly","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"        // Example line format: \"T | 1 | read book\"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"        String type \u003d parts[0].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"        switch (type) {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"        case \"T\":","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"            task \u003d new ToDo(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"            break;","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"        case \"D\":","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"            String by \u003d parts[3].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"            task \u003d new Deadline(description, isDone, by);","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"            break;","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"        case \"E\":","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"            String from \u003d parts[3].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"            String to \u003d parts[4].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"            task \u003d new Event(description, isDone, from, to);","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"            break;","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"        default:","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\"Unknown task type: \" + type);","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"        return task;","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"ThatGirlJam":48}},{"path":"src/main/java/duchess/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import java.io.File;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":" * Storage class manages the loading and saving of tasks from/to a file.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":" * It handles file I/O operations and utilizes a Parser to convert file data into Task objects.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"public class Storage {","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"    private String filePath;","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"    private Parser parser;","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     * Initializes the file path and creates a Parser instance.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"     * @param filePath the file path to store tasks","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"     * Loads tasks from the file specified in the constructor.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"     * Parses each line of the file into Task objects and returns them as a list.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"     * @return the list of tasks loaded from the file","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs during file reading or parsing","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"    public ArrayList\u003cTask\u003e loadData() throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"            if (!file.exists()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"                file.createNewFile(); // Create file if it doesn\u0027t exist","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"            Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"                String line \u003d fileScanner.nextLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"                Task task \u003d this.parser.parseTaskFromFileString(line); // Parse task from file line","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"                    taskList.getTasks().add(task); // Add task to the list","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"            fileScanner.close();","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\"File not found: \" + e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"        return taskList.getTasks();","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"     * Saves the given list of tasks to the file specified in the constructor.","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ThatGirlJam"},"content":"     * Each task is written as a line in the file.","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskList the list of tasks to be saved","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ThatGirlJam"},"content":"    public void saveData(TaskList taskList) {","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"ThatGirlJam"},"content":"        try (FileWriter writer \u003d new FileWriter(this.filePath)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"ThatGirlJam"},"content":"            for (Task task : taskList.getTasks()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"ThatGirlJam"},"content":"                writer.write(task.toFileString() + \"\\n\"); // Write each task to file","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"ThatGirlJam":79}},{"path":"src/main/java/duchess/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.TaskType;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Deadline;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Event;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.ToDo;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"import javafx.util.Pair;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":" * TaskList class represents a list of tasks in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":" * It provides methods to add, delete, and manipulate tasks in the list.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"public class TaskList {","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"    private static final int MAX_TASKS \u003d 100;","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"    private int taskCount;","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a TaskList object with an empty list of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"        this.taskCount \u003d 0;","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a TaskList object with the given list of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"     * @param tasks the list of tasks to initialize the TaskList with","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"        this.taskCount \u003d this.tasks.size();","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"     * Adds a ToDo task to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"     * @param userInput the user input containing task details","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs while adding the task","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"    public void addToDo(String userInput) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"        String[] toDoTokens \u003d userInput.split(\"todo\"); //Split to find description","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"        if (toDoTokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"            String description \u003d toDoTokens[1].trim(); //Trim to only keep description","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"            ToDo newToDo \u003d new ToDo(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"            addTask(newToDo, TaskType.TODO);","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Oh dear! That is an invalid command. Try: todo \u003cdescription\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"     * Adds a Deadline task to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"     * @param userInput the user input containing task details","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs while adding the task","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"    public void addDeadline(String userInput) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"        String[] deadlineTokens \u003d userInput.split(\"deadline\");","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"ThatGirlJam"},"content":"        if (deadlineTokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"ThatGirlJam"},"content":"            // Split further to extract description and deadline details","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"ThatGirlJam"},"content":"            String[] details \u003d deadlineTokens[1].trim().split(\"/by\");","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"ThatGirlJam"},"content":"            if (details.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"ThatGirlJam"},"content":"                String description \u003d details[0].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"ThatGirlJam"},"content":"                String by \u003d details[1].trim(); // by is everything after","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"ThatGirlJam"},"content":"                Deadline newDeadline \u003d new Deadline(description, by);","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"ThatGirlJam"},"content":"                addTask(newDeadline, TaskType.DEADLINE);","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"ThatGirlJam"},"content":"            } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"ThatGirlJam"},"content":"                throw new DuchessException(\"Oh dear! That is an invalid command. Try: deadline \u003cdescription\u003e /by \u003cdeadline\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Oh dear! That is an invalid command. Try: deadline \u003cdescription\u003e /by \u003cdeadline\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"ThatGirlJam"},"content":"     * Adds an Event task to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"ThatGirlJam"},"content":"     * @param userInput the user input containing task details","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs while adding the task","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"ThatGirlJam"},"content":"    public void addEvent(String userInput) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"ThatGirlJam"},"content":"        String[] eventTokens \u003d userInput.split(\"event\");","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"ThatGirlJam"},"content":"        if (eventTokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"ThatGirlJam"},"content":"            // Split further to extract description and event details","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"ThatGirlJam"},"content":"            String[] details \u003d eventTokens[1].trim().split(\"/from|/to\"); // Means can use either /from or /to as delimiter","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"ThatGirlJam"},"content":"            if (details.length \u003e 2) {","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"ThatGirlJam"},"content":"                String description \u003d details[0].trim();","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"ThatGirlJam"},"content":"                String from \u003d details[1].trim(); // from is everything after","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"ThatGirlJam"},"content":"                String to \u003d details[2].trim();   // to is everything after","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"ThatGirlJam"},"content":"                Event newEvent \u003d new Event(description, from, to);","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"ThatGirlJam"},"content":"                addTask(newEvent, TaskType.EVENT);","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"ThatGirlJam"},"content":"            } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"ThatGirlJam"},"content":"                throw new DuchessException(\"Oh dear! That is an invalid command. Try: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Oh dear! That is an invalid command. Try: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":108,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":109,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":110,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"ThatGirlJam"},"content":"     * Prints the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":112,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":113,"author":{"gitId":"ThatGirlJam"},"content":"    public void printTaskList() {","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"ThatGirlJam"},"content":"        //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":115,"author":{"gitId":"ThatGirlJam"},"content":"        if (this.taskCount \u003d\u003d 0) {","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" No tasks have been added yet.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":118,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":119,"author":{"gitId":"ThatGirlJam"},"content":"            for (int i \u003d 0; i \u003c this.taskCount; i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":120,"author":{"gitId":"ThatGirlJam"},"content":"                System.out.println(\" \" + (i + 1) + \".\" + this.tasks.get(i).toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"ThatGirlJam"},"content":"        //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":127,"author":{"gitId":"ThatGirlJam"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":128,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":129,"author":{"gitId":"ThatGirlJam"},"content":"     * @param task the task to be added","lastModifiedDate":"2024-02-04"},{"lineNumber":130,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskType the type of the task (ToDo, Deadline, or Event)","lastModifiedDate":"2024-02-04"},{"lineNumber":131,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs while adding the task","lastModifiedDate":"2024-02-04"},{"lineNumber":132,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":133,"author":{"gitId":"ThatGirlJam"},"content":"    private void addTask(Task task, TaskType taskType) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"ThatGirlJam"},"content":"        if (this.taskCount \u003c MAX_TASKS) {","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"ThatGirlJam"},"content":"            this.tasks.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"ThatGirlJam"},"content":"            this.taskCount++;","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":139,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Understood. I\u0027ve added this \" + taskType + \" task:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":140,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(task.toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":141,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\"Now you have \" + this.taskCount + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":142,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":143,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"The task list is full. I cannot add more tasks.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":145,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":146,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":147,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":148,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"ThatGirlJam"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskIndex the index of the task to be deleted","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if the task index is invalid","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"ThatGirlJam"},"content":"    public void deleteTask(int taskIndex) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":155,"author":{"gitId":"ThatGirlJam"},"content":"        if (isValidTaskIndex(taskIndex)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":156,"author":{"gitId":"ThatGirlJam"},"content":"            Task deletedTask \u003d this.tasks.remove(taskIndex);","lastModifiedDate":"2024-02-02"},{"lineNumber":157,"author":{"gitId":"ThatGirlJam"},"content":"            this.taskCount--;","lastModifiedDate":"2024-02-02"},{"lineNumber":158,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":159,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":160,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Understood. I\u0027ve deleted this task:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":161,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(deletedTask.toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":162,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Now you have \" + this.taskCount + \" tasks in the list.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":163,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":164,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":165,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Invalid task index.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":166,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":167,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":168,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":169,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":170,"author":{"gitId":"ThatGirlJam"},"content":"     * Marks a task as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":171,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":172,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskIndex the index of the task to be marked as done","lastModifiedDate":"2024-02-04"},{"lineNumber":173,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if the task index is invalid","lastModifiedDate":"2024-02-04"},{"lineNumber":174,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":175,"author":{"gitId":"ThatGirlJam"},"content":"    public void markTaskAsDone(int taskIndex) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":176,"author":{"gitId":"ThatGirlJam"},"content":"        if (isValidTaskIndex(taskIndex)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":177,"author":{"gitId":"ThatGirlJam"},"content":"            this.tasks.get(taskIndex).markAsDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":178,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":179,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Perfect! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":180,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(this.tasks.get(taskIndex).toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":181,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":182,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":183,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Invalid task index.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":184,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":185,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":186,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":187,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":188,"author":{"gitId":"ThatGirlJam"},"content":"     * Unmarks a task as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":189,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":190,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskIndex the index of the task to be unmarked","lastModifiedDate":"2024-02-04"},{"lineNumber":191,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if the task index is invalid","lastModifiedDate":"2024-02-04"},{"lineNumber":192,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":193,"author":{"gitId":"ThatGirlJam"},"content":"    public void unmarkTaskAsDone(int taskIndex) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":194,"author":{"gitId":"ThatGirlJam"},"content":"        if (isValidTaskIndex(taskIndex)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":195,"author":{"gitId":"ThatGirlJam"},"content":"            this.tasks.get(taskIndex).unmarkAsDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":196,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":197,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(\" Understood, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-02"},{"lineNumber":198,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(this.tasks.get(taskIndex).toString());","lastModifiedDate":"2024-02-02"},{"lineNumber":199,"author":{"gitId":"ThatGirlJam"},"content":"            //printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":200,"author":{"gitId":"ThatGirlJam"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":201,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Invalid task index.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":202,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":203,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":204,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":205,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":206,"author":{"gitId":"ThatGirlJam"},"content":"     * Checks if the task index is valid.","lastModifiedDate":"2024-02-04"},{"lineNumber":207,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":208,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskIndex the index of the task to be checked","lastModifiedDate":"2024-02-04"},{"lineNumber":209,"author":{"gitId":"ThatGirlJam"},"content":"     * @return true if the task index is valid, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":210,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":211,"author":{"gitId":"ThatGirlJam"},"content":"    private boolean isValidTaskIndex(int taskIndex) {","lastModifiedDate":"2024-02-02"},{"lineNumber":212,"author":{"gitId":"ThatGirlJam"},"content":"        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c this.taskCount;","lastModifiedDate":"2024-02-02"},{"lineNumber":213,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":214,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":215,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":216,"author":{"gitId":"ThatGirlJam"},"content":"     * Gets the list of tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":217,"author":{"gitId":"ThatGirlJam"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":218,"author":{"gitId":"ThatGirlJam"},"content":"     * @return the list of tasks","lastModifiedDate":"2024-02-04"},{"lineNumber":219,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":220,"author":{"gitId":"ThatGirlJam"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-02-02"},{"lineNumber":221,"author":{"gitId":"ThatGirlJam"},"content":"        return this.tasks;","lastModifiedDate":"2024-02-02"},{"lineNumber":222,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":223,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":224,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":225,"author":{"gitId":"ThatGirlJam"},"content":"     * Finds tasks containing the specified keyword in their descriptions.","lastModifiedDate":"2024-02-04"},{"lineNumber":226,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":227,"author":{"gitId":"ThatGirlJam"},"content":"     * @param keyword the keyword to search for in task descriptions","lastModifiedDate":"2024-02-04"},{"lineNumber":228,"author":{"gitId":"ThatGirlJam"},"content":"     * @return an ArrayList of Pair objects containing the index of the matching task in the original list and the matching task itself","lastModifiedDate":"2024-02-04"},{"lineNumber":229,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":230,"author":{"gitId":"ThatGirlJam"},"content":"    public ArrayList\u003cPair\u003cInteger, Task\u003e\u003e findTasksByKeyword(String keyword) {","lastModifiedDate":"2024-02-04"},{"lineNumber":231,"author":{"gitId":"ThatGirlJam"},"content":"        ArrayList\u003cPair\u003cInteger, Task\u003e\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-04"},{"lineNumber":232,"author":{"gitId":"ThatGirlJam"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":233,"author":{"gitId":"ThatGirlJam"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2024-02-04"},{"lineNumber":234,"author":{"gitId":"ThatGirlJam"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2024-02-04"},{"lineNumber":235,"author":{"gitId":"ThatGirlJam"},"content":"                matchingTasks.add(new Pair\u003c\u003e(i, task));","lastModifiedDate":"2024-02-04"},{"lineNumber":236,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":237,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":238,"author":{"gitId":"ThatGirlJam"},"content":"        return matchingTasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":239,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":240,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-02"},{"lineNumber":241,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"ThatGirlJam":241}},{"path":"src/main/java/duchess/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"import javafx.util.Pair;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":" * Ui class handles user interface interactions in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":" * It provides methods for printing greetings, messages, and reading user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"public class Ui {","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    // Declare the scanner as a static field in the class","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"     * Prints the opening greeting message when the program starts.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"    public void printOpeningGreeting() {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"        String logo \u003d \" ____            __\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"                + \"|  _ \\\\ _   ______| |      ___  ___  ___\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"                + \"| | | | | | |  __| |__  /  _ \\\\/ __|/ __|\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"                + \"| |_| | |_| | |__| ___ |   __/\\\\__ \\\\\\\\__ \\\\\\n\"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"                + \"|____/ \\\\__,_|____|_| |_|\\\\ ___||___/|___/\\n\";","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"        System.out.println(logo);","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"        System.out.println(\"Hello! I\u0027m Duchess.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"        System.out.println(\"What can I do for you today?\");","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"     * Prints the closing farewell message when the program ends.","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"    public void printClosingGreeting() {","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"        System.out.println(\"Farewell. Hope to see you again soon, my dear!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"        printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"     * Prints a horizontal line of dashes as a visual separator.","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"        int lineLength \u003d 50; // Specify the length of the line","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"        // Print the horizontal line","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"        for (int i \u003d 0; i \u003c lineLength; i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.print(\"_\");","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"        System.out.println();","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"     * Reads user input, processes commands, and interacts with the TaskList and Storage.","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"     * @param taskList the TaskList object containing the list of tasks","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"     * @param storage the Storage object for saving tasks to file","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if an error occurs during command processing","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ThatGirlJam"},"content":"    public void printEcho(TaskList taskList, Storage storage) throws DuchessException {","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"ThatGirlJam"},"content":"        // Loop to read user input","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"ThatGirlJam"},"content":"        while (true) {","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"ThatGirlJam"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"ThatGirlJam"},"content":"            // Split user input into tokens","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"ThatGirlJam"},"content":"            String[] tokens \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"ThatGirlJam"},"content":"            // Based on user input, change output","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"ThatGirlJam"},"content":"            switch (tokens[0].toLowerCase()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"ThatGirlJam"},"content":"            case \"bye\":","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"ThatGirlJam"},"content":"                printClosingGreeting();","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"ThatGirlJam"},"content":"                return;","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"ThatGirlJam"},"content":"            case \"list\":","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"ThatGirlJam"},"content":"                taskList.printTaskList();","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"ThatGirlJam"},"content":"            case \"mark\":","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"ThatGirlJam"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"ThatGirlJam"},"content":"                    int taskIndexToMark \u003d Integer.parseInt(tokens[1]) - 1; //Minus 1 to match zero-index","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"ThatGirlJam"},"content":"                    taskList.markTaskAsDone(taskIndexToMark);","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"ThatGirlJam"},"content":"                    storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"ThatGirlJam"},"content":"                } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"ThatGirlJam"},"content":"                    throw new DuchessException(\"Oh dear! That is an invalid command. Try: mark \u003ctaskIndex\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"ThatGirlJam"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"ThatGirlJam"},"content":"            case \"unmark\":","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"ThatGirlJam"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"ThatGirlJam"},"content":"                    int taskIndexToUnmark \u003d Integer.parseInt(tokens[1]) - 1; //Minus 1 to match zero-index","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"ThatGirlJam"},"content":"                    taskList.unmarkTaskAsDone(taskIndexToUnmark);","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"ThatGirlJam"},"content":"                    storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"ThatGirlJam"},"content":"                } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"ThatGirlJam"},"content":"                    throw new DuchessException(\"Oh dear! That is an invalid command. Try: unmark \u003ctaskIndex\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"ThatGirlJam"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":108,"author":{"gitId":"ThatGirlJam"},"content":"            case \"todo\":","lastModifiedDate":"2024-02-02"},{"lineNumber":109,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":110,"author":{"gitId":"ThatGirlJam"},"content":"                taskList.addToDo(userInput);","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"ThatGirlJam"},"content":"                storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"ThatGirlJam"},"content":"            case \"deadline\":","lastModifiedDate":"2024-02-02"},{"lineNumber":115,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"ThatGirlJam"},"content":"                taskList.addDeadline(userInput);","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"ThatGirlJam"},"content":"                storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":118,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":119,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":120,"author":{"gitId":"ThatGirlJam"},"content":"            case \"event\":","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"ThatGirlJam"},"content":"                taskList.addEvent(userInput);","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"ThatGirlJam"},"content":"                storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"ThatGirlJam"},"content":"            case \"delete\":","lastModifiedDate":"2024-02-02"},{"lineNumber":127,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"ThatGirlJam"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2024-02-02"},{"lineNumber":129,"author":{"gitId":"ThatGirlJam"},"content":"                    int taskIndexToDelete \u003d Integer.parseInt(tokens[1]) - 1; //Minus 1 to match zero-index","lastModifiedDate":"2024-02-02"},{"lineNumber":130,"author":{"gitId":"ThatGirlJam"},"content":"                    taskList.deleteTask(taskIndexToDelete);","lastModifiedDate":"2024-02-02"},{"lineNumber":131,"author":{"gitId":"ThatGirlJam"},"content":"                    storage.saveData(taskList);","lastModifiedDate":"2024-02-02"},{"lineNumber":132,"author":{"gitId":"ThatGirlJam"},"content":"                } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":133,"author":{"gitId":"ThatGirlJam"},"content":"                    throw new DuchessException(\"Oh dear! That is an invalid command. Try: unmark \u003ctaskIndex\u003e\");","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"ThatGirlJam"},"content":"                }","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"ThatGirlJam"},"content":"            case \"find\":","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"ThatGirlJam"},"content":"                printHorizontalLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":139,"author":{"gitId":"ThatGirlJam"},"content":"                if (tokens.length \u003e 1) {","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"ThatGirlJam"},"content":"                    String keyword \u003d tokens[1].toLowerCase();","lastModifiedDate":"2024-02-04"},{"lineNumber":141,"author":{"gitId":"ThatGirlJam"},"content":"                    ArrayList\u003cPair\u003cInteger, Task\u003e\u003e matchingTasks \u003d taskList.findTasksByKeyword(keyword);","lastModifiedDate":"2024-02-04"},{"lineNumber":142,"author":{"gitId":"ThatGirlJam"},"content":"                    if (!matchingTasks.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":143,"author":{"gitId":"ThatGirlJam"},"content":"                        System.out.println(\" Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":144,"author":{"gitId":"ThatGirlJam"},"content":"                        for (Pair\u003cInteger, Task\u003e pair : matchingTasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":145,"author":{"gitId":"ThatGirlJam"},"content":"                            int originalIndex \u003d pair.getKey() + 1; // Add 1 to match the original index","lastModifiedDate":"2024-02-04"},{"lineNumber":146,"author":{"gitId":"ThatGirlJam"},"content":"                            Task task \u003d pair.getValue();","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"ThatGirlJam"},"content":"                            System.out.println(\" \" + originalIndex + \".\" + task.toString());","lastModifiedDate":"2024-02-04"},{"lineNumber":148,"author":{"gitId":"ThatGirlJam"},"content":"                        }","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"ThatGirlJam"},"content":"                    } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"ThatGirlJam"},"content":"                        System.out.println(\" No matching tasks found.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"ThatGirlJam"},"content":"                    }","lastModifiedDate":"2024-02-04"},{"lineNumber":152,"author":{"gitId":"ThatGirlJam"},"content":"                } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":153,"author":{"gitId":"ThatGirlJam"},"content":"                    throw new DuchessException(\"Oh dear! Please provide a keyword to search for.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":154,"author":{"gitId":"ThatGirlJam"},"content":"                }","lastModifiedDate":"2024-02-04"},{"lineNumber":155,"author":{"gitId":"ThatGirlJam"},"content":"                break;","lastModifiedDate":"2024-02-04"},{"lineNumber":156,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":157,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":158,"author":{"gitId":"ThatGirlJam"},"content":"            default:","lastModifiedDate":"2024-02-02"},{"lineNumber":159,"author":{"gitId":"ThatGirlJam"},"content":"                    throw new DuchessException(\"Oh dear, I can\u0027t make out what that is.\");","lastModifiedDate":"2024-02-02"},{"lineNumber":160,"author":{"gitId":"ThatGirlJam"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":161,"author":{"gitId":"ThatGirlJam"},"content":"            printHorizontalLine();","lastModifiedDate":"2024-02-02"},{"lineNumber":162,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":163,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":164,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":165,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":166,"author":{"gitId":"ThatGirlJam"},"content":"     * Closes the scanner used for reading user input.","lastModifiedDate":"2024-02-04"},{"lineNumber":167,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":168,"author":{"gitId":"ThatGirlJam"},"content":"    public void closeScanner() {","lastModifiedDate":"2024-02-02"},{"lineNumber":169,"author":{"gitId":"ThatGirlJam"},"content":"        scanner.close();","lastModifiedDate":"2024-02-02"},{"lineNumber":170,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":171,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"ThatGirlJam":171}},{"path":"src/main/java/duchess/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.DuchessException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":" * Deadline class represents a task with a specific deadline in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":" * It extends the Task class and provides methods to manipulate Deadline tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Deadline object with the given description and deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the deadline task","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"     * @param by the deadline of the task in the format \"dd-MM-yyyy HHmm\"","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if there is an error parsing the deadline string","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"    public Deadline(String description, String by) throws DuchessException {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"            this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Oh dear! Your deadline format is wrong, try something like DD-MM-YYYY 1800.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Deadline object with the given description, completion status, and deadline.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the deadline task","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"     * @param isDone true if the task is completed, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"     * @param by the deadline of the task in the format \"MMM dd yyyy hh:mm a\"","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"     * @throws DuchessException if there is an error parsing the deadline string","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"    public Deadline(String description, boolean isDone, String by) throws DuchessException{","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"            this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"            throw new DuchessException(\"Oh dear! Your deadline format is wrong, try something like 10-01-2023 1800.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the Deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the Deadline task including its type, completion status, description, and deadline","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\")) + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the Deadline task in file format.","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"     * ","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the Deadline task including its type, completion status, description, and deadline for file storage","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ThatGirlJam"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"ThatGirlJam"},"content":"        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\"));","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ThatGirlJam":68}},{"path":"src/main/java/duchess/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":" * Event class represents an event task with a start and end time or date in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":" * It currently supports a String as a start and end.","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":" * It extends the Task class and provides methods to manipulate Event tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"    protected String start; //Date or time, but just generic for now","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"    protected String end;","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs an Event object with the given description, start, and end.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the event task","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"     * @param start the start time or date of the event","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"     * @param end the end time or date of the event","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"        this.end \u003d end;","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs an Event object with the given description, completion status, start, and end.","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the event task","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"     * @param isDone true if the task is completed, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"     * @param start the start time or date of the event","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"     * @param end the end time or date of the event","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"    public Event(String description, boolean isDone, String start, String end) {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"        this.end \u003d end;","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the Event task.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the Event task including its type, completion status, description, start, and end","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2024-01-24"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the Event task in file format.","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the Event task including its type, completion status, description, start, and end for file storage","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + start + \" | \" + end;","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ThatGirlJam":58}},{"path":"src/main/java/duchess/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":" * Task class represents a generic task in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":" * It provides methods to manipulate tasks, such as marking them as done and converting them to string format.","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"public class Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"    protected String description;","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Task object with the given description and sets its completion status to false.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a Task object with the given description and completion status.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"     * @param isDone true if the task is completed, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns the status icon representing whether the task is done or not.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"     * @return \"X\" if the task is done, \" \" (space) otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-24"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"        return (isDone ? \"X\" : \" \"); //mark done task with X","lastModifiedDate":"2024-01-24"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ThatGirlJam"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ThatGirlJam"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"ThatGirlJam"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":55,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the task\u0027s completion status and description","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ThatGirlJam"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"ThatGirlJam"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the task in file format.","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representing the task\u0027s type, completion status, and description for file storage","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"ThatGirlJam"},"content":"    public String toFileString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"ThatGirlJam"},"content":"        return \"duchess.task.Task |\" + (isDone ? \"1\" : \"0\")","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"ThatGirlJam"},"content":"                + \" | \" + description;","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ThatGirlJam":74}},{"path":"src/main/java/duchess/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":" * TaskType enum represents the types of tasks available in the Duchess program.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":" * It defines three task types: TODO, DEADLINE, and EVENT.","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"public enum TaskType {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"     * Represents a ToDo task type.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ThatGirlJam":12}},{"path":"src/main/java/duchess/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.task.Task;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":" * ToDo class represents a task without any specific deadline or time.","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":" * It extends the Task class and provides methods to manipulate ToDo tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a ToDo object with the given description.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the ToDo task","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"        super(description);","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"     * Constructs a ToDo object with the given description and completion status.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"     * @param description the description of the ToDo task","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"     * @param isDone true if the task is completed, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the ToDo task.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representation of the ToDo task","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"    public String toString() {","lastModifiedDate":"2024-01-24"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"     * Returns a string representation of the ToDo task in file format.","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"     * @return a string representation of the ToDo task for file storage","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"    public String toFileString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ThatGirlJam"},"content":"        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ThatGirlJam":48}},{"path":"src/test/java/duchess/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":" * TaskListTest class contains JUnit tests for the TaskList class.","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"     * Tests the addToDo method of the TaskList class.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"     * It checks if a ToDo task is correctly added to the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    public void addToDoTest(){","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"            taskList.addToDo(\"todo buy groceries\");","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DuchessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"        assertEquals(1, taskList.getTasks().size());","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"        assertEquals(\"[T][ ] buy groceries\", taskList.getTasks().get(0).toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"ThatGirlJam"},"content":"     * Tests the deleteTask method of the TaskList class.","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"ThatGirlJam"},"content":"     * It checks if a task is correctly deleted from the task list.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ThatGirlJam"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"ThatGirlJam"},"content":"    public void deleteTaskTest(){","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"ThatGirlJam"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"ThatGirlJam"},"content":"            taskList.addToDo(\"todo buy groceries\");","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"ThatGirlJam"},"content":"            assertEquals(1, taskList.getTasks().size());","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"ThatGirlJam"},"content":"            assertEquals(\"[T][ ] buy groceries\", taskList.getTasks().get(0).toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"ThatGirlJam"},"content":"            taskList.deleteTask(0);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"ThatGirlJam"},"content":"            assertEquals(0, taskList.getTasks().size());","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DuchessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"ThatGirlJam":45}},{"path":"src/test/java/duchess/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"package duchess.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"import duchess.DuchessException;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":" * DeadlineTest class contains JUnit tests for the Deadline class.","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ThatGirlJam"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"ThatGirlJam"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ThatGirlJam"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ThatGirlJam"},"content":"     * Tests the toString method of the Deadline class.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ThatGirlJam"},"content":"     * It checks if the string representation of a deadline task is correct.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ThatGirlJam"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ThatGirlJam"},"content":"    @Test","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"ThatGirlJam"},"content":"    public void deadlineToStringTest(){","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"ThatGirlJam"},"content":"            Deadline deadline \u003d new Deadline(\"buy book\", \"18-01-2003 1800\");","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"ThatGirlJam"},"content":"            assertEquals(deadline.toString(), \"[D][ ] buy book (by: Jan 18 2003 06:00 PM)\");","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"ThatGirlJam"},"content":"        } catch (DuchessException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"ThatGirlJam"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"ThatGirlJam"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"ThatGirlJam"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"ThatGirlJam":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ThatGirlJam"},"content":"todo borrow book","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"ThatGirlJam"},"content":"deadline return book /by 12-01-2023 1800","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"ThatGirlJam"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"ThatGirlJam"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"ThatGirlJam"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"ThatGirlJam"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"ThatGirlJam"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"ThatGirlJam"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"ThatGirlJam"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"ThatGirlJam":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ThatGirlJam"},"content":"java -classpath ..\\bin duchess.duchess \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ThatGirlJam":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"ThatGirlJam"},"content":"java -classpath ../bin Duchess \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ThatGirlJam":1,"-":37}}]
