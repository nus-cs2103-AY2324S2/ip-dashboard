[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"# duke project template","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanjieling0":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanjieling0":1,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.command.Command;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":" * Represents the Chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"public class Duke {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    // deals with interactions with the user","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for the Chatbot and retrieve the past log from the storage.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @param filePath String of the path of the file to retrieve the past log taskList from.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"     * Runs the Chatbot and takes in input while it is active. Terminates when input","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"     * command is BYE","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"    public void run() {","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"        boolean isActive \u003d true;","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"        ui.greet();","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"        while (isActive) {","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"            try {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"                String userInput \u003d this.ui.getInput();","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"                Command command \u003d Parser.parseCommand(userInput);","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"                command.execute(this.storage, this.tasks, this.ui);","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"                isActive \u003d command.getActive();","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"                Ui.printError(e);","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"        new Duke(\"./data/tasks.txt\").run();","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":59}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import java.util.List;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"import duke.command.Command;","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":" * Represents the class that deals with all the formatting and making sense of the String inputs.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"public class Parser {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    private enum CommandType {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"        BYE, LIST, DELETE, MARK, UNMARK, TODO, EVENT, DEADLINE","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"     * Returns the respective command to be executed after deconstructing the user input.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"     * Possible commands are : BYE, LIST, DELETE, MARK, UNMARK, TODO, EVENT, DEADLINE.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"     * @param userInput String of user input to be deconstructed and processed.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"     * @return Command to be executed.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"    public static Command parseCommand(String userInput) throws InvalidCommandException, InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"        Command command;","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"        // TODO: handle exception when there is blank space after command","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"            String[] components \u003d userInput.split(\" \", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"            String description;","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"            CommandType commandType \u003d CommandType.valueOf(components[0].toUpperCase());","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"            switch (commandType) {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"            case LIST:","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new ListCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"            case BYE:","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new ByeCommand();","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"            case DELETE:","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new DeleteCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"            case MARK:","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new MarkCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"            case UNMARK:","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new UnmarkCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"            case TODO:","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new AddTodoCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new AddDeadlineCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"            case EVENT:","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"                description \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"                command \u003d new AddEventCommand(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"            default:","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"                throw new InvalidCommandException(\"Invalid Command\");","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidCommandException(\"Invalid Command\");","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"Description Cannot be Empty\");","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"tanjieling0"},"content":"        return command;","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"tanjieling0"},"content":"     * Returns the reformatted date if input date matches the specific date formats.","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"tanjieling0"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"tanjieling0"},"content":"     * If the input date does not match any of the formats, the input date String will be","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"tanjieling0"},"content":"     * returned as it is.","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"tanjieling0"},"content":"     * @param date Unformatted date String.","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"tanjieling0"},"content":"     * @return Reformatted date if input matches any of the specific formats.","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"tanjieling0"},"content":"    public static String formatDate(String date) {","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"tanjieling0"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":111,"author":{"gitId":"tanjieling0"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":112,"author":{"gitId":"tanjieling0"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":113,"author":{"gitId":"tanjieling0"},"content":"        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":114,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"tanjieling0"},"content":"        LocalDate parsedDateTime \u003d null;","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"tanjieling0"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2024-02-03"},{"lineNumber":118,"author":{"gitId":"tanjieling0"},"content":"            try {","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"tanjieling0"},"content":"                parsedDateTime \u003d LocalDate.parse(date, formatter);","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"tanjieling0"},"content":"                break;","lastModifiedDate":"2024-02-03"},{"lineNumber":121,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"tanjieling0"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":123,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":124,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":125,"author":{"gitId":"tanjieling0"},"content":"        if (parsedDateTime \u003d\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":126,"author":{"gitId":"tanjieling0"},"content":"            return date;","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"tanjieling0"},"content":"        return parsedDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":130}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":" * Represents the database to store the past logs of taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"public class Storage {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    // Default file path for storage","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    private static String filePath \u003d \"./data/tasks.txt\";","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    private static final Path DIRECTORY_PATH \u003d Paths.get(\"./data\");","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    private static final Path FILE_PATH \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for the storage.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"     * The constructor creates a new file and/or directory if the specified","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"     * path does not exist.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"     * @param filePath String of the path of the file to retrieve the past log taskList from.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"            if (!Files.exists(DIRECTORY_PATH)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"                Files.createDirectories(DIRECTORY_PATH);","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"            if (!Files.exists(FILE_PATH)) {","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"                Files.createFile(FILE_PATH);","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"     * Saves the updated taskList to the storage by writing to the file.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList Updated taskList to be written to the storage file.","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"    public static void save(TaskList taskList) {","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"        ArrayList\u003cTask\u003e arrayListOfTasks \u003d taskList.getArrayList();","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath))) {","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"            for (Task task : arrayListOfTasks) {","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"                writer.write(task.toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"                writer.newLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"            System.out.println(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"     * Retrieves the past log of taskList if found, else it will start with an empty taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"     * @return Stored taskList from past log or new list if not found.","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"    public static ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"        ArrayList arrayTaskList \u003d new ArrayList();","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(filePath))) {","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"            String data;","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"            while ((data \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"                Task task \u003d Task.parseFromFileString(data);","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"                    arrayTaskList.add(task);","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"                }","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"            }","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidCommandException(\"No existing file. Starting with an empty task list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"tanjieling0"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidCommandException(\"No existing file. Starting with an empty task list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":96,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":97,"author":{"gitId":"tanjieling0"},"content":"        return arrayTaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":98,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":99,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":99}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":" * Represents the class that deals with all displays and interactions with the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"public class Ui {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    private static final String name \u003d \"Tommy\";","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    private Scanner scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an Ui object that initialises the scanner.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"    public Ui() {","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"     * Prints the greeting message for the user when the Chatbot boots up.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    public void greet() {","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"        //Greetings","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Hello! I\u0027m \" + this.name);","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"     * Prints the farewell message for the user when the Chatbot terminates.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"    public void farewell() {","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"        this.scanner.close();","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"     * Extracts the input from the user and returns it as a String.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"     * @return String of the input by user.","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"    public String getInput() {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"        String userInput \u003d this.scanner.nextLine();","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"        return userInput;","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"     * Prints the entire list of tasks in the taskList numbered.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList List of tasks to be printed.","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"    public static void displayAllTasks(TaskList taskList) {","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"        ArrayList\u003cTask\u003e arrayListOfTasks \u003d taskList.getArrayList();","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"        int length \u003d taskList.getSize();","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"        for (int i \u003d 0; i \u003c length; i++) {","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"            Task task \u003d arrayListOfTasks.get(i);","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"            System.out.println(i + 1 + \".\" + task.toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"     * Prints the description of the task that is deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList List of tasks after deletion.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"     * @param task Task that is deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"    public static void displayDeletedTask(TaskList taskList, Task task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"        String descOfTaskToDelete \u003d task.toString();","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"  \" + descOfTaskToDelete);","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"     * Prints the description of the task that was marked.","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList List of tasks from which the task was marked.","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of the task that was marked in the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"tanjieling0"},"content":"    public static void displayMarkedTask(TaskList taskList, int position) {","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"tanjieling0"},"content":"        Task markedTask \u003d taskList.getTaskAtPosition(position);","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"  \" + markedTask.toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":106,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"tanjieling0"},"content":"     * Prints the description of the task that was unmarked.","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList List of tasks from which the task was unmarked.","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of the task that was unmarked in the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"tanjieling0"},"content":"    public static void displayUnmarkedTask(TaskList taskList, int position) {","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"tanjieling0"},"content":"        Task unmarkedTask \u003d taskList.getTaskAtPosition(position);","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":115,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"  \" + unmarkedTask.toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":116,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":117,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":118,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":119,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":120,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"tanjieling0"},"content":"     * Prints the description of the task that was newly created.","lastModifiedDate":"2024-02-05"},{"lineNumber":122,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":123,"author":{"gitId":"tanjieling0"},"content":"     * @param task Newly created task.","lastModifiedDate":"2024-02-05"},{"lineNumber":124,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList List of tasks from which the task was added to.","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"tanjieling0"},"content":"    public static void displayNewTask(Task task, TaskList taskList) {","lastModifiedDate":"2024-02-03"},{"lineNumber":127,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":128,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2024-02-03"},{"lineNumber":129,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"Now you have \" + taskList.getSize() + \" tasks in the list.\");","lastModifiedDate":"2024-02-03"},{"lineNumber":130,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":131,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":132,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":133,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":134,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":135,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":136,"author":{"gitId":"tanjieling0"},"content":"     * Prints the relevant error message for the DukeException thrown.","lastModifiedDate":"2024-02-05"},{"lineNumber":137,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":138,"author":{"gitId":"tanjieling0"},"content":"    public static void printError(DukeException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":139,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(e.errorMessage());","lastModifiedDate":"2024-02-03"},{"lineNumber":140,"author":{"gitId":"tanjieling0"},"content":"        printDivider();","lastModifiedDate":"2024-02-03"},{"lineNumber":141,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":142,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":143,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":144,"author":{"gitId":"tanjieling0"},"content":"     * Prints a loading error message when loading from storage fails.","lastModifiedDate":"2024-02-05"},{"lineNumber":145,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"tanjieling0"},"content":"    public static void showLoadingError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"There is an error loading the Storage\");","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":151,"author":{"gitId":"tanjieling0"},"content":"     * Prints a divider that separates different segments for aesthetic purposes.","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"tanjieling0"},"content":"    private static void printDivider() {","lastModifiedDate":"2024-02-03"},{"lineNumber":154,"author":{"gitId":"tanjieling0"},"content":"        System.out.println(\"____________________________\");","lastModifiedDate":"2024-02-03"},{"lineNumber":155,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":156,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":156}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to add a Deadline task to the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    private String description;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an AddDeadline command,","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with its task description.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the Deadline task.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"    public AddDeadlineCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"            String[] components \u003d this.description.split(\" /by \", 2);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"            String deadlineDetails \u003d components[0];","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"            String byDate \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"            String formattedByDate \u003d Parser.formatDate(byDate);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"            String formattedDescription \u003d deadlineDetails + \" (by: \" + formattedByDate + \")\";","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"            Task deadline \u003d new Deadline(formattedDescription);","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(deadline);","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"            Storage.save(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"            ui.displayNewTask(deadline, taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"DEADLINE\");","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":48}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Parser;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to add an Event task to the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    private String description;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an AddEvent command,","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with its task description.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the Event task.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"    public AddEventCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"            String[] components \u003d this.description.split(\" /from | /to \", 3);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"            String eventDetails \u003d components[0];","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"            String fromDate \u003d components[1];","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"            String toDate \u003d components[2];","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"            // format the dates","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"            String formattedFromDate \u003d Parser.formatDate(fromDate);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"            String formattedToDate \u003d Parser.formatDate(toDate);","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"            // instantiate event","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"            String formattedDescription \u003d eventDetails + \" (from: \" + formattedFromDate + \" to: \" + formattedToDate + \")\";","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"            Task event \u003d new Event(formattedDescription);","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(event);","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"            Storage.save(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"            ui.displayNewTask(event, taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"EVENT\");","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":52}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to add a Todo task to the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    private String description;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an AddToDo command,","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with its task description.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the Todo task.","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"    public AddTodoCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"            Task todo \u003d new Todo(this.description);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(todo);","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"            Storage.save(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"            Ui.displayNewTask(todo, taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"TODO\");","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":41}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to terminate and exit the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"        ui.farewell();","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Returns the availability of the program to take in commands afterwards,","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * which is false after the BYE command","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @returns False, as the program terminates.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public boolean getActive() {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        return false;","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":27}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":" * Abstract class that is the parent class of all commands.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"     * Returns the availability of the program to take in commands afterwards,","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"     * which is true for all commands except BYE.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * @returns Availability to take in input commands.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"    public boolean getActive() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"        return true;","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"     * Executes the command and updates the taskList and storage if necessary, then","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"     * print out relevant information about the command.","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"     * @param storage Database to save the updated task list into.","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList Task list to alter and update if necessary.","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"     * @param ui User interface to call its methods to print the relevant information.","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"    public abstract void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException;","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":34}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to delete a task from the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    private int positionToDelete;","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    // TODO : consider catching exception for invalid string which isn\u0027t a number","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a delete task command,","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with the position (in the taskList) of the task","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * to be deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"     * @param description String value of the position of task to be deleted.","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    public DeleteCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"        this.positionToDelete \u003d Integer.parseInt(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"            // Delete the task","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"            Task taskToDelete \u003d taskList.getTaskAtPosition(positionToDelete);","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"            taskList.deleteTaskAtPosition(positionToDelete);","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"            ui.displayDeletedTask(taskList, taskToDelete);","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"        } catch (IndexOutOfBoundsException e){","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"The index is out of range \u003e.\u003c\");","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":41}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to list all tasks in the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"        ui.displayAllTasks(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":17}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to mark a task in the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    private int positionToMark;","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a mark task command,","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with the position (in the taskList) of the task","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * to be marked.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * @param description String value of the position of task to be marked.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public MarkCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        this.positionToMark \u003d Integer.parseInt(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"            taskList.markTask(positionToMark);","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"            ui.displayMarkedTask(taskList, positionToMark);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"            Storage.save(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"The index is out of range \u003e.\u003c\");","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":39}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.command;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":" * Represents the command to mark a task in the taskList.","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    private int positionToUnmark;","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an unmark task command,","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the command with the position (in the taskList) of the task","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * to be marked.","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * @param description String value of the position of task to be unmarked.","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public UnmarkCommand(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        this.positionToUnmark \u003d Integer.parseInt(description);","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    public void execute(Storage storage, TaskList taskList, Ui ui) throws InvalidArgumentException {","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"            taskList.unmarkTask(positionToUnmark);","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"            ui.displayUnmarkedTask(taskList, positionToUnmark);","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"            Storage.save(taskList);","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"            throw new InvalidArgumentException(\"The index is out of range \u003e.\u003c\");","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":38}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.exception;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Abstract class that is the parent class of all exceptions created in the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an DukeException,","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     * which initialises the exception with its error message.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     * @param message Description of the DukeException error.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    public DukeException(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"        super(message);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * Prints the descriptive message of the exception error for the user.","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @return Descriptive error message.","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    public abstract String errorMessage();","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":24}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.exception;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Represents the exceptions thrown in the program related to invalid inputs.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public class InvalidArgumentException extends DukeException{","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an InvalidArgumentException,","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     * which initialises it with its error message.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     * @param message String of where the invalid input is found.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    public InvalidArgumentException(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"        super(message);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    public String errorMessage() {","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"        return \"Invalid Arguments - \" + getMessage();","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":22}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.exception;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Represents the exceptions thrown in the program related to invalid commands.","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an InvalidCommandException,","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     * which initialises it with its error message.","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     * @param message Description of the invalid command error.","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"        super(message);","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    public String errorMessage() {","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"        return \"Invalid Command\";","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":22}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Represents the task with a deadline in the format [ \u003ccode\u003edetails\u003c/code\u003e (by: \u003ccode\u003edate\u003c/code\u003e) ].","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a Deadline task with its status as default not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"    public Deadline(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"        super(description);","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a Deadline task with its status dependent on the input.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * Used when retrieving tasks from the database.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * @param isDone Status of the deadline task.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public Deadline(String description, boolean isDone) {","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"    public String toString() {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"        return \"[D]\" + this.getStatusIcon() + this.description;","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"tanjieling0":33}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Represents an Event task with the format [ details (from: \u003ccode\u003edate\u003c/code\u003e) to: \u003ccode\u003edate\u003c/code\u003e) ].","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an Event task with status as default not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the Event task.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"    public Event(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"        super(description);","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an Event task with its status dependent on the input.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Used when retrieving tasks from the database.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the Event task.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @param isDone Status of the Event task.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    public Event(String description, Boolean isDone) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"        return \"[E]\" + this.getStatusIcon() + this.description;","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"tanjieling0":32}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Abstract class that is the parent class of all types of tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"abstract public class Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"    protected String description;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     * Constructor a task with status as default not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * Constructor a task with its status dependent on the input.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * Used when retrieving tasks from the database.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"     * @return Status icon of task.","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"     * Parses the text file string into components that identifies the type of task,","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"     * task status, and its description. Creates the identified task with relevant information","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"     * and returns it.","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"     * @param string String retrieved from the file.","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"     * @return Newly created task","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"    public static Task parseFromFileString(String string) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"        String[] components \u003d string.split(\"\\\\]\");","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"        String type \u003d components[0].substring(1);","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"        String statusIcon \u003d components[1].substring(1);","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"        boolean isDone \u003d checkStatus(statusIcon);","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"        String description \u003d components[2];","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"        switch (type) {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"            case \"T\":","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"                return new Todo(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"            case \"D\":","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"                return new Deadline(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"            case \"E\":","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"                return new Event(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"            default:","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"                return null;","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"     * Returns the status of the task based on the input icon.","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"     * @param statusIcon Status icon of the task, where \"X\" is marked.","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"     * @return True if the status icon is marked, that is, \"X\".","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"    public static boolean checkStatus(String statusIcon) {","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"        if (statusIcon.equals(\"X\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"            return true;","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"        } else {","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"            return false;","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"     * Sets the isDone value of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"     * @param isDone Value to be set to isDone attribute of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-03"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"     * Returns the string representation of the task which includes its","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"     * status and description.","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":95,"author":{"gitId":"tanjieling0"},"content":"     * @return String representation of the Task.","lastModifiedDate":"2024-02-05"},{"lineNumber":96,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"tanjieling0"},"content":"    public abstract String toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-01-25"},{"lineNumber":99,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"tanjieling0":99}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":" * Represents an ArrayList of objects of type Tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"public class TaskList {","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"    private static ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an empty ArrayList to store tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for an ArrayList filled with a list of tasks retrieved","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     * from storage.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * @param taskList An ArrayList of task retrieved from the storage","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"     * Adds the input task to the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"     * @param task Task to be added to the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"        this.taskList.add(task);","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"     * Returns the size of the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"     * @return Size of taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"    public int getSize() {","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"        return this.taskList.size();","lastModifiedDate":"2024-02-03"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"     * Returns the taskList as ArrayList type.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"     * @return TaskList as an ArrayList.","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"    public ArrayList\u003cTask\u003e getArrayList() {","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"        return this.taskList;","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"     * Returns the task in the taskList at the position specified.","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of task in the taskList to be retrieved.","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"     * @return Task at specified position in the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"    public Task getTaskAtPosition(int position) {","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"        return this.taskList.get(position - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"     * Marks the task in the specified position in the taskList as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of task in the taskList to be marked as done.","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"    public void markTask(int position) {","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"            Task task \u003d taskList.get(position - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"            task.setDone(true);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"     * Marks the task in the specified position in the taskList as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of task in the taskList to be marked as not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"    public void unmarkTask(int position) {","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"        Task task \u003d taskList.get(position - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"        task.setDone(false);","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"     * Deletes the task in the specified position in the taskList.","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"     * @param position Position of task in the taskList to be deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"    public void deleteTaskAtPosition(int position) {","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"        taskList.remove(position - 1);","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"tanjieling0":93}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke.task;","lastModifiedDate":"2024-02-03"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":" * Represents the task of type Todo.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a Todo task with its status as default not done.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"        super(description);","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"     * Constructor for a Todo task with its status dependent on the input.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"     * Used when retrieving tasks from the database.","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"     * @param isDone Status of the todo task.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"        return \"[T]\" + this.getStatusIcon() + this.description;","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"tanjieling0":31}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"package duke;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"public class DukeTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"    /*","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"    Test for date formatter","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"    Accepted forms :","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"    yyyy-MM-dd","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"    dd-MM-YYYY","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"    dd/MM/yyyy","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"    public void formatDateTest(){","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Dec 31 3000\", Parser.formatDate(\"3000-12-31\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Jan 1 0001\", Parser.formatDate(\"0001-01-01\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Dec 31 9999\", Parser.formatDate(\"9999-12-31\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"May 5 2000\", Parser.formatDate(\"05-05-2000\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Jan 1 0001\", Parser.formatDate(\"01-01-0001\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Dec 31 9999\", Parser.formatDate(\"31-12-9999\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Jan 1 2003\", Parser.formatDate(\"01/01/2003\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Jan 1 0001\", Parser.formatDate(\"01/01/0001\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"Dec 31 9999\", Parser.formatDate(\"31/12/9999\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"tanjieling0"},"content":"    // test getSize() function in TaskList","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"tanjieling0"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"tanjieling0"},"content":"    public void getTaskListSizeTest() {","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"tanjieling0"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(0, taskList.getSize());","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"tanjieling0"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(new Todo(\"blah\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(50, taskList.getSize());","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"tanjieling0"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(new Todo(\"blah\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(100, taskList.getSize());","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"tanjieling0"},"content":"    // test mark task function","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"tanjieling0"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"tanjieling0"},"content":"    public void markTaskTest() {","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"tanjieling0"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"tanjieling0"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(new Todo(\"blah\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 20","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"tanjieling0"},"content":"        taskList.markTask(20);","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"tanjieling0"},"content":"        Task taskToTest \u003d taskList.getTaskAtPosition(20);","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[X]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 1","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"tanjieling0"},"content":"        taskList.markTask(1);","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"tanjieling0"},"content":"        taskToTest \u003d taskList.getTaskAtPosition(1);","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[X]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 50","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"tanjieling0"},"content":"        taskList.markTask(50);","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"tanjieling0"},"content":"        taskToTest \u003d taskList.getTaskAtPosition(50);","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[X]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"tanjieling0"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"tanjieling0"},"content":"    public void unmarkTaskTest() {","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"tanjieling0"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"tanjieling0"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"tanjieling0"},"content":"            taskList.addTask(new Todo(\"blah\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"tanjieling0"},"content":"            taskList.markTask(i + 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"tanjieling0"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 20","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"tanjieling0"},"content":"        taskList.unmarkTask(20);","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"tanjieling0"},"content":"        Task taskToTest \u003d taskList.getTaskAtPosition(20);","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[ ]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 1","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"tanjieling0"},"content":"        taskList.unmarkTask(1);","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"tanjieling0"},"content":"        taskToTest \u003d taskList.getTaskAtPosition(1);","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[ ]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"tanjieling0"},"content":"        // marking task at position 50","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"tanjieling0"},"content":"        taskList.unmarkTask(50);","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"tanjieling0"},"content":"        taskToTest \u003d taskList.getTaskAtPosition(50);","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"tanjieling0"},"content":"        assertEquals(\"[ ]\", taskToTest.getStatusIcon());","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"tanjieling0"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"tanjieling0"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"tanjieling0":110}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanjieling0"},"content":"todo read book","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"tanjieling0"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"tanjieling0"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"tanjieling0"},"content":"todo join sports club","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"tanjieling0"},"content":"mark 1","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"tanjieling0"},"content":"mark 4","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"tanjieling0"},"content":"todo borrow book","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"tanjieling0"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"tanjieling0"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"tanjieling0"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"tanjieling0"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"tanjieling0"},"content":"todo","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"tanjieling0"},"content":"deadline","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"tanjieling0"},"content":"event","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"tanjieling0"},"content":"deadline test","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"event test /from","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"tanjieling0"},"content":"event test /to","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"event test /from /to","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"tanjieling0"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"tanjieling0"},"content":"jekanf","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"tanjieling0"},"content":"fuaeiwf","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"tanjieling0"},"content":"blah","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"tanjieling0"},"content":"invalid","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"tanjieling0"},"content":"mark 0","lastModifiedDate":"2024-01-27"},{"lineNumber":25,"author":{"gitId":"tanjieling0"},"content":"mark -1","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"tanjieling0"},"content":"mark 100","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"tanjieling0"},"content":"unmark 0","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"tanjieling0"},"content":"unmark -1","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"tanjieling0"},"content":"unmark 100","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"tanjieling0"},"content":"delete 3","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"tanjieling0"},"content":"delete 0","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"tanjieling0"},"content":"delete -1","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"tanjieling0"},"content":"delete 100","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"tanjieling0"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"tanjieling0"},"content":"bye","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"tanjieling0":35}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tanjieling0"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanjieling0":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"tanjieling0"},"content":"if ! javac -cp ../src/main/java/ -Xlint:none -d ../bin ../src/main/java/Duke/*.java","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tanjieling0":1,"-":37}}]
