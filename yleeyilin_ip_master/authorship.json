[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"    archiveFileName \u003d \"duke.jar\"","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"yleeyilin":2}},{"path":"src/main/data/caching.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"T|0|borrow books","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"T|0|borrow books tom","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"yleeyilin":2}},{"path":"src/main/data/test/caching.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"D|1|return book|Sunday","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":1}},{"path":"src/main/java/duke/DateFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":" * Represents the class that handles date input and interprets it accordingly. ","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"public class DateFormatter {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the input format that includes day, month, year, hours, minutes.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the output format that includes day, month, year, hours, minutes.","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter outputDateTimeFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy h:mm a\");","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the input format that includes day, month, year in this specific order.","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the output format that includes day, month, year in this specific order.","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the input format that includes year, month, day in this specific order.","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter altDateFormat \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/d\");","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"     * Represents an object that handles the output format that includes year, month, day in this specific order.","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"    private static final DateTimeFormatter altOutputDateFormat \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"     * Constructor for date time formatting class. ","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"    public DateFormatter() {","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"     * Checks if the input is a valid date and time input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"     * @param dateStr Represents the date and time extracted from instructions. ","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"     * @return A boolean representing true if the instruction is a valid date and time. ","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"    private boolean isValidDateTime(String dateStr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"            LocalDateTime.parse(dateStr, timeFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"            return true;","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"            return false;","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"     * Checks if the input is a valid date input that includes day, month, year in this specific order. ","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"yleeyilin"},"content":"     * @param dateStr Represents the date extracted from instructions. ","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"yleeyilin"},"content":"     * @return A boolean representing true if the instruction is a valid date that includes day, month, year in this specific order. ","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"yleeyilin"},"content":"    private boolean isValidDate(String dateStr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"yleeyilin"},"content":"            LocalDate.parse(dateStr, dateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"yleeyilin"},"content":"            return true;","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"yleeyilin"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"yleeyilin"},"content":"            return false;","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"yleeyilin"},"content":"     * Checks if the input is a valid date input that includes year, month, day in this specific order. ","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"yleeyilin"},"content":"     * @param dateStr Represents the date extracted from instructions. ","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"yleeyilin"},"content":"     * @return A boolean representing true if the instruction is a valid date that includes year, month, day in this specific order. ","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"yleeyilin"},"content":"    private boolean isValidAltDate(String dateStr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"yleeyilin"},"content":"            LocalDate.parse(dateStr, altDateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"yleeyilin"},"content":"            return true;","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"yleeyilin"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"yleeyilin"},"content":"            return false;","lastModifiedDate":"2024-01-28"},{"lineNumber":90,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"yleeyilin"},"content":"     * Converts the date based on what kind of valid input it is. ","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"yleeyilin"},"content":"     * @param dateStr The extracted instructions that is relevant to pass. ","lastModifiedDate":"2024-01-28"},{"lineNumber":97,"author":{"gitId":"yleeyilin"},"content":"     * @return The final result that is the converted value if it is a valid format. ","lastModifiedDate":"2024-01-28"},{"lineNumber":98,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":99,"author":{"gitId":"yleeyilin"},"content":"    public String convertedDate(String dateStr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":100,"author":{"gitId":"yleeyilin"},"content":"        if (isValidDateTime(dateStr)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"yleeyilin"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(dateStr, timeFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":102,"author":{"gitId":"yleeyilin"},"content":"            return date.format(outputDateTimeFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":103,"author":{"gitId":"yleeyilin"},"content":"        } else if (isValidDate(dateStr)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":104,"author":{"gitId":"yleeyilin"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, dateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"yleeyilin"},"content":"            return date.format(outputDateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"yleeyilin"},"content":"        } else if (isValidAltDate(dateStr)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":107,"author":{"gitId":"yleeyilin"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, altDateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"yleeyilin"},"content":"            return date.format(altOutputDateFormat);","lastModifiedDate":"2024-01-28"},{"lineNumber":109,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":110,"author":{"gitId":"yleeyilin"},"content":"        return dateStr;","lastModifiedDate":"2024-01-28"},{"lineNumber":111,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":112,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":112}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":" * Represents a chat bot that helps user keep track of tasks. ","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"    private Ui ui;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     * Constructs an instance of the Duke Chatbot.","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"     * @param filePath The filepath where task list data is stored. ","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"            this.storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"            this.tasks \u003d new TaskList(this.storage.loadTaskList()); ","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     * Runs the program until the \"bye\" instruction is inputted by the user and interprets the commonad word. ","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"    public void run() {","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"        this.ui \u003d new Ui(System.in); ","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"        System.out.println(this.ui.greet());","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"        String instr \u003d this.ui.getInstr(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"        while (!instr.equals(\"bye\")) {","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"            if (instr.equals(\"list\")) {","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"                this.tasks.listOut();","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"            } else {","lastModifiedDate":"2024-01-24"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"                String cmdWord \u003d instr.split(\" \")[0];","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"                try {","lastModifiedDate":"2024-01-24"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"                    if (cmdWord.equals(\"unmark\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"                        this.tasks.unmark(instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"                    } else if (cmdWord.equals(\"mark\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"                        this.tasks.mark(instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"                    } else if (cmdWord.equals(\"delete\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"                        this.tasks.delete(instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"                    } else if (cmdWord.equals(\"find\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"                        this.tasks.find(instr); ","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"                    }else {","lastModifiedDate":"2024-01-23"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"                        if (cmdWord.equals(\"todo\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"                            this.tasks.addTask(TaskList.TaskCommand.TODO, instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"                        } else if (cmdWord.equals(\"deadline\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"                            this.tasks.addTask(TaskList.TaskCommand.DEADLINE, instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"                        } else if (cmdWord.equals(\"event\")) {","lastModifiedDate":"2024-01-24"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"                            this.tasks.addTask(TaskList.TaskCommand.EVENT, instr, this.storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"                        } else {","lastModifiedDate":"2024-01-24"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"                            throw new DukeException(\"OOPS!!! What is that? I\u0027m sorry, but I don\u0027t recognise this command :-( \\nTry another command!\"); ","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"                        } ","lastModifiedDate":"2024-01-24"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"                    }","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"                    System.out.println(e.toString());","lastModifiedDate":"2024-01-24"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"                }","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"            }  ","lastModifiedDate":"2024-01-23"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"            instr \u003d this.ui.getInstr(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":66,"author":{"gitId":"yleeyilin"},"content":"        System.out.println(this.ui.exit());","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"yleeyilin"},"content":"        this.ui.close();","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"yleeyilin"},"content":"     * Calls the constructor and is the entry point of the program. ","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"yleeyilin"},"content":"     * @param args Input by the user ","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"yleeyilin"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"yleeyilin"},"content":"        new Duke(\"src/main/data/caching.txt\").run();","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"yleeyilin":76}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":" * Represents the class of exception thrown by Duke Chatbot. ","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"     * Constructs a DukeException with a specific error message. ","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"     * @param errormessage The message that tells the user the source of error. ","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"    public DukeException(String errormessage) {","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"        super(errormessage); ","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"yleeyilin":16}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import java.io.File;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"import duke.task.Event;","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"import duke.task.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":" * Represents the class that is in charge of reading and writing to and from local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"public class Storage {","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"    /*","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     * Represents the path of the file that stores the task list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"    private String filePath; ","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"     * Constructor that creates an instance of the file if it does not exists.","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"     * @param filePath Represents the path of the file that stores the task list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"        this.filePath \u003d filePath; ","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"                file.createNewFile();","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"                new DukeException(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"     * Saves the task list into the file by writing it in the specified filePath.","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"     * @param instrList The updated list of tasks from the users.","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException Thrown when there is an invalid item in the task list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"    public void saveTaskList(ArrayList\u003cTask\u003e instrList) throws DukeException {","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath); ","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"            for (Task tsk : instrList) {","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"                fw.write(tsk.toSave()); ","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"                fw.write(\"\\n\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"            fw.close(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOOPS! Invalid Item in Task List, please rectify!!!\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"    } ","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"     * Reads from the specified filePath and writes into a new ArrayList. ","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"yleeyilin"},"content":"     * @return Returns an ArrayList containing the list of tasks from local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException Thrown when the file is not accessible in the specifiec filepath.  ","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"yleeyilin"},"content":"    public ArrayList\u003cTask\u003e loadTaskList() throws DukeException {","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"yleeyilin"},"content":"        ArrayList\u003cTask\u003e tskList \u003d new ArrayList\u003c\u003e(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"yleeyilin"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"yleeyilin"},"content":"            if (f.exists()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"yleeyilin"},"content":"                try (Scanner sc \u003d new Scanner(f)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"yleeyilin"},"content":"                    while (sc.hasNext()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"yleeyilin"},"content":"                        Task tsk \u003d deconstruct(sc.nextLine()); ","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"yleeyilin"},"content":"                        tskList.add(tsk); ","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"yleeyilin"},"content":"                    }","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"yleeyilin"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"yleeyilin"},"content":"            } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOOPS!! File \u0027\" + this.filePath + \"\u0027 not found in local drive. Please check your working folder!\");  ","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"yleeyilin"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"An error occurred while reading the file: \" + e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"yleeyilin"},"content":"        return tskList; ","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"yleeyilin"},"content":"    }    ","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":90,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"yleeyilin"},"content":"     * Construct task objects from the String format in local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"yleeyilin"},"content":"     * @param fileStr String line in the local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"yleeyilin"},"content":"    public Task deconstruct(String fileStr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"yleeyilin"},"content":"        String[] arr \u003d fileStr.split(\"\\\\|\"); ","lastModifiedDate":"2024-01-29"},{"lineNumber":97,"author":{"gitId":"yleeyilin"},"content":"        Boolean isDone \u003d arr[1].equals(\"1\") ? true : false;","lastModifiedDate":"2024-01-28"},{"lineNumber":98,"author":{"gitId":"yleeyilin"},"content":"        if (arr[0].equals(\"T\")) {","lastModifiedDate":"2024-01-28"},{"lineNumber":99,"author":{"gitId":"yleeyilin"},"content":"            return new Todo(arr[2], isDone); ","lastModifiedDate":"2024-01-28"},{"lineNumber":100,"author":{"gitId":"yleeyilin"},"content":"        } else if (arr[0].equals(\"D\")) {","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"yleeyilin"},"content":"            return new Deadline(arr[2], arr[3], isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":102,"author":{"gitId":"yleeyilin"},"content":"        } else if (arr[0].equals(\"E\")) {","lastModifiedDate":"2024-01-28"},{"lineNumber":103,"author":{"gitId":"yleeyilin"},"content":"            return new Event(arr[2], arr[3], arr[4], isDone); ","lastModifiedDate":"2024-01-29"},{"lineNumber":104,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"yleeyilin"},"content":"        return null; ","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":107,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":107}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"import java.io.InputStream;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":" * Represents the interface that the user interacts with. ","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"public class Ui {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"    private Scanner sc; ","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"     * Constructs an instance of UI. ","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"     * @param inputstream References the system input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    public Ui(InputStream inputstream) {","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"        this.sc \u003d new Scanner(inputstream); ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"     * Retreives the next instruction in the following line. ","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"     * @return The next instruction. ","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"    public String getInstr() {","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"        return this.sc.nextLine(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"     * Closes the scanner. ","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"    public void close() {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"        this.sc.close();","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"     * Takes care of the intialisation response. ","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"     * @return A string of output for the user as the chatbot boots up. ","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"    public String greet() {","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"        return \"Hello! I\u0027m YLEXI. \\nWhat can I do for you?\"; ","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"     * Takes case of the response as the user exits. ","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"     * @return A string of output for the user as the chatbot ends. ","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"    public String exit() {","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":54}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import duke.DateFormatter;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":" * Represents the deadline task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"     * Represents the deadline of this task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    protected String by;","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"     * Constructor to instantiate a deadline task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is. ","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * @param by Represent the deadline of the task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"        DateFormatter dateFormat \u003d new DateFormatter(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"        this.by \u003d dateFormat.convertedDate(by);","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"     * Overloaded constructor to instantiate a deadline task with a specific checkmark.","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is. ","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"     * @param by Represent the deadline of the task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"     * @param isDone Represents the boolean describing whether the task is checked.","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"    public Deadline(String description, String by, Boolean isDone) {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"        super(description, isDone); ","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"        DateFormatter dateFormat \u003d new DateFormatter(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"        this.by \u003d dateFormat.convertedDate(by);","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"     * Returns a string formatting of the deadline task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"     * @return A string representation of the deadline task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"     * Returns a special string formmating of the deadline task to write into local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"     * @return A special string representation of the deadline task used in the local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"    public String toSave() {","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"        String strDone \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"        return \"D|\" + strDone + \"|\" + this.description + \"|\" + this.by;","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"yleeyilin":59}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"/*","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":" * Represents the event task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"    /*","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"     * Represents the start time of the event. ","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"    protected String start;","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    /*","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"     * Represents the end time of the event. ","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    protected String end;","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * Constructor to instantiate an event task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is.","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"     * @param start Represents the start time of the event.","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"     * @param end Represents the end time of the event. ","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"        this.end \u003d end; ","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"     * Overloaded constructor to instantiate an event task with a specific checkmark. ","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is.","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"     * @param start Represents the start time of the event.","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"     * @param end Represents the end time of the event. ","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"     * @param isDone Represents the boolean describing whether the task is checked.","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"    public Event(String description, String start, String end, Boolean isDone) {","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"        this.start \u003d start;","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"        this.end \u003d end; ","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"     * Returns a string formatting of the events task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"     * @return A string representation of the events task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.start + \" to: \" + this.end + \")\";","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"     * Returns a special string formmating of the events task to write into local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"     * @return A special string representation of the events task used in the local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"    public String toSave() {","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"        String strDone \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"        return \"E|\" + strDone + \"|\" + this.description + \"|\" + this.start + \"|\" + this.end;","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"yleeyilin":64}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":" * Represents a general task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"public class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"     * Describes the task that the user has to do.  ","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"    public String description;","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"     * Represents whether a task has be completed. ","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * Constructor that creates an instance of a task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"     * @param description Describes the task that the user has to do. ","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     * Overloaded constructor to instantiate a todo task with a specific checkmark.","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"     * @param description Describes the task that the user has to do.","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"     * @param isDone Represents the boolean describing whether the task is checked.","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"     * Retrieves the string version of a boolean isDone. ","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"     * @return A String that represents if a task has been completed or not. ","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"     * Returns a string formatting of the task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"     * @return A string representation of the task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description; ","lastModifiedDate":"2024-01-23"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"     * Checks the specified task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"     * @return The string of the task that has been completed. ","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"    public String markAsDone() {","lastModifiedDate":"2024-01-24"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"        this.isDone \u003d true; ","lastModifiedDate":"2024-01-23"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"        return this.toString(); ","lastModifiedDate":"2024-01-24"},{"lineNumber":65,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":66,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"yleeyilin"},"content":"     * Unchecks the specified task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"yleeyilin"},"content":"     * @return The string of the task that has been marked as incompleted. ","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"yleeyilin"},"content":"    public String markAsUndone() {","lastModifiedDate":"2024-01-24"},{"lineNumber":73,"author":{"gitId":"yleeyilin"},"content":"        this.isDone \u003d false; ","lastModifiedDate":"2024-01-23"},{"lineNumber":74,"author":{"gitId":"yleeyilin"},"content":"        return this.toString(); ","lastModifiedDate":"2024-01-24"},{"lineNumber":75,"author":{"gitId":"yleeyilin"},"content":"    } ","lastModifiedDate":"2024-01-23"},{"lineNumber":76,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"yleeyilin"},"content":"     * Retrieves the string format of a general task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"yleeyilin"},"content":"     * @return The string of the task that is to be stored in local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"yleeyilin"},"content":"    public String toSave() {","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"yleeyilin"},"content":"        String strDone \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"yleeyilin"},"content":"        return strDone + \"|\" + this.description;","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"yleeyilin":86}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"import duke.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":" * Represents the management of the task list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"public class TaskList {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"     * Tracks the list of task inputteed by the user. ","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    public ArrayList\u003cTask\u003e instrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * Constructor that creates an instance of task list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"     * @param arr The current instruction list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"    public TaskList(ArrayList\u003cTask\u003e arr) {","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"        this.instrList \u003d arr; ","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"     * Enums for tasks. ","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"    public enum TaskCommand {","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"     * Prints out the tasks in the instruction list. ","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"    public void listOut() {","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"        for (int i \u003d 0; i \u003c this.instrList.size() ; i++) {","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(i + 1 + \".\" + this.instrList.get(i).toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"     * Adds tasks to the list based of what tasks they are. ","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"     * @param cmd Represents the type of the task.","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"yleeyilin"},"content":"     * @param instr The string with the task information. ","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"yleeyilin"},"content":"     * @param thisStorage Local file access management. ","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException When there is inappropriate input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"yleeyilin"},"content":"    public void addTask(TaskCommand cmd, String instr, Storage thisStorage) throws DukeException {","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"yleeyilin"},"content":"        switch (cmd) {","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"yleeyilin"},"content":"        case TODO: ","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"yleeyilin"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"yleeyilin"},"content":"                Todo taskTodo \u003d new Todo(instr.split(\"todo \")[1]);","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"yleeyilin"},"content":"                this.instrList.add(taskTodo); ","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"yleeyilin"},"content":"                thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(taskTodo.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"yleeyilin"},"content":"            } catch (ArrayIndexOutOfBoundsException e ){","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty. \\nTry again!\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"yleeyilin"},"content":"            break;","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"yleeyilin"},"content":"        case DEADLINE: ","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"yleeyilin"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"yleeyilin"},"content":"                String deadlineDescription \u003d instr.substring(9);","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"yleeyilin"},"content":"                String[] tskNames \u003d deadlineDescription.split(\" /by \");","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"yleeyilin"},"content":"                Deadline taskDeadline \u003d new Deadline(tskNames[0], tskNames[1]); ","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"yleeyilin"},"content":"                this.instrList.add(taskDeadline); ","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"yleeyilin"},"content":"                thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":73,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(taskDeadline.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"yleeyilin"},"content":"            } catch(StringIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOPS!!! You cannot leave the description of a deadline to be empty. \\nTry again!\");","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"yleeyilin"},"content":"            } catch(ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOPS!!! You missed out the deadline time of this task. \\nTry again!\");","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"yleeyilin"},"content":"            break;","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"yleeyilin"},"content":"        case EVENT: ","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"yleeyilin"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"yleeyilin"},"content":"                String eventDescription \u003d instr.substring(6);","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"yleeyilin"},"content":"                String[] instrsubString \u003d eventDescription.split(\" /from \");","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"yleeyilin"},"content":"                String name \u003d instrsubString[0]; ","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"yleeyilin"},"content":"                String[] startAndEnd \u003d instrsubString[1].split(\" /to \"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"yleeyilin"},"content":"                Event taskEvent \u003d new Event(name, startAndEnd[0], startAndEnd[1]);","lastModifiedDate":"2024-01-29"},{"lineNumber":88,"author":{"gitId":"yleeyilin"},"content":"                this.instrList.add(taskEvent); ","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"yleeyilin"},"content":"                thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":90,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"yleeyilin"},"content":"                System.out.println(taskEvent.toString()); ","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"yleeyilin"},"content":"            } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOPS!!! You cannot leave the description of an event to be empty. \\nTry again!\");","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"yleeyilin"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"yleeyilin"},"content":"                throw new DukeException(\"OOPS!!! You missed out the date of this task. \\nTry again!\");","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":97,"author":{"gitId":"yleeyilin"},"content":"            break;","lastModifiedDate":"2024-01-28"},{"lineNumber":98,"author":{"gitId":"yleeyilin"},"content":"        ","lastModifiedDate":"2024-01-28"},{"lineNumber":99,"author":{"gitId":"yleeyilin"},"content":"        default:","lastModifiedDate":"2024-01-28"},{"lineNumber":100,"author":{"gitId":"yleeyilin"},"content":"        throw new DukeException(\"OOPS!!! What is that? I\u0027m sorry, but I don\u0027t recognise this command :-( \\nTry another command!\");  ","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"yleeyilin"},"content":"        }              ","lastModifiedDate":"2024-01-28"},{"lineNumber":102,"author":{"gitId":"yleeyilin"},"content":"        System.out.println(\"Now you have \" + this.instrList.size() + \" tasks in the list.\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":103,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":104,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"yleeyilin"},"content":"     * Marks the task off the list if the user commands it to. ","lastModifiedDate":"2024-01-28"},{"lineNumber":107,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"yleeyilin"},"content":"     * @param instr The string with the task information. ","lastModifiedDate":"2024-01-28"},{"lineNumber":109,"author":{"gitId":"yleeyilin"},"content":"     * @param thisStorage Local file access management. ","lastModifiedDate":"2024-01-29"},{"lineNumber":110,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException When there is inappropriate input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":111,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":112,"author":{"gitId":"yleeyilin"},"content":"    public void mark(String instr, Storage thisStorage) throws DukeException {","lastModifiedDate":"2024-01-29"},{"lineNumber":113,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":114,"author":{"gitId":"yleeyilin"},"content":"            int instrNum \u003d Integer.valueOf(instr.split(\" \")[1]) - 1;","lastModifiedDate":"2024-01-28"},{"lineNumber":115,"author":{"gitId":"yleeyilin"},"content":"            String res \u003d this.instrList.get(instrNum).markAsDone(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":116,"author":{"gitId":"yleeyilin"},"content":"            thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":117,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + res); ","lastModifiedDate":"2024-01-28"},{"lineNumber":118,"author":{"gitId":"yleeyilin"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":119,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOPS!! You have inputted an invalid task number. \\nTry again with a different task number!\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":120,"author":{"gitId":"yleeyilin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":121,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOOPS!!! You missed out the task number.\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":122,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":123,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":124,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":125,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":126,"author":{"gitId":"yleeyilin"},"content":"     * Unmark a task if the user commands it to. ","lastModifiedDate":"2024-01-28"},{"lineNumber":127,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":128,"author":{"gitId":"yleeyilin"},"content":"     * @param instr The string with the task information. ","lastModifiedDate":"2024-01-28"},{"lineNumber":129,"author":{"gitId":"yleeyilin"},"content":"     * @param thidStorage Local file access management. ","lastModifiedDate":"2024-01-29"},{"lineNumber":130,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException When there is inappropriate input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":131,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":132,"author":{"gitId":"yleeyilin"},"content":"    public void unmark(String instr, Storage thisStorage) throws DukeException {","lastModifiedDate":"2024-01-29"},{"lineNumber":133,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":134,"author":{"gitId":"yleeyilin"},"content":"            int instrNum \u003d Integer.valueOf(instr.split(\" \")[1]) - 1;","lastModifiedDate":"2024-01-28"},{"lineNumber":135,"author":{"gitId":"yleeyilin"},"content":"            String res \u003d this.instrList.get(instrNum).markAsUndone(); ","lastModifiedDate":"2024-01-28"},{"lineNumber":136,"author":{"gitId":"yleeyilin"},"content":"            thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":137,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\" + \"\\n\" + res); ","lastModifiedDate":"2024-01-28"},{"lineNumber":138,"author":{"gitId":"yleeyilin"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":139,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOPS!! You have inputted an invalid task number. \\nTry again with a different task number!\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":140,"author":{"gitId":"yleeyilin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":141,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOOPS!!! You missed out the task number.\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":142,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":143,"author":{"gitId":"yleeyilin"},"content":"    } ","lastModifiedDate":"2024-01-28"},{"lineNumber":144,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":145,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":146,"author":{"gitId":"yleeyilin"},"content":"     * Deletes a task if the user commands it to. ","lastModifiedDate":"2024-01-28"},{"lineNumber":147,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":148,"author":{"gitId":"yleeyilin"},"content":"     * @param instr The string with the task information. ","lastModifiedDate":"2024-01-28"},{"lineNumber":149,"author":{"gitId":"yleeyilin"},"content":"     * @param thisStorage Local file access management. ","lastModifiedDate":"2024-01-29"},{"lineNumber":150,"author":{"gitId":"yleeyilin"},"content":"     * @throws DukeException When there is inappropriate input. ","lastModifiedDate":"2024-01-28"},{"lineNumber":151,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":152,"author":{"gitId":"yleeyilin"},"content":"    public void delete(String instr, Storage thisStorage) throws DukeException { ","lastModifiedDate":"2024-01-29"},{"lineNumber":153,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":154,"author":{"gitId":"yleeyilin"},"content":"            int ptr \u003d Integer.valueOf(instr.split(\" \")[1]) - 1; ","lastModifiedDate":"2024-01-28"},{"lineNumber":155,"author":{"gitId":"yleeyilin"},"content":"            Task str \u003d this.instrList.get(ptr); ","lastModifiedDate":"2024-01-28"},{"lineNumber":156,"author":{"gitId":"yleeyilin"},"content":"            this.instrList.remove(ptr); ","lastModifiedDate":"2024-01-28"},{"lineNumber":157,"author":{"gitId":"yleeyilin"},"content":"            thisStorage.saveTaskList(this.instrList);","lastModifiedDate":"2024-01-29"},{"lineNumber":158,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + str.toString() + \"\\nNow you have \" + this.instrList.size() + \" tasks in the list.\");","lastModifiedDate":"2024-01-28"},{"lineNumber":159,"author":{"gitId":"yleeyilin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":160,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOOPS!!! You missed out the task number.\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":161,"author":{"gitId":"yleeyilin"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":162,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOPS!! You have inputted an invalid task number. \\nTry again with a different task number!\"); ","lastModifiedDate":"2024-01-28"},{"lineNumber":163,"author":{"gitId":"yleeyilin"},"content":"        } ","lastModifiedDate":"2024-01-28"},{"lineNumber":164,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":165,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":166,"author":{"gitId":"yleeyilin"},"content":"    public void find(String instr) throws DukeException {","lastModifiedDate":"2024-01-29"},{"lineNumber":167,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":168,"author":{"gitId":"yleeyilin"},"content":"            String taskKeyword \u003d instr.split(\" \")[1]; ","lastModifiedDate":"2024-01-29"},{"lineNumber":169,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-01-29"},{"lineNumber":170,"author":{"gitId":"yleeyilin"},"content":"            int ctr \u003d 1; ","lastModifiedDate":"2024-01-29"},{"lineNumber":171,"author":{"gitId":"yleeyilin"},"content":"            for (int i \u003d 0; i \u003c this.instrList.size() ; i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":172,"author":{"gitId":"yleeyilin"},"content":"                if (this.instrList.get(i).description.contains(taskKeyword)) {","lastModifiedDate":"2024-01-29"},{"lineNumber":173,"author":{"gitId":"yleeyilin"},"content":"                    System.out.println(ctr + 1 + \".\" + this.instrList.get(i).toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":174,"author":{"gitId":"yleeyilin"},"content":"                }","lastModifiedDate":"2024-01-29"},{"lineNumber":175,"author":{"gitId":"yleeyilin"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":176,"author":{"gitId":"yleeyilin"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":177,"author":{"gitId":"yleeyilin"},"content":"            throw new DukeException(\"OOOPS!!! You missed out the task to search for.\"); ","lastModifiedDate":"2024-01-29"},{"lineNumber":178,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":179,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":180,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":180}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":" * Represents the todo task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"     * Constructor to instantiate a todo task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is. ","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"     * Overloaded constructor to instantiate a todo task with a specific checkmark. ","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"     * @param description Represents the string describing what the task is. ","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"     * @param isDone Represents the boolean describing whether the task is checked. ","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"        super(description, isDone); ","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"     * Returns a string formatting of the todo task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"     * @return A string representation of the todo task. ","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"     * Returns a special string formmating of the todo task to write into local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"     * ","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"yleeyilin"},"content":"     * @return A special string representation of the todo task used in the local file. ","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"yleeyilin"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"yleeyilin"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"yleeyilin"},"content":"    public String toSave() {","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"yleeyilin"},"content":"        String strDone \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"yleeyilin"},"content":"        return \"T|\" + strDone + \"|\" + this.description;","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"yleeyilin":47}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"    public void toStringTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"        Deadline tsk \u003d new Deadline(\"project meeting\", \"Sunday\");","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"[D][ ] project meeting (by: Sunday)\", tsk.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    public void toSaveTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"        Deadline tsk \u003d new Deadline(\"project meeting\", \"Sunday\");","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"D|0|project meeting|Sunday\", tsk.toSave());","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"    public void dateTimeTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"        Deadline tsk \u003d new Deadline(\"return book\", \"2/12/2019 1800\");","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"D|0|return book|Dec 2 2019 6:00 PM\", tsk.toSave());","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    public void dateTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"        Deadline tsk \u003d new Deadline(\"return book\", \"2/12/2019\");","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"D|0|return book|Dec 2 2019\", tsk.toSave());","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":31}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"public class EventTest {","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"    public void toStringTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"        Event tsk \u003d new Event(\"project meeting\", \"Mon 2pm\", \"4pm\");","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"[E][ ] project meeting (from: Mon 2pm to: 4pm)\", tsk.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    public void toSaveTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"        Event tsk \u003d new Event(\"project meeting\", \"Mon 2pm\", \"4pm\");","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"E|0|project meeting|Mon 2pm|4pm\", tsk.toSave());","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":19}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import duke.DukeException;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"import duke.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"public class TaskListTest {","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    public void markTaskTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"            TaskList tskLst \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"            Storage storage \u003d new Storage(\"src/main/data/test/caching.txt\");","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"            tskLst.addTask(TaskList.TaskCommand.DEADLINE, \"deadline return book /by Sunday\", storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"yleeyilin"},"content":"            tskLst.mark(\"mark 1\", storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"yleeyilin"},"content":"            assertEquals(true, tskLst.instrList.get(0).isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"yleeyilin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"yleeyilin"},"content":"    public void unmarkTaskTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"yleeyilin"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"yleeyilin"},"content":"            TaskList tskLst \u003d new TaskList(new ArrayList\u003cTask\u003e());","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"yleeyilin"},"content":"            Storage storage \u003d new Storage(\"src/main/data/test/caching.txt\");","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"yleeyilin"},"content":"            tskLst.addTask(TaskList.TaskCommand.DEADLINE, \"deadline return book /by Sunday\", storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"yleeyilin"},"content":"            tskLst.unmark(\"unmark 1\", storage);","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"yleeyilin"},"content":"            assertEquals(false, tskLst.instrList.get(0).isDone);","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"yleeyilin"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"yleeyilin"},"content":"            System.out.println(e.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"yleeyilin"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":39}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"package duke.task;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"public class TodoTest {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"    public void toStringTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"        Todo tsk \u003d new Todo(\"borrow books\");","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"[T][ ] borrow books\", tsk.toString());","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"yleeyilin"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"yleeyilin"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"yleeyilin"},"content":"    public void toSaveTest(){","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"yleeyilin"},"content":"        Todo tsk \u003d new Todo(\"borrow books\");","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"yleeyilin"},"content":"        assertEquals(\"T|0|borrow books\", tsk.toSave());","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"yleeyilin"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"yleeyilin"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"yleeyilin":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yleeyilin"},"content":"todo borrow books","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"yleeyilin"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"yleeyilin"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"yleeyilin"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"yleeyilin"},"content":"mark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"yleeyilin"},"content":"mark 3 ","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"yleeyilin"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"yleeyilin"},"content":"unmark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"yleeyilin"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"yleeyilin"},"content":"bye","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"yleeyilin":10}}]
