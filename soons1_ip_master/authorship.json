[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"checkstyle {","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"soons1":4,"-":43}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":" * Represents a deadline task, a subclass of Task.","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":" * Deadline tasks have a description and a specified deadline date.","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     * The deadline date of the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    protected LocalDate by;","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"     * Constructs a new Deadline task with the given description and deadline date.","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"     * @param by          The deadline date of the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Deadline task.","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"     * The string includes the type of task (represented by \"[D]\"), the status (done or not done),","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"     * the task\u0027s description, and the deadline date.","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Deadline task.","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"        return \"[D]\" + super.getStatus() + \" \" + super.toString() + \" (by: \"","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Deadline task in a format suitable for saving to a file.","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"     * The format includes the task type, status, description, and deadline date.","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Deadline task in a save format.","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"        return \"D | \" + (super.isDone ? \"1\" : \"0\") + \" | \" + super.description + \" | \" + this.by;","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"     * Static method to create a Deadline task from its saved format.","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"     * The method parses a string array containing the saved information of the task and","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"     * reconstructs the Deadline task from this information.","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"     * @param info The array of strings containing the task\u0027s saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"     * @return A Deadline task reconstructed from the saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"    public static Deadline fromSaveFormat(String[] info) {","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"        Deadline loadedTask \u003d new Deadline(info[2], LocalDate.parse(info[3]));","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"        if (info[1].equals(\"1\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"            loadedTask.markAsDone();","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"        return loadedTask;","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"soons1":67}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":" * Main class for the Duke task management application.","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":" * This class is responsible for initializing the application, processing input commands,","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":" * and maintaining the main application loop.","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"    private final Storage storage;","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"    private final Ui ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     * Constructs a new Duke object.","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     * Initializes the user interface, storage, and task list components of the application.","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"     * Tries to load existing tasks from the storage; if unsuccessful, starts with an empty task list.","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"     * @param filePath The file path where tasks are stored and retrieved from.","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"     * Runs the main application loop.","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"     * Continuously reads user input commands and processes them until the \"bye\" command is entered.","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"     * Before exiting, saves the current state of tasks to the storage.","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"     * @throws IOException If an I/O error occurs while reading user input.","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"    public void run() throws IOException {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"        ui.greet();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"        String command;","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"        while (!(command \u003d br.readLine()).equals(\"bye\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"            try {","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"                Parser.checkCmd(this.tasks, command);","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"                Ui.beautify(de.getMessage());","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"            }","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"        storage.save(tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"        ui.exit();","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"     * The entry point of the application.","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"     * Creates a new Duke instance and runs it.","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"     * @throws IOException If an I/O error occurs in the run method.","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"soons1":66,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":" * Represents a custom exception class specific to the Duke application.","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":" * DukeException is thrown to handle application-specific errors and exceptions.","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"     * @param errorMsg The error message associated with the exception.","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"    public DukeException(String errorMsg) {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"        super(errorMsg);","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":" * Represents an event task, a subclass of Task.","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":" * Event tasks have a description and a specified start and end date.","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     * The start date of the event.","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    protected LocalDate from;","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"     * The end date of the event.","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"    protected LocalDate to;","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"     * Constructs a new Event task with the given description, start date, and end date.","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"     * @param from        The start date of the event.","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"     * @param to          The end date of the event.","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"    public Event(String description, LocalDate from, LocalDate to) {","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Event task.","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"     * The string includes the type of task (represented by \"[E]\"), the status (done or not done),","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"     * the task\u0027s description, and the start and end dates of the event.","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Event task.","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"        return \"[E]\" + super.getStatus() + \" \" + super.toString() + \" (from: \"","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"                + this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" to: \"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"                + this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Event task in a format suitable for saving to a file.","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"     * The format includes the task type, status, description, start date, and end date.","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Event task in a save format.","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"        return \"E | \" + (super.isDone ? \"1\" : \"0\") + \" | \" + super.description + \" | \" + this.from + \" | \" + this.to;","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"     * Static method to create an Event task from its saved format.","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"     * The method parses a string array containing the saved information of the task and","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"     * reconstructs the Event task from this information.","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"     * @param info The array of strings containing the task\u0027s saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"     * @return An Event task reconstructed from the saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"soons1"},"content":"    public static Event fromSaveFormat(String[] info) {","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"soons1"},"content":"        Event loadedTask \u003d new Event(info[2], LocalDate.parse(info[3]), LocalDate.parse(info[4]));","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"soons1"},"content":"        if (info[1].equals(\"1\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"soons1"},"content":"            loadedTask.markAsDone();","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"soons1"},"content":"        return loadedTask;","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"soons1":75}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":" * The Parser class is responsible for interpreting and processing user commands.","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":" * It provides various static methods to handle different types of tasks and commands.","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"public class Parser {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     * Processes the user command and directs it to the appropriate method.","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"     * Supports a variety of commands such as adding, deleting, and listing tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList to perform operations on.","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"     * @param cmd The user input command to be processed.","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the command is invalid or incorrectly used.","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"    public static void checkCmd(TaskList tl, String cmd) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"        String[] commandArr \u003d cmd.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"        switch (commandArr[0]) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"        case \"list\":","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"            printLst(tl);","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"        case \"find\":","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"            findTask(tl, commandArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"            markTask(tl, commandArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"            unmarkTask(tl, commandArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"            addTodo(tl, commandArr, cmd);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"            addDeadline(tl, commandArr, cmd);","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"        case \"event\":","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"            addEvent(tl, commandArr, cmd);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"            deleteTask(tl, commandArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"            break;","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"        default:","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"            throw new DukeException(String.format(\" Sorry, %s is not a valid command :(\", cmd));","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"     * Prints all tasks in the TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"     * Outputs a formatted list of tasks or a message if the list is empty.","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList containing the tasks to be printed.","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"    public static void printLst(TaskList tl) {","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"        StringBuilder toPrint \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"        if (tl.getLst().isEmpty()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"            toPrint.append(\" Whoops! Your list is empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"            toPrint.append(\" Here are the tasks in your list:\");","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"            for (int i \u003d 0; i \u003c tl.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"                String taskPrintout \u003d \"\\n   \" + (i + 1) + \".\" + tl.get(i).toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"                toPrint.append(taskPrintout);","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"soons1"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint.toString());","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"soons1"},"content":"     * Adds a Todo task to the TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"soons1"},"content":"     * Validates and extracts task details from the command before adding the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList to add the Todo task to.","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"soons1"},"content":"     * @param cmd The full user command string.","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the Todo task description is empty.","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"soons1"},"content":"    public static void addTodo(TaskList tl, String[] commandArr, String cmd) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the description of a todo cannot be empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"soons1"},"content":"        String todo \u003d cmd.substring(5);","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"soons1"},"content":"        Task newTodo \u003d new Todo(todo);","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"soons1"},"content":"        tl.addTask(newTodo);","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + newTodo + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \" Now you have \" + tl.size() + \" tasks in the list.\";","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"soons1"},"content":"     * Adds a Deadline task to the TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"soons1"},"content":"     * Validates and extracts task details including the deadline date from the command.","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList to add the Deadline task to.","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"soons1"},"content":"     * @param cmd The full user command string.","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the Deadline description or date is empty or incorrectly formatted.","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":104,"author":{"gitId":"soons1"},"content":"    public static void addDeadline(TaskList tl, String[] commandArr, String cmd) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":105,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the description and date of a deadline cannot be empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"soons1"},"content":"        String[] deadlineArr \u003d cmd.substring(9).split(\" /by \");","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"soons1"},"content":"        if (deadlineArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the date of a deadline cannot be empty :(\\n%s\");","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"soons1"},"content":"        LocalDate by;","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"soons1"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"soons1"},"content":"            by \u003d LocalDate.parse(deadlineArr[1]);","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"soons1"},"content":"        } catch (DateTimeParseException dateTimeParseE) {","lastModifiedDate":"2024-01-31"},{"lineNumber":116,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the date of a deadline in the format YYYY-MM-DD\");","lastModifiedDate":"2024-01-31"},{"lineNumber":117,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":118,"author":{"gitId":"soons1"},"content":"        Task newDeadline \u003d new Deadline(deadlineArr[0], by);","lastModifiedDate":"2024-01-31"},{"lineNumber":119,"author":{"gitId":"soons1"},"content":"        tl.addTask(newDeadline);","lastModifiedDate":"2024-01-31"},{"lineNumber":120,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":121,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + newDeadline + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":122,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \" Now you have \" + tl.size() + \" tasks in the list.\";","lastModifiedDate":"2024-01-31"},{"lineNumber":123,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":124,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":125,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":126,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":127,"author":{"gitId":"soons1"},"content":"     * Adds an Event task to the TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":128,"author":{"gitId":"soons1"},"content":"     * Validates and extracts task details including the event start and end dates from the command.","lastModifiedDate":"2024-01-31"},{"lineNumber":129,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":130,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList to add the Event task to.","lastModifiedDate":"2024-01-31"},{"lineNumber":131,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":132,"author":{"gitId":"soons1"},"content":"     * @param cmd The full user command string.","lastModifiedDate":"2024-01-31"},{"lineNumber":133,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the Event description or dates are empty or incorrectly formatted.","lastModifiedDate":"2024-01-31"},{"lineNumber":134,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":135,"author":{"gitId":"soons1"},"content":"    public static void addEvent(TaskList tl, String[] commandArr, String cmd) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":136,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":137,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the description and start and end dates of an event cannot be empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":138,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":139,"author":{"gitId":"soons1"},"content":"        String[] eventFromArr \u003d cmd.substring(6).split(\" /from \");","lastModifiedDate":"2024-01-31"},{"lineNumber":140,"author":{"gitId":"soons1"},"content":"        if (eventFromArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":141,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the start and end dates of an event cannot be empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":142,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":143,"author":{"gitId":"soons1"},"content":"        String[] eventToArr \u003d eventFromArr[1].split(\" /to \");","lastModifiedDate":"2024-01-31"},{"lineNumber":144,"author":{"gitId":"soons1"},"content":"        if (eventToArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":145,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, the end date of an event cannot be empty :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":147,"author":{"gitId":"soons1"},"content":"        LocalDate from;","lastModifiedDate":"2024-01-31"},{"lineNumber":148,"author":{"gitId":"soons1"},"content":"        LocalDate to;","lastModifiedDate":"2024-01-31"},{"lineNumber":149,"author":{"gitId":"soons1"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":150,"author":{"gitId":"soons1"},"content":"            from \u003d LocalDate.parse(eventToArr[0]);","lastModifiedDate":"2024-01-31"},{"lineNumber":151,"author":{"gitId":"soons1"},"content":"            to \u003d LocalDate.parse(eventToArr[1]);","lastModifiedDate":"2024-01-31"},{"lineNumber":152,"author":{"gitId":"soons1"},"content":"        } catch (DateTimeParseException dateTimeParseE) {","lastModifiedDate":"2024-01-31"},{"lineNumber":153,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the dates of an event in the format YYYY-MM-DD\");","lastModifiedDate":"2024-01-31"},{"lineNumber":154,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":155,"author":{"gitId":"soons1"},"content":"        if (from.isAfter(to)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":156,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the start date of an event before/on the end date\");","lastModifiedDate":"2024-01-31"},{"lineNumber":157,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":158,"author":{"gitId":"soons1"},"content":"        Task newEvent \u003d new Event(eventFromArr[0], from, to);","lastModifiedDate":"2024-01-31"},{"lineNumber":159,"author":{"gitId":"soons1"},"content":"        tl.addTask(newEvent);","lastModifiedDate":"2024-01-31"},{"lineNumber":160,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":161,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + newEvent + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":162,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \" Now you have \" + tl.size() + \" tasks in the list.\";","lastModifiedDate":"2024-01-31"},{"lineNumber":163,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":164,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":165,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":166,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":167,"author":{"gitId":"soons1"},"content":"     * Finds and lists all tasks in the TaskList that contain the given keyword.","lastModifiedDate":"2024-01-31"},{"lineNumber":168,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":169,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList to search for tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":170,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":171,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the search keyword is not provided.","lastModifiedDate":"2024-01-31"},{"lineNumber":172,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":173,"author":{"gitId":"soons1"},"content":"    public static void findTask(TaskList tl, String[] commandArr) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":174,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":175,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input what you want me to find\");","lastModifiedDate":"2024-01-31"},{"lineNumber":176,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":177,"author":{"gitId":"soons1"},"content":"        String keyword \u003d commandArr[1];","lastModifiedDate":"2024-01-31"},{"lineNumber":178,"author":{"gitId":"soons1"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d tl.find(keyword);","lastModifiedDate":"2024-01-31"},{"lineNumber":179,"author":{"gitId":"soons1"},"content":"        StringBuilder toPrint \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":180,"author":{"gitId":"soons1"},"content":"        toPrint.append(\" Here are the matching tasks in your list:\");","lastModifiedDate":"2024-01-31"},{"lineNumber":181,"author":{"gitId":"soons1"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-01-31"},{"lineNumber":182,"author":{"gitId":"soons1"},"content":"        for (Task t : foundTasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":183,"author":{"gitId":"soons1"},"content":"            String taskPrintout \u003d \"\\n   \" + (count + 1) + \".\" + t.toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":184,"author":{"gitId":"soons1"},"content":"            toPrint.append(taskPrintout);","lastModifiedDate":"2024-01-31"},{"lineNumber":185,"author":{"gitId":"soons1"},"content":"            count++;","lastModifiedDate":"2024-01-31"},{"lineNumber":186,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":187,"author":{"gitId":"soons1"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2024-01-31"},{"lineNumber":188,"author":{"gitId":"soons1"},"content":"            toPrint \u003d new StringBuilder();","lastModifiedDate":"2024-01-31"},{"lineNumber":189,"author":{"gitId":"soons1"},"content":"            toPrint.append(\"\\n Whoops! No matching tasks found :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":190,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":191,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint.toString());","lastModifiedDate":"2024-01-31"},{"lineNumber":192,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":193,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":194,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":195,"author":{"gitId":"soons1"},"content":"     * Marks a task in the TaskList as done.","lastModifiedDate":"2024-01-31"},{"lineNumber":196,"author":{"gitId":"soons1"},"content":"     * Validates the task index before marking it.","lastModifiedDate":"2024-01-31"},{"lineNumber":197,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":198,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList containing the task to mark.","lastModifiedDate":"2024-01-31"},{"lineNumber":199,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":200,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the task index is invalid or not provided.","lastModifiedDate":"2024-01-31"},{"lineNumber":201,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":202,"author":{"gitId":"soons1"},"content":"    public static void markTask(TaskList tl, String[] commandArr) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":203,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":204,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the list index for me to mark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":205,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":206,"author":{"gitId":"soons1"},"content":"        if (!commandArr[1].matches(\"\\\\d+\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":207,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to mark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":208,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":209,"author":{"gitId":"soons1"},"content":"        int toMark \u003d Integer.parseInt(commandArr[1]);","lastModifiedDate":"2024-01-31"},{"lineNumber":210,"author":{"gitId":"soons1"},"content":"        if (toMark \u003e tl.size()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":211,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to mark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":212,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":213,"author":{"gitId":"soons1"},"content":"        tl.get(toMark - 1).markAsDone();","lastModifiedDate":"2024-01-31"},{"lineNumber":214,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":215,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + tl.get(toMark - 1).toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":216,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":217,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":218,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":219,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":220,"author":{"gitId":"soons1"},"content":"     * Marks a task in the TaskList as not done.","lastModifiedDate":"2024-01-31"},{"lineNumber":221,"author":{"gitId":"soons1"},"content":"     * Validates the task index before unmarking it.","lastModifiedDate":"2024-01-31"},{"lineNumber":222,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":223,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList containing the task to unmark.","lastModifiedDate":"2024-01-31"},{"lineNumber":224,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":225,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the task index is invalid or not provided.","lastModifiedDate":"2024-01-31"},{"lineNumber":226,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":227,"author":{"gitId":"soons1"},"content":"    public static void unmarkTask(TaskList tl, String[] commandArr) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":228,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":229,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the list index for me to unmark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":230,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":231,"author":{"gitId":"soons1"},"content":"        if (!commandArr[1].matches(\"\\\\d+\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":232,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to unmark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":233,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":234,"author":{"gitId":"soons1"},"content":"        int toUnmark \u003d Integer.parseInt(commandArr[1]);","lastModifiedDate":"2024-01-31"},{"lineNumber":235,"author":{"gitId":"soons1"},"content":"        if (toUnmark \u003e tl.size()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":236,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to unmark\");","lastModifiedDate":"2024-01-31"},{"lineNumber":237,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":238,"author":{"gitId":"soons1"},"content":"        tl.get(toUnmark - 1).markAsUndone();","lastModifiedDate":"2024-01-31"},{"lineNumber":239,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" OK! I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":240,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + tl.get(toUnmark - 1).toString();","lastModifiedDate":"2024-01-31"},{"lineNumber":241,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":242,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":243,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":244,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":245,"author":{"gitId":"soons1"},"content":"     * Deletes a task from the TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":246,"author":{"gitId":"soons1"},"content":"     * Validates the task index before deleting it.","lastModifiedDate":"2024-01-31"},{"lineNumber":247,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":248,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList containing the task to delete.","lastModifiedDate":"2024-01-31"},{"lineNumber":249,"author":{"gitId":"soons1"},"content":"     * @param commandArr The array of strings representing the split user command.","lastModifiedDate":"2024-01-31"},{"lineNumber":250,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the task index is invalid or not provided.","lastModifiedDate":"2024-01-31"},{"lineNumber":251,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":252,"author":{"gitId":"soons1"},"content":"    public static void deleteTask(TaskList tl, String[] commandArr) throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":253,"author":{"gitId":"soons1"},"content":"        if (commandArr.length \u003d\u003d 1) {","lastModifiedDate":"2024-01-31"},{"lineNumber":254,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input the list index for me to delete\");","lastModifiedDate":"2024-01-31"},{"lineNumber":255,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":256,"author":{"gitId":"soons1"},"content":"        if (!commandArr[1].matches(\"\\\\d+\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":257,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to delete\");","lastModifiedDate":"2024-01-31"},{"lineNumber":258,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":259,"author":{"gitId":"soons1"},"content":"        int toDelete \u003d Integer.parseInt(commandArr[1]);","lastModifiedDate":"2024-01-31"},{"lineNumber":260,"author":{"gitId":"soons1"},"content":"        if (toDelete \u003e tl.size()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":261,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\" Sorry, please input a valid list index for me to delete\");","lastModifiedDate":"2024-01-31"},{"lineNumber":262,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":263,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Noted. I\u0027ve removed this task\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":264,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \"   \" + tl.get(toDelete - 1).toString() + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":265,"author":{"gitId":"soons1"},"content":"        tl.deleteTask(toDelete - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":266,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \" Now you have \" + tl.size() + \" tasks in the list.\";","lastModifiedDate":"2024-01-31"},{"lineNumber":267,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":268,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":269,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":269}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":" * The Storage class handles the loading and saving of tasks to and from a file.","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":" * It provides functionality to read tasks from a file and write tasks back to the file,","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":" * allowing for persistent storage of tasks across application sessions.","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"public class Storage {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    private final File f;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"     * Constructs a new Storage object.","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     * Initializes a File object to handle read and write operations to the specified file path.","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"     * @param filePath The file path used for storing and retrieving task data.","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"        this.f \u003d new File(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"     * Loads tasks from the file associated with this Storage object.","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"     * Parses the file content and constructs a list of tasks based on the data.","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"     * @return ArrayList of Task objects read from the file.","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"     * @throws DukeException If the file cannot be found or read from.","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"        ArrayList\u003cTask\u003e loadedLst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"        Scanner s;","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"            s \u003d new Scanner(f);","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"            throw new DukeException(\"Sorry, I can\u0027t find the file to load from\");","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"            String[] taskArr \u003d s.nextLine().split(\" \\\\| \");","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"            switch (taskArr[0]) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"            case \"T\":","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"                Task newTodo \u003d Todo.fromSaveFormat(taskArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"                loadedLst.add(newTodo);","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"            case \"D\":","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"                Task newDeadline \u003d Deadline.fromSaveFormat(taskArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"                loadedLst.add(newDeadline);","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"            case \"E\":","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"                Task newEvent \u003d Event.fromSaveFormat(taskArr);","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"                loadedLst.add(newEvent);","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"            default:","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"                throw new DukeException(\"Sorry, I can\u0027t understand the file format\");","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"        return loadedLst;","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"     * Saves tasks to the file associated with this Storage object.","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"     * Writes the list of tasks from the provided TaskList into the file in a specified format.","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"soons1"},"content":"     * @param tl The TaskList containing the tasks to be saved.","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"soons1"},"content":"     * @throws IOException If an I/O error occurs during writing to the file.","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"soons1"},"content":"    public void save(TaskList tl) throws IOException {","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"soons1"},"content":"        f.getParentFile().mkdirs();","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"soons1"},"content":"        FileWriter cfw \u003d new FileWriter(f);","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"soons1"},"content":"        for (Task t : tl.getLst()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"soons1"},"content":"            cfw.write(t.toSaveFormat() + \"\\n\");","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"soons1"},"content":"        cfw.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":79}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":" * Represents an abstract task with a description and a completion status.","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":" * This class serves as a base for different types of tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"     * Constructs a new Task with the specified description.","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     * Initially, the task is marked as not done.","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"     * By default, it returns the task\u0027s description.","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"     * @return The task\u0027s description.","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"        return description;","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"     * Returns the status of the task, indicating whether it is done or not.","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"     * The status is represented by a string: \"[X]\" for done and \"[ ]\" for not done.","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"     * @return The status of the task.","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"    public String getStatus() {","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-01-23"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"     * Abstract method that returns the string representation of the task in a format suitable for saving to a file.","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"     * This method must be implemented by subclasses.","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the task in a save format.","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"    abstract String toSaveFormat();","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"soons1":64}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":" * The TaskList class manages a list of tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":" * It provides functionalities to add, delete, retrieve, and search for tasks within the list.","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"public class TaskList {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"    private final ArrayList\u003cTask\u003e lst;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"        this.lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     * Constructs a TaskList with the given list of tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"     * @param lst The ArrayList of Task objects to initialize the TaskList with.","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"    public TaskList(ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"        this.lst \u003d lst;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"     * Adds a new task to the task list.","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"     * @param newTask The Task to be added to the list.","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"    public void addTask(Task newTask) {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"        this.lst.add(newTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"     * Deletes a task from the task list at the specified index.","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"     * @param num The index of the task to be deleted.","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"    public void deleteTask(int num) {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"        this.lst.remove(num);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"     * @return The ArrayList of tasks.","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"    public ArrayList\u003cTask\u003e getLst() {","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"        return this.lst;","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"     * Retrieves a task from the task list at the specified index.","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"     * @param num The index of the task to retrieve.","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"     * @return The Task at the specified index.","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"    public Task get(int num) {","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"        return this.lst.get(num);","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"soons1"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"soons1"},"content":"     * @return The size of the task list.","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"soons1"},"content":"    public int size() {","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"soons1"},"content":"        return this.lst.size();","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"soons1"},"content":"     * Searches for tasks in the task list that contain the specified keyword.","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"soons1"},"content":"     * @param keyword The string to search for in the task descriptions.","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"soons1"},"content":"     * @return An ArrayList of Tasks that contain the keyword.","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"soons1"},"content":"    public ArrayList\u003cTask\u003e find(String keyword) {","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"soons1"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"soons1"},"content":"        for (Task t : this.lst) {","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"soons1"},"content":"            if (t.toString().contains(keyword)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"soons1"},"content":"                foundTasks.add(t);","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"soons1"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"soons1"},"content":"        return foundTasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":89}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":" * Represents a todo task, a subclass of Task.","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":" * Todo tasks are basic tasks without any date/time attached.","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"     * Constructs a new Todo task with the given description.","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Todo task.","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"     * The string includes the type of task (represented by \"[T]\"), the status (done or not done),","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"     * and the task\u0027s description.","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Todo task.","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"        return \"[T]\" + super.getStatus() + \" \" + super.toString();","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"     * Returns the string representation of the Todo task in a format suitable for saving to a file.","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"     * The format includes the task type, status, and description.","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"     * @return The string representation of the Todo task in a save format.","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"        return \"T | \" + (super.isDone ? \"1\" : \"0\") + \" | \" + super.description;","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"     * Static method to create a Todo task from its saved format.","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"     * The method parses a string array containing the saved information of the task and","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"     * reconstructs the Todo task from this information.","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"     * @param info The array of strings containing the task\u0027s saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"     * @return A Todo task reconstructed from the saved data.","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"    public static Todo fromSaveFormat(String[] info) {","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"        Todo loadedTask \u003d new Todo(info[2]);","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"        if (info[1].equals(\"1\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"            loadedTask.markAsDone();","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"        return loadedTask;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"soons1":56}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":" * The Ui class is responsible for handling all user interface elements","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":" * of the application, such as greeting users, displaying messages, and showing errors.","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":" * It provides methods to print various types of messages to the console.","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"public class Ui {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"    private static final String LINEBREAK \u003d","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"            \"_______________________________________________________________________________\";","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"     * This includes an ASCII art representation of a snowman and a welcome message.","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    public void greet() {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"        String snowBoyAscii \u003d","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"                \"      *      \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"                        + \"     ***     \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"                        + \"   *******   \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"                        + \"  *  o o  *  \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"                        + \" *    \u003e    * \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"                        + \" *  \\\\___/  * \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"                        + \"  *       *  \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"                        + \"   *******   \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"                        + \"     ***     \\n\"","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"                        + \"      *      \";","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d snowBoyAscii + \"\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"        toPrint +\u003d \" Hello! I\u0027m SnowBoy\\n\" + \" What can I do for you?\";","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"     * Beautifies and formats a string message for display.","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"     * This method adds line breaks before and after the message for better readability.","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"     *","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"     * @param toPrint The string message to be formatted and displayed.","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"soons1"},"content":"    public static void beautify(String toPrint) {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"soons1"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"soons1"},"content":"        System.out.println(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"soons1"},"content":"        System.out.println(LINEBREAK);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"soons1"},"content":"     * Displays a loading error message.","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"soons1"},"content":"     * This is typically called when the application fails to load an existing task list","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"soons1"},"content":"     * and needs to create a new one.","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"soons1"},"content":"    public void showLoadingError() {","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" No existing list detected. Creating new list...\";","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"soons1"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"soons1"},"content":"     * Displays an exit message to the user.","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"soons1"},"content":"     * This message is shown when the user decides to exit the application.","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"soons1"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"soons1"},"content":"    public void exit() {","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"soons1"},"content":"        String toPrint \u003d \" Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"soons1"},"content":"        Ui.beautify(toPrint);","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":64}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"public class ParserTest {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"    private TaskList list;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"    void setUpEmptyList() {","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"        list \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"        // Mocking Ui methods or ensure that Ui methods can run in a test environment","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"    public void addTodo_validInput_successfulAddition() throws DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"        String command \u003d \"todo read magazine\";","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"        Parser.addTodo(list, command.split(\" \"), command);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"        assertEquals(1, list.size(), \"TaskList should have one task after adding todo\");","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"        Task addedTask \u003d list.get(0);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"        assertTrue(addedTask instanceof Todo, \"Added task should be of type Todo\");","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"        assertEquals(\"[T][ ] read magazine\", addedTask.toString(), \"Todo task description should match\");","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"    public void checkCmd_testInvalidDeadlineCommand_exceptionThrown() {","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"        String command \u003d \"deadline read book\";","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"            Parser.checkCmd(list, command);","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"        });","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"soons1"},"content":"        String expectedMessage \u003d \" Sorry, the date of a deadline cannot be empty :(\";","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"soons1"},"content":"        String actualMessage \u003d exception.getMessage();","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"soons1"},"content":"        assertTrue(actualMessage.contains(expectedMessage));","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":39}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"package duke;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"public class TaskListTest {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"    private TaskList list;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"    @BeforeEach","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"soons1"},"content":"    void setUpEmptyList() {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"soons1"},"content":"        list \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"soons1"},"content":"        // Mocking Ui methods or ensure that Ui methods can run in a test environment","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"soons1"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"soons1"},"content":"    public void addTask_SampleTask_taskAddedToList() {","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"soons1"},"content":"        Task task \u003d new Todo(\"read novel\");","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"soons1"},"content":"        list.addTask(task);","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"soons1"},"content":"        assertEquals(1, list.size(), \"TaskList size should increase after adding a task\");","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"soons1"},"content":"    @Test","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"soons1"},"content":"    public void deleteTask_afterRemovingTask_decreasesSize() {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"soons1"},"content":"        Task task1 \u003d new Todo(\"watch movie\");","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"soons1"},"content":"        Task task2 \u003d new Todo(\"read ebook\");","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"soons1"},"content":"        list.addTask(task1);","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"soons1"},"content":"        list.addTask(task2);","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"soons1"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"soons1"},"content":"        list.deleteTask(0);","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"soons1"},"content":"        assertEquals(1, list.size(), \"Size should be 1 after removing one task\");","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"soons1"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"soons1"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"soons1":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"soons1"},"content":"todo borrow book","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"soons1"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"soons1"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-23"},{"lineNumber":4,"author":{"gitId":"soons1"},"content":"event online discussion /from Aug 6th 5pm /to Aug 6th 7pm","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"soons1"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"soons1"},"content":"mark 4","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"soons1"},"content":"mark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"soons1"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"soons1"},"content":"unmark 4","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"soons1"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":11,"author":{"gitId":"soons1"},"content":"bye","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"soons1":11}}]
