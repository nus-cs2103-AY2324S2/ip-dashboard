[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"    mainClass.set(\"badgpt.BadGpt\")","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"    archiveBaseName \u003d \"badgpt\"","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"    archiveFileName \u003d \"badgpt.jar\"","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"ronnnnnnnnn":18}},{"path":"src/main/java/badgpt/BadGpt.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.BadException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.gui.Gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.util.*;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":" * The main class for the chatbot program.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"public class BadGpt {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    private final String NAME \u003d \"BadGPT\";","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    private ByteArrayOutputStream out;","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"    private ByteArrayOutputStream err;","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    private TaskList taskList;","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    private FileManager fileManager;","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Gui gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Initialises the TaskList, Ui and FileManager instances needed to run the bot. Also takes in the Gui needed to","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"     * display the chat.","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param gui The GUI to be used to display the chat.","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    public BadGpt(Gui gui) {","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"        out \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        err \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList \u003d new TaskList(new TasksUi(out, err));","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        ui \u003d new Ui(out, err);","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"        fileManager \u003d new FileManager();","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.gui \u003d gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Starts running the bot.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param args Command line arguments.","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"        // new BadGpt().run();","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Runs the bot. The bot gives a greeting and loads the task list saved from the previous session, if there is one.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Then, the bot will take in commands until \"bye\" is entered.","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void run() {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        ui.sayHi(NAME);","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"        fileManager.loadFile();","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"        fileManager.readFile(taskList);","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Takes in user input and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param in The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @return The response.","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String parseText(String in) {","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"        out.reset();","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"        err.reset();","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"            Parser.parse(in, this, taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"            return out.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (BadException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"            ui.printException(e);","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"            return err.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Exits the bot. Save any changes made to the task list and the bot gives a farewell message.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void bye() {","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList.writeChanges(fileManager);","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"        ui.sayBye();","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"        ui.stop();","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":83}},{"path":"src/main/java/badgpt/exceptions/BadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * General class of exceptions associated with the chatbot.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class BadException extends Exception {","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new BadException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    public BadException(String message) {","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"ronnnnnnnnn":16}},{"path":"src/main/java/badgpt/exceptions/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * General class of exceptions that arise from commands.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class CommandException extends BadException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new CommandException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    public CommandException(String message) {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":16}},{"path":"src/main/java/badgpt/exceptions/ListEmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the task list is currently empty.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class ListEmptyException extends TaskException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new ListEmptyException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    public ListEmptyException(String message) {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"There are no tasks.\";","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":24}},{"path":"src/main/java/badgpt/exceptions/ListFullException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the task list is currently full.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class ListFullException extends TaskException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new ListFullException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    public ListFullException(String message) {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"dude maybe finish something first\";","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":24}},{"path":"src/main/java/badgpt/exceptions/NoSuchCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the command entered does not exist.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class NoSuchCommandException extends CommandException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new NoSuchCommandException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    public NoSuchCommandException(String message) {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"Please enter a valid command.\";","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":24}},{"path":"src/main/java/badgpt/exceptions/SameStatusException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the specified task is already complete/incomplete.","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"public class SameStatusException extends TaskException {","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Task task;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    private int type;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new SameStatusException with the specified message, task and type. If type is 0, then the attempted","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     * operation was to mark it as complete. Otherwise, the attempted operation was to unmark it.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The task which was operated on.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param type The operation performed on the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    public SameStatusException(String message, Task task, int type) {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.type \u003d type;","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"The task:\\n\" + task + \"\\nis \" + (type \u003d\u003d 0 ? \"already complete.\" : \"not yet complete.\");","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":33}},{"path":"src/main/java/badgpt/exceptions/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * General class of exceptions that arise from tasks and operations on them.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TaskException extends BadException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new TaskException with the specified message.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    public TaskException(String message) {","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":15}},{"path":"src/main/java/badgpt/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the task could not be found in the task list.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TaskNotFoundException extends TaskException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    private int numTasks;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new TaskNotFoundException with the specified message and number of tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param numTasks The current number of tasks in the task list.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    public TaskNotFoundException(String message, int numTasks) {","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.numTasks \u003d numTasks;","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"The requested task cannot be found. \" + (numTasks \u003d\u003d 0","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"                ? \"There are no tasks.\"","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"                : \"Please enter a number equal to or less than \" + numTasks + \".\");","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"ronnnnnnnnn":29}},{"path":"src/main/java/badgpt/exceptions/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.exceptions;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Signals that the command was entered using an invalid format.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class WrongFormatException extends CommandException {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    private String rightUsage \u003d \"Please type in the command as follows: \";","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    private String example;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    private String brainrot;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new WrongFormatException with the specified message and command. The proper usage of the command along","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * with an example will also be displayed.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param message The error message.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param cmd The command which caused the error.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    public WrongFormatException(String message, String cmd) {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(message);","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        switch (cmd) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"mark\":","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"mark taskNum\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"mark 2\";","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"unmark\":","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"unmark taskNum\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"unmark 2\";","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"todo taskDescription\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"todo read book\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"are you satisfied with that, todo aoi\";","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"deadline taskDescription /by YYYY-MM-DD\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"deadline return book /by 2024-01-31\";","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"event\":","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"event taskDescription /from YYYY-MM-DD /to YYYY-MM-DD\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"event holiday /from 2024-01-31 /to 2024-02-07\";","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"delete\":","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"delete taskNum\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"delete 2\";","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"find\":","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"            rightUsage +\u003d \"find keyword\\n\";","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"            example \u003d \"find book\";","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"            brainrot \u003d \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the exception.","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"        return rightUsage + \"Example: \" + example + brainrot;","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":67}},{"path":"src/main/java/badgpt/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Label text;","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"        text \u003d l;","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"        displayPicture \u003d iv;","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"        text.setWrapText(true);","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        displayPicture.setFitWidth(100.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        displayPicture.setFitHeight(100.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.getChildren().addAll(text, displayPicture);","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"    private void flip() {","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static DialogBox getBadDialog(Label l, ImageView iv) {","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"        db.flip();","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"        return db;","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"ronnnnnnnnn":47}},{"path":"src/main/java/badgpt/gui/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.BadGpt;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.application.Platform;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Gui extends Application {","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    private BadGpt bot;","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Scene scene;","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    private Image badGpt \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Gui() {","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        bot \u003d new BadGpt(this);","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"        bot.run();","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Step 1. Setting up required components","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"        // The container for the content of the chat to scroll.","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.setScene(scene);","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.show();","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Step 2. Formatting the window to look as expected","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.setTitle(\"BadGPT\");","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.setResizable(false);","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2024-02-14"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Step 3. Add functionality to handle user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (isExit) {","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"ronnnnnnnnn"},"content":"                Platform.exit();","lastModifiedDate":"2024-02-14"},{"lineNumber":88,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":89,"author":{"gitId":"ronnnnnnnnn"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-14"},{"lineNumber":90,"author":{"gitId":"ronnnnnnnnn"},"content":"        });","lastModifiedDate":"2024-02-14"},{"lineNumber":91,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":92,"author":{"gitId":"ronnnnnnnnn"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2024-02-14"},{"lineNumber":93,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (isExit) {","lastModifiedDate":"2024-02-14"},{"lineNumber":94,"author":{"gitId":"ronnnnnnnnn"},"content":"                Platform.exit();","lastModifiedDate":"2024-02-14"},{"lineNumber":95,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":96,"author":{"gitId":"ronnnnnnnnn"},"content":"            handleUserInput();","lastModifiedDate":"2024-02-14"},{"lineNumber":97,"author":{"gitId":"ronnnnnnnnn"},"content":"        });","lastModifiedDate":"2024-02-14"},{"lineNumber":98,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":99,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2024-02-14"},{"lineNumber":100,"author":{"gitId":"ronnnnnnnnn"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2024-02-14"},{"lineNumber":101,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":102,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":103,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":104,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing BadGPT\u0027s reply and then appends them to","lastModifiedDate":"2024-02-14"},{"lineNumber":105,"author":{"gitId":"ronnnnnnnnn"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-14"},{"lineNumber":106,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":107,"author":{"gitId":"ronnnnnnnnn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-14"},{"lineNumber":108,"author":{"gitId":"ronnnnnnnnn"},"content":"        Label userText \u003d new Label(userInput.getText());","lastModifiedDate":"2024-02-14"},{"lineNumber":109,"author":{"gitId":"ronnnnnnnnn"},"content":"        Label badText \u003d new Label(getResponse(userInput.getText()));","lastModifiedDate":"2024-02-14"},{"lineNumber":110,"author":{"gitId":"ronnnnnnnnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-14"},{"lineNumber":111,"author":{"gitId":"ronnnnnnnnn"},"content":"                DialogBox.getUserDialog(userText, new ImageView(user)),","lastModifiedDate":"2024-02-14"},{"lineNumber":112,"author":{"gitId":"ronnnnnnnnn"},"content":"                DialogBox.getBadDialog(badText, new ImageView(badGpt))","lastModifiedDate":"2024-02-14"},{"lineNumber":113,"author":{"gitId":"ronnnnnnnnn"},"content":"        );","lastModifiedDate":"2024-02-14"},{"lineNumber":114,"author":{"gitId":"ronnnnnnnnn"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-14"},{"lineNumber":115,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":116,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":117,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":118,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Sends the user input to the bot, which will parse it and give a response.","lastModifiedDate":"2024-02-14"},{"lineNumber":119,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":120,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param input The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":121,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @return The response.","lastModifiedDate":"2024-02-14"},{"lineNumber":122,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":123,"author":{"gitId":"ronnnnnnnnn"},"content":"    private String getResponse(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":124,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":125,"author":{"gitId":"ronnnnnnnnn"},"content":"            isExit \u003d true;","lastModifiedDate":"2024-02-14"},{"lineNumber":126,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":127,"author":{"gitId":"ronnnnnnnnn"},"content":"        return bot.parseText(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":128,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":129,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"ronnnnnnnnn":129}},{"path":"src/main/java/badgpt/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Launcher {","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"        Application.launch(Gui.class, args);","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"ronnnnnnnnn":12}},{"path":"src/main/java/badgpt/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":" * Representation of a task which has a deadline.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new Deadline object.","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param description The description of the task (e.g. what must be done).","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param deadline The deadline by which this task must be completed.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Deadline(String description, String deadline) {","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.deadline \u003d LocalDate.parse(deadline);","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String saveTask() {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[D]\" + super.toString() + \" by: \" + deadline;","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[D]\" + super.toString() + \" (by: \" +","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"                deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":39}},{"path":"src/main/java/badgpt/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":" * Representation of an event which lasts for a period of time.","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected LocalDate from;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected LocalDate to;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new Event object.","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param description The description of the event (e.g. what is happening).","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param from The date the event starts.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param to The date the event ends.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.from \u003d LocalDate.parse(from);","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.to \u003d LocalDate.parse(to);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String saveTask() {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[E]\" + super.toString() + \" from: \" + from + \" to: \" + to;","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[E]\" + super.toString() + \" (from: \" +","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"                from.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \" to: \" +","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"                to.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":43}},{"path":"src/main/java/badgpt/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Representation of a task object. The task can have a description and can be completed.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected String description;","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Creates a new Task object. It is not done by default.","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param description The description of the task (e.g. what must be done).","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        return description;","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns the status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @return [X] if it is complete. Otherwise, [ ] is returned.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"]\"; // mark done task with X","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Gets the status of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"    public boolean isComplete() {","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"        return isDone;","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Changes the status of the task to complete.","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void complete() {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"        isDone \u003d true;","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Changes the status of the task to incomplete.","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void uncomplete() {","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a representation of the task to be saved in the text file.","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String saveTask() {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"        return this.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"ronnnnnnnnn":68}},{"path":"src/main/java/badgpt/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.tasks;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":" * Representation of a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String saveTask() {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"        return this.toString();","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @inheritDoc","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":29}},{"path":"src/main/java/badgpt/util/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.FileReader;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":" * Handles the loading from and saving to the text file.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"public class FileManager {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    private final String DIRECTORY \u003d \"./data/\";","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"    private final String FILENAME \u003d \"tasks.txt\";","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    private File file;","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Loads the text file using the specified directory and filename. If the file does not exist, a new one is created.","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void loadFile() {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"        File directory \u003d new File(DIRECTORY);","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        file \u003d new File(DIRECTORY, FILENAME);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"            directory.mkdir();","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"                file.createNewFile();","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"                System.err.println(e + \"Please rerun the bot.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Reads the file and sends the data to a TaskList instance to be stored.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param taskList The current TaskList instance.","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void readFile(TaskList taskList) {","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"            String line \u003d br.readLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"            while (line !\u003d null) {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"                String[] taskInfo \u003d line.split(\" \");","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"                char type;","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"                String deadline \u003d null;","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"                String from \u003d null;","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"                String to \u003d null;","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"                String description;","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"                boolean isComplete \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"                if (line.contains(\"[X]\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"                    isComplete \u003d true;","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"                if (line.contains(\"[T]\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"                    type \u003d \u0027T\u0027;","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"                    description \u003d line.substring(6).trim();","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"                } else if (line.contains(\"[E]\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"                    type \u003d \u0027E\u0027;","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"                    int fromIdx \u003d line.indexOf(\"from:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"                    int toIdx \u003d line.indexOf(\"to:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"                    description \u003d line.substring(6, fromIdx).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"                    from \u003d line.substring(fromIdx + 5, toIdx).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"                    to \u003d line.substring(toIdx + 3).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"                } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"                    type \u003d \u0027D\u0027;","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"                    int by \u003d line.indexOf(\"by:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"                    description \u003d line.substring(6, by).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"                    deadline \u003d line.substring(by + 3).trim();","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.loadData(type, description, deadline, from, to, isComplete);","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"                line \u003d br.readLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.err.println(\"The file cannot be read. \" + e);","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Writes to the file.","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param data The data to be written.","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void writeToFile(String data) {","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"ronnnnnnnnn"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"ronnnnnnnnn"},"content":"            fw.write(data);","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"ronnnnnnnnn"},"content":"            fw.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.err.println(\"The file was not saved successfully. \" + e);","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"ronnnnnnnnn":99}},{"path":"src/main/java/badgpt/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.BadGpt;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.BadException;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.NoSuchCommandException;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.WrongFormatException;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Event;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.ToDo;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":" * The class responsible for reading and understanding commands.","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Parser {","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Reads the input and tries to make sense of the user command.","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param line The line entered by the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param bot The instance of the chatbot being run.","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param taskList The instance of the task list being used.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws BadException If there is an issue with the command entered (e.g. wrong format).","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    public static void parse(String line, BadGpt bot, TaskList taskList) throws BadException {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"        String cmd \u003d line.split(\" \")[0];","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"        String args \u003d line.substring(cmd.length()).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Cases","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        // \"bye\": Exit the loop and the program.","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"        // \"list\": List out all currently stored tasks.","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"        // \"mark\": Mark the task corresponding to the number entered after as complete.","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"        // \"unmark\": Unmark the task corresponding to the number entered after.","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Else, store the string entered as a new Task object.","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"        switch (cmd) {","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"bye\":","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"            bot.bye();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"list\":","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"            taskList.listTasks();","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"mark\":","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.mark(Integer.parseInt(args.split(\" \")[0]) - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(e.getMessage(), cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"unmark\":","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.unmark(Integer.parseInt(args.split(\" \")[0]) - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(e.getMessage(), cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(\"Description is empty.\", cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.store(new ToDo(args));","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"            int by \u003d args.indexOf(\"/by\");","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (by \u003d\u003d -1) {","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(\"No deadline is specified.\", cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.store(new Deadline(args.substring(0, by).trim(), args.substring(by + 3).trim()));","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(e.getMessage(), cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"event\":","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"            int fromIdx \u003d args.indexOf(\"/from\");","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"            int toIdx \u003d args.indexOf(\"/to\");","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (fromIdx \u003d\u003d -1 || toIdx \u003d\u003d -1) {","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(\"No duration is specified.\", cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.store(new Event(args.substring(0, fromIdx).trim(),","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"ronnnnnnnnn"},"content":"                        args.substring(fromIdx + 5, toIdx).trim(), args.substring(toIdx + 3).trim()));","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":88,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(e.getMessage(), cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":89,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":90,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":91,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"delete\":","lastModifiedDate":"2024-02-04"},{"lineNumber":92,"author":{"gitId":"ronnnnnnnnn"},"content":"            try {","lastModifiedDate":"2024-02-04"},{"lineNumber":93,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.delete(Integer.parseInt(args.split(\" \")[0]) - 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":94,"author":{"gitId":"ronnnnnnnnn"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(e.getMessage(), cmd);","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"ronnnnnnnnn"},"content":"        case \"find\":","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"ronnnnnnnnn"},"content":"                System.out.println(args);","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new WrongFormatException(\"No keyword is specified.\", cmd);","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"ronnnnnnnnn"},"content":"                taskList.find(args);","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"ronnnnnnnnn"},"content":"            break;","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"ronnnnnnnnn"},"content":"        default:","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new NoSuchCommandException(\"No such command found.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"ronnnnnnnnn"},"content":"            // Fallthrough","lastModifiedDate":"2024-02-04"},{"lineNumber":109,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":110,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":111,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":111}},{"path":"src/main/java/badgpt/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.ListEmptyException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.ListFullException;","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.SameStatusException;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.TaskNotFoundException;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Event;","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.ToDo;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.List;","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":" * Represents a todo list.","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TaskList {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    private TasksUi tasksUi;","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    private boolean hasChanges \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"    public TaskList(TasksUi tasksUi) {","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"        this.tasksUi \u003d tasksUi;","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Stores a Task object in the list. The list has a max size of 100.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The Task object to be stored in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws ListFullException If the list already has 100 tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void store(Task task) throws ListFullException {","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (tasks.size() \u003d\u003d 100) {","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new ListFullException(\"Your todo list is currently full.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"            tasks.add(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"            tasksUi.printAddTask(task, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"            hasChanges \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Lists out all the tasks currently in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws ListEmptyException If the list does not contain any tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void listTasks() throws ListEmptyException {","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new ListEmptyException(\"Your todo list is currently empty.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasksUi.printTask(tasks.get(i), i + 1, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Returns the current number of tasks in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"    public int getListSize() {","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"        return tasks.size();","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Marks the task in the specified position in the list as complete.","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param taskNum The position of the task in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws TaskNotFoundException If the number entered does not exist in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws SameStatusException If the task is already complete.","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void mark(int taskNum) throws TaskNotFoundException, SameStatusException {","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (!tasks.get(taskNum).isComplete()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasks.get(taskNum).complete();","lastModifiedDate":"2024-02-04"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasksUi.printMarkUnmarkOutcome(tasks.get(taskNum), 0);","lastModifiedDate":"2024-02-04"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"                hasChanges \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new SameStatusException(\"The operation cannot be completed.\", tasks.get(taskNum), 0);","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":86,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":87,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Marks the task in the specified position in the list as incomplete.","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param taskNum The position of the task in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws TaskNotFoundException If the number entered does not exist in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws SameStatusException If the task is already incomplete.","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":94,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void unmark(int taskNum) throws TaskNotFoundException, SameStatusException {","lastModifiedDate":"2024-02-04"},{"lineNumber":95,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":96,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (tasks.get(taskNum).isComplete()) {","lastModifiedDate":"2024-02-04"},{"lineNumber":97,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasks.get(taskNum).uncomplete();","lastModifiedDate":"2024-02-04"},{"lineNumber":98,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasksUi.printMarkUnmarkOutcome(tasks.get(taskNum), 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":99,"author":{"gitId":"ronnnnnnnnn"},"content":"                hasChanges \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":100,"author":{"gitId":"ronnnnnnnnn"},"content":"            } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":101,"author":{"gitId":"ronnnnnnnnn"},"content":"                throw new SameStatusException(\"The operation cannot be completed.\", tasks.get(taskNum), 1);","lastModifiedDate":"2024-02-04"},{"lineNumber":102,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":103,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":104,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":105,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":106,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":107,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":108,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Removes the task in the specified position in the list from the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param taskNum The position of the task in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @throws TaskNotFoundException If the number entered does not exist in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void delete(int taskNum) throws TaskNotFoundException {","lastModifiedDate":"2024-02-04"},{"lineNumber":115,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":116,"author":{"gitId":"ronnnnnnnnn"},"content":"            Task task \u003d tasks.remove(taskNum);","lastModifiedDate":"2024-02-04"},{"lineNumber":117,"author":{"gitId":"ronnnnnnnnn"},"content":"            tasksUi.printDelete(task, tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":118,"author":{"gitId":"ronnnnnnnnn"},"content":"            hasChanges \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":119,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":120,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new TaskNotFoundException(e.getMessage(), tasks.size());","lastModifiedDate":"2024-02-04"},{"lineNumber":121,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":122,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":123,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":124,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":125,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Loads the data from the saved task list and adds it to the current run.","lastModifiedDate":"2024-02-05"},{"lineNumber":126,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param type The type of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":128,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param descr The description of the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param deadline The deadline for the task, only for tasks of type Deadline.","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param from When the task starts, only for tasks of type Event.","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param to When the task ends, only for tasks of type Event.","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param isComplete Whether the task is complete.","lastModifiedDate":"2024-02-05"},{"lineNumber":133,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":134,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void loadData(char type, String descr, String deadline, String from, String to, boolean isComplete) {","lastModifiedDate":"2024-02-04"},{"lineNumber":135,"author":{"gitId":"ronnnnnnnnn"},"content":"        Task task;","lastModifiedDate":"2024-02-04"},{"lineNumber":136,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (type \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":137,"author":{"gitId":"ronnnnnnnnn"},"content":"            task \u003d new ToDo(descr);","lastModifiedDate":"2024-02-04"},{"lineNumber":138,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else if (type \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":139,"author":{"gitId":"ronnnnnnnnn"},"content":"            task \u003d new Event(descr, from, to);","lastModifiedDate":"2024-02-04"},{"lineNumber":140,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-02-04"},{"lineNumber":141,"author":{"gitId":"ronnnnnnnnn"},"content":"            task \u003d new Deadline(descr, deadline);","lastModifiedDate":"2024-02-04"},{"lineNumber":142,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":143,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":144,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (isComplete) {","lastModifiedDate":"2024-02-04"},{"lineNumber":145,"author":{"gitId":"ronnnnnnnnn"},"content":"            task.complete();","lastModifiedDate":"2024-02-04"},{"lineNumber":146,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":147,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":148,"author":{"gitId":"ronnnnnnnnn"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":149,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":150,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":151,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":152,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Finds any tasks containing the specified keyword.","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param keyword The term of interest to filter out tasks.","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void find(String keyword) throws ListEmptyException {","lastModifiedDate":"2024-02-05"},{"lineNumber":157,"author":{"gitId":"ronnnnnnnnn"},"content":"        List\u003cTask\u003e filtered \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":158,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":159,"author":{"gitId":"ronnnnnnnnn"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"ronnnnnnnnn"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"ronnnnnnnnn"},"content":"                filtered.add(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":163,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":164,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (filtered.isEmpty()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":166,"author":{"gitId":"ronnnnnnnnn"},"content":"            throw new ListEmptyException(\"There are no tasks containing the specified keyword.\");","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":168,"author":{"gitId":"ronnnnnnnnn"},"content":"            for (int i \u003d 0; i \u003c filtered.size(); i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":169,"author":{"gitId":"ronnnnnnnnn"},"content":"                tasksUi.printTask(filtered.get(i), i + 1, filtered.size());","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":171,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":172,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":173,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":174,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":175,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Writes any changes to the task list to the save file.","lastModifiedDate":"2024-02-05"},{"lineNumber":176,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":177,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param fileManager The FileManager instance handling the saving of data.","lastModifiedDate":"2024-02-05"},{"lineNumber":178,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":179,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void writeChanges(FileManager fileManager) {","lastModifiedDate":"2024-02-04"},{"lineNumber":180,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (hasChanges) {","lastModifiedDate":"2024-02-04"},{"lineNumber":181,"author":{"gitId":"ronnnnnnnnn"},"content":"            String data \u003d \"\";","lastModifiedDate":"2024-02-04"},{"lineNumber":182,"author":{"gitId":"ronnnnnnnnn"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":183,"author":{"gitId":"ronnnnnnnnn"},"content":"                data +\u003d task.saveTask() + \"\\n\";","lastModifiedDate":"2024-02-04"},{"lineNumber":184,"author":{"gitId":"ronnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":185,"author":{"gitId":"ronnnnnnnnn"},"content":"            fileManager.writeToFile(data);","lastModifiedDate":"2024-02-04"},{"lineNumber":186,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":187,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":188,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":188}},{"path":"src/main/java/badgpt/util/TasksUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":" * An extension of the Ui class which handles task-related interactions.","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TasksUi extends Ui {","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Initialises the Scanner object to take in user input. Also sets console and error output to a specified output","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"     * stream to be read by the GUI.","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param out The stream for console output.","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param err The stream for error output.","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    public TasksUi(ByteArrayOutputStream out, ByteArrayOutputStream err) {","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"        super(out, err);","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints the newly-added task.","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The newly-added task.","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param numTasks The current number of tasks in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printAddTask(Task task, int numTasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Added task: \" + task);","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Now you have \" + numTasks + \" task(s) in the list.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints a task. This can also be used to print multiple tasks (e.g. listing tasks).","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The task to print.","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param index The position of the task. If 0, no number will be printed next to the task.","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param total The total number of tasks to print.","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printTask(Task task, int index, int total) {","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"            printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (total \u003e 1) {","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(index + \". \" + task);","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"            System.out.println(task);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"        if (index \u003d\u003d total) {","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"            printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints the outcome of the mark/unmark task operations.","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The task operated on.","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param type The type of operation. If 0, it is the mark operation. Otherwise, it is the unmark operation.","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printMarkUnmarkOutcome(Task task, int type) {","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println((type \u003d\u003d 0 ? \"Nice! I\u0027ve marked this task as done:\\n\" : \"wyd bro why undo\\n\") + task);","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints the deleted task.","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param task The task which has been deleted.","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param numTasks The current number of tasks in the list.","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printDelete(Task task, int numTasks) {","lastModifiedDate":"2024-02-04"},{"lineNumber":79,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":80,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"This task has been removed: \" + task);","lastModifiedDate":"2024-02-04"},{"lineNumber":81,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Now you have \" + numTasks + \" task(s) in the list.\");","lastModifiedDate":"2024-02-04"},{"lineNumber":82,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"No, what are you waiting for? Do it! Just do it!\");","lastModifiedDate":"2024-02-04"},{"lineNumber":83,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":84,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":85,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":85}},{"path":"src/main/java/badgpt/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.BadException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":" * Handles interaction with user. Prints all messages and responses and takes in user input.","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":" */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"public class Ui {","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    protected Scanner sc;","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Initialises the Scanner object to take in user input. Also sets console and error output to a specified output","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"     * stream to be read by the GUI.","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param out The stream for console output.","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param err The stream for error output.","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"    public Ui(ByteArrayOutputStream out, ByteArrayOutputStream err) {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"        sc \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.setOut(new PrintStream(out));","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.setErr(new PrintStream(err));","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints a line to make the chatbot look nice.","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printLine() {","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"_____________________________________________________\");","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints any exceptions thrown by the bot.","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param e The exception thrown by the bot.","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void printException(BadException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.err.println(\"_____________________________________________________\\n\"","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"                + e + \"\\n_____________________________________________________\");","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints a greeting.","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"     * @param name The name of the bot.","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void sayHi(String name) {","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Hello! I\u0027m \" + name + \".\\n\" + \"What can I do for you?\");","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Prints a farewell.","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void sayBye() {","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"        System.out.println(\"Smell ya later\");","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"        printLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Reads the next line of user input.","lastModifiedDate":"2024-02-05"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"    public String read() {","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"        return sc.nextLine();","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"     * Closes the scanner.","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void stop() {","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"ronnnnnnnnn"},"content":"        sc.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":78}},{"path":"src/test/java/badgpt/util/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.BadGpt;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.exceptions.BadException;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.gui.Gui;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void parse_validCommandFormat_success() throws Exception {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // @@author ronnnnnnnnn-reused","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // Reused from https://stackoverflow.com/a/32241300 with minor modifications","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        System.setOut(new PrintStream(out));","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // @@author","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"        BadGpt bot \u003d new BadGpt(new Gui());","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList(new TasksUi(out, new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList.store(new Task(\"return book\"));","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        Parser.parse(\"mark 1\", bot, taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        assertEquals(\"____________________________________________________________\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"Nice! I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"[X] return book\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"____________________________________________________________\\r\\n\", out.toString());","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"        out.reset();","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"        Parser.parse(\"unmark 1\", bot, taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"        assertEquals(\"____________________________________________________________\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"wyd bro why undo\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"[ ] return book\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"____________________________________________________________\\r\\n\", out.toString());","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void parse_invalidCommandFormat_notSuccess() {","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"ronnnnnnnnn"},"content":"        BadGpt bot \u003d new BadGpt(new Gui());","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"ronnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList(new TasksUi(new ByteArrayOutputStream(), new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Try mark command without a number","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"            Parser.parse(\"mark\", bot, taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"            fail();","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (BadException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"            assertEquals(\"Please type in the command as follows: mark taskNum\\n\" +","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"                    \"Example: mark 2\", e.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Try unmark command without a number","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"            Parser.parse(\"unmark\", bot, taskList);","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (BadException e) {","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"            assertEquals(\"Please type in the command as follows: unmark taskNum\\n\" +","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"                    \"Example: unmark 2\", e.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":62,"-":5}},{"path":"src/test/java/badgpt/util/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"package badgpt.util;","lastModifiedDate":"2024-02-04"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"import badgpt.tasks.Task;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"import java.io.PrintStream;","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"ronnnnnnnnn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2024-02-04"},{"lineNumber":12,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void store_notFull_success() throws Exception {","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"ronnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList(new TasksUi(new ByteArrayOutputStream(), new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"        // List is currently empty","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"ronnnnnnnnn"},"content":"        assertEquals(0, taskList.getListSize());","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"ronnnnnnnnn"},"content":"        // List now has 1 task","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList.store(new Task(\"\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"        assertEquals(1, taskList.getListSize());","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void store_fullList_exceptionThrown() throws Exception {","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"ronnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList(new TasksUi(new ByteArrayOutputStream(), new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Add 100 tasks to fill up the list","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"ronnnnnnnnn"},"content":"        for (int i \u003d 0; i \u003c 100; i++) {","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"ronnnnnnnnn"},"content":"            taskList.store(new Task(\"\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"ronnnnnnnnn"},"content":"        // The next store operation should fail","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"ronnnnnnnnn"},"content":"            taskList.store(new Task(\"\"));","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"ronnnnnnnnn"},"content":"            fail();","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"ronnnnnnnnn"},"content":"            assertEquals(\"Your todo list is currently full.\", e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void listTasks_nonEmpty_success() throws Exception {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // @@author ronnnnnnnnn-reused","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Reused from https://stackoverflow.com/a/32241300 with minor modifications","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        System.setOut(new PrintStream(out));","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // @@author","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"ronnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList(new TasksUi(out, new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList.store(new Task(\"return book\"));","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"ronnnnnnnnn"},"content":"        taskList.listTasks();","lastModifiedDate":"2024-02-04"},{"lineNumber":56,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"ronnnnnnnnn"},"content":"        // Lists the newly added task","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"ronnnnnnnnn"},"content":"        assertEquals(\"____________________________________________________________\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"Here are the tasks in your list:\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"1. [ ] return book\\r\\n\" +","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"ronnnnnnnnn"},"content":"                \"____________________________________________________________\\r\\n\", out.toString());","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":64,"author":{"gitId":"ronnnnnnnnn"},"content":"    @Test","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"ronnnnnnnnn"},"content":"    public void listTasks_empty_exceptionThrown() {","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"ronnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"ronnnnnnnnn"},"content":"            TaskList taskList \u003d new TaskList(new TasksUi(new ByteArrayOutputStream(), new ByteArrayOutputStream()));","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"ronnnnnnnnn"},"content":"            taskList.listTasks();","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"ronnnnnnnnn"},"content":"            fail(); // The test should not reach this line as the task list is empty","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"ronnnnnnnnn"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"ronnnnnnnnn"},"content":"            assertEquals(\"Your todo list is currently empty.\", e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":72,"author":{"gitId":"ronnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":73,"author":{"gitId":"ronnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":74,"author":{"gitId":"ronnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"ronnnnnnnnn":69,"-":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ronnnnnnnnn"},"content":"todo borrow book","lastModifiedDate":"2024-01-27"},{"lineNumber":2,"author":{"gitId":"ronnnnnnnnn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-27"},{"lineNumber":3,"author":{"gitId":"ronnnnnnnnn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-27"},{"lineNumber":4,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":5,"author":{"gitId":"ronnnnnnnnn"},"content":"mark 1","lastModifiedDate":"2024-01-27"},{"lineNumber":6,"author":{"gitId":"ronnnnnnnnn"},"content":"mark 3","lastModifiedDate":"2024-01-27"},{"lineNumber":7,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"ronnnnnnnnn"},"content":"unmark 3","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"ronnnnnnnnn"},"content":"list","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"ronnnnnnnnn"},"content":"bye","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"ronnnnnnnnn":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"ronnnnnnnnn"},"content":"    pause","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"ronnnnnnnnn"},"content":"java -classpath ..\\bin BadGpt \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"ronnnnnnnnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"ronnnnnnnnn"},"content":"pause","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"-":20,"ronnnnnnnnn":4}}]
