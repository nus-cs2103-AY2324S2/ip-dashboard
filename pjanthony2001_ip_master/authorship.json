[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"checkstyle {","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"    version \u003d \u002710.2\u0027","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"pjanthony2001":8,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import duke.ui.UserInterface;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":" *","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"        String logo \u003d \"          _______  _           _____   _______  _______  _______\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"                + \"|\\\\     /|(  ___  )( \\\\         / ___ \\\\ (  __   )(  __   )(  __   )\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"                + \"| )   ( || (   ) || (        ( (   ) )| (  )  || (  )  || (  )  |\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"                + \"| (___) || (___) || |        ( (___) || | /   || | /   || | /   |\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"                + \"|  ___  ||  ___  || |         \\\\____  || (/ /) || (/ /) || (/ /) |\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"                + \"| (   ) || (   ) || |              ) ||   / | ||   / | ||   / | |\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"                + \"| )   ( || )   ( || (____/\\\\  /\\\\____) )|  (__) ||  (__) ||  (__) |\\n\"","lastModifiedDate":"2024-01-20"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"                + \"|/     \\\\||/     \\\\|(_______/  \\\\______/ (_______)(_______)(_______)\\n\";","lastModifiedDate":"2024-01-20"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(logo);","lastModifiedDate":"2024-01-20"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"        UserInterface userInterface \u003d new UserInterface();","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"        userInterface.start();","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"pjanthony2001":19,"-":4}},{"path":"src/main/java/duke/codec/Codec.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.codec;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.ProcessingException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":" * The `Codec` class provides methods for encoding and decoding tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"public class Codec {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    private final String delimiter \u003d \", \";","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"     * Encodes a task into a string representation.","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     * @param task The task to be encoded.","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * @return A string representation of the encoded task.","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    public String encode(Task task) {","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"        String[] encodedTask \u003d task.encode();","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"        return buildString(encodedTask);","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"     * Builds a concatenated string from an array of string values using a specified delimiter.","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"     * @param values The array of values to be joined.","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"     * @return A concatenated string with values separated by the specified delimiter.","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"    public String buildString(String... values) {","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"        StringJoiner encodedString \u003d new StringJoiner(delimiter);","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"        for (String string : values) {","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"            encodedString.add(string);","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"        return encodedString.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"     * Decodes a string representation of a task into a Task object.","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"     * @param string The string representation of the task to be decoded.","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"     * @return A Task object representing the decoded task.","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an error while decoding the task.","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"    public Task decode(String string) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"        String[] splitString \u003d string.split(delimiter);","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"        switch (splitString[0]) {","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"        case \"D\":","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"            return decodeDeadline(splitString);","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"        case \"T\":","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"            return decodeTodo(splitString);","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"        case \"E\":","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"            return decodeEvent(splitString);","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"        default:","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(\"Error while decoding identifier\");","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"     * Decodes a string representation of a Deadline task into a Deadline object.","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"     * @param splitString The array of split values from the encoded Deadline string.","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"     * @return A Deadline object representing the decoded Deadline task.","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an error while decoding the Deadline task.","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"    public Task decodeDeadline(String[] splitString) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"            Boolean done \u003d Boolean.parseBoolean(splitString[1]);","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d splitString[2];","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime by \u003d TimeProcessor.fromString(splitString[3]);","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"            return new Deadline(taskName, by, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(\"Error while decoding Deadline\", e);","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":87,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"pjanthony2001"},"content":"     * Decodes a string representation of an Event task into an Event object.","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":90,"author":{"gitId":"pjanthony2001"},"content":"     * @param splitString The array of split values from the encoded Event string.","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"pjanthony2001"},"content":"     * @return An Event object representing the decoded Event task.","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an error while decoding the Event task.","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"pjanthony2001"},"content":"    public Task decodeEvent(String[] splitString) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"pjanthony2001"},"content":"            Boolean done \u003d Boolean.parseBoolean(splitString[1]);","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d splitString[2];","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime from \u003d TimeProcessor.fromString(splitString[3]);","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime to \u003d TimeProcessor.fromString(splitString[4]);","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":102,"author":{"gitId":"pjanthony2001"},"content":"            return new Event(taskName, from, to, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":103,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":104,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(\"Error while decoding Event\", e);","lastModifiedDate":"2024-01-26"},{"lineNumber":106,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":107,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":108,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":109,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":110,"author":{"gitId":"pjanthony2001"},"content":"     * Decodes a string representation of a Todo task into a Todo object.","lastModifiedDate":"2024-01-28"},{"lineNumber":111,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":112,"author":{"gitId":"pjanthony2001"},"content":"     * @param splitString The array of split values from the encoded Todo string.","lastModifiedDate":"2024-01-28"},{"lineNumber":113,"author":{"gitId":"pjanthony2001"},"content":"     * @return A Todo object representing the decoded Todo task.","lastModifiedDate":"2024-01-28"},{"lineNumber":114,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an error while decoding the Todo task.","lastModifiedDate":"2024-01-28"},{"lineNumber":115,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":116,"author":{"gitId":"pjanthony2001"},"content":"    public Task decodeTodo(String[] splitString) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":117,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"pjanthony2001"},"content":"            Boolean done \u003d Boolean.parseBoolean(splitString[1]);","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d splitString[2];","lastModifiedDate":"2024-01-26"},{"lineNumber":120,"author":{"gitId":"pjanthony2001"},"content":"            return new Todo(taskName, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":121,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":122,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":123,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(\"Error while decoding Todo\", e);","lastModifiedDate":"2024-01-26"},{"lineNumber":124,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":127}},{"path":"src/main/java/duke/codec/TimeProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.codec;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":" * The `TimeProcessor` class provides utility methods for converting between `LocalDateTime` and formatted strings.","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"public class TimeProcessor {","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"    private static final String dateFormat \u003d \"dd-MM-yyyy\";","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"    private static final String timeFormat \u003d \"HH:mm\";","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    private static final DateTimeFormatter fmt \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"        .appendPattern(dateFormat)","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"        .optionalStart()","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"        .appendLiteral(\u0027 \u0027)","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"        .appendPattern(timeFormat)","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"        .optionalEnd()","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"        .toFormatter();","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"    public static String toString(LocalDateTime value) throws DateTimeException {","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"        return fmt.format(value);","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"    public static LocalDateTime fromString(String value) throws DateTimeParseException {","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"        return LocalDateTime.parse(value, fmt);","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":36}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.command;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":" * Enumeration of commands that can be executed in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"public enum Command {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"    BYE {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"        @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"        public boolean isExit() {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"            return true;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"    },","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"    TODO,","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"    DEADLINE,","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"    EVENT,","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"    LIST,","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    MARK,","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    UNMARK,","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"    FIND,","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    DELETE;","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":27}},{"path":"src/main/java/duke/command/CommandProcessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.command;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"import duke.codec.TimeProcessor;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.InputException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.ProcessingException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Event;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":" * The `CommandProcessor` class handles the processing of user commands in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":" * It interprets user input, executes commands, and interacts with the storage system to manage tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"public class CommandProcessor {","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"    private final Storage storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"    public CommandProcessor(Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the given command and input, executing the corresponding action.","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"     * @param command The command to execute.","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input associated with the command.","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue processing the command or storage.","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"    public void processData(Command command, String input) throws InputException, ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"        switch (command) {","lastModifiedDate":"2024-01-22"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"        case DELETE:","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"            storage.delete(processDelete(input));","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"        case LIST:","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"            storage.displayList();","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"        case MARK:","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"            storage.mark(processMark(input, Command.MARK));","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"        case UNMARK:","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"            storage.unmark(processMark(input, Command.UNMARK));","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"        case DEADLINE:","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"            storage.add(processDeadline(input));","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"        case EVENT:","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"            storage.add(processEvent(input));","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"        case TODO:","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"            storage.add(processTodo(input));","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-22"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"        case FIND:","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"            storage.displaySearchList(processFind(input));","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"        default:","lastModifiedDate":"2024-01-22"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"            break;","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"        storage.update();","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the DELETE command input to extract the task index to be deleted.","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the DELETE command.","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"     * @return The index of the task to be deleted.","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"    public Integer processDelete(String input) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-23"},{"lineNumber":84,"author":{"gitId":"pjanthony2001"},"content":"            return Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"pjanthony2001"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":87,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(Command.DELETE, input, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":88,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":89,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":90,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the DEADLINE command input to create a `Deadline` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the DEADLINE command.","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"pjanthony2001"},"content":"     * @return A `Deadline` task created from the input.","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":97,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":98,"author":{"gitId":"pjanthony2001"},"content":"    public Task processDeadline(String input) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":100,"author":{"gitId":"pjanthony2001"},"content":"            String restOfInput \u003d input.substring(9);","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"pjanthony2001"},"content":"            String[] splitInput \u003d restOfInput.split(\" /by \");","lastModifiedDate":"2024-01-22"},{"lineNumber":102,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":103,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d splitInput[0];","lastModifiedDate":"2024-01-22"},{"lineNumber":104,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime by \u003d TimeProcessor.fromString(splitInput[1]);","lastModifiedDate":"2024-01-26"},{"lineNumber":105,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":106,"author":{"gitId":"pjanthony2001"},"content":"            return new Deadline(taskName, by);","lastModifiedDate":"2024-01-22"},{"lineNumber":107,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":108,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":109,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(Command.DEADLINE, input, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":111,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":112,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":113,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":114,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the TODO command input to create a `Todo` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":115,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":116,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the TODO command.","lastModifiedDate":"2024-01-28"},{"lineNumber":117,"author":{"gitId":"pjanthony2001"},"content":"     * @return A `Todo` task created from the input.","lastModifiedDate":"2024-01-28"},{"lineNumber":118,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":119,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":120,"author":{"gitId":"pjanthony2001"},"content":"    public Task processTodo(String input) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":121,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":122,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d input.substring(5);","lastModifiedDate":"2024-01-28"},{"lineNumber":123,"author":{"gitId":"pjanthony2001"},"content":"            return new Todo(taskName);","lastModifiedDate":"2024-01-22"},{"lineNumber":124,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(Command.TODO, input, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":127,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":128,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":129,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":130,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the EVENT command input to create an `Event` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":131,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":132,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the EVENT command.","lastModifiedDate":"2024-01-28"},{"lineNumber":133,"author":{"gitId":"pjanthony2001"},"content":"     * @return An `Event` task created from the input.","lastModifiedDate":"2024-01-28"},{"lineNumber":134,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":135,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":136,"author":{"gitId":"pjanthony2001"},"content":"    public Task processEvent(String input) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":137,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":138,"author":{"gitId":"pjanthony2001"},"content":"            String restOfInput \u003d input.substring(6);","lastModifiedDate":"2024-01-28"},{"lineNumber":139,"author":{"gitId":"pjanthony2001"},"content":"            String[] splitFrom \u003d restOfInput.split(\" /from \");","lastModifiedDate":"2024-01-22"},{"lineNumber":140,"author":{"gitId":"pjanthony2001"},"content":"            String[] fromTo \u003d splitFrom[1].split(\" /to \");","lastModifiedDate":"2024-01-22"},{"lineNumber":141,"author":{"gitId":"pjanthony2001"},"content":"            String taskName \u003d splitFrom[0];","lastModifiedDate":"2024-01-22"},{"lineNumber":142,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime from \u003d TimeProcessor.fromString(fromTo[0]);","lastModifiedDate":"2024-01-26"},{"lineNumber":143,"author":{"gitId":"pjanthony2001"},"content":"            LocalDateTime to \u003d TimeProcessor.fromString(fromTo[1]);","lastModifiedDate":"2024-01-26"},{"lineNumber":144,"author":{"gitId":"pjanthony2001"},"content":"            return new Event(taskName, from, to);","lastModifiedDate":"2024-01-22"},{"lineNumber":145,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":146,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":147,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(Command.EVENT, input, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":148,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":149,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":150,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":151,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":152,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the MARK or UNMARK command input to extract the task index to be marked or unmarked.","lastModifiedDate":"2024-01-28"},{"lineNumber":153,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":154,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the MARK or UNMARK command.","lastModifiedDate":"2024-01-28"},{"lineNumber":155,"author":{"gitId":"pjanthony2001"},"content":"     * @param cmd The command type (MARK or UNMARK).","lastModifiedDate":"2024-01-28"},{"lineNumber":156,"author":{"gitId":"pjanthony2001"},"content":"     * @return The index of the task to be marked or unmarked.","lastModifiedDate":"2024-01-28"},{"lineNumber":157,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":158,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":159,"author":{"gitId":"pjanthony2001"},"content":"    public Integer processMark(String input, Command cmd) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":160,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-22"},{"lineNumber":161,"author":{"gitId":"pjanthony2001"},"content":"            return Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2024-01-28"},{"lineNumber":162,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":164,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(cmd, input, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":165,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":166,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":167,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":168,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":169,"author":{"gitId":"pjanthony2001"},"content":"     * Processes the FIND command input to extract the search query.","lastModifiedDate":"2024-01-28"},{"lineNumber":170,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":171,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user input for the FIND command.","lastModifiedDate":"2024-01-28"},{"lineNumber":172,"author":{"gitId":"pjanthony2001"},"content":"     * @return The search query to find matching tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":173,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue with the input format or command.","lastModifiedDate":"2024-01-28"},{"lineNumber":174,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":175,"author":{"gitId":"pjanthony2001"},"content":"    public String processFind(String input) throws InputException {","lastModifiedDate":"2024-01-28"},{"lineNumber":176,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":177,"author":{"gitId":"pjanthony2001"},"content":"            return input.split(\" \")[1];","lastModifiedDate":"2024-01-28"},{"lineNumber":178,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":179,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":180,"author":{"gitId":"pjanthony2001"},"content":"            throw InputException.exceptionCommandProcessing(Command.FIND, input, e);","lastModifiedDate":"2024-01-28"},{"lineNumber":181,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":182,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":183,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":183}},{"path":"src/main/java/duke/exceptions/InputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.exceptions;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import duke.command.Command;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":" * The `InputException` class represents an exception related to input processing.","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"public class InputException extends Exception {","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"    public InputException(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"        super(message);","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"    public InputException(String message, Throwable cause) {","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"        super(message, cause);","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"     * Creates an `InputException` for command processing with a specific command, input, and cause.","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"     * @param command The command being processed when the exception occurred.","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The input associated with the exception.","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     * @param cause The cause of the exception (a Throwable object).","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * @return An `InputException` with a message describing the error during command processing.","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    public static InputException exceptionCommandProcessing(Command command, String input, Throwable cause) {","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"        String message \u003d \"Something went wrong when processing your \" + command + \"command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"            + \"Check your input again: \" + input;","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"        return new InputException(message, cause);","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":30}},{"path":"src/main/java/duke/exceptions/ProcessingException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.exceptions;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":" * The `ProcessingException` class represents an exception related to processing tasks or data in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"public class ProcessingException extends Exception {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"    public ProcessingException(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"        super(message);","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"    public ProcessingException(String message, Throwable cause) {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"        super(message, cause);","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"pjanthony2001":14}},{"path":"src/main/java/duke/exceptions/StartUpException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.exceptions;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":" * The `StartUpException` class represents an exception related to startup issues in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"public class StartUpException extends Exception {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"    public StartUpException(String message) {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"        super(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":10}},{"path":"src/main/java/duke/search/Search.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.search;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":" * The `Search` class provides a utility for searching tasks in a list based on a query.","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"public class Search {","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"     * Searches for tasks in the given list that match the specified query.","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"     * @param list  The list of tasks to search within.","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"     * @param query The search query to match against task names.","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"     * @return An ArrayList of tasks that match the query.","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    public static ArrayList\u003cTask\u003e search(ArrayList\u003cTask\u003e list, String query) {","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"        Pattern pattern \u003d Pattern.compile(\".*\\\\b\" + query.toLowerCase() + \"\\\\b.*\");","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"        for (Task task : list) {","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"            boolean isMatch \u003d pattern.matcher(task.getTaskName().toLowerCase()).matches();","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"            if (isMatch) {","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"                resultList.add(task);","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"        return resultList;","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"pjanthony2001":31}},{"path":"src/main/java/duke/storage/LocalStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.io.File;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"import java.util.List;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":" * The `LocalStorage` class manages the local storage and retrieval of tasks in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":" * It provides methods for loading, saving, and clearing tasks from a local file.","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"public class LocalStorage {","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    private final boolean createdNewFile;","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"    private PrintWriter printWriter;","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"    private final Scanner scan;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"    private final File saveFile;","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `LocalStorage` object with the specified file location.","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"     * @param fileLocation The file location where tasks are stored.","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"     * @throws IOException If an I/O error occurs while creating or accessing the file.","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"    public LocalStorage(String fileLocation) throws IOException {","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"        this.saveFile \u003d new File(fileLocation);","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"        this.createdNewFile \u003d saveFile.createNewFile();","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"        this.printWriter \u003d new PrintWriter(new FileOutputStream(saveFile, true));","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"        this.scan \u003d new Scanner(saveFile);","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"    public boolean createdNewFile() {","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"        return createdNewFile;","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"     * Loads encoded tasks from the local storage file.","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"     * @return A list of encoded task strings loaded from the file.","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"    public ArrayList\u003cString\u003e load() {","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"        while (scan.hasNextLine()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"            String encodedTask \u003d scan.nextLine();","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"            list.add(encodedTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"        return list;","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"     * Saves encoded tasks to the local storage file, overwriting existing data.","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"     * @param encodedTasks A stream of encoded task strings to be saved.","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"     * @throws IOException If an I/O error occurs while saving the data.","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"    public void save(Stream\u003cString\u003e encodedTasks) throws IOException {","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"        clearAll();","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"        printWriter \u003d new PrintWriter(new FileOutputStream(saveFile, true));","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"        List\u003cString\u003e encodedTasksList \u003d encodedTasks.collect(Collectors.toList());","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"        for (String string : encodedTasksList) {","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"            printWriter.println(string);","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"        printWriter.close();","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"     * Clears all data in the local storage file.","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"     * @throws IOException If an I/O error occurs while clearing the file.","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"    public void clearAll() throws IOException {","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"        printWriter \u003d new PrintWriter(new FileOutputStream(saveFile, false));","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"        printWriter.close();","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":82}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.ProcessingException;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.StartUpException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":" * The `Storage` class manages the interaction between the temporary storage (`TempStorage`)","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":" * and local storage (`LocalStorage`) for saving, loading, updating, and performing operations","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":" * on tasks in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"public class Storage {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    private final LocalStorage local;","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    private final TempStorage temp;","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `Storage` object with the specified file location.","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * @param fileLocation The file location where tasks are stored.","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     * @throws StartUpException If an error occurs during the startup process, such as file access issues.","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"    public Storage(String fileLocation) throws StartUpException {","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"        temp \u003d new TempStorage();","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"            local \u003d new LocalStorage(fileLocation);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"            if (local.createdNewFile()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"                saveFileNotFound();","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"            } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"                saveFileFound();","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"                ArrayList\u003cString\u003e loadList \u003d local.load();","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"                temp.load(loadList); //Load from local into temp","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IOException | ProcessingException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"An error occurred with the save file. Try again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"            throw new StartUpException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"    private void saveFileNotFound() {","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(\"Save file not found! Created an new one!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"    private void saveFileFound() {","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(\"Save file found! Loading old save...\");","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"     * Updates the local storage with the data from the temporary storage.","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If an error occurs while updating the save file.","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"    public void update() throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"            Stream\u003cString\u003e stringStream \u003d temp.save();","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"            local.save(stringStream);","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"An error occurred while trying to update the save file. Try again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"    public void add(Task task) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"        temp.add(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"    public void delete(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"        temp.delete(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"    public void mark(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"        temp.mark(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"    public void unmark(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"        temp.unmark(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"    public void displayList() {","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"pjanthony2001"},"content":"        temp.displayList();","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"pjanthony2001"},"content":"    public void displaySearchList(String query) {","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"pjanthony2001"},"content":"        temp.displaySearchList(query);","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":89}},{"path":"src/main/java/duke/storage/TempStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.codec.Codec;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.ProcessingException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import duke.search.Search;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"import duke.tasks.Task;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":" * The `TempStorage` class is responsible for temporary storage and management of tasks in memory.","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":" * It allows adding, deleting, marking, unmarking tasks, loading tasks from encoded strings, and","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":" * displaying the task list.","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"public class TempStorage {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    private final Codec codec;","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    private final ArrayList\u003cTask\u003e list;","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     * Initializes a new `TempStorage` object with an empty task list and a `Codec` for encoding and decoding tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"    public TempStorage() {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"        this.codec \u003d new Codec();","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"     * Deletes a task at the specified index from the task list.","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"     * @param i The index of the task to be deleted.","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue executing the delete command or if the index is out of bounds.","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"    public void delete(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"            Task task \u003d list.get(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"            list.remove(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"            System.out.printf(\"I have deleted this:\\n%s%n\", task);","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"Something went wrong when executing your delete command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"                + \"Check your input again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"     * @param i The index of the task to be marked as done.","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue executing the mark command or if the index is out of bounds.","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"    public void mark(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"            Task task \u003d list.get(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"            task.markDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"            System.out.printf(\"I have marked this:\\n%s%n\", task);","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"Something went wrong when executing your mark command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"                + \"Check your input again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"     * @param i The index of the task to be marked as undone.","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue executing the unmark command or if the index is out of bounds.","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"    public void unmark(int i) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"            Task task \u003d list.get(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"            task.markUndone();","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"            System.out.printf(\"I have unmarked this:\\n%s%n\", task);","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"Something went wrong when executing your unmark command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"                + \"Check your input again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"pjanthony2001"},"content":"     * Adds a new task to the task list.","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"pjanthony2001"},"content":"     * @param task The task to be added.","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue executing the add command.","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"pjanthony2001"},"content":"    public void add(Task task) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":91,"author":{"gitId":"pjanthony2001"},"content":"            list.add(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"pjanthony2001"},"content":"            System.out.printf(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.%n\",","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"pjanthony2001"},"content":"                    task,","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"pjanthony2001"},"content":"                    list.size());","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"pjanthony2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"Something went wrong when executing your add command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"pjanthony2001"},"content":"                + \"Check your input again\";","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"pjanthony2001"},"content":"            throw new ProcessingException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":102,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":103,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":104,"author":{"gitId":"pjanthony2001"},"content":"     * Loads tasks from encoded strings and adds them to the task list.","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"pjanthony2001"},"content":"     * @param encodedTasks The list of encoded task strings.","lastModifiedDate":"2024-01-28"},{"lineNumber":107,"author":{"gitId":"pjanthony2001"},"content":"     * @throws ProcessingException If there is an issue decoding and loading tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":109,"author":{"gitId":"pjanthony2001"},"content":"    public void load(ArrayList\u003cString\u003e encodedTasks) throws ProcessingException {","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"pjanthony2001"},"content":"        for (String encodedTask : encodedTasks) {","lastModifiedDate":"2024-01-26"},{"lineNumber":111,"author":{"gitId":"pjanthony2001"},"content":"            Task decodedTask \u003d codec.decode(encodedTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":112,"author":{"gitId":"pjanthony2001"},"content":"            list.add(decodedTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":113,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":114,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":115,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":116,"author":{"gitId":"pjanthony2001"},"content":"    public Stream\u003cString\u003e save() {","lastModifiedDate":"2024-01-26"},{"lineNumber":117,"author":{"gitId":"pjanthony2001"},"content":"        return list.stream().map(codec::encode);","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":120,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":121,"author":{"gitId":"pjanthony2001"},"content":"     * Displays the task list to the console.","lastModifiedDate":"2024-01-28"},{"lineNumber":122,"author":{"gitId":"pjanthony2001"},"content":"     * If the list is empty, it informs the user to add tasks.","lastModifiedDate":"2024-01-28"},{"lineNumber":123,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":124,"author":{"gitId":"pjanthony2001"},"content":"    public void displayList() {","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"pjanthony2001"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"pjanthony2001"},"content":"            System.out.println(\"Your list is empty! Try adding tasks (eg. todo homework)\");","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"pjanthony2001"},"content":"        } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":128,"author":{"gitId":"pjanthony2001"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-01-26"},{"lineNumber":129,"author":{"gitId":"pjanthony2001"},"content":"                Task task \u003d list.get(i);","lastModifiedDate":"2024-01-26"},{"lineNumber":130,"author":{"gitId":"pjanthony2001"},"content":"                System.out.printf(\"%d. %s%n\", i + 1, task);","lastModifiedDate":"2024-01-28"},{"lineNumber":131,"author":{"gitId":"pjanthony2001"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":132,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":133,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":134,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":135,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":136,"author":{"gitId":"pjanthony2001"},"content":"     * Displays a filtered list of tasks matching the search query.","lastModifiedDate":"2024-01-28"},{"lineNumber":137,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":138,"author":{"gitId":"pjanthony2001"},"content":"     * @param query The search query to match against task names.","lastModifiedDate":"2024-01-28"},{"lineNumber":139,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":140,"author":{"gitId":"pjanthony2001"},"content":"    public void displaySearchList(String query) {","lastModifiedDate":"2024-01-28"},{"lineNumber":141,"author":{"gitId":"pjanthony2001"},"content":"        ArrayList\u003cTask\u003e resultList \u003d Search.search(list, query);","lastModifiedDate":"2024-01-28"},{"lineNumber":142,"author":{"gitId":"pjanthony2001"},"content":"        if (resultList.isEmpty()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":143,"author":{"gitId":"pjanthony2001"},"content":"            System.out.println(\"Your search was fruitless. Trying looking again\");","lastModifiedDate":"2024-01-28"},{"lineNumber":144,"author":{"gitId":"pjanthony2001"},"content":"        } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":145,"author":{"gitId":"pjanthony2001"},"content":"            System.out.println(\"Here are your matching search results\");","lastModifiedDate":"2024-01-28"},{"lineNumber":146,"author":{"gitId":"pjanthony2001"},"content":"            for (int i \u003d 0; i \u003c resultList.size(); i++) {","lastModifiedDate":"2024-01-28"},{"lineNumber":147,"author":{"gitId":"pjanthony2001"},"content":"                Task task \u003d resultList.get(i);","lastModifiedDate":"2024-01-28"},{"lineNumber":148,"author":{"gitId":"pjanthony2001"},"content":"                System.out.printf(\"%d. %s%n\", i + 1, task);","lastModifiedDate":"2024-01-28"},{"lineNumber":149,"author":{"gitId":"pjanthony2001"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":150,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":151,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":152,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":152}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import duke.codec.TimeProcessor;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":" * The `Deadline` class represents a task with a specific deadline.","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":" * It extends the `Task` class and inherits its properties and methods.","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"    public Deadline(String taskName, LocalDateTime by) {","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"        this(taskName, by, false);","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `Deadline` task with the given task name, deadline, and completion status.","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     * @param taskName The name or description of the `Deadline` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     * @param by The deadline for the task.","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * @param done A boolean indicating whether the task is completed (true) or not (false).","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    public Deadline(String taskName, LocalDateTime by, Boolean done) {","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"        super(taskName, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"        super.identifier \u003d \"D\";","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"        return String.format(\"%s by: %s\", super.toString(), TimeProcessor.toString(by));","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"    public String[] encode() {","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"        String[] encodedDeadline \u003d new String[4];","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"        String[] encodedTask \u003d super.encode();","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"        System.arraycopy(encodedTask, 0, encodedDeadline, 0, encodedTask.length);","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"        encodedDeadline[3] \u003d TimeProcessor.toString(by);","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"        return encodedDeadline;","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"    public String getTaskName() {","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"        return super.getTaskName();","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":53}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"import duke.codec.TimeProcessor;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":" * The `Event` class represents a task with a specific event duration.","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":" * It extends the `Task` class and inherits its properties and methods.","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"    public Event(String taskName, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"        this(taskName, from, to, false);","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `Event` task with the given task name, event start time, end time, and completion status.","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"     * @param taskName The name or description of the `Event` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"     * @param done A boolean indicating whether the task is completed (true) or not (false).","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"    public Event(String taskName, LocalDateTime from, LocalDateTime to, Boolean done) {","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"        super(taskName, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"        super.identifier \u003d \"E\";","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"        return String.format(\"%s from: %s to: %s\",","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"                super.toString(),","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"                TimeProcessor.toString(from),","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"                TimeProcessor.toString(to)","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"        );","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"    public String[] encode() {","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"        String[] encodedEvent \u003d new String[5];","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"        String[] encodedTask \u003d super.encode();","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"        System.arraycopy(encodedTask, 0, encodedEvent, 0, encodedTask.length);","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"        encodedEvent[3] \u003d TimeProcessor.toString(from);","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"        encodedEvent[4] \u003d TimeProcessor.toString(to);","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"        return encodedEvent;","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"    public String getTaskName() {","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"        return super.getTaskName();","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":60}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":" * The `Task` abstract class serves as the base class for various types of tasks in the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"    protected String identifier;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"    private Boolean done;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"    private String taskName;","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `Task` with the given task name and completion status.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"     * @param done A boolean indicating whether the task is completed (true) or not (false).","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    public Task(String taskName, Boolean done) {","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"        this.done \u003d done;","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"        this.identifier \u003d \"\";","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"    public void markDone() {","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"        done \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"    public void markUndone() {","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"        done \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"    public String getIdentifier() {","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"        return identifier;","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"        return String.format(\"[%s] [%s] %s\", identifier, done ? \"X\" : \" \", taskName);","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"    public String getTaskName() {","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"        return taskName;","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"    public String[] encode() {","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"        return new String[]{identifier, done.toString(), taskName};","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"pjanthony2001":51}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.tasks;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":" * The `Todo` class represents a task without a specific deadline or time range.","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":" * It extends the `Task` class and inherits its properties and methods.","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"        this(taskName, false);","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"     * Constructs a new `Todo` task with the given task name and completion status.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"     * @param taskName The name or description of the `Todo` task.","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"     * @param done A boolean indicating whether the task is completed (true) or not (false).","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"    public Todo(String taskName, Boolean done) {","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"        super(taskName, done);","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"        super.identifier \u003d \"T\";","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"        return super.toString();","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"    public String getTaskName() {","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"        return super.getTaskName();","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":33}},{"path":"src/main/java/duke/ui/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke.ui;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"import duke.command.Command;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"import duke.command.CommandProcessor;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.InputException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.ProcessingException;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"import duke.exceptions.StartUpException;","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"import duke.storage.Storage;","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"/**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":" * The `UserInterface` class handles user interactions and serves as the main interface for the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":" */","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"public class UserInterface {","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"    private final Scanner scan;","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"    private CommandProcessor cmd;","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"    private boolean startUpSuccess \u003d false;","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"     * Initializes a new `UserInterface` object, sets up a scanner for user input,","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"     * and attempts to start the Duke application.","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"pjanthony2001"},"content":"    public UserInterface() {","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"pjanthony2001"},"content":"        scan \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"pjanthony2001"},"content":"            String fileLocation \u003d \"./savefile.txt\";","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"pjanthony2001"},"content":"            Storage storage \u003d new Storage(fileLocation);","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"pjanthony2001"},"content":"            cmd \u003d new CommandProcessor(storage);","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"pjanthony2001"},"content":"            startUpSuccess \u003d true;","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"pjanthony2001"},"content":"        } catch (StartUpException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"pjanthony2001"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":39,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"pjanthony2001"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"pjanthony2001"},"content":"    public void greet() {","lastModifiedDate":"2024-01-22"},{"lineNumber":43,"author":{"gitId":"pjanthony2001"},"content":"        String greeting \u003d \"Hi! My name is HAL9000\";","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(greeting);","lastModifiedDate":"2024-01-22"},{"lineNumber":45,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":46,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"pjanthony2001"},"content":"     * Displays a farewell message to the user.","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"pjanthony2001"},"content":"    public void exit() {","lastModifiedDate":"2024-01-22"},{"lineNumber":51,"author":{"gitId":"pjanthony2001"},"content":"        String exit \u003d \"Bye! See ya soon\";","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(exit);","lastModifiedDate":"2024-01-22"},{"lineNumber":53,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":54,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":55,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"pjanthony2001"},"content":"     * Displays a message indicating a startup failure to the user.","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"pjanthony2001"},"content":"    public void startUpFailure() {","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"pjanthony2001"},"content":"        System.out.println(\"Hi, you failed to start up properly! Sorry, bye!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":62,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"pjanthony2001"},"content":"     * Polls for user input and processes commands until the user decides to exit.","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"pjanthony2001"},"content":"    public void poll() {","lastModifiedDate":"2024-01-22"},{"lineNumber":66,"author":{"gitId":"pjanthony2001"},"content":"        boolean polling \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":67,"author":{"gitId":"pjanthony2001"},"content":"        while (polling) {","lastModifiedDate":"2024-01-22"},{"lineNumber":68,"author":{"gitId":"pjanthony2001"},"content":"            String input \u003d scan.nextLine();","lastModifiedDate":"2024-01-22"},{"lineNumber":69,"author":{"gitId":"pjanthony2001"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"pjanthony2001"},"content":"                Command command \u003d processCommand(input);","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"pjanthony2001"},"content":"                if (command.isExit()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"pjanthony2001"},"content":"                    polling \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":73,"author":{"gitId":"pjanthony2001"},"content":"                } else {","lastModifiedDate":"2024-01-22"},{"lineNumber":74,"author":{"gitId":"pjanthony2001"},"content":"                    cmd.processData(command, input);","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"pjanthony2001"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"pjanthony2001"},"content":"            } catch (InputException | ProcessingException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"pjanthony2001"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"pjanthony2001"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":80,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":81,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"pjanthony2001"},"content":"     * Parses and returns the appropriate command based on user input.","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"pjanthony2001"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"pjanthony2001"},"content":"     * @param input The user\u0027s input string.","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"pjanthony2001"},"content":"     * @return The corresponding `Command` enum value.","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"pjanthony2001"},"content":"     * @throws InputException If there is an issue processing the input or if the command is unrecognized.","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"pjanthony2001"},"content":"    public Command processCommand(String input) throws InputException {","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"pjanthony2001"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":91,"author":{"gitId":"pjanthony2001"},"content":"            String commandString \u003d input.split(\" \")[0];","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"pjanthony2001"},"content":"            return Command.valueOf(commandString.toUpperCase());","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"Something went wrong when processing your command: \\n\"","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"pjanthony2001"},"content":"                + \"Check your input again: \" + input;","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"pjanthony2001"},"content":"            throw new InputException(message, e);","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"pjanthony2001"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"pjanthony2001"},"content":"            String message \u003d \"You inputted an unrecognizable command\";","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"pjanthony2001"},"content":"            throw new InputException(message);","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":102,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":103,"author":{"gitId":"pjanthony2001"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":104,"author":{"gitId":"pjanthony2001"},"content":"     * Starts the Duke application by displaying a greeting, polling for user input, and then exiting.","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"pjanthony2001"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"pjanthony2001"},"content":"    public void start() {","lastModifiedDate":"2024-01-22"},{"lineNumber":107,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"pjanthony2001"},"content":"        if (!startUpSuccess) {","lastModifiedDate":"2024-01-26"},{"lineNumber":109,"author":{"gitId":"pjanthony2001"},"content":"            startUpFailure();","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"pjanthony2001"},"content":"            return;","lastModifiedDate":"2024-01-26"},{"lineNumber":111,"author":{"gitId":"pjanthony2001"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":112,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":113,"author":{"gitId":"pjanthony2001"},"content":"        greet();","lastModifiedDate":"2024-01-22"},{"lineNumber":114,"author":{"gitId":"pjanthony2001"},"content":"        poll();","lastModifiedDate":"2024-01-22"},{"lineNumber":115,"author":{"gitId":"pjanthony2001"},"content":"        exit();","lastModifiedDate":"2024-01-22"},{"lineNumber":116,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":117,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"pjanthony2001":117}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"package duke;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"public class DukeTest {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"    public void dummyTest() {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"    @Test","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"pjanthony2001":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pjanthony2001"},"content":"Hello","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"pjanthony2001"},"content":"DEADLINE /by Monday","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"pjanthony2001"},"content":"deadline /from Monday","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"pjanthony2001"},"content":"deadline /BY Monday","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"pjanthony2001"},"content":"TODO homework","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"pjanthony2001"},"content":"EVENT concert /from 5pm /to 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"pjanthony2001"},"content":"event concert /by 5pm /to 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"pjanthony2001"},"content":"event concert /from 5pm /by 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"pjanthony2001"},"content":"event concert /FROM 5pm /to 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"pjanthony2001"},"content":"event concert /from 5pm /TO 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"pjanthony2001"},"content":"list ","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"pjanthony2001"},"content":"deadline /by Monday","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"pjanthony2001"},"content":"todo homework","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"pjanthony2001"},"content":"event concert /from 5pm /to 6pm","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"pjanthony2001"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"pjanthony2001"},"content":"mark 2","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":21,"author":{"gitId":"pjanthony2001"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":22,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":23,"author":{"gitId":"pjanthony2001"},"content":"delete 3","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"pjanthony2001"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"pjanthony2001"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"pjanthony2001":25}}]
