[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"### Tips","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"1. Creating a jar `./gradlew clean shadowJar`. Clean is optional ","lastModifiedDate":"2024-02-18"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"2. `java -jar {filename}.jar` - Runs a jar file","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"3. ","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"tankh99":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"    id \"checkstyle\"","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"checkstyle {","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    toolVersion \u003d \"10.2\"","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    mainClass.set(\"baron.Main\")","lastModifiedDate":"2024-02-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    String version \u003d \"0.2\"","lastModifiedDate":"2024-02-18"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    archiveBaseName \u003d \"baron\"","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    archiveVersion \u003d version","lastModifiedDate":"2024-02-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tankh99":25,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"# Baron","lastModifiedDate":"2024-02-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"## About","lastModifiedDate":"2024-02-17"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"Baron Von Burger is of noble birth who has graciously let us immortalise him as a digital avatar named Baron.","lastModifiedDate":"2024-02-17"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"You can have Baron role-play as your little servant and he\u0027ll follow your orders, although he won\u0027t be nice about it..","lastModifiedDate":"2024-02-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"## Commands","lastModifiedDate":"2024-02-17"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"1. [Quick Start](#quickstart)","lastModifiedDate":"2024-02-17"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"2. [Features](#features)","lastModifiedDate":"2024-02-17"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    1. [Listing all tasks](#listing-tasks) - `tasks`","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    2. [Creating todos](#creating-todos) - `todo`","lastModifiedDate":"2024-02-17"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    3. [Creating deadlines](#creating-deadlines) - `deadline`","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    4. [Creating events](#creating-events) - `event`","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    5. [Marking tasks](#marking-tasks) - `mark`","lastModifiedDate":"2024-02-17"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    6. [Unmarking tasks](#unmarking-tasks) - `unmark`","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    7. [Deleting tasks](#deleting-tasks) - `delete\u0027","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    8. [Listing all clients](#listing-clients) - `client`","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    9. [Deleting clients](#deleting-clients) - `discharge`","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"3. [Future Features](#future-features)","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"## Quickstart","lastModifiedDate":"2024-02-17"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"1. Ensure you have Java `11` installed on your computer","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"2. Copy `baron.jar` to any folder","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"3. Type `java -jar baron.jar` in the same fodler as `baron.jar` to run the application","lastModifiedDate":"2024-02-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"## Features","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"1. Create, mark and delete 3 different tasks: `Todo`, `Deadline` and `Event`","lastModifiedDate":"2024-02-17"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"2. All data is saved locally in a text file automatically","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"## Listing Tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"Lists all created tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"Format: `tasks`","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"## Creating Todos","lastModifiedDate":"2024-02-17"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"Creates a todo.","lastModifiedDate":"2024-02-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"Format: `todo NAME`","lastModifiedDate":"2024-02-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"Example: `todo Finish Homework`","lastModifiedDate":"2024-02-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"## Creating Deadlines","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"Creates a deadline that requires a valid date time.","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"Format: `deadline NAME /by DATE_FORMAT`","lastModifiedDate":"2024-02-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"Date Format: `d/M/yyyy HHmm`. E.g. `21/10/1999 1600`","lastModifiedDate":"2024-02-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"Example: `deadline Homework Submission /by 1/5/2024`","lastModifiedDate":"2024-02-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"## Creating Events","lastModifiedDate":"2024-02-17"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"Creates an event.","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"Format: `event NAME /from FROM /to TO`","lastModifiedDate":"2024-02-17"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"Example: `event House Party /from today /to tomorrow`","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"## Marking Tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"Marks a task as done. Denoted by [x] when listing tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"Format: `mark INDEX`. Marks the task at the specified index as done","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"Example: `mark 1`","lastModifiedDate":"2024-02-17"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"Note: INDEX refers to the index in the array list and not the actual id value inside the data file.","lastModifiedDate":"2024-02-17"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"## Unmarking Tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"Marks a task as not done. Denoted by [ ] when listing tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"Format: `unmark INDEX`. Marks the task at the specified index as not done","lastModifiedDate":"2024-02-17"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"Example: `mark 1`","lastModifiedDate":"2024-02-17"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"## Deleting Tasks","lastModifiedDate":"2024-02-17"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"Deletes a task at the specified index","lastModifiedDate":"2024-02-17"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"Format: `delete INDEX` - Deletes a task at the specified index","lastModifiedDate":"2024-02-17"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"Example: `delete 1`","lastModifiedDate":"2024-02-17"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"## Listing Clients","lastModifiedDate":"2024-02-17"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"Lists all created clients. Clients have the following attributes","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"1. Student Number - `/sn`","lastModifiedDate":"2024-02-17"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"2. Email -`/email`","lastModifiedDate":"2024-02-17"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"3. Name -`/name`","lastModifiedDate":"2024-02-17"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"4. Contact Number - `/cn`","lastModifiedDate":"2024-02-17"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"Format: `client /sn STUDENT_NUMBER /email EMAIL /name NAME /cn CONTACT_NUMBER`","lastModifiedDate":"2024-02-17"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"Example: `client /sn A01234567X /email jondoe@u.nus.edu /name John Doe /cn 98837093`","lastModifiedDate":"2024-02-17"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"Note: Baron will not understand when the commands are not written in order. This will be improved in a future","lastModifiedDate":"2024-02-17"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"release","lastModifiedDate":"2024-02-17"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"## Cischarging Clients","lastModifiedDate":"2024-02-17"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"Discharges a client at the specified index.  Performs the same function as `delete`","lastModifiedDate":"2024-02-17"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"Format: `discharge INDEX`","lastModifiedDate":"2024-02-17"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"Example: `discharge 1`","lastModifiedDate":"2024-02-17"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"## Future Features","lastModifiedDate":"2024-02-17"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"What\u0027s next for Baron v2.0?","lastModifiedDate":"2024-02-17"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"1. Forcibly gain access to your file system and credit card information","lastModifiedDate":"2024-02-17"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"2. Collect monthly taxes from you","lastModifiedDate":"2024-02-17"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"3. Send you for execution","lastModifiedDate":"2024-02-17"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":108,"author":{"gitId":"tankh99"},"content":"Now that you\u0027ve seen what Baron can do, what can you do for Baron?","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"tankh99":94,"-":14}},{"path":"src/main/java/baron/Baron.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import baron.managers.TaskManager;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" * Main chatbot logic that handles input from user and outputs an appropriate response.","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"public class Baron {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    private TaskManager taskManager;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    public Baron() {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"        this.taskManager \u003d new TaskManager();","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        String output \u003d taskManager.handleInput(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"        return output;","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"tankh99":17,"-":2}},{"path":"src/main/java/baron/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron;","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.views.MainWindow;","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":" * Main entry point for the application. Launches a GUI which the user can chat with Baron.","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"public class Launcher extends Application {","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    private final Baron baron \u003d new Baron();","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public void start(Stage stage) throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        FXMLLoader loader \u003d new FXMLLoader(Baron.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        AnchorPane ap \u003d loader.load();","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        stage.setScene(scene);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        loader.\u003cMainWindow\u003egetController().setBotInstance(baron);","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        stage.setTitle(\"Baron.\");","lastModifiedDate":"2024-02-15"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        stage.show();","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"tankh99":27}},{"path":"src/main/java/baron/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-22"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-22"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" * Entry point file to the chatbot.","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-22"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"public class Main {","lastModifiedDate":"2024-02-22"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-22"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"        Application.launch(Launcher.class, args);","lastModifiedDate":"2024-02-22"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-22"}],"authorContributionMap":{"tankh99":12}},{"path":"src/main/java/baron/dao/BaseDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import baron.models.BaseModel;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" * Abstraction class for DAo to implement all required methods.","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" * TODO: Implement this to the other DAOs","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"public abstract class BaseDao {","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    protected String name;","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    public BaseDao(String name) {","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * Creates a new modek with specified parameters","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @param model Model to be added","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public void add(BaseModel model) {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(this.name);","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        String data \u003d this.toDataString(model);","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        long id \u003d Database.create(table.toPath(), data);","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        model.setId((int) id);","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"     * Deletes a line wit hthe specified line from the a specific file","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * @param id   id of the line to delete","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    public void delete(long id) {","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(this.name);","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        Database.delete(table.toPath(), id);","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"     * Converts user input from chat into object.","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"     * @param input User input","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"     * @return Converted object","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    public abstract BaseModel fromInputString(String input);","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"     * Converts data input from file into object.","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"     * @param input User input","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"     * @return Converted object","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"    public abstract BaseModel fromDataString(String input);","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    // TODO: Either remove the implementation or make it abstract somehow","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"    public String toDataString(BaseModel t) {","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        return \"\";","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"    };","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    public abstract BaseModel getFrom(String input);","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"     * Gets all models from the data file","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"     * @return Returns a list of models from data file","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"    public abstract \u003cT\u003e List\u003cT\u003e getItems();","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"tankh99":65}},{"path":"src/main/java/baron/dao/ClientDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.enums.Argument;","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import baron.models.Client;","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" * Manages Client database operations.","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" * Input format: client /sn A12345678X /email peterparker@u.nus.edu /cn 99801234 /name Peter.","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"public class ClientDao extends BaseDao {","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public static final String NAME \u003d \"client\";","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public ClientDao() {","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        super(NAME);","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * Adds a new client.","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     * @return The newly-created client","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    public Client add(Client client) {","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(this.name);","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        String data \u003d toDataString(client);","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        long id \u003d Database.create(table.toPath(), data);","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        client.setId((int) id);","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        return client;","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     * Deletes the client by ID","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"     * @param id index of the line to delete","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    public void delete(long id) {","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(this.name);","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        Database.delete(table.toPath(), id);","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    public Client fromInputString(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        String studentNumber \u003d getStudentNumber(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        String email \u003d getEmail(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        String name \u003d getName(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        String contactNumber \u003d getContactNumber(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        return new Client(studentNumber, email, name, contactNumber);","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    public Client fromDataString(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d input.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"        int id \u003d Integer.parseInt(segments[0]);","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        String studentNumber \u003d segments[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        String email \u003d segments[2];","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        String name \u003d segments[3];","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        String contactNumber \u003d segments[4];","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        Client client \u003d new Client(id, studentNumber, email, name, contactNumber);","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        return client;","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"    public String toDataString(Client c) {","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        return c.getStudentNumber() + \" | \" + c.getEmail() + \" | \" + c.getName() + \" | \" + c.getContactNumber();","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"    public Client getFrom(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"        return null;","lastModifiedDate":"2024-02-14"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"    public List\u003cClient\u003e getItems() {","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(this.name);","lastModifiedDate":"2024-02-14"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        List\u003cClient\u003e models \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-14"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-02-14"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"            Files.lines(table.toPath()).forEach(line -\u003e {","lastModifiedDate":"2024-02-14"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"                Client t \u003d fromDataString(line);","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"                models.add(t);","lastModifiedDate":"2024-02-14"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"            });","lastModifiedDate":"2024-02-14"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-02-14"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-02-14"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"        return models;","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"    private String getStudentNumber(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(","lastModifiedDate":"2024-02-14"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"                input,","lastModifiedDate":"2024-02-14"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"                Argument.STUDENT_NUMBER.getArg(),","lastModifiedDate":"2024-02-14"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"                Argument.EMAIL.getArg());","lastModifiedDate":"2024-02-14"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"    private String getEmail(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(","lastModifiedDate":"2024-02-14"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"                input,","lastModifiedDate":"2024-02-14"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"                Argument.EMAIL.getArg(),","lastModifiedDate":"2024-02-14"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"                Argument.NAME.getArg());","lastModifiedDate":"2024-02-14"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"    private String getName(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(","lastModifiedDate":"2024-02-14"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"                input,","lastModifiedDate":"2024-02-14"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"                Argument.NAME.getArg(),","lastModifiedDate":"2024-02-14"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"                Argument.CONTACT_NUMBER.getArg());","lastModifiedDate":"2024-02-14"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":108,"author":{"gitId":"tankh99"},"content":"    private String getContactNumber(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":109,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(","lastModifiedDate":"2024-02-14"},{"lineNumber":110,"author":{"gitId":"tankh99"},"content":"                input,","lastModifiedDate":"2024-02-14"},{"lineNumber":111,"author":{"gitId":"tankh99"},"content":"                Argument.CONTACT_NUMBER.getArg(),","lastModifiedDate":"2024-02-14"},{"lineNumber":112,"author":{"gitId":"tankh99"},"content":"                null);","lastModifiedDate":"2024-02-14"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":114,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"tankh99":114}},{"path":"src/main/java/baron/dao/DeadlineDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import baron.enums.Argument;","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import baron.enums.TaskType;","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import baron.models.Deadline;","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import baron.utils.DateUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":" * Manages all DB operations for deadlines.","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"public class DeadlineDao extends TaskDao {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    public static final String NAME \u003d TaskType.DEADLINE.getTaskType();","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    private static final String ARG_BY \u003d Argument.BY.getArg();","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * Creates a deadline object from the given input string","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     * @param input input string with the format deadline deadline_name /by arbitrary_date","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"     * @return Created deadline object","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    public static Deadline getFrom(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        String name \u003d getName(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        LocalDateTime deadline \u003d getDeadline(input);","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        Deadline deadlineTask \u003d new Deadline(name, deadline);","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        return deadlineTask;","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    private static String getName(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        String name \u003d StringUtils.getValueOfCommand(input, DeadlineDao.NAME, ARG_BY);","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        return name;","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    private static LocalDateTime getDeadline(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        String deadlineString \u003d StringUtils.getValueOfCommand(input, ARG_BY, null);","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        LocalDateTime deadline \u003d DateUtils.parseDate(deadlineString);","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        return deadline;","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"     * Gets all deadlines from the deadline.txt file","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"     * @return Returns a list of deadlines that was parsed","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    public static List\u003cDeadline\u003e getDeadlines() {","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(NAME);","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        List\u003cDeadline\u003e deadlines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"            Files.lines(table.toPath()).forEach(line -\u003e {","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"                Deadline deadline \u003d Deadline.fromDataString(line);","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"                deadlines.add(deadline);","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"            });","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        return deadlines;","lastModifiedDate":"2024-02-04"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"tankh99":66}},{"path":"src/main/java/baron/dao/EventDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.enums.Argument;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import baron.enums.TaskType;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import baron.models.Event;","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":" * Manages all DB operations for events","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"public class EventDao extends TaskDao {","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public static final String NAME \u003d TaskType.EVENT.getTaskType();","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    private static final String ARG_FROM \u003d Argument.FROM.getArg();","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    private static final String ARG_TO \u003d Argument.TO.getArg();","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     * Creates a event object from the given input string","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     * @param input input string with the format event EVENT NAME /from FROM DATE /by BY DATE","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     * @return Created event object","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    public static Event getFrom(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        String name \u003d getEventName(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        String startDate \u003d getEventFrom(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        String endDate \u003d getEventTo(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        Event event \u003d new Event(name, startDate, endDate);","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        return event;","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    private static String getEventName(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(input, EventDao.NAME, EventDao.ARG_FROM);","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    private static String getEventFrom(String input) {","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(input, EventDao.ARG_FROM, EventDao.ARG_TO);","lastModifiedDate":"2024-02-12"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    private static String getEventTo(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        return StringUtils.getValueOfCommand(input, EventDao.ARG_TO, null);","lastModifiedDate":"2024-02-12"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"     * Gets all deadlines from the deadline.txt file","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"     * @return Returns a list of deadlines that was parsed","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"    public static List\u003cEvent\u003e getEvents() {","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(NAME);","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"            Files.lines(table.toPath()).forEach(line -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"                Event event \u003d Event.fromDataString(line);","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"                events.add(event);","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"            });","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        return events;","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"tankh99":67}},{"path":"src/main/java/baron/dao/TaskDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.models.Task;","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * This class offers more general functions that encompasses the different Task inheritors like marking as done","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class TaskDao {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"     * Finds a line with the given id and the task file name to mark as done/undone","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     * @param id   the id of the task","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * @param name the file name of the object to update. e.g. if marking a todo, then it should be value of","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     *             TodoDao NAME","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * @param task The task to modify and update","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @param done Whether it should be marked as done or not","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @return Task wit hthe updated values","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static Task mark(long id, String name, Task task, boolean done) {","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(name);","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        task.setDone(done);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        String data \u003d task.toDataString();","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        Database.updateById(table.toPath(), id, data);","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        return task;","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     * Creates a new task object with a specified file name. Shared with other files like","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * Event, Todo and Deadline","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param name Name of the file to create","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * @param task Task object to add","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    public static void add(String name, Task task) {","lastModifiedDate":"2024-02-07"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(name);","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        String data \u003d task.toDataString();","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        long id \u003d Database.create(table.toPath(), data);","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        task.setId((int) id);","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     * Deletes a line wit hthe specified line from the a specific file","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"     * @param name Name of the file","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"     * @param id   id of the line to delete","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"    public static void delete(String name, long id) {","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(name);","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        Database.delete(table.toPath(), id);","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"tankh99":54}},{"path":"src/main/java/baron/dao/TodoDao.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.dao;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import baron.database.Database;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.enums.TaskType;","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import baron.models.Todo;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" * Manages all DB operations for Todos","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"public class TodoDao extends TaskDao {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public static final String NAME \u003d TaskType.TODO.getTaskType();","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     * Creates a todo object from the given input string","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     * @param input input string with the format todo TODO NAME","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     * @return Created Todo object","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    public static Todo getFrom(String input) {","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        String value \u003d StringUtils.getValueOfCommand(input, TodoDao.NAME, null);","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        return new Todo(value);","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * Gets all todos  from the deadline.txt file","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @return Returns a list of todos that was parsed","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    public static List\u003cTodo\u003e getTodos() {","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        File table \u003d Database.getTable(NAME);","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        List\u003cTodo\u003e todos \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"            Files.lines(table.toPath()).forEach(line -\u003e {","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"                Todo todo \u003d Todo.fromDataString(line);","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                todos.add(todo);","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"            });","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        return todos;","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"tankh99":50}},{"path":"src/main/java/baron/database/Database.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.database;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.File;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import baron.utils.FileUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":" * Handles CRUD operations for a given file path, create, read, update and delete","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"public class Database {","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    // Base directory for the files to be read from. Defaults to root directory","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public static final String BASE_DIR \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     * Gets the File object from the BASE_DIR with the specified fileName.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     * Creates the file if it doesn\u0027t exist","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     * @param fileName File name of the file to read from","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * @return the file object of the table","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    public static File getTable(String fileName) {","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            String filePath \u003d BASE_DIR + \"/\" + fileName + \".txt\";","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            File db \u003d new File(filePath);","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            if (!db.exists() \u0026\u0026 db.createNewFile()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"                System.out.println(\"Creating new file\");","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"            assert Files.exists(db.toPath()) : (filePath + \" failed to be created fucker\");","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"            return db;","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        return null;","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"     * Appends a new line to the end of the file","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     * @param filePath Filepath to write","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"     * @param line     Line to append to the end of file","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"     * @return the id of the newly appended line, which is actually just lineNumber - 1","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    public static long create(Path filePath, String line) {","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            assert Files.exists(filePath) : filePath + \" doesn\u0027t exist\";","lastModifiedDate":"2024-02-12"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"            long count \u003d Files.lines(filePath).count();","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"            long id \u003d count;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"            line \u003d id + \" | \" + line;","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"            List\u003cString\u003e lines \u003d FileUtils.read(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"            lines.add(line);","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            FileUtils.write(filePath, lines);","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"            return id;","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"            System.err.println(\"Error occurred when writing to \" + filePath);","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        return -1; // -1 indicates error","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"     * This just extracts the ID from the given line","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"     * @param line line to extract id from","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"     * @return the id, if it exists","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"    private static int findId(String line) {","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d StringUtils.splitDataString(line);","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        return Integer.parseInt(segments[0]);","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"     * Finds the line with the given ID and updates it","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"     * @param filePath fulle file path of the file to update","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"     * @param id       id of the line","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"     * @param newLine  the new line data to update","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"    public static void updateById(Path filePath, long id, String newLine) {","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"        newLine \u003d id + \" | \" + newLine;","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"        List\u003cString\u003e lines \u003d FileUtils.read(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"        for (int i \u003d 0; i \u003c lines.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"            String line \u003d lines.get(i);","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"            long taskId \u003d findId(line);","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"            if (taskId \u003d\u003d id) {","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"                lines.set(i, newLine);","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"        FileUtils.write(filePath, lines);","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"     * Deletes a line with the specified. In case the line doesn\u0027t exist, it will just throw an","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"     * index out of bounds execption for now","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"     * @param filePath full path of file to perofrm IO on","lastModifiedDate":"2024-02-02"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"     * @param id       id of line to delete","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"    public static void delete(Path filePath, long id) {","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"tankh99"},"content":"        List\u003cString\u003e lines \u003d FileUtils.read(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"tankh99"},"content":"        int idToDelete \u003d -1;","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"tankh99"},"content":"        for (int i \u003d 0; i \u003c lines.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"tankh99"},"content":"            String line \u003d lines.get(i);","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"tankh99"},"content":"            long taskId \u003d findId(line);","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"            if (taskId \u003d\u003d id) {","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"tankh99"},"content":"                // Avoid concurrent moficiation","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"tankh99"},"content":"                idToDelete \u003d i;","lastModifiedDate":"2024-01-31"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"                break; // Breaking because we assume that ID is unique","lastModifiedDate":"2024-01-31"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":118,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":119,"author":{"gitId":"tankh99"},"content":"        lines.remove(idToDelete);","lastModifiedDate":"2024-01-31"},{"lineNumber":120,"author":{"gitId":"tankh99"},"content":"        FileUtils.write(filePath, lines);","lastModifiedDate":"2024-01-31"},{"lineNumber":121,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":122,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"tankh99":122}},{"path":"src/main/java/baron/enums/Argument.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.enums;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Enum for possible argument types that a user can input.","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"public enum Argument {","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    BY(\"/by\"),","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    FROM(\"/from\"),","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    TO(\"/to\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    NAME(\"/name\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    EMAIL(\"/email\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    CONTACT_NUMBER(\"/cn\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    STUDENT_NUMBER(\"/sn\");","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    private final String arg;","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    Argument(String arg) {","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"        this.arg \u003d arg;","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    public String getArg() {","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        return arg;","lastModifiedDate":"2024-02-12"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"tankh99":24}},{"path":"src/main/java/baron/enums/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.enums;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Handles different types of user commands and input.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"public enum Command {","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    LIST_TASKS(\"tasks\"),","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    LIST_CLIENTS(\"clients\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    FIND(\"find\"),","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    DELETE_TASK(\"delete\"),","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    DELETE_CLIENT(\"discharge\"),","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    HELP(\"help\"),","lastModifiedDate":"2024-02-22"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    BYE(\"bye\");","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    private final String command;","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    Command(String command) {","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        this.command \u003d command;","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    public String getCommand() {","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        return command;","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"tankh99":27}},{"path":"src/main/java/baron/enums/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.enums;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Enum for the different task types, which is used for determining user input commands","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" * as well as datbaase file names.","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"public enum TaskType {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    EVENT(\"event\");","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    private final String taskType;","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    TaskType(String taskType) {","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public String getTaskType() {","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        return taskType;","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"tankh99":22}},{"path":"src/main/java/baron/managers/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.managers;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.dao.*;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import baron.enums.Command;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import baron.enums.TaskType;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import baron.models.*;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"// TODO: Stretch goal: add exceptions for marking and listing non-existent indexes","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":" * Manages response handling given user\u0027s input.","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"public class TaskManager {","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    private final List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    private final List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    private ClientDao clientDao \u003d new ClientDao();","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     * Initialises data from the different files so that it\u0027s all shown in 1 task list.","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    public TaskManager() {","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        List\u003cTodo\u003e todos \u003d TodoDao.getTodos();","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        tasks.addAll(todos);","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        List\u003cDeadline\u003e deadlines \u003d DeadlineDao.getDeadlines();","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        tasks.addAll(deadlines);","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        List\u003cEvent\u003e events \u003d EventDao.getEvents();","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        tasks.addAll(events);","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        clients.addAll(clientDao.getItems());","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     * Handles user input.","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"     * @param input Input given by user","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    public String handleInput(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"            input \u003d input.trim();","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"            String command \u003d StringUtils.getCommand(input);","lastModifiedDate":"2024-02-12"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            // Decided to pass the entire input instead because otherwise we would have to parse the input into","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"            // command and value which would not be appropriate here since it includes a list() function too","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"            if (command.equals(TodoDao.NAME)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"                return addTodo(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(DeadlineDao.NAME)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"                return addDeadline(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(EventDao.NAME)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"                return addEvent(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(ClientDao.NAME)) {","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"                return addClient(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.LIST_TASKS.getCommand())) {","lastModifiedDate":"2024-02-15"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"                return UiManager.list(this.tasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.LIST_CLIENTS.getCommand())) {","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"                return UiManager.list(this.clients);","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.MARK.getCommand())) {","lastModifiedDate":"2024-02-12"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"                return mark(input, true);","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.UNMARK.getCommand())) {","lastModifiedDate":"2024-02-12"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"                return mark(input, false);","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.DELETE_TASK.getCommand())) {","lastModifiedDate":"2024-02-15"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"                return delete(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.DELETE_CLIENT.getCommand())) {","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"                return deleteClient(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.BYE.getCommand())) {","lastModifiedDate":"2024-02-12"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"                // Exits application","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"                System.exit(0);","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.FIND.getCommand())) {","lastModifiedDate":"2024-02-12"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"                return this.find(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"            } else if (command.equals(Command.HELP.getCommand())) {","lastModifiedDate":"2024-02-22"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"                return UiManager.help();","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"            } else {","lastModifiedDate":"2024-01-23"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"                return \"Command not recognized\";","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-01-23"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        } catch (Exception ex) {","lastModifiedDate":"2024-01-23"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"            System.out.println(ex.getMessage());","lastModifiedDate":"2024-01-23"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"            return ex.getMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"        return \"Something went wrong, please check the logs for details\";","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"    // The below 3 functions help route task to the corresponding data files","lastModifiedDate":"2024-02-12"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"    private String addTodo(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"        Todo todo \u003d TodoDao.getFrom(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"        TaskDao.add(TodoDao.NAME, todo);","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"        return this.addTask(todo);","lastModifiedDate":"2024-02-14"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"    private String addDeadline(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"        Deadline deadline \u003d DeadlineDao.getFrom(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"        DeadlineDao.add(DeadlineDao.NAME, deadline);","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"        return this.addTask(deadline);","lastModifiedDate":"2024-02-14"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"    private String addEvent(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"        Event event \u003d EventDao.getFrom(input);","lastModifiedDate":"2024-01-23"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"        EventDao.add(EventDao.NAME, event);","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"        return this.addTask(event);","lastModifiedDate":"2024-02-14"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"    private String addClient(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"        Client client \u003d clientDao.fromInputString(input);","lastModifiedDate":"2024-02-14"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"        clientDao.add(client);","lastModifiedDate":"2024-02-14"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"        clients.add(client);","lastModifiedDate":"2024-02-14"},{"lineNumber":107,"author":{"gitId":"tankh99"},"content":"        return UiManager.add(client, clients.size());","lastModifiedDate":"2024-02-14"},{"lineNumber":108,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":109,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":110,"author":{"gitId":"tankh99"},"content":"    private String mark(String input, boolean isDone) {","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"tankh99"},"content":"        int taskIndex \u003d Integer.parseInt(StringUtils.getValueOfCommand(input, Command.MARK.getCommand(), null)) - 1;","lastModifiedDate":"2024-02-12"},{"lineNumber":112,"author":{"gitId":"tankh99"},"content":"        assert (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c this.tasks.size()) : \"Accessing a task that doesn\u0027t exist\";","lastModifiedDate":"2024-02-12"},{"lineNumber":113,"author":{"gitId":"tankh99"},"content":"        Task task \u003d this.get(taskIndex);","lastModifiedDate":"2024-01-23"},{"lineNumber":114,"author":{"gitId":"tankh99"},"content":"        TaskType type \u003d getTaskType(task);","lastModifiedDate":"2024-02-12"},{"lineNumber":115,"author":{"gitId":"tankh99"},"content":"        task \u003d TaskDao.mark(task.getId(), type.getTaskType(), task, isDone);","lastModifiedDate":"2024-02-12"},{"lineNumber":116,"author":{"gitId":"tankh99"},"content":"        return UiManager.mark(task, isDone);","lastModifiedDate":"2024-02-07"},{"lineNumber":117,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":118,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":119,"author":{"gitId":"tankh99"},"content":"    protected String delete(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"tankh99"},"content":"        int i \u003d Integer.parseInt(StringUtils.getValueOfCommand(input, Command.DELETE_TASK.getCommand(), null)) - 1;","lastModifiedDate":"2024-02-15"},{"lineNumber":121,"author":{"gitId":"tankh99"},"content":"        Task task \u003d this.tasks.remove(i);","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"tankh99"},"content":"        TaskType type \u003d getTaskType(task);","lastModifiedDate":"2024-02-12"},{"lineNumber":123,"author":{"gitId":"tankh99"},"content":"        TaskDao.delete(type.getTaskType(), task.getId());","lastModifiedDate":"2024-02-12"},{"lineNumber":124,"author":{"gitId":"tankh99"},"content":"        return UiManager.delete(task, this.tasks.size());","lastModifiedDate":"2024-02-07"},{"lineNumber":125,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":127,"author":{"gitId":"tankh99"},"content":"    protected String deleteClient(String input) {","lastModifiedDate":"2024-02-14"},{"lineNumber":128,"author":{"gitId":"tankh99"},"content":"        int i \u003d Integer.parseInt(StringUtils.getValueOfCommand(input, Command.DELETE_CLIENT.getCommand(), null)) - 1;","lastModifiedDate":"2024-02-14"},{"lineNumber":129,"author":{"gitId":"tankh99"},"content":"        Client client \u003d this.clients.remove(i);","lastModifiedDate":"2024-02-14"},{"lineNumber":130,"author":{"gitId":"tankh99"},"content":"        clientDao.delete(client.getId());","lastModifiedDate":"2024-02-14"},{"lineNumber":131,"author":{"gitId":"tankh99"},"content":"        return UiManager.delete(client, this.clients.size());","lastModifiedDate":"2024-02-14"},{"lineNumber":132,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":133,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":134,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"tankh99"},"content":"     * Prints out a list of tasks that match the search term (fuzzy search).","lastModifiedDate":"2024-02-12"},{"lineNumber":136,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"tankh99"},"content":"     * @param input user input","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":139,"author":{"gitId":"tankh99"},"content":"    private String find(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":140,"author":{"gitId":"tankh99"},"content":"        String term \u003d StringUtils.getValueOfCommand(input, Command.FIND.getCommand(), null);","lastModifiedDate":"2024-02-12"},{"lineNumber":141,"author":{"gitId":"tankh99"},"content":"        List\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":142,"author":{"gitId":"tankh99"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":143,"author":{"gitId":"tankh99"},"content":"            Task task \u003d this.tasks.get(i);","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"tankh99"},"content":"            if (task.getName().toLowerCase().contains(term)) {","lastModifiedDate":"2024-02-12"},{"lineNumber":145,"author":{"gitId":"tankh99"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":146,"author":{"gitId":"tankh99"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":147,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":148,"author":{"gitId":"tankh99"},"content":"        return UiManager.find(filteredTasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":149,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":150,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":151,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":152,"author":{"gitId":"tankh99"},"content":"     * Adds a task to the task list and returns formatted output, does not actually add it to the database.","lastModifiedDate":"2024-02-12"},{"lineNumber":153,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-12"},{"lineNumber":154,"author":{"gitId":"tankh99"},"content":"     * @param task Task to aadd","lastModifiedDate":"2024-02-12"},{"lineNumber":155,"author":{"gitId":"tankh99"},"content":"     * @return returns Bot response output","lastModifiedDate":"2024-02-12"},{"lineNumber":156,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":157,"author":{"gitId":"tankh99"},"content":"    protected String addTask(Task task) {","lastModifiedDate":"2024-02-14"},{"lineNumber":158,"author":{"gitId":"tankh99"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":159,"author":{"gitId":"tankh99"},"content":"        return UiManager.add(task, tasks.size());","lastModifiedDate":"2024-02-07"},{"lineNumber":160,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":161,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":162,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-12"},{"lineNumber":163,"author":{"gitId":"tankh99"},"content":"     * Gets the task in the list. Serves as an abstraction.","lastModifiedDate":"2024-02-19"},{"lineNumber":164,"author":{"gitId":"tankh99"},"content":"     * Useful for possible future if we want to change how we store our tasks in memory.","lastModifiedDate":"2024-02-12"},{"lineNumber":165,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-12"},{"lineNumber":166,"author":{"gitId":"tankh99"},"content":"     * @param i index of task to get","lastModifiedDate":"2024-02-12"},{"lineNumber":167,"author":{"gitId":"tankh99"},"content":"     * @return Task object","lastModifiedDate":"2024-02-12"},{"lineNumber":168,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-12"},{"lineNumber":169,"author":{"gitId":"tankh99"},"content":"    private Task get(int i) {","lastModifiedDate":"2024-02-02"},{"lineNumber":170,"author":{"gitId":"tankh99"},"content":"        return this.tasks.get(i);","lastModifiedDate":"2024-02-02"},{"lineNumber":171,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":172,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":173,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":174,"author":{"gitId":"tankh99"},"content":"     * Determines type of task (todo, event) based off the command line string","lastModifiedDate":"2024-01-31"},{"lineNumber":175,"author":{"gitId":"tankh99"},"content":"     * and is used to determine which data file to modify","lastModifiedDate":"2024-02-12"},{"lineNumber":176,"author":{"gitId":"tankh99"},"content":"     * Converts the task to its string representation and takes the first 3 characters of the task","lastModifiedDate":"2024-02-12"},{"lineNumber":177,"author":{"gitId":"tankh99"},"content":"     * and thendetermines the type of task from this.","lastModifiedDate":"2024-02-12"},{"lineNumber":178,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":179,"author":{"gitId":"tankh99"},"content":"     * @param task Task to check type of, e.g. [T][X} Wash dishes","lastModifiedDate":"2024-02-12"},{"lineNumber":180,"author":{"gitId":"tankh99"},"content":"     *              We take the string instead of task itself because","lastModifiedDate":"2024-02-12"},{"lineNumber":181,"author":{"gitId":"tankh99"},"content":"     * @return The type of task","lastModifiedDate":"2024-01-31"},{"lineNumber":182,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":183,"author":{"gitId":"tankh99"},"content":"    private TaskType getTaskType(Task task) {","lastModifiedDate":"2024-02-12"},{"lineNumber":184,"author":{"gitId":"tankh99"},"content":"        String taskType \u003d task.toString().substring(0, 3);","lastModifiedDate":"2024-02-12"},{"lineNumber":185,"author":{"gitId":"tankh99"},"content":"        System.out.println(taskType);","lastModifiedDate":"2024-02-12"},{"lineNumber":186,"author":{"gitId":"tankh99"},"content":"        if (taskType.equals(\"[T]\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":187,"author":{"gitId":"tankh99"},"content":"            return TaskType.TODO;","lastModifiedDate":"2024-01-31"},{"lineNumber":188,"author":{"gitId":"tankh99"},"content":"        } else if (taskType.equals(\"[D]\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":189,"author":{"gitId":"tankh99"},"content":"            return TaskType.DEADLINE;","lastModifiedDate":"2024-01-31"},{"lineNumber":190,"author":{"gitId":"tankh99"},"content":"        } else if (taskType.equals(\"[E]\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":191,"author":{"gitId":"tankh99"},"content":"            return TaskType.EVENT;","lastModifiedDate":"2024-01-31"},{"lineNumber":192,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":193,"author":{"gitId":"tankh99"},"content":"        return null;","lastModifiedDate":"2024-02-02"},{"lineNumber":194,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":195,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":196,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"tankh99":196}},{"path":"src/main/java/baron/managers/UiManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.managers;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import baron.models.BaseModel;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.models.Task;","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * Manages all output by the bot","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class UiManager {","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    private static String formatOutput(String input) {","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"        sb.append(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        return sb.toString();","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * Informs user of added content but does not add anything itself","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @param task  Task added","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     * @param count count of tasks currently in list after modification","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    public static String add(BaseModel task, int count) {","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        sb.append(\"Got it, I\u0027ve added this task: \\n  \" + task);","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        sb.append(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        sb.append(\"Now you have \" + count + \" tasks in the list\");","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        return formatOutput(sb.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * Informs user of deleted content","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param item  Item added","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * @param count count of tasks currently in list after modification","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    public static \u003cT\u003e String delete(T item, int count) {","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        String output \u003d \"Noted, I\u0027ve removed this item: \\n  \" + item;","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        output +\u003d \"\\nNow you have \" + count + \" items in the list\";","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        return formatOutput(output);","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     * Lists all tasks currently available in a pretty format","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    public static \u003cT\u003e String list(List\u003cT\u003e items) {","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        if (items.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"            return formatOutput(\"You have no items. Add something, you serf.\");","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        for (int i \u003d 0; i \u003c items.size(); i++) {","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"            sb.append((i + 1) + \". \" + items.get(i));","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        return formatOutput(sb.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-22"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-22"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-22"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"     * Lists all commands and their descirptions","lastModifiedDate":"2024-02-22"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-22"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    public static String help() {","lastModifiedDate":"2024-02-22"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-22"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        sb.append(\"tasks: Lists all tasks\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        sb.append(\"clients: Lists all clients\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"        sb.append(\"todo NAME: Creates a todo with the specified name\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        sb.append(\"deadline NAME /by d/M/yyy - Creates a deadline with a specified date. \"","lastModifiedDate":"2024-02-22"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"                  + \"E.g. deadline Math homework /by 9/12/2024: Lists all tasks\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"        sb.append(\"event NAME /from FROM /to TO: Creates an event with a specified from and to\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        sb.append(\"mark INDEX: Marks a specified task as done. E.g. mark 1\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"        sb.append(\"unmark INDEX: Marks a specified task as not done. E.g. unmark 1\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"        sb.append(\"delete INDEX: Deletes a specified task. E.g. delete 1\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"        sb.append(\"discharge INDEX: Deletes a specified client. E.g. discharge 1\\n\");","lastModifiedDate":"2024-02-22"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"        return formatOutput(sb.toString());","lastModifiedDate":"2024-02-22"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"     * Prints output for when user finds tasks","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"     * @param tasks tasks to print out","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"    public static String find(List\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"tankh99"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-12"},{"lineNumber":84,"author":{"gitId":"tankh99"},"content":"            return formatOutput(\"No tasks found. Maybe try another term, peasant.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":85,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":86,"author":{"gitId":"tankh99"},"content":"        sb.append(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"tankh99"},"content":"        sb.append(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"tankh99"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"tankh99"},"content":"            sb.append((i + 1) + \". \" + tasks.get(i));","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"tankh99"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"tankh99"},"content":"        return formatOutput(sb.toString());","lastModifiedDate":"2024-02-05"},{"lineNumber":93,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"tankh99"},"content":"     * Marks the specified task","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"tankh99"},"content":"     * @param task   Task to mark","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"tankh99"},"content":"     * @param isDone mark whether task is done or not","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"tankh99"},"content":"    public static String mark(Task task, boolean isDone) {","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"tankh99"},"content":"        String doneStr \u003d isDone ? \"done\" : \"not done\";","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"tankh99"},"content":"        String output \u003d \"Okay, I\u0027ve marked this task as \" + doneStr + \": \\n\" + task;","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"tankh99"},"content":"        return formatOutput(output);","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":106,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"tankh99":106}},{"path":"src/main/java/baron/models/BaseModel.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Abstract class that all models will inherit from. Provides a simple ID attribute only.","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"public abstract class BaseModel {","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"    private int id;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"     * Defaults ID to 0.","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public BaseModel() {","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        this.id \u003d 0;","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    public BaseModel(int id) {","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    public int getId() {","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        return this.id;","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public void setId(int id) {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        this.id \u003d id;","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"tankh99":25}},{"path":"src/main/java/baron/models/Client.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import baron.utils.StringUtils;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" * Contains basic information about clients.","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"public class Client extends BaseModel {","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    private String studentNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    private String email;","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    private String name;","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    private String contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     * Creates a client without any ID.","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * @param studentNumber e.g. A01234567X","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * @param email Email of client","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * @param name Name of client","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @param contactNumber Contact number of client","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    public Client(String studentNumber, String email, String name, String contactNumber) {","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        super();","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        this.studentNumber \u003d studentNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        this.contactNumber \u003d contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"     * Initialises a Client object.","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"     * @param id id of the student record.","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     * @param studentNumber e.g. A01234567X","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * @param email Email of client","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     * @param name Name of client","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param contactNumber Contact number of client","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    public Client(int id, String studentNumber, String email, String name, String contactNumber) {","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        super(id);","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        this.studentNumber \u003d studentNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"        this.contactNumber \u003d contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"    public String getStudentNumber() {","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        return studentNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    public void setStudentNumber(String studentNumber) {","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        this.studentNumber \u003d studentNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    public String getEmail() {","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        return email;","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    public void setEmail(String email) {","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        this.email \u003d email;","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    public String getName() {","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        return name;","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    public void setName(String name) {","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"    public String getContactNumber() {","lastModifiedDate":"2024-02-14"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"        return contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"    public void setContactNumber(String contactNumber) {","lastModifiedDate":"2024-02-14"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"        this.contactNumber \u003d contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-02-14"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"        String div \u003d StringUtils.SEPARATOR;","lastModifiedDate":"2024-02-14"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"        return this.studentNumber + div + this.email + div + this.name + div + this.contactNumber;","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"tankh99":82}},{"path":"src/main/java/baron/models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import baron.utils.DateUtils;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * Deadline takes in a name and a deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" * This class has date formatting.","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-19"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * Creates a deadline. isDone defaults to false","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * @param name name of deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * @param deadline deadline of deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public Deadline(String name, LocalDateTime deadline) {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        super(name);","lastModifiedDate":"2024-01-19"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-19"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     * Creates a deadline from scratch.","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     * @param id id of deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"     * @param name name of deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"     * @param isDone whether deadline is done or not","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"     * @param deadline deadline of deadline","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    public Deadline(int id, String name, boolean isDone, LocalDateTime deadline) {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        super(id, name, isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     * Parses data string to create a deadline object.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"     * @param data deadline","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"     * @return Created Deadline object","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    public static Deadline fromDataString(String data) {","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d data.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        int id \u003d Integer.parseInt(segments[0]);","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        boolean done \u003d Long.parseLong(segments[1]) \u003d\u003d 1;","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        // Strong assumption that there is no | in the data","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        String name \u003d segments[2];","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        LocalDateTime deadline \u003d DateUtils.parseDate(segments[3]);","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        return new Deadline(id, name, done, deadline);","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"    public String toDataString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        return super.toDataString() + \" | \" + this.deadline.format(DateUtils.INPUT_FORMATTER);","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + DateUtils.formatDate(deadline) + \")\";","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"tankh99":62}},{"path":"src/main/java/baron/models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Event takes in /from and /to parameters, but does not format these dates","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    private String startDate;","lastModifiedDate":"2024-01-19"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    private final String endDate;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"     * Creates an event","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"     * @param name name of event","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"     * @param startDate start of event","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     * @param endDate end of event","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    public Event(String name, String startDate, String endDate) {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"        super(name);","lastModifiedDate":"2024-01-19"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     * Creates an event from scratch. Used when retrieving data from database usually.","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * @param id id of event","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     * @param name name of event","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     * @param isDone whether event is done or not","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"     * @param startDate event start date","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"     * @param endDate event end date","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    public Event(int id, String name, boolean isDone, String startDate, String endDate) {","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        super(id, name, isDone);","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     * Parses data string to create an event object.","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"     * @param data line","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"     * @return Created Event object","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    public static Event fromDataString(String data) {","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d data.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        int id \u003d Integer.parseInt(segments[0]);","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        boolean done \u003d Long.parseLong(segments[1]) \u003d\u003d 1;","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        // Strong assumption that there are not | in the data","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        String name \u003d segments[2];","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        String from \u003d segments[3];","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        String to \u003d segments[4];","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        Event event \u003d new Event(id, name, done, from, to);","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"        return event;","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"    public String getStartDate() {","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        return this.startDate;","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"    public void setStartDate(String startDate) {","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"    public String toDataString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        return super.toDataString() + \" | \" + this.startDate + \" | \" + this.endDate;","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startDate + \" to: \" + endDate + \")\";","lastModifiedDate":"2024-02-04"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"tankh99":71}},{"path":"src/main/java/baron/models/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * An abstraction class for todos, deadlines and events. It is not abstract because","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" * we want to list todos, events and deadlines together in the same list still.","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"public class Task extends BaseModel {","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    private final String name;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-19"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"     * Creates a task with a name and false for isDone","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"     * @param name Name of task","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    public Task(String name) {","lastModifiedDate":"2024-01-19"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"        super(0);","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-19"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-19"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"     * Creates a task with fully-customised attributes. Usually used when loading tassk from database","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"     * @param id id of the task","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"     * @param name name of task","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"     * @param isDone whether task is done","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    public Task(int id, String name, boolean isDone) {","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        super(id);","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-01-19"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-01-19"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        String done \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-01-19"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        return \"[\" + done + \"] \" + name;","lastModifiedDate":"2024-01-19"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"     * Converts object to its data representation format","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     * @return Data String representation format","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    public String toDataString() {","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        String done \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        return done + \" | \" + this.getName();","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        return isDone;","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    public String getName() {","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        return name;","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"tankh99":62}},{"path":"src/main/java/baron/models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.models;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * A Todo class which is identically similar to Task.","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-19"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    public Todo(String name) {","lastModifiedDate":"2024-01-19"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"        super(name);","lastModifiedDate":"2024-01-19"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public Todo(int id, String name, boolean done) {","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        super(id, name, done);","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * Parses data string to create a todo object.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @param data Todo line","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @return Created Todo object","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static Todo fromDataString(String data) {","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d data.split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        int id \u003d Integer.parseInt(segments[0]);","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        boolean done \u003d Long.parseLong(segments[1]) \u003d\u003d 1;","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        // Strong assumption that there is no | in the data","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        String name \u003d segments[2];","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        return new Todo(id, name, done);","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    public String toDataString() {","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        return super.toDataString();","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    public String toString() {","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"tankh99":39}},{"path":"src/main/java/baron/utils/DateUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":" * Manages parsing and formatting of dates.","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class DateUtils {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    // 03/21/1999 1600","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"    public static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    public static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy, ha\");","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * Parses String and outputs a local datetime.","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @param dateString Takes in a datetime string with a format of d/M/yyy HHmm, e.g. 6/10/1999 2100","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @return the parsed local datetime","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     * @throws Exception when an invalid date string was given","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    public static LocalDateTime parseDate(String dateString) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"            return LocalDateTime.parse(dateString, INPUT_FORMATTER);","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            throw new IllegalArgumentException(\"Invalid date string given. Expected format is \"","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"                                                + \"d/M/yyyy HHmm (e.g. 21/10/1999 1600)\");","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     * Formats date to specified format of 9/12/1999, 4PM. Used for human friendly date strings mainly.","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * Dates are stored in a different format.","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     * @param dateTime date time to format to string","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"     * @return returns in format of d/MM/yyyy, ha (e.g. /12/1999, 4PM)","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"    public static String formatDate(LocalDateTime dateTime) {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"            return dateTime.format(OUTPUT_FORMATTER);","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"            throw new IllegalArgumentException(\"Invalid date string given. Expected format is \"","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"                                               + \"d/M/yyyy HHmm (e.g. 21/10/1999 1600)\");","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"tankh99":47}},{"path":"src/main/java/baron/utils/FileUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":" * In charge of managing simple file IO such as reading and writing.","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"public class FileUtils {","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * Returns a list of strings from a given file path.","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     * @param filePath path of file to read","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     * @return A list of strings if the file exists, else, it\u0027s empty","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"    public static List\u003cString\u003e read(Path filePath) {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"            lines \u003d Files.readAllLines(filePath, StandardCharsets.UTF_8);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        return lines;","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"     * Wrties the given list of lines into a file. This is an overwrite operation, not append.","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"     * @param filePath path of file to write","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"     * @param lines    list of strings to write to file.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    public static void write(Path filePath, List\u003cString\u003e lines) {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"            Files.write(filePath, lines, StandardCharsets.UTF_8);","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"tankh99":44}},{"path":"src/main/java/baron/utils/StringUtils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":" * Handles most String-related functions, such as parsing of input and extraction of values from","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":" * user input. Helps with catching common format exceptions.","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"public class StringUtils {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    public static final String SEPARATOR \u003d \" | \";","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"    public static String getCommand(String input) {","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"        return input.split(\" \")[0];","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-01-23"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"     * Gets the value of a specified command string.","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"     * @param input    The entire string","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"     * @param command  Command string to start search from. Search index is offset by the command\u0027s length","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"     * @param stopWord Optional parameter to indicate to the function that anything beyond this stopword\u0027s start index","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"     *                 will not be the value of the command. Search index is offset by -1 to avoid collecting the","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"     *                 stop word too","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"     * @return","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    public static String getValueOfCommand(String input, String command, String stopWord) {","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        int commandIndex \u003d getIndexOf(input, command, 0);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        // Validates against command that is at the end of the string","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        if (commandIndex + command.length() \u003e\u003d input.length()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"            throw new IllegalArgumentException(\"No valid value found after \" + command);","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        commandIndex +\u003d command.length();","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"        String value \u003d \"\";","lastModifiedDate":"2024-01-23"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"        if (stopWord !\u003d null) {","lastModifiedDate":"2024-01-23"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            int endIndex \u003d getIndexOf(input, stopWord, -1);","lastModifiedDate":"2024-01-23"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"            value \u003d input.substring(commandIndex, endIndex);","lastModifiedDate":"2024-01-23"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        } else {","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"            value \u003d input.substring(commandIndex);","lastModifiedDate":"2024-01-23"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-01-23"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"        value \u003d value.trim();","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        if (value.isEmpty()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"            throw new IllegalArgumentException(\"No valid value found after \" + command);","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        return value;","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"     * Finds the index of a given string, and offset it by a given amount.","lastModifiedDate":"2024-02-19"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"     * @param input  The input to search","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"     * @param toFind The index of the string to find","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"     * @param offset The offset to move from the initial toFind String","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"     * @return The index of toFind in the position. Or throws an illegal argument exception if it doesn\u0027t exist","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    public static int getIndexOf(String input, String toFind, int offset) {","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        int index \u003d input.indexOf(toFind) + offset;","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"        if (index \u003c 0 || index \u003e\u003d input.length()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"            throw new IllegalArgumentException(\"No \" + toFind + \" specified\");","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        return index;","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    /**","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"     * Abstracts out the splitting logic of the data string.","lastModifiedDate":"2024-02-19"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"     * @param data data to split by |","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"     * @return a array of the split up strings","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"     */","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    public static String[] splitDataString(String data) {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"        String[] segments \u003d data.trim().split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"        return segments;","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"tankh99":69}},{"path":"src/main/java/baron/views/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.views;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.Baron;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":" * Controller for the dialog box that stores messages generated by the user and bot","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    private DialogBox(String text, Image image) {","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        try {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            FXMLLoader loader \u003d new FXMLLoader(Baron.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            loader.setController(this);","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            loader.setRoot(this);","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"            this.setSpacing(8);","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"            this.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);","lastModifiedDate":"2024-02-23"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"            loader.load();","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"            ex.printStackTrace();","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        displayPicture.setImage(image);","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"    private void flip() {","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        ObservableList\u003cNode\u003e temp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"        Collections.reverse(temp);","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        getChildren().setAll(temp);","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    public static DialogBox getUserDialog(String text, Image image) {","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"        return new DialogBox(text, image);","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    public static DialogBox getBaronDialog(String text, Image image) {","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, image);","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        dialogBox.flip();","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        return dialogBox;","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"tankh99":58}},{"path":"src/main/java/baron/views/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.views;","lastModifiedDate":"2024-02-22"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import java.net.URL;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import java.util.ResourceBundle;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import baron.Baron;","lastModifiedDate":"2024-02-22"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import javafx.fxml.Initializable;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":" * Controller for the main window FXML file","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"public class MainWindow implements Initializable {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"    private Baron baron;","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/da-user.jpg\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"    private Image botImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/da-duke.jpg\"));","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    @FXML","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        String response \u003d baron.getResponse(input);","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"                DialogBox.getBaronDialog(response, botImage));","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"    public void initialize(URL location, ResourceBundle resources) {","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    public void setBotInstance(Baron baron) {","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        this.baron \u003d baron;","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"tankh99":54}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"         maxHeight\u003d\"-Infinity\"","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"         xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"tankh99":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"\u003cAnchorPane prefHeight\u003d\"400\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"baron.views.MainWindow\"\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"      \u003cVBox minHeight\u003d\"600\" AnchorPane.bottomAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.rightAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\"\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"            \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"                        VBox.vgrow\u003d\"ALWAYS\"","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"                        AnchorPane.leftAnchor\u003d\"0\"","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"                        AnchorPane.rightAnchor\u003d\"0\"\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"               \u003ccontent\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"                  \u003cVBox fx:id\u003d\"dialogContainer\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"               \u003c/content\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"            \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"            \u003cHBox AnchorPane.rightAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\" AnchorPane.bottomAnchor\u003d\"0\" \u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"                  \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" HBox.hgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"                  \u003cButton fx:id\u003d\"sendButton\" onAction\u003d\"#handleUserInput\" mnemonicParsing\u003d\"false\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-22"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"               \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"         \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"   \u003c/children\u003e","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"tankh99":31}},{"path":"src/test/java/baron/database/todo.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"0 | 1 | I\u0027m a todo actually, you know?","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"1 | 1 | Yeah what he said, I\u0027m one too!","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"tankh99":2}},{"path":"src/test/java/baron/utils/DateUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"public class DateUtilsTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public void parseDateString_correctDateFormat_dateReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        String dateString \u003d \"9/10/1999 1600\";","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"        LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        LocalDateTime expected \u003d LocalDateTime.of(1999, 10, 9, 16, 0, 0);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"    public void parseDateString_incorrectDateFormat_dateReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        // Invalid day","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"            String dateString \u003d \"32/10/1999 1600\";","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"            LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"        // Invalid month","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            String dateString \u003d \"1/13/1999 1600\";","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"        // Invalid year","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"            String dateString \u003d \"1/13/199 1600\";","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"            LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    public void parseDateString_missingValues_dateReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"        // No time","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"            String dateString \u003d \"32/10/1999\";","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"            LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        // No month","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"            String dateString \u003d \"1/1999 1600\";","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"            LocalDateTime actual \u003d DateUtils.parseDate(dateString);","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"    public void formatDate_dateStringReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"        LocalDateTime input \u003d LocalDateTime.of(1999, 10, 9, 16, 0, 0);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"        String actual \u003d DateUtils.formatDate(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"        String expected \u003d \"9/10/1999, 4PM\";","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"tankh99":62}},{"path":"src/test/java/baron/utils/FileUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import java.util.List;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"public class FileUtilsTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"    public static final String BASE_DIR \u003d System.getProperty(\"user.dir\") + \"/src/test/java/baron.Database\";","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    public FileUtilsTest() {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public void readFile_fileExists_linesReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        Path filePath \u003d Path.of(BASE_DIR + \"/todo.txt\");","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"        List\u003cString\u003e actual \u003d FileUtils.read(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"        List\u003cString\u003e expected \u003d Arrays.asList(\"0 | 1 | I\u0027m a todo actually, you know?\", \"1 | 1 | \"","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"                + \"Yeah what he said, I\u0027m one too!\");","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"tankh99":27}},{"path":"src/test/java/baron/utils/StringUtilsTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"package baron.utils;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"public class StringUtilsTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"    public void getIndexOfWithOffset_toFindExists_returnsIndex() {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"        String input \u003d \"a b /by c\";","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"        int actual \u003d StringUtils.getIndexOf(input, \"/by\", -1);","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"        int expected \u003d input.indexOf(\"/by\") - 1;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"    public void getIndexOfWithOffset_toFindDoesNotExist_throwsException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"            String input \u003d \"a b /by c\";","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"            int actual \u003d StringUtils.getIndexOf(input, \"/bye\", 0);","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"tankh99"},"content":"    public void getIndexOfWithOffset_indexOutOfBounds_throwsException() {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"tankh99"},"content":"            String input \u003d \"a b /by c\";","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"tankh99"},"content":"            StringUtils.getIndexOf(input, \"a\", -1);","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"tankh99"},"content":"            StringUtils.getIndexOf(input, \"c\", 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"tankh99"},"content":"    public void splitDataString_multipleSegments_segmentsReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"tankh99"},"content":"        String input \u003d \" 0| mary| had |a |little|    lamb    \";","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"tankh99"},"content":"        String[] actual \u003d StringUtils.splitDataString(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"tankh99"},"content":"        String[] expected \u003d new String[]{\"0\", \"mary\", \"had\", \"a\", \"little\", \"lamb\"};","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"tankh99"},"content":"        assertArrayEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"tankh99"},"content":"    public void splitDataString_noSegments_inputReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"tankh99"},"content":"        String input \u003d \" this has no segments\";","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"tankh99"},"content":"        String[] actual \u003d StringUtils.splitDataString(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"tankh99"},"content":"        String[] expected \u003d new String[]{\"this has no segments\"};","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"tankh99"},"content":"        assertArrayEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"tankh99"},"content":"    public void getValueOfCommand_valueExists_commandValueReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"tankh99"},"content":"        String input \u003d \"deadline homework submission /by tonight\";","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"tankh99"},"content":"        String actual \u003d StringUtils.getValueOfCommand(input, \"/by\", null);","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"tankh99"},"content":"        String expected \u003d \"tonight\";","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"tankh99"},"content":"    public void getValueOfCommandBetweenWords_valueExists_commandValueReturned() {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"tankh99"},"content":"        String input \u003d \"deadline   homework submission   /by tonight\";","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"tankh99"},"content":"        String actual \u003d StringUtils.getValueOfCommand(input, \"deadline\", \"/by\");","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"tankh99"},"content":"        String expected \u003d \"homework submission\";","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"tankh99"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"tankh99"},"content":"    public void getValueOfCommandBetweenWords_commandDoesNotExist_exceptionThrown() {","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"tankh99"},"content":"            String input \u003d \"deadline   homework submission   /by tonight\";","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"tankh99"},"content":"            String actual \u003d StringUtils.getValueOfCommand(input, \"todo\", null);","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"tankh99"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"tankh99"},"content":"    @Test()","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"tankh99"},"content":"    public void getValueOfCommandBetweenWords_stopWordDoesNotExist_exceptionThrown() {","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"tankh99"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"tankh99"},"content":"            String input \u003d \"deadline   homework submission   /by tonight\";","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"tankh99"},"content":"            String actual \u003d StringUtils.getValueOfCommand(input, \"deadline\", \"/from\");","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"tankh99"},"content":"        });","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"tankh99"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"tankh99"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"tankh99":82}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tankh99"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"todo eat something nice","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"deadline cs2103 assignment /by tomorrow","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"event clubbing all night /from tonight /to tomorrow morning","lastModifiedDate":"2024-01-22"},{"lineNumber":5,"author":{"gitId":"tankh99"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"mark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"tankh99"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"mark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"tankh99"},"content":"unmark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"tankh99"},"content":"mark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"tankh99"},"content":"unmark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"list","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"tankh99"},"content":"deadline","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"deadline name name /by ","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"tankh99"},"content":"deadline name name /by tonight","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"tankh99"},"content":"event ","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"tankh99"},"content":"event name name /from","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"event /from tonight","lastModifiedDate":"2024-01-23"},{"lineNumber":19,"author":{"gitId":"tankh99"},"content":"event name name /from tonight","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"tankh99"},"content":"event name name /to","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"tankh99"},"content":"event name name /to tonight","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"tankh99"},"content":"event name name /from tonight yo /to","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"tankh99"},"content":"event name name /from /to","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"tankh99"},"content":"delete 1","lastModifiedDate":"2024-01-23"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"delete 3","lastModifiedDate":"2024-01-23"},{"lineNumber":26,"author":{"gitId":"tankh99"},"content":"bye","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"tankh99":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"java -classpath ..\\bin baron/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tankh99":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"tankh99"},"content":"# Reference: https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"tankh99"},"content":"SCRIPT_DIR\u003d$( cd -- \"$( dirname -- \"${BASH_SOURCE[0]}\" )\" \u0026\u003e /dev/null \u0026\u0026 pwd )","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"tankh99"},"content":"echo $SCRIPT_DIR","lastModifiedDate":"2024-01-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"tankh99"},"content":"if [ ! -d \"$SCRIPT_DIR/../bin\" ]","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"tankh99"},"content":"    mkdir $SCRIPT_DIR/../bin","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"tankh99"},"content":"if [ -e \"$SCRIPT_DIR/ACTUAL.TXT\" ]","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"tankh99"},"content":"    rm $SCRIPT_DIR/ACTUAL.TXT","lastModifiedDate":"2024-01-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"tankh99"},"content":"if ! javac -cp $SCRIPT_DIR/../src/main/java -Xlint:none -d $SCRIPT_DIR/../bin $SCRIPT_DIR/../src/main/java/Duke.java","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"tankh99"},"content":"java -classpath $SCRIPT_DIR/../bin Duke \u003c $SCRIPT_DIR/input.txt \u003e $SCRIPT_DIR/ACTUAL.TXT","lastModifiedDate":"2024-01-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"tankh99"},"content":"diff $SCRIPT_DIR/ACTUAL.TXT $SCRIPT_DIR/EXPECTED.TXT","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"tankh99":10,"-":26}}]
