{"authorDailyContributionsMap":{"hjungwoo01":[{"date":"2024-01-22","commitResults":[{"hash":"203b4e00ba3ae88df971ce76e3ba0f104cfde3d0","isMergeCommit":false,"messageTitle":"Rename chatbot, add user greeting, and implement program exit feature","messageBody":"","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":6}}},{"hash":"26766681c1e073f18a137f69887ab4996f1b0a2f","isMergeCommit":false,"messageTitle":"Add echo feature to the chatbot program","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":1}}},{"hash":"2cccd575f704130cd3d0c152b83cc75a8d6dc6dd","isMergeCommit":false,"messageTitle":"Add \u0027list\u0027 feature to display previously entered user responses","messageBody":"","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":19,"deletions":8}}}]},{"date":"2024-01-23","commitResults":[{"hash":"79fae651dc7379caacd0a82dffa21a725064e6d1","isMergeCommit":false,"messageTitle":"Implemented Task class and added mark/unmark task functionality","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":44,"deletions":7}}},{"hash":"5a2133a14d748393a0018b1dedea804342322f3b","isMergeCommit":false,"messageTitle":"Implemented Todo, Event, Deadline functionalities","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":62,"deletions":5}}},{"hash":"4e6031cd2153099b9a8ac962e2b99ec9d6404cbd","isMergeCommit":false,"messageTitle":"Added automated text UI testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":11,"deletions":0}}},{"hash":"3a8c2fdb31fd8d230233149b6aee897120a980e8","isMergeCommit":false,"messageTitle":"Added custom DukeException handler class for handling unusual user inputs","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":118,"deletions":40}}}]},{"date":"2024-01-24","commitResults":[{"hash":"73b527ba6ffe48b929a05d55587c6970d49309e4","isMergeCommit":false,"messageTitle":"Added task deletion feature","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":1}}}]},{"date":"2024-01-26","commitResults":[{"hash":"30c489f6ef6516d84f46751de68f4bc8138a5922","isMergeCommit":false,"messageTitle":"Implemented task history saving and loading from previous sessions","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":2}}},{"hash":"19a4f434dcda8edf1d899b4add019265d6b2f173","isMergeCommit":true,"messageTitle":"Merge Level 7 Implementation into master","messageBody":"","tags":["Level-7"],"fileTypesAndContributionMap":{}}]},{"date":"2024-01-28","commitResults":[{"hash":"518a4cb0141d396bbd21be8e5120739a0707cde9","isMergeCommit":false,"messageTitle":"Implement LocalDateTime in Deadline and Event classes","messageBody":"Enhance Deadline and Event classes for date-time handling\n\nBoth Deadline and Event classes were previously using String types\nfor date and time management. This was inconsistent and inefficient\nfor handling date-time operations.\n\nThis commit:\n- Modifies the Deadline class to parse and store dates as LocalDateTime\n  objects instead of strings, aligning with Java\u0027s modern date-time API.\n- Updates the Event class similarly, handling both start and end\n  times as LocalDateTime instances.\n- Refactors the loadTasks method in FileHandler to parse date-time strings\n  into LocalDateTime objects for creating Deadline and Event instances.\n\nThese changes ensure a consistent and reliable approach to date-time\nhandling across the application.\n","fileTypesAndContributionMap":{"java":{"insertions":117,"deletions":37}}},{"hash":"cb1efb92c1a205dabd7418174ec27484f823dc32","isMergeCommit":true,"messageTitle":"Merge branch-Level-8 into master","messageBody":"","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"c7e305075ef66398fbd631a8fc0064e9a963625c","isMergeCommit":false,"messageTitle":"Refactor codebase for enhanced OOP structure","messageBody":"Implement more OOP principles in project architecture\n\nThe previous implementation had intermingled functionalities in a few classes, which made the code less modular and harder to maintain.\n\nThis commit:\n- Introduces the Ui class to handle all user interactions, encapsulating all UI-related logic.\n- Creates the Storage class to manage file operations, specifically for loading and saving tasks. This separation of concerns improves the readability and maintainability of file handling logic.\n- Develops the Parser class to interpret user commands, making the command parsing logic more modular and testable.\n- Establishes the TaskList class containing and managing the task list, providing a more focused approach to task management.\n- Revises the Duke main class to utilize these new classes, significantly decluttering its structure and improving overall code quality.\n\nFurthermore, as part of the stretch goal:\n- Command classes such as AddCommand, DeleteCommand, and ExitCommand are extracted. These classes inherit from an abstract Command class, allowing for a more scalable and extensible command handling system in the application.\n\nThese modifications align the project more closely with Object-Oriented Programming principles, enhancing code readability, maintainability, and scalability.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":406,"deletions":202}}},{"hash":"488300dbc471e4a9b00e234f1a2244eed1a446dd","isMergeCommit":false,"messageTitle":"Refactor project structure with package organization","messageBody":"Organize classes into structured Java packages\n\nThe previous architecture had all classes placed in the default package, which, while functional, did not fully utilize the organizational benefits of Java packages. As the codebase grows, a more structured package organization becomes crucial for maintainability and clarity.\n\nThis commit:\n- Organizes all classes into a dedicated `duke` package, enhancing project structure.\n- Further segregates classes into sub-packages:`duke.task` and `duke.command`. This categorization aligns with each class\u0027s functionality.\n- Places task-related classes such as `Task`, `Todo`, `Deadline`, and `Event` into `duke.task`.\n- Groups command processing classes like `Command`, `AddCommand`, `DeleteCommand`, etc., into `duke.command`.\n\nThe `duke.Duke` main class is also updated to reflect these changes.\n\nBy arranging classes into distinct packages, the project now benefits from improved organization, easier navigation, and better encapsulation of related functionalities.\n\nThese changes are a step towards aligning the project more closely with established Java development practices, enhancing the overall design and scalability of the application.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"java":{"insertions":108,"deletions":15},"md":{"insertions":2,"deletions":2}}},{"hash":"2c3c42e30ca5d0054a8259276ab026e1039aa930","isMergeCommit":true,"messageTitle":"Merge branch-A-Packages into master","messageBody":"","fileTypesAndContributionMap":{}}]},{"date":"2024-01-29","commitResults":[{"hash":"bc8120d0debd3081cc81306190edd7074922f03d","isMergeCommit":true,"messageTitle":"Merge Gradle support into master","messageBody":"","tags":["A-JUnit","A-Gradle"],"fileTypesAndContributionMap":{}},{"hash":"fc03eeda5974dbb1df5b82082691964d4546a794","isMergeCommit":false,"messageTitle":"Add specific JUnit tests for AddCommand and Parser functionality","messageBody":"In this commit, we introduce targeted unit tests for two key components of our application, the AddCommand and Parser, enhancing the reliability and maintainability of our codebase.\n\nKey Implementations:\n1. AddCommandTest: This test class focuses on the functionality of the AddCommand. It includes tests for handling empty descriptions in \u0027todo\u0027 commands and validating the behavior of \u0027deadline\u0027 commands with both valid and invalid date-time formats. The tests ensure that AddCommand correctly processes valid inputs and throws DukeExceptions for invalid or incomplete inputs.\n\n   - addTodo_emptyDescription_throwsDukeException: Verifies that an empty description in a \u0027todo\u0027 command correctly triggers a DukeException.\n   - addDeadline_validDateTime_addsDeadline: Confirms that a valid \u0027deadline\u0027 command correctly adds a Deadline task to the TaskList.\n   - addDeadline_invalidDateTime_throwsDukeException: Ensures that an invalid date-time format in a \u0027deadline\u0027 command results in a DukeException.\n\n2. ParserTest: This test class assesses the Parser\u0027s ability to accurately parse \u0027todo\u0027 and \u0027deadline\u0027 commands into respective AddCommand objects.\n\n   - parse_validTodoCommand_returnsAddCommand: Checks that the Parser correctly interprets a valid \u0027todo\u0027 command.\n   - parse_validDeadlineCommand_returnsAddCommand: Verifies that the Parser accurately parses a valid \u0027deadline\u0027 command.\n\nBy implementing these tests, we significantly bolster the robustness of our command parsing and task addition processes. This initiative is a step forward in ensuring that our application behaves as expected under various input scenarios and correctly handles edge cases.\n\nNote: The tests employ stubbing of dependencies where necessary to focus solely on the class under test, providing clear, isolated validation of their respective functionalities.\n","fileTypesAndContributionMap":{"java":{"insertions":85,"deletions":0}}},{"hash":"63e74aeb7008b2c039418113d8c2a12ee537edfc","isMergeCommit":true,"messageTitle":"Merge branch-A-JUnit to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"9cc55a39c55572ff2da0e622cf28a3165effd40d","isMergeCommit":false,"messageTitle":"Package app as executable JAR","messageBody":"","tags":["A-Jar"],"fileTypesAndContributionMap":{"gradle":{"insertions":11,"deletions":0}}},{"hash":"db081c6fa573a2face03ce60cce0c5e7c1a65d77","isMergeCommit":true,"messageTitle":"Merge branch-A-Jar","messageBody":"","tags":["v0.1"],"fileTypesAndContributionMap":{}},{"hash":"383c11770ff3921600f90723e1eaad266b6dd6af","isMergeCommit":false,"messageTitle":"Add comprehensive documentation and comments to codebase","messageBody":"In this commit, comprehensive documentation and comments have been introduced across the codebase, with a focus on improving code readability, maintainability, and understandability. The key enhancements include:\n\n1. Javadoc comments have been added for classes, methods, and fields, providing detailed descriptions of their purpose, parameters, and return values. This documentation serves as a valuable resource for developers working on the project and for those seeking to understand the code.\n2. In-code comments have been included where necessary to explain complex algorithms, data structures, and logic. These comments aim to make the code more transparent and assist developers in understanding the intricacies of the implementation.\n3. Naming conventions have been improved by refining variable and method names to adhere to best practices and follow a consistent naming convention throughout the codebase. This consistency enhances code clarity and reduces the likelihood of naming-related errors.\n4. Enhanced error handling documentation provides detailed explanations for error messages and exceptions, making it easier for developers to diagnose issues and troubleshoot errors effectively.\n\nThese documentation and commenting improvements aim to create a more accessible and developer-friendly codebase, facilitating collaboration, code maintenance, and the onboarding of new team members. Ultimately, these enhancements contribute to the overall quality and sustainability of the software project.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{"java":{"insertions":356,"deletions":6}}},{"hash":"bdad33af07742bfa5b029298d362c92a4fa00472","isMergeCommit":true,"messageTitle":"Merge branch-A-JavaDoc to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"9f655268f4c54c3a8c08b4ebfd26902737aecb61","isMergeCommit":false,"messageTitle":"Refactor codebase for compliance with coding standard","messageBody":"In this commit, the codebase has been refactored to align with the prescribed coding standard. Going forward, any new code additions will adhere strictly to the same coding standard, ensuring consistency and maintainability throughout the project.\n","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{"java":{"insertions":39,"deletions":37}}},{"hash":"78c65e73511f236b6e20fdb073ffd4b2e59ede0e","isMergeCommit":true,"messageTitle":"Merge branch-A-CodingStandard to master","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"6fdd2ff13bc77bb078d8cf98e19665e5737d193a","isMergeCommit":false,"messageTitle":"Add FindCommand to search for tasks by keyword","messageBody":"This commit introduces a new functionality, `FindCommand`, to the Duke application. The `FindCommand` allows users to search for tasks containing a specific keyword in their descriptions. The following changes have been made:\n\n- Added `FindCommand.java` to represent the command for task searching.\n- Implemented the execution logic for `FindCommand`, which filters tasks based on the provided keyword and displays matching tasks to the user.\n- Ensured proper error handling for cases where the keyword is missing.\n- Followed coding standards for commit message format, subject length, and imperative mood.\n\nWith this new feature, users can easily find and retrieve tasks that match their search criteria, enhancing the usability of the Duke application.\n","tags":["Level-9"],"fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":0}}},{"hash":"fbbf2229be3258c63b6f52a928fa74f6bab8583e","isMergeCommit":true,"messageTitle":"Merge branch-Level-9 to master","messageBody":"","fileTypesAndContributionMap":{}}]},{"date":"2024-02-05","commitResults":[{"hash":"df14ae85fdea59c18370174bb1820258c433c2a8","isMergeCommit":false,"messageTitle":"Add Checkstyle for code quality enforcement","messageBody":"This commit incorporates Checkstyle into the project to ensure adherence to coding standards and improve code quality. The integration of Checkstyle provides a systematic way to check the code for style deviations and potential errors. The following modifications have been made:\n\n- Added `checkstyle.gradle` configuration file to define Checkstyle rules and setup.\n- Updated `build.gradle` to include the Checkstyle plugin and its configuration, linking to the Checkstyle rules.\n- Created `config/checkstyle/checkstyle.xml` to specify the coding standards and rules the project should follow.\n- Adjusted existing code to comply with the newly integrated Checkstyle rules, ensuring the project passes all Checkstyle checks.\n\nWith Checkstyle integration, the project takes a significant step towards maintaining high code quality, consistency, and readability across all contributions.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0},"java":{"insertions":70,"deletions":69}}},{"hash":"106e6802e05e3963d51a172bd42eda588c13bdd7","isMergeCommit":true,"messageTitle":"Merge branch-A-CheckStyle to master","messageBody":"","fileTypesAndContributionMap":{}}]},{"date":"2024-02-06","commitResults":[{"hash":"c3137551cba95b67de5736b42af3d3ba85e40f60","isMergeCommit":false,"messageTitle":"Add JavaFX and GUI Enhancements","messageBody":"This commit introduces JavaFX into the project, laying the foundation for a Graphical User Interface (GUI) and enhancing user interaction. The addition of JavaFX and GUI improvements aims to provide a more interactive and user-friendly experience. The following modifications have been implemented:\n\n- Added JavaFX dependencies in the build.gradle file to support GUI development and integration.\n- Created MainWindow.fxml and DialogBox.fxml to define the GUI layout, utilizing FXML for a more structured and manageable GUI design.\n- Implemented MainWindow.java and DialogBox.java as controllers for the FXML files, facilitating dynamic interaction within the GUI.\n- Modified Duke.java to initialize and launch the JavaFX application, integrating the backend logic with the frontend GUI.\n- Updated the Ui class to support GUI operations, transitioning from console-based interaction to GUI-based feedback and user prompts.\n- Added custom styling and layout adjustments to enhance the visual appeal and usability of the GUI.\n\nBy integrating JavaFX and focusing on GUI enhancements, this commit significantly improves the application\u0027s interactivity and accessibility, offering a modern and engaging user experience.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":0},"fxml":{"insertions":35,"deletions":0},"java":{"insertions":386,"deletions":175}}},{"hash":"65b9a98c6370a93a151f839b56e662f654fe98c0","isMergeCommit":true,"messageTitle":"Add JavaFX and GUI Enhancements","messageBody":"This commit introduces JavaFX into the project, laying the foundation for a Graphical User Interface (GUI) and enhancing user interaction. The addition of JavaFX and GUI improvements aims to provide a more interactive and user-friendly experience. The following modifications have been implemented:\n\n- Added JavaFX dependencies in the build.gradle file to support GUI development and integration.\n- Created MainWindow.fxml and DialogBox.fxml to define the GUI layout, utilizing FXML for a more structured and manageable GUI design.\n- Implemented MainWindow.java and DialogBox.java as controllers for the FXML files, facilitating dynamic interaction within the GUI.\n- Modified Duke.java to initialize and launch the JavaFX application, integrating the backend logic with the frontend GUI.\n- Updated the Ui class to support GUI operations, transitioning from console-based interaction to GUI-based feedback and user prompts.\n- Added custom styling and layout adjustments to enhance the visual appeal and usability of the GUI.\n\nBy integrating JavaFX and focusing on GUI enhancements, this commit significantly improves the application\u0027s interactivity and accessibility, offering a modern and engaging user experience.\n","fileTypesAndContributionMap":{}},{"hash":"b85bf200a6fd8ba86851dd981d4646b7acfe3183","isMergeCommit":false,"messageTitle":"Enforce Checkstyle Coding Standards","messageBody":"This commit enforces Checkstyle coding standards on existing classes that did not previously comply with them. By doing so, we ensure that the entire codebase adheres to consistent coding conventions and improves code quality. The following changes have been made:\n- Refactored and modified code where necessary to conform to Checkstyle standards.\n- Verified that all affected classes now comply with Checkstyle coding standards.\n\nEnforcing Checkstyle standards on existing code enhances code quality and consistency, making the project more maintainable and easier to collaborate on.\n","tags":["A-Updated-Jar"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":9}}}]},{"date":"2024-02-12","commitResults":[{"hash":"0b0e6236cda13d7e3782b208190b9cc8ecbab068","isMergeCommit":false,"messageTitle":"Integrate Assertions for Enhanced Code Reliability","messageBody":"This commit integrates Java assertions into various classes within the project to document important assumptions and enhance code reliability. By incorporating assertions, we assert essential preconditions, postconditions, and invariants that should hold at various points in the code. This practice helps in identifying potential bugs and ensuring that the code behaves as expected. The following modifications have been made:\n\nAdded assertions to Storage.java to validate file paths, ensure task list integrity, and verify file existence during read and write operations.\nImplemented assertions in Parser.java to confirm the validity of user input commands and the non-nullity of command objects created from parsing.\nIntegrated assertions into AddCommand.java to check for the presence and correctness of task addition commands, along with the non-nullity of critical objects involved in executing these commands.\nIncorporating assertions across these critical components improves the robustness of the application by catching and preventing erroneous states early in the development and testing phases. This enhancement makes the codebase more maintainable and aids developers in understanding and verifying the code\u0027s intended behavior.\n","tags":["A-Assertions"],"fileTypesAndContributionMap":{"gradle":{"insertions":7,"deletions":13},"txt":{"insertions":0,"deletions":0},"java":{"insertions":74,"deletions":7}}},{"hash":"e63e15d41d7ccd23aee79fa93021db9ecccaf371","isMergeCommit":true,"messageTitle":"Merge pull request #1 from hjungwoo01/branch-A-Assertions","messageBody":"Integrate Assertions for Enhanced Code Reliability","fileTypesAndContributionMap":{}},{"hash":"b4c49a64b00502d60ff402cbc9ba7fa1030fc3b1","isMergeCommit":false,"messageTitle":"Improve Code Quality with Refactoring and Exception Handling Enhancements","messageBody":"This commit focuses on improving the overall code quality within the project through significant refactoring efforts and enhanced exception handling mechanisms. By refining the structure and clarity of our code, as well as more effectively managing exceptions, we aim to make our application more robust, readable, and maintainable. The following key changes have been implemented:\n\n- Refactored the AddCommand.java class to simplify command execution logic, making it easier to understand and maintain. This includes breaking down complex methods into smaller, more manageable pieces and improving method naming for clarity.\n- Enhanced exception handling in DateTimeUtil.java by adding meaningful logging within catch blocks. This approach aids in debugging and provides clearer insights into parsing errors without overwhelming the end user with technical details.\n- Introduced clearer variable naming and simplified conditional statements across various classes, including Storage.java and Parser.java, to improve code readability and reduce cognitive load for future developers working on the project.\n\nThese improvements not only enhance the immediate readability and reliability of the code but also lay a foundation for more efficient future development. By addressing these aspects, we ensure that the application is easier to debug, extend, and maintain, thereby supporting a more agile and robust development lifecycle.\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":50,"deletions":53}}},{"hash":"65bf2fc1aaae91b020cbef2091bd114ecd93b1cf","isMergeCommit":true,"messageTitle":"Merge pull request #2 from hjungwoo01/branch-A-CodeQuality","messageBody":"Improve Code Quality with Refactoring and Exception Handling Enhancements","fileTypesAndContributionMap":{}},{"hash":"d8956892a61dec5b058bbf5407b6ddad5897966a","isMergeCommit":false,"messageTitle":"Add Java Streams for Improved Efficiency","messageBody":"This commit focuses on enhancing the efficiency and readability of the codebase by leveraging Java streams in the FindCommand.java class. By incorporating streams, we streamline the process of searching for tasks based on a keyword within their descriptions. This approach not only improves the performance of the search operation but also makes the code more concise and expressive.\n\nThe use of streams allows for a more declarative and functional style of programming, enabling us to filter and manipulate collections of tasks with greater clarity and brevity. By adopting this approach, we aim to enhance the overall maintainability and comprehensibility of the codebase, facilitating easier understanding and future modifications.\n\nThese enhancements contribute to a more efficient and elegant solution for finding tasks within the Duke application, ultimately improving the user experience and developer productivity.\n","tags":["A-Streams"],"fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":1}}},{"hash":"551918ee1f74b836de50183b519b65ae35163494","isMergeCommit":true,"messageTitle":"Merge pull request #3 from hjungwoo01/branch-A-Streams","messageBody":"Add Java Streams for Improved Efficiency","fileTypesAndContributionMap":{}},{"hash":"69231ff7f0affc5d4ce70da7ddbd5c7636f9beb8","isMergeCommit":false,"messageTitle":"Add Chronological Sorting of Deadlines","messageBody":"This commit introduces an enhancement to the task listing functionality within the TaskList.java class of the Duke application. By implementing a method to sort deadlines chronologically, we significantly improve the user\u0027s ability to view upcoming tasks in an organized manner. This sorting ensures that deadlines are presented in the order of their occurrence, facilitating better planning and task management.\n\nThe addition of chronological sorting leverages a custom comparator within a sorting algorithm, focusing specifically on Deadline tasks. This method respects the original order of non-deadline tasks while bringing all deadline tasks to the forefront, sorted by their due dates. Such an approach not only enhances the usability of the listing feature but also maintains the integrity and structure of the task list.\n\nAdopting this sorting mechanism contributes to a more intuitive and effective user experience. Users can now easily identify and prioritize tasks based on their deadlines, leading to improved task management and productivity. This update reflects our commitment to providing functional enhancements that address user needs while maintaining the simplicity and efficiency of the application\u0027s core functionalities.\n\nThrough this improvement, we aim to enrich the Duke application\u0027s feature set, making it more aligned with practical task management requirements and user expectations.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":4}}},{"hash":"c84c636e46b01337be2d8027d7054ff90410e4b3","isMergeCommit":true,"messageTitle":"Merge pull request #4 from hjungwoo01/branch-C-Sort","messageBody":"Add Chronological Sorting of Deadlines","tags":["BCD-Extension"],"fileTypesAndContributionMap":{}}]},{"date":"2024-02-15","commitResults":[{"hash":"aa4b16705603ee233447418d01abc2366c1419b3","isMergeCommit":false,"messageTitle":"Improve JUnit Testing for Parser and AddCommand Classes","messageBody":"This commit  improves the JUnit testing coverage for the `Parser` and `AddCommand` classes within the Duke application. By extending the test cases to cover a wider array of input scenarios, including edge cases and potential error conditions, we have bolstered the robustness and reliability of the application\u0027s command parsing and task addition functionalities.\n\nFor the `Parser` class, additional tests have been implemented to rigorously evaluate the handling of unrecognized commands to ensure that the parser behaves as expected across all supported command types. This comprehensive testing strategy is designed to catch and prevent potential bugs that could arise from unexpected user inputs, enhancing the application\u0027s resilience against input-related errors.\n\nSimilarly, the `AddCommand` class now benefits from an expanded suite of tests that scrutinize the addition of todo, deadline, and event tasks under various conditions. This includes testing for tasks with extreme edge cases, such as very long descriptions or dates, and ensures proper exception handling for invalid task types or formats. By covering these additional scenarios, we ensure that task addition is handled gracefully and accurately, further improving the user experience.\n\nThese enhancements to the JUnit tests not only increase our confidence in the correctness of the application\u0027s core functionalities but also facilitate future development by providing a more robust framework for detecting and preventing regressions. This update underscores our commitment to quality and reliability, ensuring that the Duke application continues to meet and exceed user expectations for efficient and error-free task management.\n\nThrough meticulous testing and continuous improvement, we aim to maintain the Duke application\u0027s reputation for excellence, making it a dependable tool for users seeking an intuitive and effective task management solution.\n","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":2}}},{"hash":"710ee4f9486a437b897aabb93197e4b5fd3456a3","isMergeCommit":false,"messageTitle":"Refactor all References from Duke to Nicky","messageBody":"This commit implements a comprehensive refactoring across the codebase, replacing all instances of \"Duke\" with \"Nicky\" to align with the project\u0027s renaming. This ensures consistency and coherence throughout the application, reflecting the new identity of the software as \"Nicky\".\n","fileTypesAndContributionMap":{"fxml":{"insertions":1,"deletions":1},"java":{"insertions":269,"deletions":366},"md":{"insertions":2,"deletions":2}}},{"hash":"eab183487dbc306c4d2a21c7529420bd0515792d","isMergeCommit":false,"messageTitle":"Update README.md to Reflect Application Branding as Nicky","messageBody":"In this commit, the README.md file has been thoroughly updated to be compatible with the rebranding of the application to \"Nicky\". All references to the old name \"Duke\" have been meticulously replaced with \"Nicky\" to maintain uniformity across the documentation. This change solidifies the new branding within the user-facing components of the project and eliminates any potential confusion by ensuring that the documentation accurately represents the application\u0027s current state. The README now correctly guides users on setting up and interacting with Nicky, providing clarity and enhancing the overall user experience.\n","fileTypesAndContributionMap":{"md":{"insertions":37,"deletions":20}}},{"hash":"dc51f89f5d4e0cab83eff711dd5c187f784e94bc","isMergeCommit":false,"messageTitle":"Adjust build.gradle for Nicky Compatibility","messageBody":"This commit updates the build.gradle file to align with the application\u0027s rebranding to \"Nicky\". All necessary dependencies, group names, and artifact ids previously associated with \"Duke\" have been changed to correspond with \"Nicky\". These modifications ensure that the build configurations and paths are in harmony with the application\u0027s new identity, facilitating a seamless build process and further embedding the Nicky brand into the project infrastructure.\n","fileTypesAndContributionMap":{"gradle":{"insertions":3,"deletions":3}}}]}]},"authorFileTypeContributionMap":{"hjungwoo01":{"java":1476,"md":36,"fxml":35,"sh":0,"bat":0,"gradle":25,"txt":11}},"authorContributionVariance":{"hjungwoo01":64610.84},"authorDisplayNameMap":{"hjungwoo01":"CS2103T-T17-2 HONG.. WOO"}}
