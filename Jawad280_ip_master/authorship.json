[{"path":"src/main/java/Tobias.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"import command.Command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import parser.Parser;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class Tobias {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    private Storage storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    private Ui ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * Constructor for the bot - Tobias.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"     * @param filePath The relative string file path of the saved data.","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    public Tobias(String filePath) {","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"        storage.createLocalStorage();","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"            tasks \u003d storage.localToCurrent();","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     * Runs the bot - Tobias until isExit is true","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"    public void run() {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        ui.helloPrinter();","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"        while (!isExit) {","lastModifiedDate":"2024-01-25"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-25"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"                Command c \u003d Parser.parseCommands(fullCommand, tasks);","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-25"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-25"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"        new Tobias(\"data/Tobias.txt\").run();","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Jawad280":52}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"public abstract class Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":9}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Deadline;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    protected String description;","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Deadline Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     * @param deadline LocalDateTime object of deadline date/time of Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    public DeadlineCommand(String description, LocalDateTime deadline) {","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Deadline Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"     * @param deadline LocalDateTime object of deadline date/time of Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value if Deadline is done.","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"    public DeadlineCommand(String description, LocalDateTime deadline, boolean isDone) {","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"     * Creates a Deadline \u0026 adds to the current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"        Task task \u003d new Deadline(description, isDone, deadline);","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"        tasks.addToList(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"        ui.addedTaskPrinter(task, tasks.taskNum());","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":65}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    private int taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Delete Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param taskIndex index of the task to be deleted.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     * Deletes the task from the current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"        Task curr \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        tasks.removeFromList(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    Noted, I\u0027ve removed this task: \");","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        curr.taskPrinter();","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":47}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Event;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    protected String description;","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Event Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     * @param from LocalDateTime object of from of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * @param to LocalDateTime object of to of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"    public EventCommand(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Event Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"     * @param from LocalDateTime object of from of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"     * @param to LocalDateTime object of to of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value if Event is done.","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"    public EventCommand(String description, LocalDateTime from, LocalDateTime to, boolean isDone) {","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"     * Creates a new Event and adds it to the current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"        Task task \u003d new Event(description, isDone, from, to);","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"        tasks.addToList(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"        ui.addedTaskPrinter(task, tasks.taskNum());","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":70}},{"path":"src/main/java/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"     * Saves the current TaskList and closes program.","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        storage.storeToLocal(tasks);","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        ui.goodbyePrinter();","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"        return true;","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":31}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    private String keyWord;","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Find Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param keyWord The keyword that is searched for.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    public FindCommand(String keyWord) {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        this.keyWord \u003d keyWord;","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * Finds the tasks with the keyword and prints them in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"            tasks.printListFind(keyWord);","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"            e.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":48}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"     * Prints all the tasks in the current TaskList in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"            tasks.printList();","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"            e.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":35}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    private int taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Mark Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param taskIndex The index of the task to be marked.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    public MarkCommand(int taskIndex) {","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * Marks the task at taskIndex of tasks as done.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        Task curr \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        curr.markAsDone();","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        curr.taskPrinter(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":48}},{"path":"src/main/java/command/NoreplyCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"public class NoreplyCommand extends Command {","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"     * A command that does nothing.","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {}","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":28}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import task.ToDo;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    private String description;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    private boolean isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Todo Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Todo.","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"    public TodoCommand(String description) {","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Todo Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of Todo.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value if Event is done.","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    public TodoCommand(String description, boolean isDone) {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"     * Creates a new Todo and adds it to the current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        Task task \u003d new ToDo(description, isDone);","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"        tasks.addToList(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        ui.addedTaskPrinter(task, tasks.taskNum());","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":57}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package command;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import storage.Storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    private int taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * Constructor for Un-mark Command.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param taskIndex The index of the task to be unmarked.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    public UnmarkCommand(int taskIndex) {","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * Un-marks the task at taskIndex of tasks as done.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * @param tasks Current TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @param storage Current Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * @param ui Current Ui.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        Task curr \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        curr.markAsUndone();","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    OK, I\u0027ve marked this task as not done : \");","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        curr.taskPrinter(taskIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"        Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     * Informs if this command is an Exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value of true if this command is an exit command.","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":49}},{"path":"src/main/java/exception/TobiasException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package exception;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"public class TobiasException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"     * Constructor for TobiasException.","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"     * @param message Message that will be printed for the instance of TobiasException.","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    public TobiasException(String message) {","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"        super(message);","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * Prints the message of the instance of TobiasException in the console with dividers.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    public void printMessage() {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"        String divider \u003d \"  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        System.out.println(divider);","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        System.out.println(getMessage());","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        System.out.println(divider);","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Jawad280":22}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package parser;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import command.*;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"public class Parser {","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * Takes in a string representation of date/time and returns it as a LocalDateTime object.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param dateTime String of the required date/time information.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * @return a LocalDateTime object with the provided date/time information.","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"     * @throws TobiasException if the dateTime string does not follow format of dd-MM-yyyy HHmm.","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    public static LocalDateTime dateFromString(String dateTime) throws TobiasException {","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"            return LocalDateTime.parse(dateTime.trim(), DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"            throw new TobiasException(\"    Kindly enter the date or time in this format : dd-MM-yyyy HHmm\");","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     * Takes in a command as a String and a TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"     * Interprets that command and returns the relevant Command object.","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     * @param command Type of command given as a String","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * @param tasks TaskList","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"     * @throws TobiasException for each possible type of commands and/or if command is not valid.","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"     * @return The relevant type of Command object.","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"    public static Command parseCommands(String command, TaskList tasks) throws TobiasException {","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"        if(command.equals(\"list\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"            ListCommand lc \u003d new ListCommand();","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"            return lc;","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"todo\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Hey, please enter a description !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(4,5);","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after todo!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"                String description \u003d command.substring(5);","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"                TodoCommand td \u003d new TodoCommand(description);","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"                return td;","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"            } catch(TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"deadline\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Hey, please enter a description !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(8,9);","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after deadline!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"                int byIndex \u003d command.indexOf(\"/by\");","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"                if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Hey, please use \u0027/by\u0027 to specify the deadline!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"Jawad280"},"content":"                String description \u003d command.substring(9, byIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"Jawad280"},"content":"                int deadlineIndex \u003d byIndex+4;","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"Jawad280"},"content":"                if (deadlineIndex \u003e command.length()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a date \u0026 time in this format : dd-MM-yyyy HHmm !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":87,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":88,"author":{"gitId":"Jawad280"},"content":"                String deadline \u003d command.substring(byIndex + 4);","lastModifiedDate":"2024-01-26"},{"lineNumber":89,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime dd \u003d dateFromString(deadline);","lastModifiedDate":"2024-01-26"},{"lineNumber":91,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"Jawad280"},"content":"                if (deadline.isEmpty() || deadline.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":93,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a date \u0026 time in this format : dd-MM-yyyy HHmm !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"Jawad280"},"content":"                DeadlineCommand dc \u003d new DeadlineCommand(description, dd);","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"Jawad280"},"content":"                return dc;","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":102,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":103,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"event\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":104,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":105,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":106,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"event\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":107,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a description !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":108,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":109,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(5,6);","lastModifiedDate":"2024-01-26"},{"lineNumber":111,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":112,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":113,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after event!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":114,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":115,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":116,"author":{"gitId":"Jawad280"},"content":"                int fromIndex \u003d command.indexOf(\"/from\");","lastModifiedDate":"2024-01-26"},{"lineNumber":117,"author":{"gitId":"Jawad280"},"content":"                int toIndex \u003d command.indexOf(\"/to\");","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"Jawad280"},"content":"                if (fromIndex \u003d\u003d -1 \u0026\u0026 toIndex \u003d\u003d -1) {","lastModifiedDate":"2024-01-26"},{"lineNumber":120,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /from and /to date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":121,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":122,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":123,"author":{"gitId":"Jawad280"},"content":"                if (fromIndex \u003d\u003d -1) {","lastModifiedDate":"2024-01-26"},{"lineNumber":124,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /from date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"Jawad280"},"content":"                if (toIndex \u003d\u003d -1) {","lastModifiedDate":"2024-01-26"},{"lineNumber":128,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /to date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":129,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":130,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":131,"author":{"gitId":"Jawad280"},"content":"                if (fromIndex \u003e toIndex \u0026\u0026 toIndex \u003e 0) {","lastModifiedDate":"2024-01-26"},{"lineNumber":132,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, you have to enter /from before /to !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":133,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":134,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":135,"author":{"gitId":"Jawad280"},"content":"                String from \u003d command.substring(fromIndex + 6, toIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":136,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":137,"author":{"gitId":"Jawad280"},"content":"                if (from.isEmpty() || from.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":138,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /from date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":139,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":140,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":141,"author":{"gitId":"Jawad280"},"content":"                if ((toIndex + 4) \u003e command.length()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":142,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /to date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":143,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":144,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":145,"author":{"gitId":"Jawad280"},"content":"                String to \u003d command.substring(toIndex + 4);","lastModifiedDate":"2024-01-26"},{"lineNumber":146,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":147,"author":{"gitId":"Jawad280"},"content":"                if (to.isEmpty() || to.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":148,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"     Hey, please enter a /to date/day/time!!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":149,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":150,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":151,"author":{"gitId":"Jawad280"},"content":"                String description \u003d command.substring(6, fromIndex);","lastModifiedDate":"2024-01-26"},{"lineNumber":152,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":153,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime f \u003d dateFromString(from);","lastModifiedDate":"2024-01-26"},{"lineNumber":154,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime t \u003d dateFromString(to);","lastModifiedDate":"2024-01-26"},{"lineNumber":155,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":156,"author":{"gitId":"Jawad280"},"content":"                EventCommand ec \u003d new EventCommand(description, f, t);","lastModifiedDate":"2024-01-26"},{"lineNumber":157,"author":{"gitId":"Jawad280"},"content":"                return ec;","lastModifiedDate":"2024-01-26"},{"lineNumber":158,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":159,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":160,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":161,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":162,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":163,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"mark\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":164,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":165,"author":{"gitId":"Jawad280"},"content":"                int size \u003d tasks.taskNum();","lastModifiedDate":"2024-01-26"},{"lineNumber":166,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":167,"author":{"gitId":"Jawad280"},"content":"                if (size \u003d\u003d 0) {","lastModifiedDate":"2024-01-26"},{"lineNumber":168,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Your list is empty at the moment, add some todos/events/deadlines to MARK them!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":169,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":170,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":171,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"mark\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":172,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    No index provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":173,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":174,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":175,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(4,5);","lastModifiedDate":"2024-01-26"},{"lineNumber":176,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":177,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":178,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after mark!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":179,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":180,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":181,"author":{"gitId":"Jawad280"},"content":"                int index \u003d Integer.parseInt(command.substring(5)) - 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":182,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":183,"author":{"gitId":"Jawad280"},"content":"                if (index \u003e\u003d 0 \u0026\u0026 index \u003c size) {","lastModifiedDate":"2024-01-26"},{"lineNumber":184,"author":{"gitId":"Jawad280"},"content":"                    MarkCommand mc \u003d new MarkCommand(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":185,"author":{"gitId":"Jawad280"},"content":"                    return mc;","lastModifiedDate":"2024-01-26"},{"lineNumber":186,"author":{"gitId":"Jawad280"},"content":"                } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":187,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Invalid number provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":188,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":189,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":190,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":191,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":192,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":193,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"unmark\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":194,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":195,"author":{"gitId":"Jawad280"},"content":"                int size \u003d tasks.taskNum();","lastModifiedDate":"2024-01-26"},{"lineNumber":196,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":197,"author":{"gitId":"Jawad280"},"content":"                if (size \u003d\u003d 0) {","lastModifiedDate":"2024-01-26"},{"lineNumber":198,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Your list is empty at the moment, add some todos/events/deadlines to UNMARK them!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":199,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":200,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":201,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"unmark\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":202,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    No index provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":203,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":204,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":205,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(6,7);","lastModifiedDate":"2024-01-26"},{"lineNumber":206,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":207,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":208,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after unmark!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":209,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":210,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":211,"author":{"gitId":"Jawad280"},"content":"                int index \u003d Integer.parseInt(command.substring(7)) - 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":212,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":213,"author":{"gitId":"Jawad280"},"content":"                if (index \u003e\u003d 0 \u0026\u0026 index \u003c size) {","lastModifiedDate":"2024-01-26"},{"lineNumber":214,"author":{"gitId":"Jawad280"},"content":"                    UnmarkCommand uc \u003d new UnmarkCommand(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":215,"author":{"gitId":"Jawad280"},"content":"                    return uc;","lastModifiedDate":"2024-01-26"},{"lineNumber":216,"author":{"gitId":"Jawad280"},"content":"                } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":217,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Invalid number provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":218,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":219,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":220,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":221,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":222,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":223,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":224,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-26"},{"lineNumber":225,"author":{"gitId":"Jawad280"},"content":"                int size \u003d tasks.taskNum();","lastModifiedDate":"2024-01-26"},{"lineNumber":226,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":227,"author":{"gitId":"Jawad280"},"content":"                if (size \u003d\u003d 0) {","lastModifiedDate":"2024-01-26"},{"lineNumber":228,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Your list is empty at the moment, add some todos/events/deadlines to DELETE them!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":229,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":230,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":231,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"delete\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":232,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    No index provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":233,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":234,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":235,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(6,7);","lastModifiedDate":"2024-01-26"},{"lineNumber":236,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":237,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":238,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly type your task a space after delete!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":239,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":240,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":241,"author":{"gitId":"Jawad280"},"content":"                int index \u003d Integer.parseInt(command.substring(7)) - 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":242,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":243,"author":{"gitId":"Jawad280"},"content":"                if (index \u003e\u003d 0 \u0026\u0026 index \u003c size) {","lastModifiedDate":"2024-01-26"},{"lineNumber":244,"author":{"gitId":"Jawad280"},"content":"                    DeleteCommand dc \u003d new DeleteCommand(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":245,"author":{"gitId":"Jawad280"},"content":"                    return dc;","lastModifiedDate":"2024-01-26"},{"lineNumber":246,"author":{"gitId":"Jawad280"},"content":"                } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":247,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Invalid number provided! Please give a valid index from 1 to \" + size +\" !!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":248,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":249,"author":{"gitId":"Jawad280"},"content":"            }   catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":250,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":251,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":252,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":253,"author":{"gitId":"Jawad280"},"content":"        else if (command.startsWith(\"find\")) {","lastModifiedDate":"2024-01-30"},{"lineNumber":254,"author":{"gitId":"Jawad280"},"content":"            try {","lastModifiedDate":"2024-01-30"},{"lineNumber":255,"author":{"gitId":"Jawad280"},"content":"                if (command.equals(\"find\")) {","lastModifiedDate":"2024-01-30"},{"lineNumber":256,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Please enter what you are finding for after \u0027find\u0027 !!!\");","lastModifiedDate":"2024-01-30"},{"lineNumber":257,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-30"},{"lineNumber":258,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":259,"author":{"gitId":"Jawad280"},"content":"                String blank \u003d command.substring(4,5);","lastModifiedDate":"2024-01-30"},{"lineNumber":260,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":261,"author":{"gitId":"Jawad280"},"content":"                if (!blank.isBlank()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":262,"author":{"gitId":"Jawad280"},"content":"                    throw new TobiasException(\"    Kindly enter what you are finding a space after find !!!\");","lastModifiedDate":"2024-01-30"},{"lineNumber":263,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-30"},{"lineNumber":264,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":265,"author":{"gitId":"Jawad280"},"content":"                String keyWord \u003d command.substring(5);","lastModifiedDate":"2024-01-30"},{"lineNumber":266,"author":{"gitId":"Jawad280"},"content":"                FindCommand fc \u003d new FindCommand(keyWord);","lastModifiedDate":"2024-01-30"},{"lineNumber":267,"author":{"gitId":"Jawad280"},"content":"                return fc;","lastModifiedDate":"2024-01-30"},{"lineNumber":268,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":269,"author":{"gitId":"Jawad280"},"content":"            } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":270,"author":{"gitId":"Jawad280"},"content":"                e.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":271,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":272,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":273,"author":{"gitId":"Jawad280"},"content":"        else if (command.equals(\"bye\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":274,"author":{"gitId":"Jawad280"},"content":"            ExitCommand ec \u003d new ExitCommand();","lastModifiedDate":"2024-01-26"},{"lineNumber":275,"author":{"gitId":"Jawad280"},"content":"            return ec;","lastModifiedDate":"2024-01-26"},{"lineNumber":276,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":277,"author":{"gitId":"Jawad280"},"content":"        else {","lastModifiedDate":"2024-01-30"},{"lineNumber":278,"author":{"gitId":"Jawad280"},"content":"            throw new TobiasException(","lastModifiedDate":"2024-01-26"},{"lineNumber":279,"author":{"gitId":"Jawad280"},"content":"                    \"    You can ask me  stuff like       : \u0027bye\u0027, \u0027list\u0027, \u0027mark\u0027, \u0027unmark\u0027,\u0027delete\u0027\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":280,"author":{"gitId":"Jawad280"},"content":"                            \"    You can ask me to create these   : \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027\");","lastModifiedDate":"2024-01-26"},{"lineNumber":281,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":282,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":283,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":284,"author":{"gitId":"Jawad280"},"content":"        return new NoreplyCommand();","lastModifiedDate":"2024-01-30"},{"lineNumber":285,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":286,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":286}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package storage;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import parser.Parser;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.*;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import java.io.File;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"public class Storage {","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    private String filePath;","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Storage.","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"     * @param filePath The relative string file path of the saved data.","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-01-26"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * Checks if there is a local saved txt file at the filePath.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * If there exists no such .txt file, it will create a new save file at the filePath.","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    public void createLocalStorage() {","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2024-01-26"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"            if (!file.getParentFile().exists()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"            if (file.createNewFile()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"                System.out.println(\"   File created successfully: \" + file.getAbsolutePath());","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"            } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"                System.out.println(\"   File alr exists: \" + file.getAbsolutePath());","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"     * Reads data of commands and adds them to the given TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"     * @param data String of commands.","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"     * @param tasks TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"     * @throws TobiasException If the given data contains corrupted commands.","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"    public static void localToList(String data, TaskList tasks) throws TobiasException {","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"            if (data.startsWith(\"T\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"                boolean isDone \u003d Integer.parseInt(data.substring(8,9)) \u003d\u003d 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"                int desc \u003d data.indexOf(\"|desc\");","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"                String description \u003d data.substring(desc+5);","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"                Task newTask \u003d new ToDo(description, isDone);","lastModifiedDate":"2024-01-26"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"                tasks.addToList(newTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"            else if (data.startsWith(\"D\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"                boolean isDone \u003d Integer.parseInt(data.substring(8,9)) \u003d\u003d 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"                int desc \u003d data.indexOf(\"|desc\");","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"                int by \u003d data.indexOf(\"|by\");","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"                String description \u003d data.substring(desc+5, by);","lastModifiedDate":"2024-01-26"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"                String byDate \u003d data.substring(by+3);","lastModifiedDate":"2024-01-26"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime dd \u003d Parser.dateFromString(byDate);","lastModifiedDate":"2024-01-26"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"                Task newTask \u003d new Deadline(description, isDone, dd);","lastModifiedDate":"2024-01-26"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"                tasks.addToList(newTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":79,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"Jawad280"},"content":"            else if (data.startsWith(\"E\")) {","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"Jawad280"},"content":"                boolean isDone \u003d Integer.parseInt(data.substring(8,9)) \u003d\u003d 1;","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"Jawad280"},"content":"                int desc \u003d data.indexOf(\"|desc\");","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"Jawad280"},"content":"                int from \u003d data.indexOf(\"|from\");","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"Jawad280"},"content":"                int to \u003d data.indexOf(\"|to\");","lastModifiedDate":"2024-01-26"},{"lineNumber":87,"author":{"gitId":"Jawad280"},"content":"                String description \u003d data.substring(desc+5, from);","lastModifiedDate":"2024-01-26"},{"lineNumber":88,"author":{"gitId":"Jawad280"},"content":"                String fromDate \u003d data.substring(from+5, to);","lastModifiedDate":"2024-01-26"},{"lineNumber":89,"author":{"gitId":"Jawad280"},"content":"                String toDate \u003d data.substring(to+3);","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":91,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime f \u003d Parser.dateFromString(fromDate);","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"Jawad280"},"content":"                LocalDateTime t \u003d Parser.dateFromString(toDate);","lastModifiedDate":"2024-01-26"},{"lineNumber":93,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"Jawad280"},"content":"                Task newTask \u003d new Event(description, isDone, f, t);","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"Jawad280"},"content":"                tasks.addToList(newTask);","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"Jawad280"},"content":"            else {","lastModifiedDate":"2024-01-26"},{"lineNumber":98,"author":{"gitId":"Jawad280"},"content":"                throw new TobiasException(\"   Saved file is corrupted!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":99,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":100,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":101,"author":{"gitId":"Jawad280"},"content":"            System.out.println(\"local to list function \" + e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":102,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":103,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":104,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":105,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":106,"author":{"gitId":"Jawad280"},"content":"     * Reads the local saved .txt file at the filePath.","lastModifiedDate":"2024-01-30"},{"lineNumber":107,"author":{"gitId":"Jawad280"},"content":"     * Calls localToList to interpret and add the commands that have been saved in the local .txt file.","lastModifiedDate":"2024-01-30"},{"lineNumber":108,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":109,"author":{"gitId":"Jawad280"},"content":"    public TaskList localToCurrent() {","lastModifiedDate":"2024-01-26"},{"lineNumber":110,"author":{"gitId":"Jawad280"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2024-01-26"},{"lineNumber":111,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":112,"author":{"gitId":"Jawad280"},"content":"            File f \u003d new File(filePath);","lastModifiedDate":"2024-01-26"},{"lineNumber":113,"author":{"gitId":"Jawad280"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-01-26"},{"lineNumber":114,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":115,"author":{"gitId":"Jawad280"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":116,"author":{"gitId":"Jawad280"},"content":"                localToList(s.nextLine(), tasks);","lastModifiedDate":"2024-01-26"},{"lineNumber":117,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":118,"author":{"gitId":"Jawad280"},"content":"            s.close();","lastModifiedDate":"2024-01-26"},{"lineNumber":119,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException tE) {","lastModifiedDate":"2024-01-30"},{"lineNumber":120,"author":{"gitId":"Jawad280"},"content":"            tE.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":121,"author":{"gitId":"Jawad280"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":122,"author":{"gitId":"Jawad280"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":123,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":124,"author":{"gitId":"Jawad280"},"content":"        return tasks;","lastModifiedDate":"2024-01-26"},{"lineNumber":125,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":126,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":127,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":128,"author":{"gitId":"Jawad280"},"content":"     * Takes in a TaskList of tasks and stores it to the local save .txt file.","lastModifiedDate":"2024-01-30"},{"lineNumber":129,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":130,"author":{"gitId":"Jawad280"},"content":"     * @param tasks TaskList containing the tasks that need to be saved.","lastModifiedDate":"2024-01-30"},{"lineNumber":131,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":132,"author":{"gitId":"Jawad280"},"content":"    public void storeToLocal(TaskList tasks) {","lastModifiedDate":"2024-01-26"},{"lineNumber":133,"author":{"gitId":"Jawad280"},"content":"        String result \u003d tasks.saveMechanism();","lastModifiedDate":"2024-01-26"},{"lineNumber":134,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":135,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":136,"author":{"gitId":"Jawad280"},"content":"            FileWriter fw \u003d new FileWriter(\"data/tobias.txt\");","lastModifiedDate":"2024-01-26"},{"lineNumber":137,"author":{"gitId":"Jawad280"},"content":"            fw.write(result);","lastModifiedDate":"2024-01-26"},{"lineNumber":138,"author":{"gitId":"Jawad280"},"content":"            fw.close();","lastModifiedDate":"2024-01-26"},{"lineNumber":139,"author":{"gitId":"Jawad280"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":140,"author":{"gitId":"Jawad280"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-26"},{"lineNumber":141,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":142,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":143,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":143}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package task;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * @param deadline DateTime object to represent deadline DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"        super(description);","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value to state if the task is done or not.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * @param deadline DateTime object to represent deadline DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime deadline) {","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy hhmm a\");","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + \"[D][ ]\" + \" \" + description + \"(by: \" + deadline.format(output) + \")\";","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     * Prints the task and its corresponding index in the list of tasks in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy hhmm a\");","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + (index+1) + \".[D]\" + getStatusIcon() + \" \" + description  + \"(by: \" + deadline.format(output) + \")\";","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the format of the saved txt file.","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"    public String storagePrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"        return \"D\" + \"|isdone\" + (isDone ? 1 : 0) + \"|desc\" + description + \"|by\" + deadline.format(output);","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"     * Checks if a Deadline is equal to the current instance of Deadline.","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"     * @param obj The object that is to be checked for equality with current Deadline object.","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"     * @return True if the obj is equal else return False.","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-01-30"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"        if (!super.equals(obj)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"            return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"        if (obj instanceof Deadline) {","lastModifiedDate":"2024-01-30"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"            Deadline d \u003d (Deadline) obj;","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"            return deadline.equals(d.deadline);","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":78}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package task;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * Constructor for an Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * @param from DateTime object to represent from DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param to DateTime object to represent to DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        super(description);","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * Constructor for an Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value to state if the task is done or not.","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"     * @param from DateTime object to represent from DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"     * @param to DateTime object to represent to DateTime.","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    public Event(String description, boolean isDone, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy hhmm a\");","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + \"[E][ ]\" + \" \" + description + \"(from: \" + from.format(output) + \" to: \" + to.format(output) +\")\";","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"     * Prints the task and its corresponding index in the list of tasks in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy hhmm a\");","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + (index+1) + \".[E]\" + getStatusIcon() + \" \" + description  + \"(from: \" + from.format(output) + \" to: \" + to.format(output) +\")\";","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the format of the saved txt file.","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"    public String storagePrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"        DateTimeFormatter output \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"        return \"E\" + \"|isdone\" + (isDone ? 1 : 0) + \"|desc\" + description + \"|from\" + from.format(output) + \"|to\" + to.format(output);","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"     * Checks if an Event is equal to the current instance of Event.","lastModifiedDate":"2024-01-30"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"     * @param obj The object that is to be checked for equality with current Event object.","lastModifiedDate":"2024-01-30"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"     * @return True if the obj is equal else return False.","lastModifiedDate":"2024-01-30"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"        if (!super.equals(obj)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"            return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"        if (obj instanceof Event) {","lastModifiedDate":"2024-01-30"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"            Event event \u003d (Event) obj;","lastModifiedDate":"2024-01-30"},{"lineNumber":79,"author":{"gitId":"Jawad280"},"content":"            return from.equals(event.from) \u0026\u0026 to.equals(event.to);","lastModifiedDate":"2024-01-30"},{"lineNumber":80,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":81,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":82,"author":{"gitId":"Jawad280"},"content":"        return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":83,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":84,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":84}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package task;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"    protected String description;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Task.","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Task.","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value to state if the task is done or not.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a Task.","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     * @return A checked string if the task is done else returns an empty [].","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        return isDone ? \"[✔]\" : \"[ ]\";","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"    abstract public void taskPrinter();","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"    abstract public void taskPrinter(int index);","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * Sets the isDone value of task to be true.","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"     * Sets the isDone value of task to be false.","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"    public void markAsUndone() {","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"    abstract public String storagePrinter();","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"     * Checks if the keyword exists in the description.","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"     * @param keyword The keyword that needs to be searched in the description.","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"     * @return Boolean value if such a keyword exists in the description.","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"        String lowercaseDescription \u003d description.toLowerCase();","lastModifiedDate":"2024-01-30"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"        String lowercaseKeyword \u003d keyword.toLowerCase();","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"        return lowercaseDescription.contains(lowercaseKeyword);","lastModifiedDate":"2024-01-30"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"     * Checks if a Task is equal to the current instance of Task.","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"     * @param obj The object that is to be checked for equality with current Task object.","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"     * @return True if the obj is equal else return False.","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":79,"author":{"gitId":"Jawad280"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2024-01-30"},{"lineNumber":80,"author":{"gitId":"Jawad280"},"content":"        if (this \u003d\u003d obj) {","lastModifiedDate":"2024-01-30"},{"lineNumber":81,"author":{"gitId":"Jawad280"},"content":"            return true;","lastModifiedDate":"2024-01-30"},{"lineNumber":82,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":83,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":84,"author":{"gitId":"Jawad280"},"content":"        if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":85,"author":{"gitId":"Jawad280"},"content":"            return false;","lastModifiedDate":"2024-01-30"},{"lineNumber":86,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":87,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":88,"author":{"gitId":"Jawad280"},"content":"        Task task \u003d (Task) obj;","lastModifiedDate":"2024-01-30"},{"lineNumber":89,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":90,"author":{"gitId":"Jawad280"},"content":"        return isDone \u003d\u003d task.isDone \u0026\u0026 description.equals(task.description);","lastModifiedDate":"2024-01-30"},{"lineNumber":91,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":92,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":93,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":93}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package task;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import ui.Ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import java.util.List;","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"public class TaskList {","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2024-01-26"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"     * Adds task to the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"     * @param task Task to be added to the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"    public void addToList(Task task) {","lastModifiedDate":"2024-01-26"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"     * Gets the task at index from the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"     * @param index index of Task to be retrieved from TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2024-01-26"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"        return tasks.get(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"     * Removes the task at index from the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"     * @param index index of Task to be removed from TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"    public void removeFromList(int index) {","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        tasks.remove(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"     * Formats all the tasks in the TaskList to a save .txt format.","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"     * @return String format of all the tasks in the list in a save .txt friendly format.","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"    public String saveMechanism() {","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"\";","lastModifiedDate":"2024-01-26"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-01-26"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"            result +\u003d task.storagePrinter() + System.lineSeparator();","lastModifiedDate":"2024-01-26"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"        return result;","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":64,"author":{"gitId":"Jawad280"},"content":"     * Number of tasks in the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":65,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":66,"author":{"gitId":"Jawad280"},"content":"     * @return number of tasks in the TaskList.","lastModifiedDate":"2024-01-30"},{"lineNumber":67,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"Jawad280"},"content":"    public int taskNum() {","lastModifiedDate":"2024-01-26"},{"lineNumber":69,"author":{"gitId":"Jawad280"},"content":"        return tasks.size();","lastModifiedDate":"2024-01-26"},{"lineNumber":70,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":71,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":72,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":74,"author":{"gitId":"Jawad280"},"content":"     * Prints all tasks in the TaskList in console.","lastModifiedDate":"2024-01-30"},{"lineNumber":75,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":76,"author":{"gitId":"Jawad280"},"content":"     * @throws TobiasException if the TaskList is empty.","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":78,"author":{"gitId":"Jawad280"},"content":"    public void printList() throws TobiasException {","lastModifiedDate":"2024-01-30"},{"lineNumber":79,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-26"},{"lineNumber":80,"author":{"gitId":"Jawad280"},"content":"            if (tasks.isEmpty()) {","lastModifiedDate":"2024-01-26"},{"lineNumber":81,"author":{"gitId":"Jawad280"},"content":"                throw new TobiasException(\"    Your list is empty at the moment !\");","lastModifiedDate":"2024-01-26"},{"lineNumber":82,"author":{"gitId":"Jawad280"},"content":"            } else {","lastModifiedDate":"2024-01-26"},{"lineNumber":83,"author":{"gitId":"Jawad280"},"content":"                Ui.printDivider();","lastModifiedDate":"2024-01-26"},{"lineNumber":84,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":85,"author":{"gitId":"Jawad280"},"content":"                System.out.println(\"    Here are the tasks in your list:\");","lastModifiedDate":"2024-01-26"},{"lineNumber":86,"author":{"gitId":"Jawad280"},"content":"                for (Task task : tasks) {","lastModifiedDate":"2024-01-26"},{"lineNumber":87,"author":{"gitId":"Jawad280"},"content":"                    int index \u003d tasks.indexOf(task);","lastModifiedDate":"2024-01-26"},{"lineNumber":88,"author":{"gitId":"Jawad280"},"content":"                    task.taskPrinter(index);","lastModifiedDate":"2024-01-26"},{"lineNumber":89,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-26"},{"lineNumber":90,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":91,"author":{"gitId":"Jawad280"},"content":"                Ui.printDivider();","lastModifiedDate":"2024-01-26"},{"lineNumber":92,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-26"},{"lineNumber":93,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-26"},{"lineNumber":94,"author":{"gitId":"Jawad280"},"content":"            e.printMessage();","lastModifiedDate":"2024-01-26"},{"lineNumber":95,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-26"},{"lineNumber":96,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":97,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":98,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":99,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":100,"author":{"gitId":"Jawad280"},"content":"     * Prints the tasks in the TaskList that have the keyword in console.","lastModifiedDate":"2024-01-30"},{"lineNumber":101,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":102,"author":{"gitId":"Jawad280"},"content":"     * @param keyword The keyword that needs to be in the task to be printed.","lastModifiedDate":"2024-01-30"},{"lineNumber":103,"author":{"gitId":"Jawad280"},"content":"     * @throws TobiasException if there are no tasks with the given keyword.","lastModifiedDate":"2024-01-30"},{"lineNumber":104,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":105,"author":{"gitId":"Jawad280"},"content":"    public void printListFind(String keyword) throws TobiasException {","lastModifiedDate":"2024-01-30"},{"lineNumber":106,"author":{"gitId":"Jawad280"},"content":"        List\u003cTask\u003e foundResults \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-30"},{"lineNumber":107,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":108,"author":{"gitId":"Jawad280"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-01-30"},{"lineNumber":109,"author":{"gitId":"Jawad280"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2024-01-30"},{"lineNumber":110,"author":{"gitId":"Jawad280"},"content":"                foundResults.add(task);","lastModifiedDate":"2024-01-30"},{"lineNumber":111,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":112,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":113,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":114,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":115,"author":{"gitId":"Jawad280"},"content":"            if (foundResults.isEmpty()) {","lastModifiedDate":"2024-01-30"},{"lineNumber":116,"author":{"gitId":"Jawad280"},"content":"                throw new TobiasException(\"    Could not find any results containing : \" + keyword);","lastModifiedDate":"2024-01-30"},{"lineNumber":117,"author":{"gitId":"Jawad280"},"content":"            } else {","lastModifiedDate":"2024-01-30"},{"lineNumber":118,"author":{"gitId":"Jawad280"},"content":"                Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":119,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":120,"author":{"gitId":"Jawad280"},"content":"                System.out.println(\"    Here are the matching tasks in your list:\");","lastModifiedDate":"2024-01-30"},{"lineNumber":121,"author":{"gitId":"Jawad280"},"content":"                for (Task task : foundResults) {","lastModifiedDate":"2024-01-30"},{"lineNumber":122,"author":{"gitId":"Jawad280"},"content":"                    int index \u003d tasks.indexOf(task);","lastModifiedDate":"2024-01-30"},{"lineNumber":123,"author":{"gitId":"Jawad280"},"content":"                    task.taskPrinter(index);","lastModifiedDate":"2024-01-30"},{"lineNumber":124,"author":{"gitId":"Jawad280"},"content":"                }","lastModifiedDate":"2024-01-30"},{"lineNumber":125,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":126,"author":{"gitId":"Jawad280"},"content":"                Ui.printDivider();","lastModifiedDate":"2024-01-30"},{"lineNumber":127,"author":{"gitId":"Jawad280"},"content":"            }","lastModifiedDate":"2024-01-30"},{"lineNumber":128,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":129,"author":{"gitId":"Jawad280"},"content":"            e.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":130,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":131,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":132,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":132}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package task;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a ToDo.","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Todo.","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"        super(description);","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"     * Constructor for a ToDo.","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"     * @param description Description of the Todo.","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"     * @param isDone Boolean value to state if the task is done or not.","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"        super(description, isDone);","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + \"[T][ ]\" + \" \" + description;","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"     * Prints the task and its corresponding index in the list of tasks in the console.","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"    public void taskPrinter(int index) {","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"        String result \u003d \"    \" + (index+1) + \".[T]\" + getStatusIcon() + \" \" + description;","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"        System.out.println(result);","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"     * Prints the task in the format of the saved txt file.","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"    @Override","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    public String storagePrinter() {","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"        return \"T\" + \"|isdone\" + (isDone ? 1 : 0) + \"|desc\" + description;","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":47}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package ui;","lastModifiedDate":"2024-01-26"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-26"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"public class Ui {","lastModifiedDate":"2024-01-26"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"    private static final String DIVIDER \u003d \"  ---------------------------------------------------------------------------------------\";","lastModifiedDate":"2024-01-26"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"    private static final String BOTNAME \u003d \"TOBIAS\";","lastModifiedDate":"2024-01-26"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"     * Prints the welcome message of Tobias in console.","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    public void helloPrinter() {","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"   Hello there! I\u0027m \" + BOTNAME);","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"   What can I do for you today ?\");","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"     * Prints the farewell message of Tobias.","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    public void goodbyePrinter() {","lastModifiedDate":"2024-01-26"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    I say this with a heavy heart but Goodbye my lover :( Hope to see you soon!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"     * Prints the task given and the total number of tasks in the list.","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"     * @param task Task that is provided.","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"     * @param size Total number of tasks in the list now.","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"    public void addedTaskPrinter(Task task, int size) {","lastModifiedDate":"2024-01-26"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    Got it. I\u0027ve added this task: \");","lastModifiedDate":"2024-01-26"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"        task.taskPrinter();","lastModifiedDate":"2024-01-26"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"        System.out.println(\"    Now you have \" + size + \" tasks in the list!\");","lastModifiedDate":"2024-01-26"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":47,"author":{"gitId":"Jawad280"},"content":"     * Prints a divider.","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"Jawad280"},"content":"    public static void printDivider() {","lastModifiedDate":"2024-01-26"},{"lineNumber":50,"author":{"gitId":"Jawad280"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2024-01-26"},{"lineNumber":51,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":52,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":53,"author":{"gitId":"Jawad280"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"Jawad280"},"content":"     * Takes in the input given by user and returns it as a String","lastModifiedDate":"2024-01-30"},{"lineNumber":55,"author":{"gitId":"Jawad280"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":56,"author":{"gitId":"Jawad280"},"content":"     * @return String command of user input.","lastModifiedDate":"2024-01-30"},{"lineNumber":57,"author":{"gitId":"Jawad280"},"content":"     * */","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"Jawad280"},"content":"    public String readCommand() {","lastModifiedDate":"2024-01-26"},{"lineNumber":59,"author":{"gitId":"Jawad280"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-26"},{"lineNumber":60,"author":{"gitId":"Jawad280"},"content":"        String command \u003d scanner.nextLine().trim();","lastModifiedDate":"2024-01-26"},{"lineNumber":61,"author":{"gitId":"Jawad280"},"content":"        return command;","lastModifiedDate":"2024-01-26"},{"lineNumber":62,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":63,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"Jawad280":63}},{"path":"src/test/java/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package parser;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"public class ParserTest {","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"    @Test","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"    public void no_from_and_to_for_events() {","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"            Parser.parseCommands(\"event marathon\", testList);","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"            Exception m \u003d new TobiasException(\"   Hey, please enter a /from and /to date/day/time!!\");","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"            assertEquals(m.getMessage(), e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"    @Test","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"    public void invalid_date_syntax() {","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"        TaskList testList \u003d new TaskList();","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"            Parser.parseCommands(\"deadline subission /from 11-january-2023 5am\", testList);","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"            Exception m \u003d new TobiasException(\"     Hey, please enter a date \u0026 time in this format : dd-MM-yyyy HHmm !\");","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"            assertEquals(m.getMessage(), e.getMessage());","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":32}},{"path":"src/test/java/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"package storage;","lastModifiedDate":"2024-01-30"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"import exception.TobiasException;","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"import task.Event;","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"import task.Task;","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"import task.TaskList;","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":9,"author":{"gitId":"Jawad280"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"Jawad280"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":12,"author":{"gitId":"Jawad280"},"content":"public class StorageTest {","lastModifiedDate":"2024-01-30"},{"lineNumber":13,"author":{"gitId":"Jawad280"},"content":"    @Test","lastModifiedDate":"2024-01-30"},{"lineNumber":14,"author":{"gitId":"Jawad280"},"content":"    public void corrupted_saved_file() {","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"Jawad280"},"content":"        // Instead of D for deadline, the file is corrupted and adds a G instead","lastModifiedDate":"2024-01-30"},{"lineNumber":16,"author":{"gitId":"Jawad280"},"content":"        String testStoredCommand \u003d \"G|isdone1|descmarathon |from15-03-2024 1000|to15-03-2024 1600\";","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"Jawad280"},"content":"            TaskList testList \u003d new TaskList();","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"Jawad280"},"content":"            Storage.localToList(testStoredCommand, testList);","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"Jawad280"},"content":"            assert(e.getMessage().equals(\"   Saved file is corrupted!\"));","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":25,"author":{"gitId":"Jawad280"},"content":"    @Test","lastModifiedDate":"2024-01-30"},{"lineNumber":26,"author":{"gitId":"Jawad280"},"content":"    public void correct_stored_data_is_loaded() {","lastModifiedDate":"2024-01-30"},{"lineNumber":27,"author":{"gitId":"Jawad280"},"content":"        // Should store an event command that is :","lastModifiedDate":"2024-01-30"},{"lineNumber":28,"author":{"gitId":"Jawad280"},"content":"        // isDone: true,","lastModifiedDate":"2024-01-30"},{"lineNumber":29,"author":{"gitId":"Jawad280"},"content":"        // description : marathon,","lastModifiedDate":"2024-01-30"},{"lineNumber":30,"author":{"gitId":"Jawad280"},"content":"        // from \u0026 to : 15/03/2024 10 am to 15/03/2024 4pm","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"Jawad280"},"content":"        String testStoredCommand \u003d \"E|isdone1|descmarathon |from15-03-2024 1000|to15-03-2024 1600\";","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"Jawad280"},"content":"        try {","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"Jawad280"},"content":"            TaskList testList \u003d new TaskList();","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"Jawad280"},"content":"            LocalDateTime from \u003d LocalDateTime.parse(\"15-03-2024 1000\", DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"Jawad280"},"content":"            LocalDateTime to \u003d LocalDateTime.parse(\"15-03-2024 1600\", DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2024-01-30"},{"lineNumber":36,"author":{"gitId":"Jawad280"},"content":"            Task expected \u003d new Event(\"marathon \", true, from, to);","lastModifiedDate":"2024-01-30"},{"lineNumber":37,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":38,"author":{"gitId":"Jawad280"},"content":"            Storage.localToList(testStoredCommand, testList);","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"Jawad280"},"content":"            assert(expected.equals(testList.getTask(0)));","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"Jawad280"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"Jawad280"},"content":"        } catch (TobiasException e) {","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"Jawad280"},"content":"            e.printMessage();","lastModifiedDate":"2024-01-30"},{"lineNumber":44,"author":{"gitId":"Jawad280"},"content":"        }","lastModifiedDate":"2024-01-30"},{"lineNumber":45,"author":{"gitId":"Jawad280"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":46,"author":{"gitId":"Jawad280"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"Jawad280":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jawad280"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Jawad280"},"content":"todo Run","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Jawad280"},"content":"deadline Submission /by Friday","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Jawad280"},"content":"event Openhouse /from 25 Jan /to 28 Jan","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Jawad280"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Jawad280"},"content":"mark 2","lastModifiedDate":"2024-01-25"},{"lineNumber":7,"author":{"gitId":"Jawad280"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Jawad280":7}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Jawad280"},"content":"java -classpath ../bin Tobias \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jawad280":1,"-":37}}]
