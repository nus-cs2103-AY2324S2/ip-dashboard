[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"    mainClass.set(\"duke.HughJazz\")","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"    archiveBaseName \u003d \"HughJazz\"","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Greg-Tan":2,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"E | true | project meeting | 02/02/2001 1400-22/08/2011 1600","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"T | false | borrow book","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"D | true | return book | 14/12/2022 0900","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"Greg-Tan":3}},{"path":"src/main/java/duke/ChatbotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":" * Represents exceptions specific to the Duke chatbot application.","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":" * This class is used to encapsulate errors that occur during the application\u0027s operation, providing a clear message","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":" * regarding what went wrong. It extends the Exception class, allowing the Duke application to handle errors","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":" * gracefully and inform the user accordingly.","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"public class ChatbotException extends Exception {","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Exception with the specified detail message.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"     * The message provides a clear description of the exception, intended to be shown directly to the user or logged","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     * for debugging purposes.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"     * @param message The detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    public ChatbotException(String message) {","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"        super(message);","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"Greg-Tan":21}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" * Represents a task with a deadline in the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":" * A deadline task includes a description, a completion status, and a deadline by which the task should be completed.","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     * The deadline by which the task needs to be completed.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Deadline instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"     * @param description The description of the deadline task, providing details about the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"     * @param isDone The initial completion status of the task. True if the task has already been completed, false otherwise.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"     * @param by The deadline for the task in \u0027dd/MM/yyyy HHmm\u0027 format. It is parsed to a LocalDateTime object.","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     * @throws DateTimeParseException If the provided \u0027by\u0027 string does not conform to the expected date and time format.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"    public Deadline(String description, Boolean isDone, String by) throws DateTimeParseException {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"            this.by \u003d LocalDateTime.parse(by, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"            System.err.println(\"Failed to parse the date/time: \" + by);","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"            throw e;","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"     * Generates and returns a string representation of the deadline task formatted for file storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"     * The format includes the task type identifier (\u0027D\u0027), the completion status, the task description, and the deadline,","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"     * separated by vertical bars.","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string formatted for saving the deadline task to a file, encapsulating its type, completion status,","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"     * description, and deadline.","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"        return \"D | \" +  this.isDone + \" | \" + this.description  + \" | \" + by.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"     * Provides a string representation of the deadline task for display purposes.","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"     * This representation includes the task type identifier (\u0027[D]\u0027), the completion status, the task description,","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"     * and the formatted deadline.","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string representation of the deadline task, including its type, completion status, description,","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"     * and deadline, suitable for display.","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":62}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" * Represents an event task within the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":" * An event task includes a description, a completion status, and a time range during which the event takes place.","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     * The start time of the event.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"     * The end time of the event.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Event instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"     * @param description The description of the event task, detailing what the event is about.","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"     * @param isDone The initial completion status of the event task. True indicates that the event has been completed, while false indicates that it is still upcoming.","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"     * @param from The start time of the event in \u0027dd/MM/yyyy HHmm\u0027 format. It is parsed to a LocalDateTime object.","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"     * @param to The end time of the event in \u0027dd/MM/yyyy HHmm\u0027 format. It is parsed to a LocalDateTime object.","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"     * @throws DateTimeParseException If either the provided \u0027from\u0027 or \u0027to\u0027 string does not conform to the expected date and time format, indicating an issue with parsing the event\u0027s start or end time.","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"    public Event(String description, Boolean isDone, String from, String to) throws DateTimeParseException {","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"            this.from \u003d LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"            System.err.println(\"Failed to parse the date/time for event start: \" + from);","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"            throw e;","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"            this.to \u003d LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"            System.err.println(\"Failed to parse the date/time for event end: \" + to);","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"            throw e;","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"     * Generates and returns a string representation of the event task formatted for file storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"     * The format includes the task type identifier (\u0027E\u0027), the completion status, the task description, and the event\u0027s time range,","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"     * separated by vertical bars and a dash between the start and end times.","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string formatted for saving the event task to a file, encapsulating its type, completion status,","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"     * description, and time range.","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-04"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"        return \"E | \" +  this.isDone + \" | \" + this.description  + \" | \" + this.from.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\")) + \"-\" + this.to.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"     * Provides a string representation of the event task for display purposes.","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"     * This representation includes the task type identifier (\u0027[E]\u0027), the completion status, the task description,","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"     * and the formatted time range of the event.","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string representation of the event task, including its type, completion status, description,","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"Greg-Tan"},"content":"     * and time range, suitable for display.","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Greg-Tan"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"Greg-Tan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"},{"lineNumber":74,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":74}},{"path":"src/main/java/duke/HughJazz.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.io.File;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":" * The main class for the Duke application named HughJazz.","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":" * This class initializes the application and manages the main interaction loop, processing user inputs","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":" * and executing corresponding actions.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"public class HughJazz {","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     * UI component responsible for interactions with the user.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"    private static Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"     * Storage component responsible for loading and saving tasks to a file.","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"    private static Storage storage \u003d new Storage(\".\" + File.separator + \"data\" + File.separator + \"duke.txt\");","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     * TaskList component that holds and manages all tasks in the application.","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"    private static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"     * The entry point of the application. It initializes necessary components,","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"     * loads existing tasks from storage, and enters a loop to accept and process user commands.","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"        String userInput;","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"        ui.showGreeting();","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"            ArrayList\u003cTask\u003e loadedTasks \u003d storage.load();","lastModifiedDate":"2024-02-07"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"            taskList.loadTasks(loadedTasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"            ui.showError(\"No existing txt file found.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"        while (true) {","lastModifiedDate":"2024-01-27"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"            userInput \u003d ui.readCommand();","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"            if (\"bye\".equalsIgnoreCase(userInput)) {","lastModifiedDate":"2024-01-27"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"                break;","lastModifiedDate":"2024-01-27"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"            } else {","lastModifiedDate":"2024-01-27"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"                try {","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"                    Parser.parse(userInput, taskList, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"                    System.out.println(\"Please input date and time in the correct format dd/MM/yyyy HHmm\");","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"                    System.out.println(\"Please try again\");","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"                } catch (ChatbotException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"                    ui.showError(e.getMessage());","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"                }","lastModifiedDate":"2024-02-04"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"            }","lastModifiedDate":"2024-02-04"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"        ui.showGoodbye();","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"Greg-Tan":66}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":" * Handles parsing of user inputs and encoded task data.","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":" * This class provides static methods to decode task information from a string format and to interpret user commands","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":" * to interact with the task list and storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"public class Parser {","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"     * Decodes a single line of encoded task data into a Task object.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"     * The encoded format is expected to be a delimited string containing task type, status, description,","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"     * and optionally, date/time information.","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     * @param line The encoded string representing a task.","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"     * @return A Task object corresponding to the encoded task data.","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"     * @throws IllegalArgumentException If the task type is unknown.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    public static Task decodeTask(String line){","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"        switch (parts[0]) {","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"            case \"T\":","lastModifiedDate":"2024-02-07"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"                return new Todo(parts[2], Boolean.parseBoolean(parts[1]));","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"            case \"D\":","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"                return new Deadline(parts[2], Boolean.parseBoolean(parts[1]), parts[3]);","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"            case \"E\":","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"                String[] timeParts \u003d parts[3].split(\"-\");","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"                return new Event(parts[2], Boolean.parseBoolean(parts[1]), timeParts[0], timeParts[1]);","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"            default:","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"                throw new IllegalArgumentException(\"Unknown task type: \" + parts[0]);","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"     * Parses user input to perform operations on the task list, such as adding, deleting, and marking tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"     * This method interprets commands to manipulate the task list and interacts with storage as needed.","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"     * @param userInput The raw input string from the user.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"     * @param taskList The TaskList object to be manipulated based on the user command.","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"     * @param storage The Storage object used for saving tasks after modifications.","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"     * @throws ChatbotException If the user input represents an unknown command or fails to provide necessary details.","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"     * @throws DateTimeParseException If date/time information for deadline or event tasks is improperly formatted.","lastModifiedDate":"2024-02-08"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"    public static void parse(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"        if (userInput.trim().toLowerCase().startsWith(\"todo\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"            handleTodoCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"deadline\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"            handleDeadlineCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"event\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"            handleEventCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"        } else if (\"list\".equalsIgnoreCase(userInput)) {","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"            taskList.printTasks();","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"mark\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"            handleMarkCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"unmark\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"            handleUnmarkCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"delete\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"            handleDeleteCommand(userInput, taskList, storage);","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"        } else if (userInput.trim().toLowerCase().startsWith(\"find\")) {","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"            String keyword \u003d userInput.substring(\"find\".length()).trim();","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"            taskList.findTask(keyword);","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleTodoCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"Greg-Tan"},"content":"        String taskDetails \u003d userInput.substring(\"todo\".length()).trim();","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"Greg-Tan"},"content":"        if (taskDetails.isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":70,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"Greg-Tan"},"content":"        Task todo \u003d new Todo(taskDetails, false);","lastModifiedDate":"2024-02-07"},{"lineNumber":73,"author":{"gitId":"Greg-Tan"},"content":"        taskList.addTask(todo, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":74,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleDeadlineCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"Greg-Tan"},"content":"        String taskDetails \u003d userInput.substring(\"deadline\".length()).trim();","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"Greg-Tan"},"content":"        String[] details \u003d taskDetails.split(\" /by \", 2);","lastModifiedDate":"2024-02-07"},{"lineNumber":79,"author":{"gitId":"Greg-Tan"},"content":"        if (details.length \u003c 2 || details[0].isEmpty() || details[1].isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"The description of a deadline or its due time cannot be empty.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":81,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":82,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-07"},{"lineNumber":83,"author":{"gitId":"Greg-Tan"},"content":"            Task deadline \u003d new Deadline(details[0], false, details[1]);","lastModifiedDate":"2024-02-07"},{"lineNumber":84,"author":{"gitId":"Greg-Tan"},"content":"            taskList.addTask(deadline, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":85,"author":{"gitId":"Greg-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":86,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"Please use the format dd/MM/yyyy HHmm for dates.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":89,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":90,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleEventCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":91,"author":{"gitId":"Greg-Tan"},"content":"        String taskDetails \u003d userInput.substring(\"event\".length()).trim();","lastModifiedDate":"2024-02-08"},{"lineNumber":92,"author":{"gitId":"Greg-Tan"},"content":"        String[] details \u003d taskDetails.split(\" /from \", 2);","lastModifiedDate":"2024-02-07"},{"lineNumber":93,"author":{"gitId":"Greg-Tan"},"content":"        if (details.length \u003c 2 || details[0].isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":94,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":95,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"Greg-Tan"},"content":"        String[] times \u003d details[1].split(\" /to \", 2);","lastModifiedDate":"2024-02-07"},{"lineNumber":97,"author":{"gitId":"Greg-Tan"},"content":"        if (times.length \u003c 2 || times[0].isEmpty() || times[1].isEmpty()) {","lastModifiedDate":"2024-02-08"},{"lineNumber":98,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"The start or end time of an event cannot be empty.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":99,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-07"},{"lineNumber":101,"author":{"gitId":"Greg-Tan"},"content":"            Task event \u003d new Event(details[0], false, times[0], times[1]);","lastModifiedDate":"2024-02-07"},{"lineNumber":102,"author":{"gitId":"Greg-Tan"},"content":"            taskList.addTask(event, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":103,"author":{"gitId":"Greg-Tan"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":104,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"Please use the format dd/MM/yyyy HHmm for dates.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":105,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":106,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":107,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleMarkCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"Greg-Tan"},"content":"        int taskNumber \u003d extractTaskNumber(userInput, \"mark\");","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"Greg-Tan"},"content":"        taskList.markTask(taskNumber, true, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":111,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleUnmarkCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":114,"author":{"gitId":"Greg-Tan"},"content":"        int taskNumber \u003d extractTaskNumber(userInput, \"unmark\");","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"Greg-Tan"},"content":"        taskList.markTask(taskNumber, false, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":116,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":117,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":118,"author":{"gitId":"Greg-Tan"},"content":"    private static void handleDeleteCommand(String userInput, TaskList taskList, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":119,"author":{"gitId":"Greg-Tan"},"content":"        int taskNumber \u003d extractTaskNumber(userInput, \"delete\");","lastModifiedDate":"2024-02-08"},{"lineNumber":120,"author":{"gitId":"Greg-Tan"},"content":"        taskList.deleteTask(taskNumber, storage);","lastModifiedDate":"2024-02-07"},{"lineNumber":121,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":122,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"Greg-Tan"},"content":"    private static int extractTaskNumber(String userInput, String command) throws ChatbotException {","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"Greg-Tan"},"content":"            return Integer.parseInt(userInput.substring(command.length()).trim());","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"Greg-Tan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-08"},{"lineNumber":127,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"Invalid task number.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":128,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":129,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":130,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":131,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"Greg-Tan":131}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.io.File;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":" * Handles loading and saving tasks to and from a file.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":" * This class encapsulates all file operations, providing methods to load tasks from a file into the application","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":" * and save the current state of tasks back to the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"public class Storage {","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"     * The file path where tasks are stored.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    private String filePath;","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Storage instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     * @param filePath The path to the file used for storing tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"     * This method reads the file line by line, decoding each line into a Task object which is then added","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"     * to a list of tasks that is returned.","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"     * @throws FileNotFoundException If the specified file does not exist.","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2024-02-07"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-07"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"            Task task \u003d Parser.decodeTask(line);","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"                loadedTasks.add(task);","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"        scanner.close();","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"        return loadedTasks;","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"     * Saves the current list of tasks to the storage file.","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"     * Each task is converted to a string format suitable for file storage and then written to the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"     * @param tasks The ArrayList of Task objects to be saved.","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"     * @throws IOException If an I/O error occurs during writing to the file.","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"        new File(\".\" + File.separator + \"data\").mkdirs();","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"        PrintWriter writer \u003d new PrintWriter(new File(filePath));","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"            writer.println(task.toFileFormat());","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"Greg-Tan"},"content":"        writer.close();","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":69,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-07"},{"lineNumber":70,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":70}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":" * Abstract class representing a general task within the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":" * This class provides a common structure for tasks, including a description and a completion status.","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"abstract public class Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"     * The description of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"    protected String description;","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     * The completion status of the task. True if the task is completed, false otherwise.","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-27"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Task instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"     * @param description The textual description of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"     * @param isDone The initial completion status of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-27"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"     * Generates and returns a string representation of the task formatted for file storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"     * The specific format is defined by subclasses.","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string formatted for saving the task to a file.","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"    abstract String toFileFormat();","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"     * Returns the status icon of the task, indicating completion.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string representing the status icon. \"X\" indicates the task is completed, and a space indicates it is not.","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-27"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"     * Marks the task as done by setting the completion status to true.","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"        return this.description; // mark done task with X","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-01-27"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-27"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"     * Marks the task as not done by resetting the completion status to false.","lastModifiedDate":"2024-02-08"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2024-01-27"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-27"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"     * Provides a string representation of the task for display purposes, including the status icon and description.","lastModifiedDate":"2024-02-08"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":67,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":68,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":70,"author":{"gitId":"Greg-Tan"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":71,"author":{"gitId":"Greg-Tan"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2024-01-27"},{"lineNumber":72,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"Greg-Tan":73}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":" * Represents the list of tasks in the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" * It encapsulates operations to manipulate tasks such as adding, deleting, and marking tasks as done or not done.","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"public class TaskList {","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"     * The list of tasks.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new TaskList instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     * Loads tasks into the task list.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"     * @param taskList The list of tasks to be loaded.","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"    public void loadTasks(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"        this.tasks \u003d taskList;","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"     * Adds a new task to the task list and saves the updated list to storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"     * @param newTask The new task to add to the list.","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"     * @param storage The storage handler to save tasks after adding the new task.","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"    public void addTask(Task newTask, Storage storage) {","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"        tasks.add(newTask);","lastModifiedDate":"2024-02-07"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-07"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"        } catch(IOException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"            System.out.print(e);","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"  \" + newTask);","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-07"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"     * Deletes a task from the task list based on its number and saves the updated list to storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"     * @param taskNumber The number of the task to delete, based on its position in the task list.","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"     * @param storage The storage handler to save tasks after deleting the task.","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"     * @throws ChatbotException If the task number is out of bounds (less than 1 or greater than the number of tasks).","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":57,"author":{"gitId":"Greg-Tan"},"content":"    public void deleteTask(int taskNumber, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-07"},{"lineNumber":58,"author":{"gitId":"Greg-Tan"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":59,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"Unknown task number. Please try again\");","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"Greg-Tan"},"content":"        Task removedTask \u003d tasks.remove(taskNumber - 1);","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"Greg-Tan"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"Greg-Tan"},"content":"        } catch(IOException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"Greg-Tan"},"content":"            System.out.print(e);","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"  \" + removedTask.toString());","lastModifiedDate":"2024-02-07"},{"lineNumber":69,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-07"},{"lineNumber":70,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":71,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":72,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"Greg-Tan"},"content":"     * Marks a task as done or not done based on its number and saves the updated list to storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":75,"author":{"gitId":"Greg-Tan"},"content":"     * @param taskNumber The number of the task to mark, based on its position in the task list.","lastModifiedDate":"2024-02-08"},{"lineNumber":76,"author":{"gitId":"Greg-Tan"},"content":"     * @param isDone True to mark the task as done, false to mark it as not done.","lastModifiedDate":"2024-02-08"},{"lineNumber":77,"author":{"gitId":"Greg-Tan"},"content":"     * @param storage The storage handler to save tasks after updating the task\u0027s status.","lastModifiedDate":"2024-02-08"},{"lineNumber":78,"author":{"gitId":"Greg-Tan"},"content":"     * @throws ChatbotException If the task number is out of bounds (less than 1 or greater than the number of tasks).","lastModifiedDate":"2024-02-08"},{"lineNumber":79,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":80,"author":{"gitId":"Greg-Tan"},"content":"    public void markTask(int taskNumber, boolean isDone, Storage storage) throws ChatbotException {","lastModifiedDate":"2024-02-07"},{"lineNumber":81,"author":{"gitId":"Greg-Tan"},"content":"        if (taskNumber \u003c\u003d 0 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2024-02-07"},{"lineNumber":82,"author":{"gitId":"Greg-Tan"},"content":"            throw new ChatbotException(\"Unknown task number. Please try again\");","lastModifiedDate":"2024-02-07"},{"lineNumber":83,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":84,"author":{"gitId":"Greg-Tan"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2024-02-08"},{"lineNumber":85,"author":{"gitId":"Greg-Tan"},"content":"        if (isDone) {","lastModifiedDate":"2024-02-07"},{"lineNumber":86,"author":{"gitId":"Greg-Tan"},"content":"            task.markAsDone();","lastModifiedDate":"2024-02-08"},{"lineNumber":87,"author":{"gitId":"Greg-Tan"},"content":"        } else {","lastModifiedDate":"2024-02-08"},{"lineNumber":88,"author":{"gitId":"Greg-Tan"},"content":"            task.unmarkAsDone();","lastModifiedDate":"2024-02-08"},{"lineNumber":89,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":90,"author":{"gitId":"Greg-Tan"},"content":"        try {","lastModifiedDate":"2024-02-07"},{"lineNumber":91,"author":{"gitId":"Greg-Tan"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2024-02-07"},{"lineNumber":92,"author":{"gitId":"Greg-Tan"},"content":"        } catch(IOException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":93,"author":{"gitId":"Greg-Tan"},"content":"            System.out.print(e);","lastModifiedDate":"2024-02-07"},{"lineNumber":94,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":95,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2024-02-08"},{"lineNumber":96,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":97,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":98,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":99,"author":{"gitId":"Greg-Tan"},"content":"     * Prints all tasks in the task list to the console.","lastModifiedDate":"2024-02-08"},{"lineNumber":100,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":101,"author":{"gitId":"Greg-Tan"},"content":"    public void printTasks() {","lastModifiedDate":"2024-02-07"},{"lineNumber":102,"author":{"gitId":"Greg-Tan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-07"},{"lineNumber":103,"author":{"gitId":"Greg-Tan"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2024-02-07"},{"lineNumber":104,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":105,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":106,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":107,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":108,"author":{"gitId":"Greg-Tan"},"content":"     * Finds and displays tasks that contain the given keyword in their description.","lastModifiedDate":"2024-02-08"},{"lineNumber":109,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":110,"author":{"gitId":"Greg-Tan"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-02-08"},{"lineNumber":111,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":112,"author":{"gitId":"Greg-Tan"},"content":"    public void findTask(String keyword) {","lastModifiedDate":"2024-02-08"},{"lineNumber":113,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-08"},{"lineNumber":114,"author":{"gitId":"Greg-Tan"},"content":"        int matchCount \u003d 0;","lastModifiedDate":"2024-02-08"},{"lineNumber":115,"author":{"gitId":"Greg-Tan"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-08"},{"lineNumber":116,"author":{"gitId":"Greg-Tan"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2024-02-08"},{"lineNumber":117,"author":{"gitId":"Greg-Tan"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-02-08"},{"lineNumber":118,"author":{"gitId":"Greg-Tan"},"content":"                System.out.println((i + 1) + \".\" + task);","lastModifiedDate":"2024-02-08"},{"lineNumber":119,"author":{"gitId":"Greg-Tan"},"content":"                matchCount++;","lastModifiedDate":"2024-02-08"},{"lineNumber":120,"author":{"gitId":"Greg-Tan"},"content":"            }","lastModifiedDate":"2024-02-08"},{"lineNumber":121,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":122,"author":{"gitId":"Greg-Tan"},"content":"        if (matchCount \u003d\u003d 0) {","lastModifiedDate":"2024-02-08"},{"lineNumber":123,"author":{"gitId":"Greg-Tan"},"content":"            System.out.println(\"No tasks match your search.\");","lastModifiedDate":"2024-02-08"},{"lineNumber":124,"author":{"gitId":"Greg-Tan"},"content":"        }","lastModifiedDate":"2024-02-08"},{"lineNumber":125,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":126,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":127,"author":{"gitId":"Greg-Tan"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-02-07"},{"lineNumber":128,"author":{"gitId":"Greg-Tan"},"content":"        return tasks;","lastModifiedDate":"2024-02-07"},{"lineNumber":129,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":130,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-07"},{"lineNumber":131,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":131}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":" * Represents a \"todo\" task in the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":" * A \"todo\" task is a basic task type that consists of a description and a completion status but does not have an associated time.","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Todo instance.","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"     * @param description The description of the todo task. It should provide a brief summary of the task to be accomplished.","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"     * @param isDone The initial completion status of the todo task. True indicates that the task has been completed, while false indicates that it is still pending.","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"     * Generates and returns a string representation of the todo task formatted for file storage.","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"     * The format follows a convention suitable for easy file parsing, consisting of the task type indicator (\u0027T\u0027),","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"     * the completion status, and the task description, separated by vertical bars.","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string formatted for saving the todo task to a file, including its type, completion status, and description.","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"        return \"T | \" +  this.isDone + \" | \" + this.description;","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"     * Provides a string representation of the todo task for display purposes.","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"     * This representation includes the task type indicator (\u0027[T]\u0027), the completion status (marked as \u0027[X]\u0027 for done and \u0027[ ]\u0027 for not done),","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"     * and the task description.","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"     * @return A string representation of the todo task, including its type, completion status, and description, suitable for display.","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"    @Override","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"    public String toString() {","lastModifiedDate":"2024-01-27"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"        // Assuming the super.toString() method correctly formats the completion status and description","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"Greg-Tan":43}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"/**","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":" * Manages user interface interactions for the Duke application.","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":" * This class is responsible for displaying messages to the user and reading user input.","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":" */","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"public class Ui {","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"     * Scanner to read input from the console.","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"    private Scanner scanner;","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"     * Constructs a new Ui instance. Initializes the scanner used to read user input.","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    public Ui() {","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"     * Displays a greeting message to the user at the start of the application.","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"    public void showGreeting() {","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Hello! I\u0027m HughJazz\");","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"     * Displays a goodbye message to the user when exiting the application.","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"    public void showGoodbye() {","lastModifiedDate":"2024-02-07"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-07"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"     * Reads a command from the user.","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":40,"author":{"gitId":"Greg-Tan"},"content":"     * @return The next line of input from the user, trimmed of leading and trailing whitespace.","lastModifiedDate":"2024-02-08"},{"lineNumber":41,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":42,"author":{"gitId":"Greg-Tan"},"content":"    public String readCommand() {","lastModifiedDate":"2024-02-07"},{"lineNumber":43,"author":{"gitId":"Greg-Tan"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2024-02-07"},{"lineNumber":44,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":45,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":46,"author":{"gitId":"Greg-Tan"},"content":"    /**","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"Greg-Tan"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2024-02-08"},{"lineNumber":48,"author":{"gitId":"Greg-Tan"},"content":"     *","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"Greg-Tan"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"Greg-Tan"},"content":"     */","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"Greg-Tan"},"content":"    public void showError(String message) {","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"Greg-Tan"},"content":"        System.out.println(message);","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":55}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"    public void testDeadlineConstruction() {","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", false, \"25/12/2023 1800\");","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(\"Submit report\", deadline.description);","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(false, deadline.isDone);","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(LocalDateTime.of(2023, 12, 25, 18, 0), deadline.by);","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"    public void testToFileFormat() {","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", true, \"25/12/2023 1800\");","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"        String expectedFormat \u003d \"D | true | Submit report | 25/12/2023 1800\";","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(expectedFormat, deadline.toFileFormat());","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"    public void testToString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", false, \"25/12/2023 1800\");","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"        // Adjust the expected string based on your specific toString implementation details","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"Greg-Tan"},"content":"        String expectedString \u003d \"[D][ ] Submit report (by: Dec 25 2023, 6:00PM)\";","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(expectedString, deadline.toString());","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"Greg-Tan"},"content":"    public void testDeadlineDateTimeParseException() {","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"Greg-Tan"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e {","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"Greg-Tan"},"content":"            new Deadline(\"Invalid date\", false, \"invalid-date-time\");","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"Greg-Tan"},"content":"        });","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":39}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"package duke;","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"Greg-Tan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-08"},{"lineNumber":4,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"Greg-Tan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-08"},{"lineNumber":6,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"Greg-Tan"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"Greg-Tan"},"content":"    public void testTodoConstruction() {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Greg-Tan"},"content":"        Todo todo \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(\"Read book\", todo.description);","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(false, todo.isDone);","lastModifiedDate":"2024-02-08"},{"lineNumber":13,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":14,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":15,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":16,"author":{"gitId":"Greg-Tan"},"content":"    public void testToFileFormat() {","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"Greg-Tan"},"content":"        Todo todo \u003d new Todo(\"Read book\", true);","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"Greg-Tan"},"content":"        String expectedFormat \u003d \"T | true | Read book\";","lastModifiedDate":"2024-02-08"},{"lineNumber":19,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(expectedFormat, todo.toFileFormat());","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Greg-Tan"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Greg-Tan"},"content":"    @Test","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Greg-Tan"},"content":"    public void testToString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Greg-Tan"},"content":"        Todo todo \u003d new Todo(\"Read book\", false);","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Greg-Tan"},"content":"        String expectedString \u003d \"[T][ ] Read book\"; // Assuming super.toString() is implemented as expected","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Greg-Tan"},"content":"        assertEquals(expectedString, todo.toString());","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Greg-Tan"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Greg-Tan"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"Greg-Tan":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Greg-Tan"},"content":"todo task 1","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"Greg-Tan":1}}]
