[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"# duke.Duke project template","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kwuunnn":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"kwuunnn":1,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.command.Command;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":" * Represents the Duke Chatbot object.","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for Duke.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @param filePath Filepath to store tasks data.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"            this.tasks \u003d new TaskList(this.storage.readTasksFile());","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"            this.ui.error(e);","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"    private void run() {","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"        this.ui.greet();","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"        while (!isExit) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"                String input \u003d this.ui.readInput();","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"                Command cmd \u003d Parser.parse(input);","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"                cmd.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"                isExit \u003d cmd.isExit();","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"                ui.error(e);","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"            }","lastModifiedDate":"2024-01-25"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"kwuunnn":53,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.command.*;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidCommandException;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":" * Represents a parser for the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"public class Parser {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"    private enum CommandType {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"        BYE, LIST, DELETE, MARK, UNMARK, TODO, EVENT, DEADLINE, FIND","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Parse user\u0027s input based on the command and returns the command.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @param input User input from System.in.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * @return Command in the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidCommandException If the command is unknown and invalid.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If the argument is missing and invalid.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    public static Command parse(String input) throws InvalidCommandException, InvalidArgumentException {","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        String command \u003d parts[0].toUpperCase();","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"            Parser.CommandType cmdType \u003d Parser.CommandType.valueOf(command);","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"            switch (cmdType) {","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"            case BYE:","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"                return new ByeCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"            case LIST:","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"                return new ListCommand();","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"            case DELETE:","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"                return new DeleteCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"            case MARK:","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"                return new MarkCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            case UNMARK:","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"                return new UnmarkCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"            case TODO:","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"                return new AddTodoCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"                return new AddDeadlineCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"            case EVENT:","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"                return new AddEventCommand(parts[1]);","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            case FIND:","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"                return new FindCommand(parts[1]);","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"            default:","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"                throw new InvalidCommandException(command);","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidCommandException(command);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(command);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":63}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.TasksFileException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"import java.io.File;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":" * Represents the storage that reads data from and saves data to the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"public class Storage {","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    private String filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for Storage","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     * @param filePath Filepath to store tasks data.","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    private Task readTask(String taskEntry) {","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"        String[] fields \u003d taskEntry.split(\" \\\\| \", 5);","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"        switch (fields[0]) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"        case \"T\":","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"            task \u003d new Todo(fields[2]);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"        case \"D\":","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime dueDateTime \u003d LocalDateTime.parse(fields[3]);","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"            task \u003d new Deadline(fields[2], dueDateTime);","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        case \"E\":","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime fromDateTime \u003d LocalDateTime.parse(fields[3]);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime toDateTime \u003d LocalDateTime.parse(fields[4]);","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"            task \u003d new Event(fields[2], fromDateTime, toDateTime);","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"            break;","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"        if (fields[1].equals(\"1\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"            task.changeMark(\"MARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"        return task;","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"     * Reads data from the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"kwuunnn"},"content":"     * @return List of tasks read from the Task File.","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"kwuunnn"},"content":"     * @throws TasksFileException If Task File can\u0027t be found.","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"kwuunnn"},"content":"    public ArrayList\u003cTask\u003e readTasksFile() throws TasksFileException {","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"kwuunnn"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"kwuunnn"},"content":"            Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"kwuunnn"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"kwuunnn"},"content":"                Task task \u003d readTask(sc.nextLine());","lastModifiedDate":"2024-02-01"},{"lineNumber":76,"author":{"gitId":"kwuunnn"},"content":"                tasks.add(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"kwuunnn"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":78,"author":{"gitId":"kwuunnn"},"content":"            sc.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"kwuunnn"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"kwuunnn"},"content":"            createTaskFile();","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"kwuunnn"},"content":"        return tasks;","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"kwuunnn"},"content":"    private void createTaskFile() throws TasksFileException {","lastModifiedDate":"2024-02-01"},{"lineNumber":86,"author":{"gitId":"kwuunnn"},"content":"        File tasksFile \u003d new File(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":87,"author":{"gitId":"kwuunnn"},"content":"        File dataDirectory \u003d tasksFile.getParentFile();","lastModifiedDate":"2024-02-01"},{"lineNumber":88,"author":{"gitId":"kwuunnn"},"content":"        dataDirectory.mkdirs();","lastModifiedDate":"2024-02-01"},{"lineNumber":89,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":90,"author":{"gitId":"kwuunnn"},"content":"            tasksFile.createNewFile();","lastModifiedDate":"2024-02-01"},{"lineNumber":91,"author":{"gitId":"kwuunnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"kwuunnn"},"content":"            throw new TasksFileException();","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"kwuunnn"},"content":"     * Saves data to the Task File.","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"kwuunnn"},"content":"     * @param tasks List of tasks to write to the Task File.","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"kwuunnn"},"content":"     * @throws IOException If error is thrown when writing to the Task File.","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"kwuunnn"},"content":"    public void saveTasksFile(TaskList tasks) throws IOException {","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"kwuunnn"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"kwuunnn"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.getLength(); i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"kwuunnn"},"content":"            String formattedTask \u003d tasks.get(i).formatTask();","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"kwuunnn"},"content":"            fw.write(formattedTask + System.lineSeparator());","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"kwuunnn"},"content":"        fw.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":111,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":112,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":112}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import java.util.List;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":" * Represents a list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"public class TaskList {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for TaskList","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        this.taskList.addAll(taskList);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     * @return The length of the tasks list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    public int getLength() {","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"        return this.taskList.size();","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"     * Checks if the list of tasks is empty.","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"     * @return True if the list is empty, else False.","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"        return this.taskList.size() \u003d\u003d 0;","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"     * Adds a task to the list of tasks","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task to be added.","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"    public void add(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"        this.taskList.add(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"     * Removes a task from the list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"     * @param taskId Task ID number of task to be removed.","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"    public void remove(int taskId) {","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"        this.taskList.remove(taskId - 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"kwuunnn"},"content":"     * Retrieves the task with the corresponding task ID from the list o tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"kwuunnn"},"content":"     * @param taskId Task ID number of task to be retrieved.","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"kwuunnn"},"content":"     * @return The Task with the corresponding task ID.","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"kwuunnn"},"content":"    public Task get(int taskId) {","lastModifiedDate":"2024-02-01"},{"lineNumber":73,"author":{"gitId":"kwuunnn"},"content":"        return this.taskList.get(taskId - 1);","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"kwuunnn"},"content":"     * Filters the list of tasks by the keyword.","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"kwuunnn"},"content":"     * @param keyword Keyword that is searched.","lastModifiedDate":"2024-02-02"},{"lineNumber":81,"author":{"gitId":"kwuunnn"},"content":"     * @return Filtered list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":83,"author":{"gitId":"kwuunnn"},"content":"    public TaskList filter(String keyword) {","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"kwuunnn"},"content":"        List\u003cTask\u003e filteredTasks \u003d this.taskList.stream()","lastModifiedDate":"2024-02-02"},{"lineNumber":85,"author":{"gitId":"kwuunnn"},"content":"                .filter(t -\u003e t.getDescription().contains(keyword))","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"kwuunnn"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"kwuunnn"},"content":"        return new TaskList(new ArrayList\u003c\u003e(filteredTasks));","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":90}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":" * Represents the user interface which deals with the interactions with the user.","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"public class Ui {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"    private static final String DIVIDER \u003d \"_______________________________________________________________________\\n\";","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    private Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Reads user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @return User input.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public String readInput() {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        return this.sc.nextLine();","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     * Closes the input Scanner.","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"    public void close() {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"        this.sc.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     * Shows the greeting message to the user.","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"    public void greet() {","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER +","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"                \"Hello! I\u0027m KwunTalk!\\nWhat can I do for you?\\n\" +","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"                DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"     * Shows the goodbye message to the user.","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"    public void goodbye() {","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + \"Bye. Hope to see you again soon!\\n\" + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"     * Shows the lists of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"    public void listTasks(TaskList taskList) {","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"            System.out.println(DIVIDER + \"Your list is currently empty.\\n\" + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"        } else {","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"kwuunnn"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.getLength(); i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"kwuunnn"},"content":"                sb.append(String.format(\"%d. %s\\n\", i, taskList.get(i)));","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"kwuunnn"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"kwuunnn"},"content":"            System.out.println(DIVIDER + \"Here are the tasks in your list:\\n\" + sb + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":74,"author":{"gitId":"kwuunnn"},"content":"     * Shows the message when a task is deleted from the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":75,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":76,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task that was deleted.","lastModifiedDate":"2024-02-02"},{"lineNumber":77,"author":{"gitId":"kwuunnn"},"content":"     * @param taskTotal Total number of tasks in the list after deleting.","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"kwuunnn"},"content":"    public void deleteTask(Task task, int taskTotal) {","lastModifiedDate":"2024-02-01"},{"lineNumber":80,"author":{"gitId":"kwuunnn"},"content":"        String s \u003d String.format(\"OK. I\u0027ve deleted this task:\\n%s\\nNow you have %s tasks in the list.\\n\",","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"kwuunnn"},"content":"                task, taskTotal);","lastModifiedDate":"2024-02-01"},{"lineNumber":82,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + s + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":84,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":86,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"kwuunnn"},"content":"     * Shows the message when a task is marked as done.","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task to be marked.","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"kwuunnn"},"content":"    public void markTask(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":92,"author":{"gitId":"kwuunnn"},"content":"        String s \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\\n\", task);","lastModifiedDate":"2024-02-01"},{"lineNumber":93,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + s + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":94,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":95,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":96,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"kwuunnn"},"content":"     * Shows the message when a task is unmarked.","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task to be unmarked.","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"kwuunnn"},"content":"    public void unmarkTask(Task task) {","lastModifiedDate":"2024-02-01"},{"lineNumber":103,"author":{"gitId":"kwuunnn"},"content":"        String s \u003d String.format(\"OK, I\u0027ve marked this task as not done yet:\\n%s\\n\", task);","lastModifiedDate":"2024-02-01"},{"lineNumber":104,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + s + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":107,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":108,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":109,"author":{"gitId":"kwuunnn"},"content":"     * Shows the message when a task is added to the list.","lastModifiedDate":"2024-02-02"},{"lineNumber":110,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task to be added.","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"kwuunnn"},"content":"     * @param taskTotal Total number of tasks in the list after adding.","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"kwuunnn"},"content":"    public void addTask(Task task, int taskTotal) {","lastModifiedDate":"2024-02-01"},{"lineNumber":115,"author":{"gitId":"kwuunnn"},"content":"        String s \u003d String.format(\"Got it. I\u0027ve added this task:\\n%s\\nNow you have %s tasks in the list.\\n\",","lastModifiedDate":"2024-02-01"},{"lineNumber":116,"author":{"gitId":"kwuunnn"},"content":"                task, taskTotal);","lastModifiedDate":"2024-02-01"},{"lineNumber":117,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + s + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":119,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":120,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"kwuunnn"},"content":"     * Shows the error message when an exception is thrown","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":124,"author":{"gitId":"kwuunnn"},"content":"     * @param e Exception to be handled.","lastModifiedDate":"2024-02-02"},{"lineNumber":125,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":126,"author":{"gitId":"kwuunnn"},"content":"    public void error(DukeException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":127,"author":{"gitId":"kwuunnn"},"content":"        System.out.println(DIVIDER + e + DIVIDER);","lastModifiedDate":"2024-02-01"},{"lineNumber":128,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":129,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":130,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":131,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":132,"author":{"gitId":"kwuunnn"},"content":"     * Shows the message when finding a task.","lastModifiedDate":"2024-02-02"},{"lineNumber":133,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"kwuunnn"},"content":"     * @param filteredList Filtered list of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"kwuunnn"},"content":"    public void findTask(TaskList filteredList) {","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"kwuunnn"},"content":"        if (filteredList.isEmpty()) {","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"kwuunnn"},"content":"            System.out.println(DIVIDER + \"There are no matching tasks in your list.\\n\" + DIVIDER);","lastModifiedDate":"2024-02-02"},{"lineNumber":139,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":140,"author":{"gitId":"kwuunnn"},"content":"        } else {","lastModifiedDate":"2024-02-02"},{"lineNumber":141,"author":{"gitId":"kwuunnn"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2024-02-02"},{"lineNumber":142,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":143,"author":{"gitId":"kwuunnn"},"content":"            for (int i \u003d 1; i \u003c\u003d filteredList.getLength(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"kwuunnn"},"content":"                sb.append(String.format(\"%d. %s\\n\", i, filteredList.get(i)));","lastModifiedDate":"2024-02-02"},{"lineNumber":145,"author":{"gitId":"kwuunnn"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":146,"author":{"gitId":"kwuunnn"},"content":"            System.out.println(DIVIDER + \"Here are the matching tasks in your list:\\n\" + sb + DIVIDER);","lastModifiedDate":"2024-02-02"},{"lineNumber":147,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":148,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":149,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":149}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to add deadline task.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for AddDeadlineCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument of command.","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"    public AddDeadlineCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * Executes the deadline command.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidDateTimeFormatException If DateTime stated has an invalid format.","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage)","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"            throws InvalidArgumentException, InvalidDateTimeFormatException {","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"            String[] splitDate \u003d this.arguments.split(\" /by \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime dueDateTime \u003d LocalDateTime.parse(splitDate[1],","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"            Task newTask \u003d new Deadline(splitDate[0], dueDateTime);","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"            taskList.add(newTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"            ui.addTask(newTask, taskList.getLength());","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"DEADLINE\");","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidDateTimeFormatException(\"DEADLINE\");","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":64}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidDateTimeFormatException;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to add event task.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for AddEventCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument of command.","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"    public AddEventCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * Executes the event command.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidDateTimeFormatException If DateTime stated has an invalid format.","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage)","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"            throws InvalidArgumentException, InvalidDateTimeFormatException {","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"            String[] splitTaskName \u003d this.arguments.split(\" /from \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"            String[] splitFromToDates \u003d splitTaskName[1].split(\" /to \", 2);","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime fromDateTime \u003d LocalDateTime.parse(splitFromToDates[0],","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"            LocalDateTime toDateTime \u003d LocalDateTime.parse(splitFromToDates[1],","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"                    DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"            Task newTask \u003d new Event(splitTaskName[0], fromDateTime, toDateTime);","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"            taskList.add(newTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"            ui.addTask(newTask, taskList.getLength());","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"EVENT\");","lastModifiedDate":"2024-02-01"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidDateTimeFormatException(\"EVENT\");","lastModifiedDate":"2024-02-01"},{"lineNumber":65,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":66,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":67,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":67}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to add todo task.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"public class AddTodoCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for AddTodoCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument of command.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    public AddTodoCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     * Executes the todo command.","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidArgumentException {","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"            Task newTask \u003d new Todo(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"            taskList.add(newTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            ui.addTask(newTask, taskList.getLength());","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"TODO\");","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":48}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.TasksFileException;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to exit the chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Executes the bye command.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     * @throws TasksFileException If tasks file can\u0027t be written to for saving of data into storage.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws TasksFileException {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"            ui.close();","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"            storage.saveTasksFile(taskList);","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"            ui.goodbye();","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"            throw new TasksFileException();","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     * Returns true if it is a bye command.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"     * @return True for Bye commands.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"        return true;","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":46}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":" * Abstract representation of a command.","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"public abstract class Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     * Abstract method of the execution of command.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @throws DukeException If command has error.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     * Returns false if it is not a bye command.","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     * @return False for non-bye commands.","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"        return false;","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":33}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.NoTaskFoundException;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to delete tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument of command.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"    public DeleteCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     * Executes the delete command.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"      * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * @throws NoTaskFoundException If the task to be deleted can\u0027t be found.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage)","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"            throws InvalidArgumentException, NoTaskFoundException {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"            int taskId \u003d Integer.parseInt(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            Task task \u003d taskList.get(taskId);","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"            taskList.remove(taskId);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"            ui.deleteTask(task, taskList.getLength());","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"DELETE\");","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            throw new NoTaskFoundException(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":53}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to find a task by searching for a keyword.","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Arguments for command.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public FindCommand(String arguments) {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     * Executed the find command.","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws InvalidArgumentException {","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"            TaskList filteredList \u003d taskList.filter(this.arguments);","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"            ui.findTask(filteredList);","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"TODO\");","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"kwuunnn":45}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to list out tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     * Executes the list command.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        ui.listTasks(taskList);","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":25}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.NoTaskFoundException;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to mark tasks as done.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for MarkCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument for command","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"    public MarkCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     * Executes the mark command.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * @throws NoTaskFoundException If the task to be marked can\u0027t be found.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage)","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"            throws InvalidArgumentException, NoTaskFoundException {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"            int taskId \u003d Integer.parseInt(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            Task task \u003d taskList.get(taskId);","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"            task.changeMark(\"MARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"            ui.markTask(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"MARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            throw new NoTaskFoundException(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":53}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.command;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.Storage;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import duke.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"import duke.exception.NoTaskFoundException;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":" * Represents the command to mark tasks as not done yet.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    private String arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for UnmarkCommand.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * @param arguments Argument for command.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"    public UnmarkCommand(String arguments) {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     * Executes the unmark command.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"     * @param taskList List of tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * @param ui User Interface of chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * @param storage Storage that stores data.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     * @throws InvalidArgumentException If command has invalid or missing arguments","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * @throws NoTaskFoundException If the task to be unmarked can\u0027t be found.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage)","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"            throws InvalidArgumentException, NoTaskFoundException {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"            int taskId \u003d Integer.parseInt(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"            Task task \u003d taskList.get(taskId);","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"            task.changeMark(\"UNMARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"            ui.unmarkTask(task);","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"            throw new InvalidArgumentException(\"UNMARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"            throw new NoTaskFoundException(this.arguments);","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":53}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Abstract representation of all duke exceptions.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        return \"ERROR!!\";","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kwuunnn":19}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents an exception when an invalid arguments if provided for the command.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private String command;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for InvalidArgumentException.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     * @param command Command that threw the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    public InvalidArgumentException(String command) {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"        this.command \u003d command;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"%s The \u0027%s\u0027 command has invalid argument(s)! ;(\\nPlease fill it in.\\n\",","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"                super.toString(),","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"                command);","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"kwuunnn":31}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents an exception when an invalid or unknown command is used in the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private String command;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for InvalidCommandException.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     * @param command Command that threw the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public InvalidCommandException(String command) {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        this.command \u003d command;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"%s I don\u0027t know what \u0027%s\u0027 means ;(\\nPlease try again.\\n\",","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"                super.toString(),","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"                command);","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kwuunnn":32}},{"path":"src/main/java/duke/exception/InvalidDateTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents an exception when an invalid format of the DateTime is used.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class InvalidDateTimeFormatException extends DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private String command;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for InvalidDateTimeFormatException.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     * @param command Command that threw the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public InvalidDateTimeFormatException(String command) {","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        this.command \u003d command;","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        if (command.equals(\"DEADLINE\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"            return String.format(\"%s The format of the Date/Time is invalid! ;(\\n\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"                            \"Please follow this format: [/by dd/MM/yyyy HHmm]\\n\",","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"                    super.toString());","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"        } else { // \"EVENT\"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"            return String.format(\"%s The format of the Date/Time is invalid! ;(\\n\" +","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"                            \"Please follow this format: [/from dd/MM/yyyy HHmm /to dd/MM/yyyy HHmm]\\n\",","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"                    super.toString());","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"kwuunnn":38}},{"path":"src/main/java/duke/exception/NoTaskFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents an exception when the task ID used does not correspond to any tasks in the database.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class NoTaskFoundException extends DukeException {","lastModifiedDate":"2024-01-25"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private String taskId;","lastModifiedDate":"2024-01-25"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for NoTaskFoundException.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     * @param taskId Task ID that can\u0027t be found.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public NoTaskFoundException(String taskId) {","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        this.taskId \u003d taskId;","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"%s The number \u0027%s\u0027 does not correspond to any task ;(\\nPlease try another number.\\n\",","lastModifiedDate":"2024-01-25"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"                super.toString(),","lastModifiedDate":"2024-01-25"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"                taskId);","lastModifiedDate":"2024-01-25"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kwuunnn":32}},{"path":"src/main/java/duke/exception/TasksFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.exception;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents an exception when trying to access or write with the tasks file.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class TasksFileException extends DukeException {","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the exception.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        return super.toString() + \"An error occurred with the tasks file.\\n\";","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"kwuunnn":19}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"    private LocalDateTime dueDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for a deadline task.","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task description.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     * @param dueDateTime DateTime of deadline.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    public Deadline(String task, LocalDateTime dueDateTime) {","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"        super(task);","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"        this.dueDateTime \u003d dueDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     * Format task to store in the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the formatted task.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"    public String formatTask() {","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"        String status \u003d getStatus() ? \"1\" : \"0\";","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"D | %s | %s | %s\", status, super.formatTask(), dueDateTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the task","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"                dueDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\")));","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"kwuunnn":44}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"    private LocalDateTime fromDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private LocalDateTime toDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for an event task.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task description.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     * @param fromDateTime DateTime which event starts.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"     * @param toDateTime DateTime which event ends.","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    public Event(String task, LocalDateTime fromDateTime, LocalDateTime toDateTime) {","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"        super(task);","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"        this.fromDateTime \u003d fromDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"        this.toDateTime \u003d toDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     * Format task to store in the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the formatted task.","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    public String formatTask() {","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"        String status \u003d getStatus() ? \"1\" : \"0\";","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"E | %s | %s | %s | %s\", status, super.formatTask(), fromDateTime, toDateTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the task","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(),","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"                fromDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\")),","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"                toDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\")));","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"kwuunnn":48}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Abstract representation of a task.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public abstract class Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    private String task;","lastModifiedDate":"2024-01-22"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for Task.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task description.","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"    public Task(String task) {","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     * Mark the task as done or not done yet.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"     * @param command Mark command or Unmark command.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"    public void changeMark(String command) {","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        isDone \u003d command.equals(\"MARK\");","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     * Current status of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     * @return True of task is marked as done.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    public boolean getStatus() {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"        return isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"     * Format task to store in the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the formatted task.","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"    public String formatTask() {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"        return task;","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the task","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-22"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-22"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"        String mark \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-01-22"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"[%s] %s\", mark, task);","lastModifiedDate":"2024-01-22"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":62,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"kwuunnn"},"content":"     * Getter to retrieve the task\u0027s description.","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":67,"author":{"gitId":"kwuunnn"},"content":"     * @return Description of task.","lastModifiedDate":"2024-02-02"},{"lineNumber":68,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"kwuunnn"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"kwuunnn"},"content":"        return this.task;","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":72,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"kwuunnn":72}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":" * Represents a todo task.","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"     * Constructor for a todo task.","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"     * @param task Task description.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"    public Todo(String task) {","lastModifiedDate":"2024-01-23"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"        super(task);","lastModifiedDate":"2024-01-23"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"     * Format task to store in the Tasks File.","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the formatted task.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"    public String formatTask() {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"        String status \u003d getStatus() ? \"1\" : \"0\";","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"        return String.format(\"T | %s | %s\", status, super.formatTask());","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"     * Return the string representation of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"     * @return String representation of the task","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"    public String toString() {","lastModifiedDate":"2024-01-23"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-23"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"kwuunnn":40}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"public class TaskListTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"    public void testGetLength() {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e testArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"        for (int i \u003d 0; i \u003c 10; i++) {","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"            testArrList.add(new Todo(\"test \" + i));","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"        TaskList testTasks \u003d new TaskList(testArrList);","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(10, testTasks.getLength());","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"    public void testIsEmpty() {","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e testArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"        TaskList testTasks \u003d new TaskList(testArrList);","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"kwuunnn"},"content":"        assertTrue(testTasks.isEmpty());","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":32,"author":{"gitId":"kwuunnn"},"content":"    public void testGet() {","lastModifiedDate":"2024-02-01"},{"lineNumber":33,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e testArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":34,"author":{"gitId":"kwuunnn"},"content":"        Task test \u003d new Todo(\"test\");","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"kwuunnn"},"content":"        testArrList.add(test);","lastModifiedDate":"2024-02-01"},{"lineNumber":36,"author":{"gitId":"kwuunnn"},"content":"        TaskList testTasks \u003d new TaskList(testArrList);","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(test, testTasks.get(1));","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"kwuunnn"},"content":"    public void testAdd() {","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e testArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"kwuunnn"},"content":"        TaskList testTasks \u003d new TaskList(testArrList);","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"kwuunnn"},"content":"        Task test \u003d new Todo(\"test\");","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"kwuunnn"},"content":"        testTasks.add(test);","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(test, testTasks.get(1));","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"kwuunnn"},"content":"    public void testRemove() {","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"kwuunnn"},"content":"        ArrayList\u003cTask\u003e testArrList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"kwuunnn"},"content":"        Task test \u003d new Todo(\"test\");","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"kwuunnn"},"content":"        testArrList.add(test);","lastModifiedDate":"2024-02-01"},{"lineNumber":56,"author":{"gitId":"kwuunnn"},"content":"        TaskList testTasks \u003d new TaskList(testArrList);","lastModifiedDate":"2024-02-01"},{"lineNumber":57,"author":{"gitId":"kwuunnn"},"content":"        testTasks.remove(1);","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"kwuunnn"},"content":"        assertTrue(testTasks.isEmpty());","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":61}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"    public void testFormatTask() {","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"        Todo t1 \u003d new Todo(\"test 1\");","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(\"T | 0 | test 1\", t1.formatTask());","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"        Todo t2 \u003d new Todo(\"test 2\");","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"        t2.changeMark(\"MARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(\"T | 1 | test 2\", t2.formatTask());","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"    @Test","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"    public void testToString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"kwuunnn"},"content":"        Todo t1 \u003d new Todo(\"test 1\");","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(\"[T][ ] test 1\", t1.toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"kwuunnn"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"kwuunnn"},"content":"        Todo t2 \u003d new Todo(\"test 2\");","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"kwuunnn"},"content":"        t2.changeMark(\"MARK\");","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"kwuunnn"},"content":"        assertEquals(\"[T][X] test 2\", t2.toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"kwuunnn"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"kwuunnn"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"kwuunnn":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwuunnn"},"content":"todo read book","lastModifiedDate":"2024-01-23"},{"lineNumber":2,"author":{"gitId":"kwuunnn"},"content":"deadline return book /by 06/06/2024 1830","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"kwuunnn"},"content":"event project meeting /from 11/11/2024 1400 /to 11/11/2024 1600","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"kwuunnn"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":5,"author":{"gitId":"kwuunnn"},"content":"mark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":6,"author":{"gitId":"kwuunnn"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":7,"author":{"gitId":"kwuunnn"},"content":"unmark 1","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"kwuunnn"},"content":"list","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"kwuunnn"},"content":"mark 4","lastModifiedDate":"2024-01-25"},{"lineNumber":10,"author":{"gitId":"kwuunnn"},"content":"delete 1","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"kwuunnn"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"kwuunnn"},"content":"delete 3","lastModifiedDate":"2024-01-25"},{"lineNumber":13,"author":{"gitId":"kwuunnn"},"content":"delete","lastModifiedDate":"2024-01-25"},{"lineNumber":14,"author":{"gitId":"kwuunnn"},"content":"mark","lastModifiedDate":"2024-01-25"},{"lineNumber":15,"author":{"gitId":"kwuunnn"},"content":"blah","lastModifiedDate":"2024-01-25"},{"lineNumber":16,"author":{"gitId":"kwuunnn"},"content":"todo","lastModifiedDate":"2024-01-25"},{"lineNumber":17,"author":{"gitId":"kwuunnn"},"content":"deadline","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"kwuunnn"},"content":"event","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"kwuunnn"},"content":"bye","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"kwuunnn":19}}]
