[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"# duke project template","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"checkstyle {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2024-02-06"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":24,"-":41}},{"path":"src/main/java/duke/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":" * Return appropriate Duke response for each user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"public class CommandHandler {","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"     * This method handles the logic for chatting with the user","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"     * @param taskList the task list that stores all the tasks created by the user","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    public static String chat(String input, TaskList taskList) throws RiriException {","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        if (input.matches(\"bye\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"            return \"Press the cross on your console\";","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"list\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"            // Print list","lastModifiedDate":"2024-02-14"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"            return taskList.returnList();","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bmark\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"            // Mark task as done","lastModifiedDate":"2024-02-14"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"            return taskList.mark(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bunmark\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"            // Mark the task as undone","lastModifiedDate":"2024-02-14"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"            return taskList.unmark(Integer.parseInt(words[1]));","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bdeadline\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"            // Add deadline task to task list","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"/by\");","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"            String date \u003d words[1].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Deadline(words[0].substring(8).trim(), date));","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bevent\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"            // Add event task to task list","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"/from+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"            String[] from \u003d words[1].split(\"/to\");","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"            String date1 \u003d from[0].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"            String date2 \u003d from[1].trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Event(words[0].substring(5).trim(), date1, date2));","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\btodo\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"            // Add todo task to task list","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"todo\");","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"            if (words[1].equals(\"\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"                throw new RiriException(\"You are adding nothing to your list\");","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"            return taskList.addTask(new Todo(words[1].trim()));","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bdelete\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"            // Delete tasks in tasks list","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"            String[] words \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"            return taskList.delete(Integer.parseInt(words[1].trim()));","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        } else if (input.toLowerCase().matches(\"\\\\bfind\\\\b.*\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"            // Implement the find function through keyword","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"            String keyword \u003d input.substring(4);","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"            return taskList.searchTasks(keyword);","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        } else if (input.trim().isEmpty()) {","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"            // If by mistake user presses return or space, nothing will happen","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"            return \"\";","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        return \"Unable to process or understand command.\";","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"Rishit02":59}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" * Class that represent tasks with deadlines","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private LocalDate by;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * Creating a deadline with a task to be finished by a certain date.","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * @param task task inputted by user","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * @param by date to be completed by","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, String by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d parseDate(by);","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     * Creating a deadline with a LocalDate object instead of a string date","lastModifiedDate":"2024-02-07"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     * @param task task inputted by user","lastModifiedDate":"2024-02-07"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"     * @param by date to be completed by","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    public Deadline(String task, LocalDate by) {","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"     * Static method to create a Deadline object from a formatted string","lastModifiedDate":"2024-02-07"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to Deadline object","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"     * @return Deadline object","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"    public static Deadline parseDeadlineFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[D][ ] task description (by: deadline)\"","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        int indexOfOpeningBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        int indexOfClosingBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        int indexOfBy \u003d inputString.indexOf(\"(by:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfClosingBracket + 4, indexOfBy).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"        String by \u003d inputString.substring(indexOfBy + 4, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"        Deadline deadline \u003d new Deadline(taskDescription, by);","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Deadline as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"            deadline.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        return deadline;","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + stringifyDate(by) + \")\";","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":55}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"    private void flip() {","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        db.flip();","lastModifiedDate":"2024-02-09"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        return db;","lastModifiedDate":"2024-02-09"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * This class holds the main logic for the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class Duke {","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private Ui ui;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    private Storage storage;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * Constructs the Duke object.","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    public Duke() {","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"//    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"//     * Handles displaying the ui and loading and storing the task list on the local storage.","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"//     */","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"//    private void run() {","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"//        ui.introduce(\"riri\");","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"//        try {","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"//            ui.chat(tasks);","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"//            storage.writeToFile(tasks.toString());","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"//        } catch (RiriException | IOException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"//            System.out.println(e.getMessage());","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"//        }","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"//        ui.exit();","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"//    }","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"//    public static void main(String[] args) {","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"//        new Duke().run();","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"//    }","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"            return CommandHandler.chat(input, tasks);","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        } catch (RiriException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"            return e.getMessage();","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Rishit02":52,"-":1}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-04"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" * This class represents the events in the task list.","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private LocalDate from;","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    private LocalDate to;","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * Creates events. String is parsed into LocalDate format.","lastModifiedDate":"2024-02-07"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    public Event(String task, String from, String to) {","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        this.from \u003d super.parseDate(from);","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        this.to \u003d super.parseDate(to);","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        return \"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2024-02-07"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"                + super.stringifyDate(from) + \" to \" + super.stringifyDate(to) + \")\";","lastModifiedDate":"2024-02-07"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"     * Static method to create an Event object from a formatted string","lastModifiedDate":"2024-02-07"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to an Event object","lastModifiedDate":"2024-02-07"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"     * @return Event object","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    public static Event parseEventFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[E][ ] task description (from: start_time to end_time)\"","lastModifiedDate":"2024-02-07"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        int indexOfFirstBracket \u003d inputString.indexOf(\u0027[\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        int indexOfSecondBracket \u003d inputString.indexOf(\u0027]\u0027);","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        int indexOfFrom \u003d inputString.indexOf(\"(from:\");","lastModifiedDate":"2024-02-04"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        int indexOfTo \u003d inputString.indexOf(\"to\");","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        char status \u003d inputString.charAt(4);","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(indexOfSecondBracket + 4, indexOfFrom).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        String from \u003d inputString.substring(indexOfFrom + 6, indexOfTo).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        String to \u003d inputString.substring(indexOfTo + 2, inputString.length() - 1).trim();","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"        Event event \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Event as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        if (status \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"            event.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        return event;","lastModifiedDate":"2024-02-04"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":50}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"public class Launcher {","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"            stage.show();","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"    private Duke duke;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        duke \u003d d;","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        );","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":51}},{"path":"src/main/java/duke/RiriException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":" * Custom exception for errors in the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"public class RiriException extends Exception {","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public RiriException(String s) {","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        super(s);","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"Rishit02":9}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":" * Class responsible for storing and loading up task lists from local storage, once the chatbot is turned off.","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"public class Storage {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * Reads the contents of the previously saved file that contains the tasks previously added by the user.","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     * @return string of tasks previously added by user","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    public ArrayList\u003cString\u003e load() throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        ArrayList\u003cString\u003e contents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(\"data\");","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        // If data directory does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        // If file does not exist return an empty string","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"            return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"        // Read the contents of the file","lastModifiedDate":"2024-02-05"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"        Scanner sc \u003d new Scanner(filePath); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-05"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"            contents.add(sc.nextLine());","lastModifiedDate":"2024-02-05"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"        return contents;","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"     * Function writes the tasks the user has created to a file.","lastModifiedDate":"2024-02-05"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * @param textToAdd the tasks to add to the to-do list","lastModifiedDate":"2024-02-05"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"    public void writeToFile(String textToAdd) throws IOException {","lastModifiedDate":"2024-02-05"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        String dirName \u003d \"data\";","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        // Create data directory if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"        Path dirPath \u003d Paths.get(dirName);","lastModifiedDate":"2024-02-05"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(dirPath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"            Files.createDirectory(dirPath);","lastModifiedDate":"2024-02-05"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        // Create file if it does not exist","lastModifiedDate":"2024-02-05"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        String fileName \u003d \"riri.txt\";","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        Path filePath \u003d dirPath.resolve(fileName);","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"            Files.createFile(filePath);","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        // Write to proper location","lastModifiedDate":"2024-02-05"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toFile());","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"        fw.close();","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":64}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":" * Parent class that deadline, todo and event inherit from.","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"public class Task {","lastModifiedDate":"2024-01-25"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"    private String task;","lastModifiedDate":"2024-01-25"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     * Constructor for the Task object.","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"     * @param task task inputted by user","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    public Task(String task) {","lastModifiedDate":"2024-01-25"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-01-25"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as done if complete","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    public void markDone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        return;","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"     * Marks the task as undone if incomplete","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    public void markUndone() {","lastModifiedDate":"2024-01-25"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-04"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"     * Function to help check if a task is done","lastModifiedDate":"2024-02-04"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"     * @return true if task is done, false otherwise","lastModifiedDate":"2024-02-04"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2024-02-07"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"        return this.isDone;","lastModifiedDate":"2024-02-04"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-04"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * Function returns the status of the object","lastModifiedDate":"2024-02-04"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     * @return X if task is done, otherwise \" \"","lastModifiedDate":"2024-02-04"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"    public String getStatus() {","lastModifiedDate":"2024-01-25"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"        return (this.getIsDone()) ? \"X\" : \" \";","lastModifiedDate":"2024-02-07"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"     * Function takes a String and parses it into a LocalDate format","lastModifiedDate":"2024-02-07"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"     * @param date String to be parsed as a LocalDate","lastModifiedDate":"2024-02-07"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"    public LocalDate parseDate(String date) {","lastModifiedDate":"2024-02-07"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy HHmm\");","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"M/d/yyyy\");","lastModifiedDate":"2024-02-07"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter3 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-02-07"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter4 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2024-02-07"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter formatter5 \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2024-02-07"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        DateTimeFormatter[] formatters \u003d {formatter1, formatter2, formatter3, formatter4, formatter5};","lastModifiedDate":"2024-02-07"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"        for (DateTimeFormatter dateFormat : formatters) {","lastModifiedDate":"2024-02-07"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"            try {","lastModifiedDate":"2024-02-07"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"                return LocalDate.parse(date, dateFormat);","lastModifiedDate":"2024-02-07"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"                // Parsing failed for this pattern, try the next one","lastModifiedDate":"2024-02-07"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"        throw new IllegalArgumentException(\"Try writing the date in this format: M/d/yyyy HHmm\");","lastModifiedDate":"2024-02-08"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"     * Convert the LocalDate object to a string in a particular format","lastModifiedDate":"2024-02-07"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"    public String stringifyDate(LocalDate date) {","lastModifiedDate":"2024-02-07"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-07"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-01-25"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-01-25"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"        return \"[\" + this.getStatus() + \"] \" + this.task;","lastModifiedDate":"2024-01-25"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":80}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" * Class responsible for handling the logic of the task lists.","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class TaskList {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * Create a task list based on the contents.","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * @param contents tasks to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    public TaskList(ArrayList\u003cString\u003e contents) {","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        for (String content : contents) {","lastModifiedDate":"2024-02-07"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"            addTask(parser(content));","lastModifiedDate":"2024-02-07"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     * Prints the task list to console.","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    public String returnList() {","lastModifiedDate":"2024-02-14"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        String list \u003d \"\";","lastModifiedDate":"2024-02-14"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"            return \"You have no items in your list.\";","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 1; i \u003c taskList.size() + 1; i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"            list +\u003d (i + \". \" + taskList.get(i - 1).toString());","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"        return list;","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":31,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"Rishit02"},"content":"     * Adds task to the task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"Rishit02"},"content":"     * @param task task to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"Rishit02"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"Rishit02"},"content":"        taskList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"Rishit02"},"content":"        return \"Got it. Added: \" + task.toString();","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":39,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"Rishit02"},"content":"     * Loading up tasks from storage to task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"Rishit02"},"content":"     * @param task tasks from storage to be added to task list","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"Rishit02"},"content":"    public void loadTask(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"Rishit02"},"content":"        taskList.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":47,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"Rishit02"},"content":"     * Marking task at index i as done. Displays list at the end of marking.","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"Rishit02"},"content":"    public String mark(int i) {","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i - 1).markDone();","lastModifiedDate":"2024-02-05"},{"lineNumber":52,"author":{"gitId":"Rishit02"},"content":"        return \"Marked i-th task as done\";","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":54,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"Rishit02"},"content":"     * Marking task at index i as undone. Displays list at the end of marking.","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"Rishit02"},"content":"    public String unmark(int i) {","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"Rishit02"},"content":"        this.taskList.get(i - 1).markUndone();","lastModifiedDate":"2024-02-05"},{"lineNumber":59,"author":{"gitId":"Rishit02"},"content":"        return \"Marked i-th task as un done\";","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":61,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"Rishit02"},"content":"     * This function removes a task from the task list.","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"Rishit02"},"content":"     * @param index remove index\u0027th task","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"Rishit02"},"content":"    public String delete(int index) {","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"Rishit02"},"content":"        this.taskList.remove(index - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"Rishit02"},"content":"        return \"Deleted task no. \" + index + \"You have \" + this.len() + \" tasks left\";","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"Rishit02"},"content":"     * Returns the size of the task list.","lastModifiedDate":"2024-02-06"},{"lineNumber":71,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"Rishit02"},"content":"    private int len() {","lastModifiedDate":"2024-02-06"},{"lineNumber":73,"author":{"gitId":"Rishit02"},"content":"        return taskList.size();","lastModifiedDate":"2024-02-05"},{"lineNumber":74,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":75,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"Rishit02"},"content":"     * Parses the string to create a Task object","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"Rishit02"},"content":"     * @param line string that describes a task.","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"Rishit02"},"content":"     * @return a task object","lastModifiedDate":"2024-02-05"},{"lineNumber":80,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-05"},{"lineNumber":81,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-05"},{"lineNumber":82,"author":{"gitId":"Rishit02"},"content":"    private static Task parser(String line) {","lastModifiedDate":"2024-02-05"},{"lineNumber":83,"author":{"gitId":"Rishit02"},"content":"        if (line.startsWith(\"[D]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":84,"author":{"gitId":"Rishit02"},"content":"            return Deadline.parseDeadlineFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":85,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[E]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":86,"author":{"gitId":"Rishit02"},"content":"            return Event.parseEventFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":87,"author":{"gitId":"Rishit02"},"content":"        } else if (line.startsWith(\"[T]\")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":88,"author":{"gitId":"Rishit02"},"content":"            return Todo.parseTodoFromString(line);","lastModifiedDate":"2024-02-05"},{"lineNumber":89,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":90,"author":{"gitId":"Rishit02"},"content":"        return null;","lastModifiedDate":"2024-02-05"},{"lineNumber":91,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":92,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":93,"author":{"gitId":"Rishit02"},"content":"     * Searches for tasks in the task list containing a specific keyword in their description.","lastModifiedDate":"2024-02-07"},{"lineNumber":94,"author":{"gitId":"Rishit02"},"content":"     *","lastModifiedDate":"2024-02-07"},{"lineNumber":95,"author":{"gitId":"Rishit02"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-02-07"},{"lineNumber":96,"author":{"gitId":"Rishit02"},"content":"     * @return A list of tasks that match the search criteria. If no matches are found, an empty list is returned.","lastModifiedDate":"2024-02-07"},{"lineNumber":97,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-07"},{"lineNumber":98,"author":{"gitId":"Rishit02"},"content":"    public String searchTasks(String keyword) {","lastModifiedDate":"2024-02-07"},{"lineNumber":99,"author":{"gitId":"Rishit02"},"content":"        for (Task task : this.taskList) {","lastModifiedDate":"2024-02-07"},{"lineNumber":100,"author":{"gitId":"Rishit02"},"content":"            if (task.toString().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2024-02-07"},{"lineNumber":101,"author":{"gitId":"Rishit02"},"content":"                return task.toString();","lastModifiedDate":"2024-02-07"},{"lineNumber":102,"author":{"gitId":"Rishit02"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":103,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-07"},{"lineNumber":104,"author":{"gitId":"Rishit02"},"content":"        return \"There are no matching tasks found.\";","lastModifiedDate":"2024-02-07"},{"lineNumber":105,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":106,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-05"},{"lineNumber":108,"author":{"gitId":"Rishit02"},"content":"        String s \u003d \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":109,"author":{"gitId":"Rishit02"},"content":"        for (int i \u003d 1; i \u003c taskList.size() + 1; i++) {","lastModifiedDate":"2024-02-05"},{"lineNumber":110,"author":{"gitId":"Rishit02"},"content":"            s +\u003d (taskList.get(i - 1).toString() + \"\\n\");","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"Rishit02"},"content":"        return s;","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":114}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":" * This class models the Todo objects in the task list. This class extends from the parent Task class","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-04"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"    public Todo(String task) {","lastModifiedDate":"2024-02-04"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"        super(task);","lastModifiedDate":"2024-02-04"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * Static method to create a Todo object from a formatted string","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"     * @param inputString string to parse to Todo object","lastModifiedDate":"2024-02-04"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"     * @return Todo object","lastModifiedDate":"2024-02-04"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-04"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    public static Todo parseTodoFromString(String inputString) {","lastModifiedDate":"2024-02-04"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"        // Assuming the inputString is formatted as \"[T][ ] task description\"","lastModifiedDate":"2024-02-04"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        String taskDescription \u003d inputString.substring(7); // Extract the task description","lastModifiedDate":"2024-02-04"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"        Todo todo \u003d new Todo(taskDescription.trim());","lastModifiedDate":"2024-02-04"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-04"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"        // Check the status and mark the Todo as done if needed","lastModifiedDate":"2024-02-04"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"        if (inputString.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2024-02-04"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"            todo.markDone();","lastModifiedDate":"2024-02-04"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        }","lastModifiedDate":"2024-02-04"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"        return todo;","lastModifiedDate":"2024-02-04"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"    @Override","lastModifiedDate":"2024-02-04"},{"lineNumber":27,"author":{"gitId":"Rishit02"},"content":"    public String toString() {","lastModifiedDate":"2024-02-04"},{"lineNumber":28,"author":{"gitId":"Rishit02"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-04"},{"lineNumber":29,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-04"},{"lineNumber":30,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-04"}],"authorContributionMap":{"Rishit02":30}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"/**","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":" *  This class handles the logic and ui for the chatbot.","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":" */","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class Ui {","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"     * Introduces our chatbot and prompts the user to start asking questions","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"     * @param name is the name given to our chatbot","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"     * */","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    public String introduce(String name) {","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        String introText \u003d \"What\u0027s up. I\u0027m \" + name + \"\\n\"","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"                + \"I am here to help you create and manage your task list :)\";","lastModifiedDate":"2024-02-14"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"        return introText;","lastModifiedDate":"2024-02-14"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    /**","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"     * Introduces our chatbot and prompts the user to start asking questions","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"Rishit02"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"Rishit02"},"content":"    public void exit() {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"Rishit02"},"content":"        System.out.println(\"-------------------------\");","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"Rishit02":26}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"Rishit02"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"Rishit02"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"Rishit02"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"Rishit02"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"Rishit02"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"Rishit02":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void deadlineCreationTest1(){","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Deadline d \u003d new Deadline(\"return book\", \"2/12/2019 1800\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        assertEquals(\"[D][ ] return book (by: Feb 12 2019)\", d.toString());","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Rishit02":13}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"package duke;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"Rishit02"},"content":"public class TodoTest {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"Rishit02"},"content":"    @Test","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"Rishit02"},"content":"    public void todoCreationTest1(){","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"Rishit02"},"content":"        Todo task \u003d new Todo(\"nothing\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"Rishit02"},"content":"        assertEquals(task.toString(), \"[T][ ] nothing\");","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"Rishit02"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"Rishit02"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"Rishit02":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Rishit02"},"content":"todo borrow book","lastModifiedDate":"2024-01-25"},{"lineNumber":2,"author":{"gitId":"Rishit02"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-01-25"},{"lineNumber":3,"author":{"gitId":"Rishit02"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-01-25"},{"lineNumber":4,"author":{"gitId":"Rishit02"},"content":"list","lastModifiedDate":"2024-01-25"},{"lineNumber":5,"author":{"gitId":"Rishit02"},"content":"mark 1","lastModifiedDate":"2024-01-25"},{"lineNumber":6,"author":{"gitId":"Rishit02"},"content":"unmark 1","lastModifiedDate":"2024-01-25"}],"authorContributionMap":{"Rishit02":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Rishit02"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Rishit02":1,"-":20}}]
