[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"1. Open Intellij (if you are not in the welcome screen, click `duke.util.FileManager` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Joelwang22":1,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    implementation \u0027org.testng:testng:7.1.0\u0027","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Joelwang22":1,"-":42}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskException;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.util.FileManager;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import duke.util.Parser;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import duke.util.Ui;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"import java.util.*;","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"    private String filePath \u003d \"./data/saveData.txt\";","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    private FileManager storage;  // This is the storage class just named duke.util.FileManager","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    private Ui ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"    private Parser parser;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"        this.storage \u003d new FileManager(filePath);","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"            tasks \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-25"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        this.parser \u003d new Parser(this.tasks, this.ui);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-25"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-25"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    public void start(){","lastModifiedDate":"2024-01-25"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"        ui.intro();","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-24"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"        while(!isDone) {","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"            String current \u003d input.nextLine();","lastModifiedDate":"2024-01-25"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"            try {","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"                parser.read(current);","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"            } catch (TaskException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"                System.out.println(e);","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"            isDone \u003d parser.isExit();","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"        storage.saveFile(tasks.giveList());","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    public static void main(String[] args){","lastModifiedDate":"2024-01-24"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"        new Duke(\"./data/saveData.txt\").start();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"Joelwang22":43,"-":3}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.util.TimeManager;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * Represents a deadline task in Duke chat-bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" * A deadline task has an end time in addition to the properties inherited from Task.","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    private String end;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a new Deadline task with the specified name and end time.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     * The end time is parsed and formatted by the TimeManager.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"     * @param name The name of the deadline task.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     * @param end The end time for the deadline, in a format understood by TimeManager.parseTime.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"    public Deadline(String name, String end) {","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"        super(name);","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"        this.end \u003d TimeManager.parseTime(end);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the type identifier for a deadline task.","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the type of the task, specifically \"[D]\" for deadlines.","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"    public String getType(){","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"        return \"[D]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the formatted time for the deadline task.","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the end time, formatted as \"(by: [end time])\".","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"    public String getTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"        return \"(by: \" + end + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the raw end time for the deadline task.","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"     * @return The end time as a string, in the format provided to the constructor.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"    public String getRawTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"        return this.end;","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":54}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.util.TimeManager;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * Represents an event task in Duke chat-bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" * An event task has both a start and an end time in addition to the properties inherited from Task.","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    private String start;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    private String end;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a new Event task with the specified name, start time, and end time.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     * The start and end times are parsed and formatted by the TimeManager.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"     * @param name The name of the event task.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     * @param start The start time for the event, in a format understood by TimeManager.parseTime.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"     * @param end The end time for the event, in a format understood by TimeManager.parseTime.","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"    public Event(String name, String start, String end) {","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"        super(name);","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"        this.start \u003d TimeManager.parseTime(start);","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        this.end \u003d TimeManager.parseTime(end);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the type identifier for an event task.","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the type of the task, specifically \"[E]\" for events.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"    public String getType(){","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"        return \"[E]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the formatted time for the event task.","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the start and end times, formatted as \"(from: [start time] to: [end time])\".","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    public String getTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"        return \"(from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the raw start and end times for the event task.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"     * @return The start and end times as a string, in the format provided to the constructor, separated by \" to: \".","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"    public String getRawTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"        return this.start + \" to: \" + this.end;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":56}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":" * Represents a tasks in available in Duke chat-bot.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":" * A task can be of three types: Todo (T), Deadline (D), or Event (E).","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * Each task has a name and a completion status.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"public class Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"    private boolean done \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    private String name;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    private String type; /* T, D or E*/","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    private String date;","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a new Task with the specified name.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"     * @param name The name of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"    public Task(String name){","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"     * @return true if the task is done, false otherwise.","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    public boolean isDone(){","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"        return this.done;","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the name of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"     * @return The task\u0027s name.","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"    public String getName(){","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        return this.name;","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    public void makeDone(){","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"        this.done \u003d true;","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"    public void makeUndone(){","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"        this.done \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the type of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the task type. This method is intended to be overridden by subclasses.","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"    public String getType(){","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"        return \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"     * Sets the completion status of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"     * @param state The new completion status of the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"    public void setDone(Boolean state) {","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"        this.done \u003d state;","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the formatted time associated with the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the formatted time. Intended for overriding by subclasses.","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"    public String getTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"        return \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the raw time data associated with the task.","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the raw time data. Intended for overriding by subclasses.","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"Joelwang22"},"content":"    public String getRawTime(){","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"Joelwang22"},"content":"        return \"\";","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":91,"author":{"gitId":"Joelwang22"},"content":"     * Generates a status string for the task, including its type, completion status, name, and time.","lastModifiedDate":"2024-02-03"},{"lineNumber":92,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"Joelwang22"},"content":"     * @return A formatted string representing the task\u0027s status.","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":95,"author":{"gitId":"Joelwang22"},"content":"    public String getStatus(){","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"Joelwang22"},"content":"        if (this.isDone()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"Joelwang22"},"content":"            return this.getType() + \"[X] \" + this.getName() + \" \" + this.getTime();","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"Joelwang22"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"Joelwang22"},"content":"            return this.getType() + \"[ ] \" + this.getName() + \" \" + this.getTime();","lastModifiedDate":"2024-01-31"},{"lineNumber":100,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":101,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":102,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"},{"lineNumber":103,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":103}},{"path":"src/main/java/duke/task/TaskConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":" * Provides utilities for converting between task objects and their string representations.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":" * This class supports saving tasks to and loading tasks from a string-based format, facilitating","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":" * persistence in text files or similar storage mechanisms.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"public class TaskConverter {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     * Converts a list of Task objects into a list of string representations suitable for saving.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"     * @param taskList An ArrayList of Task objects to be converted.","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     * @return A List of strings, each representing a Task\u0027s data for persistence.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"    public static List\u003cString\u003e saveConvert(ArrayList\u003cTask\u003e taskList){","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"        List\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"            String saveLine \u003d task.getType() + \"%\" + task.isDone() + \"%\" + task.getName() + \"%\" + task.getRawTime();","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"            stringList.add(saveLine);","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        return stringList;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"     * Converts a list of strings into an ArrayList of Task objects.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"     * Each string is expected to follow the format produced by saveConvert, with task properties separated by \"%\".","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"     * @param strings A List of strings, each representing a task\u0027s persisted data.","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"     * @return An ArrayList of Task objects reconstructed from the input strings.","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"    public static ArrayList\u003cTask\u003e loadConvert(List\u003cString\u003e strings) {","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"            for (String str : strings) {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"                String[] split \u003d str.split(\"%\");","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"                if (split[0].equals(\"[T]\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"                    Task currTask \u003d new Todo(split[2]);","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"                    currTask.setDone(Boolean.parseBoolean(split[1]));","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"                    tasks.add(currTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"                } else if (split[0].equals(\"[D]\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"                    Task currTask \u003d new Deadline(split[2], split[3]);","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"                    currTask.setDone(Boolean.parseBoolean(split[1]));","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"                    tasks.add(currTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"                } else if (split[0].equals(\"[E]\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"                    Task currTask \u003d makeEvent(split[2], split[3]);","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"                    currTask.setDone(Boolean.parseBoolean(split[1]));","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"                    tasks.add(currTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-03"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"            System.out.println(\"Save File Corrupted :(\");","lastModifiedDate":"2024-02-03"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"        return tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"     * Helper method to create an Event object from a string containing its name and timeline.","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"     * @param name The name of the event.","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"     * @param timeline The timeline of the event, expected to contain start and end times.","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"     * @return An Event object constructed from the provided name and timeline.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"    public static Event makeEvent(String name, String timeline){","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"        String[] timeSplit \u003d timeline.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"        int toIndex \u003d finder(\"to:\", timeSplit);","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"        String startTime \u003d String.join(\" \", Arrays.copyOfRange(timeSplit, 1, toIndex));","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"        String endTime \u003d String.join(\" \", Arrays.copyOfRange(timeSplit, toIndex + 1, timeSplit.length));","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"        Event current \u003d new Event(name, startTime, endTime);","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"        return current;","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"     * Searches for a specific string within an array of strings and returns its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"     * @param checker The string to find within the array.","lastModifiedDate":"2024-02-03"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"     * @param list The array of strings to search through.","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"     * @return The index of the string if found, or -1 if not found.","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"    public static int finder(String checker, String[] list) {","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"Joelwang22"},"content":"        for (int i \u003d 0; i \u003c list.length; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"Joelwang22"},"content":"            if (list[i].equals(checker)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"Joelwang22"},"content":"                return i;","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"Joelwang22"},"content":"        return -1;","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":92}},{"path":"src/main/java/duke/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":" * Represents exceptions specific to task operations within a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":" * This class extends the standard Java {@code Exception} class, allowing for the","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * creation of exception instances that carry messages specific to task-related errors.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"public class TaskException extends Exception {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    public TaskException(String message) {","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"        super(message);","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":13}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * Encapsulates a list of tasks, providing functionality to manage tasks such as adding, deleting, and retrieving tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"public class TaskList {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a new TaskList with a predefined list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"     * @param list An ArrayList of {@code Task} objects to initialize the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"    public TaskList(ArrayList\u003cTask\u003e list){","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"        this.taskList \u003d list;","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"    public TaskList(){","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"     * @param current The {@code Task} to be added.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"    public void addTask(Task current) {","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"        taskList.add(current);","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"     * Deletes a task from the task list based on its position in the list.","lastModifiedDate":"2024-02-03"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"     * Note: The index is 1-based for user convenience.","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"     * @param index The 1-based index of the {@code Task} to be removed.","lastModifiedDate":"2024-02-03"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"    public void deleteTask(int index){","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"        taskList.remove(index - 1);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves a task from the task list based on its position.","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"     * Note: The index is 0-based, following standard list indexing.","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"     * @param index The 0-based index of the {@code Task} to be retrieved.","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"     * @return The {@code Task} at the specified position.","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"    public Task getTask(int index){","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"        return taskList.get(index);","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"     * Provides a numbered list of the tasks, with each task represented as a string.","lastModifiedDate":"2024-02-03"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"     * @return An ArrayList of strings, each representing a numbered task.","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"    public ArrayList\u003cString\u003e showList(){","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"        for (Task i : taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"            result.add(Integer.toString(count) + \".\" + i.getStatus());","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"            count++;","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"        return result;","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"     * Returns the current list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"     * @return An ArrayList of {@code Task} objects representing the current tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"    public ArrayList\u003cTask\u003e giveList(){","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"        return this.taskList;","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"     * @return The size of the task list.","lastModifiedDate":"2024-02-03"},{"lineNumber":85,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":86,"author":{"gitId":"Joelwang22"},"content":"    public int size(){","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"Joelwang22"},"content":"        return taskList.size();","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"Joelwang22"},"content":"    public ArrayList\u003cString\u003e find(String key) {","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"Joelwang22"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"Joelwang22"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"Joelwang22"},"content":"        for (Task i : taskList) {","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"Joelwang22"},"content":"            if (i.getName().contains(key)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"Joelwang22"},"content":"                result.add(Integer.toString(count) + \".\" + i.getStatus());","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"Joelwang22"},"content":"                count++;","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":98,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":99,"author":{"gitId":"Joelwang22"},"content":"        return result;","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":102}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.task;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":" * Represents a Todo task in a task management application.","lastModifiedDate":"2024-02-03"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":" * A Todo task is a basic task type that includes only a task name and completion status,","lastModifiedDate":"2024-02-03"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":" * without an associated time or deadline.","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a new Todo task with the specified name.","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"     * @param name The name of the Todo task. This name is passed to the superclass (Task) constructor.","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"    public Todo(String name) {","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"        super(name);","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"     * Retrieves the type identifier for a Todo task.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"     * @return A string representing the type of the task, specifically \"[T]\" for Todo tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"    @Override","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    public String getType() {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        return \"[T]\";","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":29}},{"path":"src/main/java/duke/test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.test;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskException;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import duke.util.Parser;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"import duke.util.Ui;","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"import static org.testng.AssertJUnit.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"public class ParserTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    void Event_wrongTimeFormat_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"            Parser parser \u003d new Parser(new TaskList(), new Ui());","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"            parser.identify(\"event read book /by today\");","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"        } catch (TaskException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"            assertEquals(\"Please specify the event timeframe.\", e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"    void Event_noEndTime_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"            Parser parser \u003d new Parser(new TaskList(), new Ui());","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"            parser.identify(\"event read book /from today\");","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        } catch (TaskException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"            assertEquals(\"Please specify when the event ends.\", e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"    void Parser_invalidInput_exceptionThrown() {","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"            Parser parser \u003d new Parser(new TaskList(), new Ui());","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"            parser.identify(\"hello\");","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"        } catch (TaskException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"            assertEquals(\"Apologies, I don\u0027t understand you. Please try again\", e.getMessage());","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"Joelwang22":40}},{"path":"src/main/java/duke/test/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.test;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"import duke.task.Deadline;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.task.Event;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import duke.task.Todo;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import org.testng.annotations.Test;","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"import static org.testng.AssertJUnit.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"import static org.testng.AssertJUnit.assertTrue;","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"public class TaskTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"    void Todo_creationTest_success() {","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"        Todo todo \u003d new Todo(\"Read book\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"        assertEquals(\"Read book\", todo.getName());","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"    void Todo_markDone_success() {","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        Todo todo \u003d new Todo(\"Read book\");","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"        todo.makeDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"    void Deadline_creationTest_success() {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"        Deadline deadline \u003d new Deadline(\"Read book\", \"31/12/2021 1800\");","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"        assertEquals(\"Read book\", deadline.getName());","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"        LocalDateTime test \u003d LocalDateTime.parse(\"31/12/2021 1800\",","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"        assertEquals(test.format(DateTimeFormatter.ofPattern(\"dd MMMM yyyy, h:mm a\")), deadline.getRawTime());","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"        deadline.makeDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        assertTrue(deadline.isDone());","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"    void Deadline_markDone_success() {","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"        Deadline deadline \u003d new Deadline(\"Read book\", \"tomorrow\");","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"        deadline.makeDone();","lastModifiedDate":"2024-02-02"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"        assertTrue(deadline.isDone());","lastModifiedDate":"2024-02-02"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"Joelwang22":49}},{"path":"src/main/java/duke/util/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.util;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskConverter;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"import java.io.File;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":" * Manages the loading and saving of tasks to a file.","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":" * This class encapsulates file operations, allowing tasks to be persisted to disk and loaded back into the application.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"public class FileManager {","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"    private String path;","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a FileManager with a specified file path for saving and loading tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"     * @param path The file path where tasks are saved and loaded from.","lastModifiedDate":"2024-02-03"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"    public FileManager(String path) {","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        this.path \u003d path;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"     * Loads tasks from the file specified by the path.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"     * If the file does not exist, it creates a new file. Each line in the file is expected to represent a single task.","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"     * @return An ArrayList of Task objects loaded from the file.","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"    public ArrayList\u003cTask\u003e loadFile() {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        File file \u003d new File(this.path);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"        if (!file.exists()){","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"                file.createNewFile();","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"                System.out.println(\"New task file created at: \" + this.path);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"                System.out.println(\"Failed to create save file\");","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"                Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"                    String currLine \u003d scanner.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"                    tasks.add(currLine);","lastModifiedDate":"2024-01-31"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"                scanner.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"                System.out.println(\"Error loading save file\");","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"        return TaskConverter.loadConvert(tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"     * Saves the current list of tasks to the file specified by the path.","lastModifiedDate":"2024-02-03"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"     * Each task is converted to a string representation and written as a new line in the file.","lastModifiedDate":"2024-02-03"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"     * @param taskList The ArrayList of Task objects to be saved.","lastModifiedDate":"2024-02-03"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"    public void saveFile(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"        List\u003cString\u003e tasks \u003d TaskConverter.saveConvert(taskList);","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"        try {","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"            File file \u003d new File(this.path);","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"            FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"            for (String task : tasks) {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"                writer.write(task + System.lineSeparator());","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"            writer.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"            System.out.println(\"Something went wrong :(\");","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":84}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.util;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.task.*;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":" * Parses user input and executes commands based on the input.","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":" * This class handles the interpretation of user commands, creating tasks,","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":" * and managing user interactions through the Ui class.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"public class Parser {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"    private boolean isExit;","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"    private TaskList tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"    private Ui ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     * Constructs a Parser with references to the current task list and the UI for user interaction.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"     * @param tasks The current list of tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"     * @param ui    The UI instance for displaying messages to the user.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"    public Parser(TaskList tasks, Ui ui){","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        this.isExit \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"     * Searches for a specific string within an array of strings and returns its index.","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"     * @param checker The string to find within the array.","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"     * @param list    The array of strings to search through.","lastModifiedDate":"2024-02-03"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"     * @return The index of the string if found, or -1 if not found.","lastModifiedDate":"2024-02-03"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"    public int finder(String checker, String[] list) {","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        for (int i \u003d 0; i \u003c list.length; i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"            if (list[i].equals(checker)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"                return i;","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"        return -1;","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"     * Identifies the type of task based on the user\u0027s request and creates the appropriate task object.","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"     * Throws TaskException if the input format is incorrect or missing necessary information.","lastModifiedDate":"2024-02-03"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"     * @param request The user\u0027s command input.","lastModifiedDate":"2024-02-03"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"     * @return A Task object corresponding to the user\u0027s request.","lastModifiedDate":"2024-02-03"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"     * @throws TaskException If the request format is invalid or lacks necessary information.","lastModifiedDate":"2024-02-03"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"    public Task identify(String request) throws TaskException {","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"        if (request.startsWith(\"todo\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"            String[] reqList \u003d request.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"            if (reqList.length \u003c 2) {","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"What do you want to do? Description of todo cannot be empty.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"            String desc \u003d String.join(\" \", Arrays.copyOfRange(reqList, 1, reqList.length));","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"            Todo current \u003d new Todo(desc);","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"            return current;","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"        } else if (request.startsWith(\"deadline\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"            String[] reqList \u003d request.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"            if (Arrays.asList(reqList).contains(\"/by\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"                int byIndex \u003d finder(\"/by\", reqList);","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"                String desc \u003d String.join(\" \", Arrays.copyOfRange(reqList, 1, byIndex));","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"                String time \u003d String.join(\" \", Arrays.copyOfRange(reqList, byIndex + 1, reqList.length));","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"                Deadline current \u003d new Deadline(desc, time);","lastModifiedDate":"2024-01-31"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"                return current;","lastModifiedDate":"2024-01-31"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"            } else{","lastModifiedDate":"2024-01-31"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"Please specify when is the deadline.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"        } else if (request.startsWith(\"event\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"            String[] reqList \u003d request.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"            if (Arrays.asList(reqList).contains(\"/from\") \u0026\u0026 Arrays.asList(reqList).contains(\"/to\")){","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"                int fromIndex \u003d finder(\"/from\", reqList);","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"                int toIndex \u003d finder(\"/to\", reqList);","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"                String desc \u003d String.join(\" \", Arrays.copyOfRange(reqList, 1, fromIndex));","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"                String start \u003d String.join(\" \", Arrays.copyOfRange(reqList, fromIndex + 1, toIndex));","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"                String end \u003d String.join(\" \", Arrays.copyOfRange(reqList, toIndex + 1, reqList.length));","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"                Event current \u003d new Event(desc, start, end);","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"Joelwang22"},"content":"                return current;","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"Joelwang22"},"content":"            } else if (Arrays.asList(reqList).contains(\"/from\")){","lastModifiedDate":"2024-01-31"},{"lineNumber":87,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"Please specify when the event ends.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":88,"author":{"gitId":"Joelwang22"},"content":"            } else if (Arrays.asList(reqList).contains(\"/to\")){","lastModifiedDate":"2024-01-31"},{"lineNumber":89,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"Please specify when the event starts.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":90,"author":{"gitId":"Joelwang22"},"content":"            } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":91,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"Please specify the event timeframe.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":92,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":93,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":94,"author":{"gitId":"Joelwang22"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":95,"author":{"gitId":"Joelwang22"},"content":"            throw new TaskException(\"Apologies, I don\u0027t understand you. Please try again\");","lastModifiedDate":"2024-01-31"},{"lineNumber":96,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":97,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":98,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":99,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":100,"author":{"gitId":"Joelwang22"},"content":"     * Processes the user\u0027s input command and performs actions such as adding, deleting, or listing tasks.","lastModifiedDate":"2024-02-03"},{"lineNumber":101,"author":{"gitId":"Joelwang22"},"content":"     * Uses the Ui class to interact with the user based on the processed commands.","lastModifiedDate":"2024-02-03"},{"lineNumber":102,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":103,"author":{"gitId":"Joelwang22"},"content":"     * @param current The user\u0027s input command.","lastModifiedDate":"2024-02-03"},{"lineNumber":104,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":105,"author":{"gitId":"Joelwang22"},"content":"    public void read(String current) throws TaskException {","lastModifiedDate":"2024-02-02"},{"lineNumber":106,"author":{"gitId":"Joelwang22"},"content":"        if(current.equals(\"bye\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":107,"author":{"gitId":"Joelwang22"},"content":"            ui.bye();","lastModifiedDate":"2024-01-31"},{"lineNumber":108,"author":{"gitId":"Joelwang22"},"content":"            this.isExit \u003d true;","lastModifiedDate":"2024-01-31"},{"lineNumber":109,"author":{"gitId":"Joelwang22"},"content":"        } else if(current.equals(\"list\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":110,"author":{"gitId":"Joelwang22"},"content":"            this.ui.showList(tasks.showList());","lastModifiedDate":"2024-01-31"},{"lineNumber":111,"author":{"gitId":"Joelwang22"},"content":"        } else if (current.startsWith(\"mark\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":112,"author":{"gitId":"Joelwang22"},"content":"            String[] marking \u003d current.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":113,"author":{"gitId":"Joelwang22"},"content":"            int position \u003d Integer.parseInt(marking[1]) - 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":114,"author":{"gitId":"Joelwang22"},"content":"            Task curr \u003d tasks.getTask(position);","lastModifiedDate":"2024-01-31"},{"lineNumber":115,"author":{"gitId":"Joelwang22"},"content":"            curr.makeDone();","lastModifiedDate":"2024-01-31"},{"lineNumber":116,"author":{"gitId":"Joelwang22"},"content":"            ui.markTask(curr);","lastModifiedDate":"2024-01-31"},{"lineNumber":117,"author":{"gitId":"Joelwang22"},"content":"        } else if (current.startsWith(\"unmark\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":118,"author":{"gitId":"Joelwang22"},"content":"            String[] marking \u003d current.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":119,"author":{"gitId":"Joelwang22"},"content":"            int position \u003d Integer.parseInt(marking[1]) - 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":120,"author":{"gitId":"Joelwang22"},"content":"            Task curr \u003d tasks.getTask(position);","lastModifiedDate":"2024-01-31"},{"lineNumber":121,"author":{"gitId":"Joelwang22"},"content":"            curr.makeUndone();","lastModifiedDate":"2024-01-31"},{"lineNumber":122,"author":{"gitId":"Joelwang22"},"content":"            ui.unmarkTask(curr);","lastModifiedDate":"2024-01-31"},{"lineNumber":123,"author":{"gitId":"Joelwang22"},"content":"        } else if (current.startsWith(\"delete\")){","lastModifiedDate":"2024-01-31"},{"lineNumber":124,"author":{"gitId":"Joelwang22"},"content":"            String[] marking \u003d current.split(\" \");","lastModifiedDate":"2024-01-31"},{"lineNumber":125,"author":{"gitId":"Joelwang22"},"content":"            int position \u003d Integer.parseInt(marking[1]) - 1;","lastModifiedDate":"2024-01-31"},{"lineNumber":126,"author":{"gitId":"Joelwang22"},"content":"            ui.delete(position, tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":127,"author":{"gitId":"Joelwang22"},"content":"        } else if (current.startsWith(\"find\")) {","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"Joelwang22"},"content":"            String[] reqList \u003d current.split(\" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":129,"author":{"gitId":"Joelwang22"},"content":"            if (reqList.length \u003c 2) {","lastModifiedDate":"2024-02-02"},{"lineNumber":130,"author":{"gitId":"Joelwang22"},"content":"                throw new TaskException(\"What do you want me to find? Please specify\");","lastModifiedDate":"2024-02-02"},{"lineNumber":131,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":132,"author":{"gitId":"Joelwang22"},"content":"            String keyword \u003d String.join(\" \", Arrays.copyOfRange(reqList, 1, reqList.length));","lastModifiedDate":"2024-02-02"},{"lineNumber":133,"author":{"gitId":"Joelwang22"},"content":"            ui.showFilteredList(keyword, tasks);","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"Joelwang22"},"content":"        } else {","lastModifiedDate":"2024-01-31"},{"lineNumber":136,"author":{"gitId":"Joelwang22"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":137,"author":{"gitId":"Joelwang22"},"content":"                Task newTask \u003d identify(current);","lastModifiedDate":"2024-01-31"},{"lineNumber":138,"author":{"gitId":"Joelwang22"},"content":"                tasks.addTask(newTask);","lastModifiedDate":"2024-01-31"},{"lineNumber":139,"author":{"gitId":"Joelwang22"},"content":"                ui.addTask(newTask, tasks);","lastModifiedDate":"2024-01-31"},{"lineNumber":140,"author":{"gitId":"Joelwang22"},"content":"            } catch (TaskException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":141,"author":{"gitId":"Joelwang22"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2024-01-31"},{"lineNumber":142,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":143,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":144,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":145,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":146,"author":{"gitId":"Joelwang22"},"content":"    public boolean isExit(){","lastModifiedDate":"2024-01-31"},{"lineNumber":147,"author":{"gitId":"Joelwang22"},"content":"        return this.isExit;","lastModifiedDate":"2024-01-31"},{"lineNumber":148,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":149,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":149}},{"path":"src/main/java/duke/util/TimeManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.util;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"import java.util.List;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"/**","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":" * Manages the parsing and formatting of date and time strings.","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":" * This class supports multiple input formats and converts them into a standard output format.","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":" */","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"public class TimeManager {","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"    /**","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"     * Parses a date and time string from various known formats into a standardized format.","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"     * If the input does not match any known format, it returns the input as is.","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"     *","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"     * @param input The date and time string to be parsed.","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"     * @return A date and time string formatted in the standard output format","lastModifiedDate":"2024-02-03"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"     *         \"dd MMMM yyyy, h:mm a\" if the input matches any of the known formats;","lastModifiedDate":"2024-02-03"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"     *         otherwise, returns the original input string.","lastModifiedDate":"2024-02-03"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"     */","lastModifiedDate":"2024-02-03"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"    public static String parseTime(String input) {","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"        List\u003cDateTimeFormatter\u003e formatters \u003d Arrays.asList(","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"),","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"),","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"M/d/yyyy hh:mm a\"),","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"                DateTimeFormatter.ofPattern(\"dd MMMM yyyy, h:mm a\")","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"        );","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMMM yyyy, h:mm a\");","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"        String timeResult \u003d input;","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"        for (DateTimeFormatter formatter : formatters) {","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"            try {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"                LocalDateTime currTime \u003d LocalDateTime.parse(input, formatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"                timeResult \u003d currTime.format(outputFormatter);","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"                timeResult \u003d input;","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"        return timeResult;","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":47}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"package duke.util;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"import duke.task.Task;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Joelwang22"},"content":"import duke.task.TaskList;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"Joelwang22"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"Joelwang22"},"content":"public class Ui {","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Joelwang22"},"content":"    private final String LINE \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"Joelwang22"},"content":"    private final String INDENT \u003d \"     \";","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"Joelwang22"},"content":"    private final String NAME \u003d \"Alfred\";","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"Joelwang22"},"content":"    public Ui(){","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"Joelwang22"},"content":"    public void separate(){","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(LINE);","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Joelwang22"},"content":"    public void spacing() {","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(\"\");","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Joelwang22"},"content":"    public void intro() {","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Hello! I\u0027m \" + NAME + \"\\n     What can I do for you?\");","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Joelwang22"},"content":"    public void leave() {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Joelwang22"},"content":"    public void showList(ArrayList\u003cString\u003e list){","lastModifiedDate":"2024-01-31"},{"lineNumber":35,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":37,"author":{"gitId":"Joelwang22"},"content":"        for (String i : list) {","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Joelwang22"},"content":"            System.out.println(INDENT + i);","lastModifiedDate":"2024-02-03"},{"lineNumber":39,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":40,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":41,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":42,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":43,"author":{"gitId":"Joelwang22"},"content":"    public void markTask(Task currTask){","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":46,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + currTask.getStatus());","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"Joelwang22"},"content":"    public void unmarkTask(Task currTask){","lastModifiedDate":"2024-01-31"},{"lineNumber":51,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":52,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":53,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + currTask.getStatus());","lastModifiedDate":"2024-02-03"},{"lineNumber":54,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Joelwang22"},"content":"    public void delete(int index, TaskList list){","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"Joelwang22"},"content":"        Task currTask \u003d list.getTask(index);","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":60,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"  \" + currTask.getStatus());","lastModifiedDate":"2024-02-03"},{"lineNumber":61,"author":{"gitId":"Joelwang22"},"content":"        list.deleteTask(index);","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Now you have \" + Integer.toString(list.size()) +","lastModifiedDate":"2024-02-03"},{"lineNumber":63,"author":{"gitId":"Joelwang22"},"content":"                \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":64,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":65,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":66,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"Joelwang22"},"content":"    public void addTask(Task currTask, TaskList list){","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":69,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":70,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"  \" + currTask.getStatus());","lastModifiedDate":"2024-02-03"},{"lineNumber":71,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Now you have \" + Integer.toString(list.size()) +","lastModifiedDate":"2024-02-03"},{"lineNumber":72,"author":{"gitId":"Joelwang22"},"content":"                \" tasks in the list.\");","lastModifiedDate":"2024-01-31"},{"lineNumber":73,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":74,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":76,"author":{"gitId":"Joelwang22"},"content":"    public void bye(){","lastModifiedDate":"2024-01-31"},{"lineNumber":77,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":78,"author":{"gitId":"Joelwang22"},"content":"        leave();","lastModifiedDate":"2024-01-31"},{"lineNumber":79,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":80,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":81,"author":{"gitId":"Joelwang22"},"content":"    public void showError(String e){","lastModifiedDate":"2024-01-31"},{"lineNumber":82,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-01-31"},{"lineNumber":83,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + e);","lastModifiedDate":"2024-02-03"},{"lineNumber":84,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-01-31"},{"lineNumber":85,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":86,"author":{"gitId":"Joelwang22"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"Joelwang22"},"content":"    public void showFilteredList(String keyword, TaskList tasks){","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"Joelwang22"},"content":"        separate();","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"Joelwang22"},"content":"        System.out.println(INDENT + \"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-02-03"},{"lineNumber":90,"author":{"gitId":"Joelwang22"},"content":"        ArrayList\u003cString\u003e list \u003d tasks.find(keyword);","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"Joelwang22"},"content":"        for (String i : list) {","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"Joelwang22"},"content":"            System.out.println(INDENT + i);","lastModifiedDate":"2024-02-03"},{"lineNumber":93,"author":{"gitId":"Joelwang22"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"Joelwang22"},"content":"        spacing();","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"Joelwang22"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"Joelwang22"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Joelwang22":96}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Joelwang22"},"content":"duke.task.Todo borrow book","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Joelwang22"},"content":"duke.task.Deadline return book /by Sunday","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Joelwang22"},"content":"duke.task.Event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"Joelwang22":3}}]
