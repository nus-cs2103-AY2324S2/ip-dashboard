[{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"        ui.sendGoodbyeMessage();","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"        System.exit(0);","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":7}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public abstract class Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException;","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    protected static final LocalTime DEFAULT_TIME \u003d LocalTime.of(0, 0);","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter SAVE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\");","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter DATE_INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter DATE_OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"    protected static final String USAGE_HINT \u003d \"Usage: deadline [task description] /by [d/m/yyyy] {hh:mm 24hr format}\";","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    protected LocalDateTime deadline;","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        super(description);","lastModifiedDate":"2024-01-20"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-01-20"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"        return this.deadline;","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"    public String getDeadlineString() {","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"        return this.deadline.format(DATE_OUTPUT_FORMAT) + \" \" + this.deadline.format(TIME_FORMAT);","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDeadlineString() + \")\";","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"dillontkh":33}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    public DeadlineCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"        int byIndex \u003d this.argsList.indexOf(\"/by\");","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"        if (this.argsList.size() \u003d\u003d 1 || byIndex \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Deadline description cannot be empty!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"                    + Deadline.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"        if (byIndex \u003d\u003d this.argsList.size() - 1 || byIndex \u003d\u003d -1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please input a deadline!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"                    + Deadline.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"        StringBuilder taskDescription \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d 1; i \u003c byIndex; i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d byIndex - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(this.argsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(this.argsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"        StringBuilder deadlineString \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d byIndex + 1; i \u003c this.argsList.size(); i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d this.argsList.size() - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"                deadlineString.append(this.argsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"                deadlineString.append(this.argsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"            LocalDateTime deadline \u003d Task.getLocalDateTimeFromString(deadlineString.toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"            Deadline task \u003d new Deadline(taskDescription.toString(), deadline);","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"            tasks.add(task);","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"            String message \u003d \"Alright, added:\\n\" + \"\\t\" + task + \"\\n\";","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"            message +\u003d tasks.summary();","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"            ui.sendMessage(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"            storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Unrecognized deadline format\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"                    + Deadline.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":57}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    public DeleteCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        // This means that the user has not supplied any number with the command","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"        if (this.argsList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please enter the task you wish to delete!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"                    + \"Usage: delete [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"                int taskIndex \u003d Integer.parseInt(this.argsList.get(1));","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"                String message \u003d \"Alright, the following task has been removed:\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"                        + \"\\t\" + tasks.remove(taskIndex - 1).toString() + \"\\n\";","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"                message +\u003d tasks.summary();","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"                ui.sendMessage(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"                storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Please enter a number for the delete command.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"                        + \"Usage: delete [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Are you sure that\u0027s a valid task number? (Tip: use \u0027list\u0027 to check the \"","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"                        + \"number of your task!)\\n\" + \"Usage: delete [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":36}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    protected static final LocalTime DEFAULT_TIME \u003d LocalTime.of(0, 0);","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter SAVE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HH:mm\");","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter DATE_INPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter DATE_OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    protected static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"    protected static final String USAGE_HINT \u003d \"Usage: event [task description] /from [d/m/yyyy] {hh:mm 24hr format} \"","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"            + \"/to [d/m/yyyy] {hh:mm 24hr format}\";","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"     * Creates new Event with specified description, start, and end time.","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"     * @throws NollidException if end time is before start time.","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"        super(description);","lastModifiedDate":"2024-01-20"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"        if (from.isAfter(to)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Start time and date must be before end time and date.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-01-20"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-01-20"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"        return this.from;","lastModifiedDate":"2024-01-27"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"        return this.to;","lastModifiedDate":"2024-01-27"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"    public String getFromString() {","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"        return this.from.format(DATE_OUTPUT_FORMAT) + \" \" + this.from.format(TIME_FORMAT);","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"    public String getToString() {","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"        return this.to.format(DATE_OUTPUT_FORMAT) + \" \" + this.to.format(TIME_FORMAT);","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.getFromString() + \" to: \" + this.getToString() + \")\";","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"dillontkh":52}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    public EventCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"        int fromIndex \u003d this.argsList.indexOf(\"/from\");","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"        int toIndex \u003d this.argsList.indexOf(\"/to\");","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"        if (this.argsList.size() \u003d\u003d 1 || fromIndex \u003d\u003d 1 || toIndex \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Event description cannot be empty!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"                    + Event.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"        if (fromIndex \u003d\u003d -1 || fromIndex \u003d\u003d this.argsList.size() - 1 || fromIndex \u003d\u003d toIndex - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please enter the start of your event!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"                    + Event.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"        if (toIndex \u003d\u003d -1 || toIndex \u003d\u003d this.argsList.size() - 1 || toIndex \u003d\u003d fromIndex - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please enter the end of your event!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"                    + Event.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        StringBuilder taskDescription \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"        StringBuilder from \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"        StringBuilder to \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"        // Deal with the user sending \"/from\" before \"/to\" or vice versa","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"        if (fromIndex \u003c toIndex) {","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"            extractEventInfo(this.argsList, fromIndex, toIndex, taskDescription, from, to);","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"            extractEventInfo(this.argsList, toIndex, fromIndex, taskDescription, to, from);","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"        try {","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"            LocalDateTime fromDateTime \u003d Task.getLocalDateTimeFromString(from.toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"            LocalDateTime toDateTime \u003d Task.getLocalDateTimeFromString(to.toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"            Event task \u003d new Event(taskDescription.toString(), fromDateTime, toDateTime);","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"            tasks.add(task);","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"            String message \u003d \"Alright, added:\\n\" + \"\\t\" + task + \"\\n\";","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"            message +\u003d tasks.summary();","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"            ui.sendMessage(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"            storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Unrecognized start/end format\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"dillontkh"},"content":"                    + Event.USAGE_HINT);","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":58,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":59,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":60,"author":{"gitId":"dillontkh"},"content":"     * Saves the appropriate data in the supplied StringBuilders, given the index of the \u0027/from\u0027 and \u0027/to\u0027 arguments","lastModifiedDate":"2024-01-29"},{"lineNumber":61,"author":{"gitId":"dillontkh"},"content":"     * in the user input.","lastModifiedDate":"2024-01-29"},{"lineNumber":62,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":63,"author":{"gitId":"dillontkh"},"content":"    private void extractEventInfo(ArrayList\u003cString\u003e userInputAsList, int fromIndex, int toIndex,","lastModifiedDate":"2024-01-29"},{"lineNumber":64,"author":{"gitId":"dillontkh"},"content":"                                  StringBuilder taskDescription, StringBuilder from, StringBuilder to) {","lastModifiedDate":"2024-01-29"},{"lineNumber":65,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d 1; i \u003c fromIndex; i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":66,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d fromIndex - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":67,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(userInputAsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":68,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":69,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(userInputAsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":70,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":71,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":72,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":73,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d fromIndex + 1; i \u003c toIndex; i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":74,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d toIndex - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":75,"author":{"gitId":"dillontkh"},"content":"                from.append(userInputAsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":76,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":77,"author":{"gitId":"dillontkh"},"content":"                from.append(userInputAsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":78,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":79,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":80,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":81,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d toIndex + 1; i \u003c userInputAsList.size(); i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":82,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d userInputAsList.size() - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":83,"author":{"gitId":"dillontkh"},"content":"                to.append(userInputAsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":84,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":85,"author":{"gitId":"dillontkh"},"content":"                to.append(userInputAsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":86,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":87,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":88,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":89,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":89}},{"path":"src/main/java/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"        String message \u003d \"Available commands:\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"                + \"list \\t\\t- Lists all your tasks\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"                + \"todo \\t\\t- Create a new todo task.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"                + \"deadline \\t- Create a new task with a deadline.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"                + \"event \\t\\t- Create a new task with a starting and ending time.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"                + \"mark \\t\\t- Mark a task as completed.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"                + \"unmark \\t\\t- Mark a task as not completed.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"                + \"delete \\t\\t- Delete a task.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"        ui.sendMessage(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":15}},{"path":"src/main/java/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"        super(errorMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":5}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"        // List items in to-do list","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"        StringBuilder response \u003d new StringBuilder(\"Here are the tasks in your list: \\n\");","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"            response \u003d new StringBuilder(\"Your list is empty!\");","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"            if (i \u003c tasks.size() - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"                response.append(i + 1).append(\".\").append(tasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"                response.append(i + 1).append(\".\").append(tasks.get(i).toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"        ui.sendMessage(response.toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":19}},{"path":"src/main/java/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    public MarkCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        // This means that the user has not supplied any number with the command","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"        if (argsList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please enter the task you wish to mark as done!\\n\" + \"Usage: mark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"                int taskIndex \u003d Integer.parseInt(argsList.get(1));","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"                tasks.setDone(taskIndex, true);","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"                String response \u003d \"Good job! I\u0027ve marked this task as done: \\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"                        + \"\\t \" + tasks.get(taskIndex - 1).toString();","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"                ui.sendMessage(response);","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"                storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Please enter a number for the mark command.\\n\" + \"Usage: mark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Are you sure that\u0027s a valid task number? (Tip: use \u0027list\u0027 to check the \"","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"                        + \"number of your task!)\\n\" + \"Usage: mark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":33}},{"path":"src/main/java/Nollid.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"public class Nollid {","lastModifiedDate":"2024-01-20"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"    private final TaskList tasks;","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    private final Storage storage;","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    private final Ui ui;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"    public Nollid(Path filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        this.tasks \u003d new TaskList(this.storage.load());","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        new Nollid(Storage.DEFAULT_FILEPATH).run();","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"    public void run() {","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"        this.ui.sendWelcomeMessage();","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"        while (true) {","lastModifiedDate":"2024-01-19"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"            String fullCommand \u003d this.ui.readCommand(scanner);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"            Command command;","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-22"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"                command \u003d Parser.parse(fullCommand);","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"                this.ui.sendMessage(\"Invalid command! Type \u0027help\u0027 to view a list of commands.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"                continue;","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-22"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"                command.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"            } catch (NollidException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"                this.ui.sendMessage(e.getMessage());","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-22"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-22"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"dillontkh":38}},{"path":"src/main/java/NollidException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class NollidException extends Exception {","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    public NollidException(String errorMessage) {","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"        super(errorMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":5}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"public class Parser {","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"    public static Command parse(String fullCommand) throws InvalidCommandException {","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"        if (fullCommand.isBlank()) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"            throw new InvalidCommandException(\"Command is blank.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"        // Split user input into individual words","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"        // e.g. \"i am user input\" -\u003e [\"i\", \"am\", \"user\", \"input\"]","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"        ArrayList\u003cString\u003e argsList \u003d new ArrayList\u003c\u003e(Arrays.asList(fullCommand.split(\" \")));","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        String commandKeyword \u003d argsList.get(0);","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"        if (commandKeyword.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"            return new ByeCommand();","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"            return new ListCommand();","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"mark\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"            return new MarkCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"            return new UnmarkCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"            return new TodoCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"            return new DeadlineCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"event\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"            return new EventCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"delete\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"            return new DeleteCommand(argsList);","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"        } else if (commandKeyword.equalsIgnoreCase(\"help\")) {","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"            return new HelpCommand();","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"            throw new InvalidCommandException(\"No valid command detected.\");","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"dillontkh":36}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"public class Storage {","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"     * Unicode character U+2605 unlikely to be entered by user.","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"    protected static final String DELIMITER \u003d \"\\u2605\";","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"    protected static final Path DEFAULT_FILEPATH \u003d Paths.get(\".\", \"data\", \"nollid.data\");","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"    private final Path filePath;","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"     * Returns a List of Tasks from the Storage\u0027s file path.","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"        try {","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"            if (Files.notExists(this.filePath)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"                if (Files.notExists(this.filePath.getParent())) {","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"                    Files.createDirectories(this.filePath.getParent());","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"                Files.createFile(this.filePath);","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"            for (String line : Files.readAllLines(this.filePath)) {","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"                String[] lineArray \u003d line.split(DELIMITER);","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"                Task taskToAdd;","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"                String taskDescription;","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"                try {","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"                    taskDescription \u003d lineArray[2];","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"                    // Line that doesn\u0027t follow the format","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"                    continue;","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"                switch (lineArray[0]) {","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"                case \"T\":","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"                    taskToAdd \u003d new ToDo(taskDescription);","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"                    break;","lastModifiedDate":"2024-01-28"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"                case \"D\":","lastModifiedDate":"2024-01-28"},{"lineNumber":55,"author":{"gitId":"dillontkh"},"content":"                    String deadlineString \u003d lineArray[3];","lastModifiedDate":"2024-01-28"},{"lineNumber":56,"author":{"gitId":"dillontkh"},"content":"                    try {","lastModifiedDate":"2024-01-28"},{"lineNumber":57,"author":{"gitId":"dillontkh"},"content":"                        LocalDateTime deadline \u003d Task.getLocalDateTimeFromString(deadlineString);","lastModifiedDate":"2024-01-28"},{"lineNumber":58,"author":{"gitId":"dillontkh"},"content":"                        taskToAdd \u003d new Deadline(taskDescription, deadline);","lastModifiedDate":"2024-01-28"},{"lineNumber":59,"author":{"gitId":"dillontkh"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":60,"author":{"gitId":"dillontkh"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":61,"author":{"gitId":"dillontkh"},"content":"                        continue;","lastModifiedDate":"2024-01-28"},{"lineNumber":62,"author":{"gitId":"dillontkh"},"content":"                    }","lastModifiedDate":"2024-01-28"},{"lineNumber":63,"author":{"gitId":"dillontkh"},"content":"                    break;","lastModifiedDate":"2024-01-28"},{"lineNumber":64,"author":{"gitId":"dillontkh"},"content":"                case \"E\":","lastModifiedDate":"2024-01-28"},{"lineNumber":65,"author":{"gitId":"dillontkh"},"content":"                    String from \u003d lineArray[3];","lastModifiedDate":"2024-01-28"},{"lineNumber":66,"author":{"gitId":"dillontkh"},"content":"                    String to \u003d lineArray[4];","lastModifiedDate":"2024-01-28"},{"lineNumber":67,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":68,"author":{"gitId":"dillontkh"},"content":"                    try {","lastModifiedDate":"2024-01-28"},{"lineNumber":69,"author":{"gitId":"dillontkh"},"content":"                        LocalDateTime fromDateTime \u003d Task.getLocalDateTimeFromString(from);","lastModifiedDate":"2024-01-28"},{"lineNumber":70,"author":{"gitId":"dillontkh"},"content":"                        LocalDateTime toDateTime \u003d Task.getLocalDateTimeFromString(to);","lastModifiedDate":"2024-01-28"},{"lineNumber":71,"author":{"gitId":"dillontkh"},"content":"                        taskToAdd \u003d new Event(taskDescription, fromDateTime, toDateTime);","lastModifiedDate":"2024-01-28"},{"lineNumber":72,"author":{"gitId":"dillontkh"},"content":"                    } catch (DateTimeParseException | NollidException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":73,"author":{"gitId":"dillontkh"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":74,"author":{"gitId":"dillontkh"},"content":"                        continue;","lastModifiedDate":"2024-01-28"},{"lineNumber":75,"author":{"gitId":"dillontkh"},"content":"                    }","lastModifiedDate":"2024-01-28"},{"lineNumber":76,"author":{"gitId":"dillontkh"},"content":"                    break;","lastModifiedDate":"2024-01-28"},{"lineNumber":77,"author":{"gitId":"dillontkh"},"content":"                default:","lastModifiedDate":"2024-01-28"},{"lineNumber":78,"author":{"gitId":"dillontkh"},"content":"                    // Unknown first character, go to next line","lastModifiedDate":"2024-01-28"},{"lineNumber":79,"author":{"gitId":"dillontkh"},"content":"                    continue;","lastModifiedDate":"2024-01-28"},{"lineNumber":80,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":81,"author":{"gitId":"dillontkh"},"content":"                String doneFlag \u003d lineArray[1];","lastModifiedDate":"2024-01-28"},{"lineNumber":82,"author":{"gitId":"dillontkh"},"content":"                if (doneFlag.equals(\"1\")) {","lastModifiedDate":"2024-01-28"},{"lineNumber":83,"author":{"gitId":"dillontkh"},"content":"                    taskToAdd.setDone(true);","lastModifiedDate":"2024-01-28"},{"lineNumber":84,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":85,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":86,"author":{"gitId":"dillontkh"},"content":"                taskList.add(taskToAdd);","lastModifiedDate":"2024-01-28"},{"lineNumber":87,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":88,"author":{"gitId":"dillontkh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":89,"author":{"gitId":"dillontkh"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":90,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":91,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":92,"author":{"gitId":"dillontkh"},"content":"        return taskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":93,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":94,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":95,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":96,"author":{"gitId":"dillontkh"},"content":"     * Updates the storage on disk based on the current state of the given task list.","lastModifiedDate":"2024-01-28"},{"lineNumber":97,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":98,"author":{"gitId":"dillontkh"},"content":"    public void update(TaskList taskList) {","lastModifiedDate":"2024-01-28"},{"lineNumber":99,"author":{"gitId":"dillontkh"},"content":"        boolean isFirstLine \u003d true;","lastModifiedDate":"2024-01-28"},{"lineNumber":100,"author":{"gitId":"dillontkh"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2024-01-28"},{"lineNumber":101,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":102,"author":{"gitId":"dillontkh"},"content":"                Files.write(this.filePath, \"\".getBytes());","lastModifiedDate":"2024-01-28"},{"lineNumber":103,"author":{"gitId":"dillontkh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":104,"author":{"gitId":"dillontkh"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":105,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":106,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":107,"author":{"gitId":"dillontkh"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"dillontkh"},"content":"            String lineToWrite \u003d \"\";","lastModifiedDate":"2024-01-28"},{"lineNumber":109,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-28"},{"lineNumber":110,"author":{"gitId":"dillontkh"},"content":"                if (t instanceof ToDo) {","lastModifiedDate":"2024-01-28"},{"lineNumber":111,"author":{"gitId":"dillontkh"},"content":"                    lineToWrite \u003d \"T\" + DELIMITER + t.getStatusNumber() + DELIMITER + t.getDescription() + \"\\n\";","lastModifiedDate":"2024-01-28"},{"lineNumber":112,"author":{"gitId":"dillontkh"},"content":"                } else if (t instanceof Deadline) {","lastModifiedDate":"2024-01-28"},{"lineNumber":113,"author":{"gitId":"dillontkh"},"content":"                    Deadline deadline \u003d (Deadline) t;","lastModifiedDate":"2024-01-28"},{"lineNumber":114,"author":{"gitId":"dillontkh"},"content":"                    lineToWrite \u003d \"D\" + DELIMITER + deadline.getStatusNumber() + DELIMITER + deadline.getDescription()","lastModifiedDate":"2024-01-28"},{"lineNumber":115,"author":{"gitId":"dillontkh"},"content":"                            + DELIMITER + deadline.getDeadline().format(Deadline.SAVE_FORMAT) + \"\\n\";","lastModifiedDate":"2024-01-28"},{"lineNumber":116,"author":{"gitId":"dillontkh"},"content":"                } else if (t instanceof Event) {","lastModifiedDate":"2024-01-28"},{"lineNumber":117,"author":{"gitId":"dillontkh"},"content":"                    Event event \u003d (Event) t;","lastModifiedDate":"2024-01-28"},{"lineNumber":118,"author":{"gitId":"dillontkh"},"content":"                    lineToWrite \u003d \"E\" + DELIMITER + event.getStatusNumber() + DELIMITER + event.getDescription()","lastModifiedDate":"2024-01-28"},{"lineNumber":119,"author":{"gitId":"dillontkh"},"content":"                            + DELIMITER + event.getFrom().format(Event.SAVE_FORMAT)","lastModifiedDate":"2024-01-28"},{"lineNumber":120,"author":{"gitId":"dillontkh"},"content":"                            + DELIMITER + event.getTo().format(Event.SAVE_FORMAT) + \"\\n\";","lastModifiedDate":"2024-01-28"},{"lineNumber":121,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":122,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":123,"author":{"gitId":"dillontkh"},"content":"                if (isFirstLine) {","lastModifiedDate":"2024-01-28"},{"lineNumber":124,"author":{"gitId":"dillontkh"},"content":"                    Files.write(this.filePath, lineToWrite.getBytes());","lastModifiedDate":"2024-01-28"},{"lineNumber":125,"author":{"gitId":"dillontkh"},"content":"                    isFirstLine \u003d false;","lastModifiedDate":"2024-01-28"},{"lineNumber":126,"author":{"gitId":"dillontkh"},"content":"                } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":127,"author":{"gitId":"dillontkh"},"content":"                    Files.write(this.filePath, lineToWrite.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2024-01-28"},{"lineNumber":128,"author":{"gitId":"dillontkh"},"content":"                }","lastModifiedDate":"2024-01-28"},{"lineNumber":129,"author":{"gitId":"dillontkh"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-01-28"},{"lineNumber":130,"author":{"gitId":"dillontkh"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-01-28"},{"lineNumber":131,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-28"},{"lineNumber":132,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":133,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":134,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"dillontkh":134}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"import java.time.LocalTime;","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"// Adapted from partial solution provided on CS2103 website","lastModifiedDate":"2024-01-19"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"public class Task {","lastModifiedDate":"2024-01-19"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    protected String description;","lastModifiedDate":"2024-01-19"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-19"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-19"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-19"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-19"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-19"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"    public String getStatusNumber() {","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"        return (this.isDone ? \"1\" : \"0\"); // mark done task with X","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-01-26"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-26"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-19"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"    public String getDescription() {","lastModifiedDate":"2024-01-27"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"        return this.description;","lastModifiedDate":"2024-01-27"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-28"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"     * Returns a LocalDateTime object from a date (and time) string.","lastModifiedDate":"2024-01-28"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"     *","lastModifiedDate":"2024-01-28"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"     * @throws DateTimeParseException if unable to retrieve a date (and time) from the string.","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-28"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"    public static LocalDateTime getLocalDateTimeFromString(String deadlineString) throws DateTimeParseException {","lastModifiedDate":"2024-01-28"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"        ArrayList\u003cString\u003e deadlineList \u003d new ArrayList\u003c\u003e(Arrays.asList(deadlineString.split(\" \")));","lastModifiedDate":"2024-01-28"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(deadlineList.get(0), Deadline.DATE_INPUT_FORMAT);","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"        // If only date provided, use the default time","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"        if (deadlineList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"            return LocalDateTime.of(deadlineDate, Deadline.DEFAULT_TIME);","lastModifiedDate":"2024-01-28"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"            LocalTime deadlineTime \u003d LocalTime.parse(deadlineList.get(1), Deadline.TIME_FORMAT);","lastModifiedDate":"2024-01-28"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"            return LocalDateTime.of(deadlineDate, deadlineTime);","lastModifiedDate":"2024-01-28"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-19"},{"lineNumber":55,"author":{"gitId":"dillontkh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-19"},{"lineNumber":56,"author":{"gitId":"dillontkh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-01-19"},{"lineNumber":57,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-19"},{"lineNumber":58,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"dillontkh":58}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-28"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"import java.util.Iterator;","lastModifiedDate":"2024-01-28"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"public class TaskList implements Iterable\u003cTask\u003e {","lastModifiedDate":"2024-01-28"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    public TaskList() {","lastModifiedDate":"2024-01-28"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-01-28"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2024-01-28"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        return taskList.isEmpty();","lastModifiedDate":"2024-01-28"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"    public void add(Task taskToAdd) {","lastModifiedDate":"2024-01-28"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"        this.taskList.add(taskToAdd);","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"    public int size() {","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"        return this.taskList.size();","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"    public Task get(int index) {","lastModifiedDate":"2024-01-28"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"        return this.taskList.get(index);","lastModifiedDate":"2024-01-28"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"    public Task remove(int index) {","lastModifiedDate":"2024-01-28"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        return this.taskList.remove(index);","lastModifiedDate":"2024-01-28"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"     * Marks the task with the given index as done.","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"    public void setDone(int taskIndex, boolean isDone) {","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"        this.taskList.get(taskIndex - 1).setDone(isDone);","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-28"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"    public Iterator\u003cTask\u003e iterator() {","lastModifiedDate":"2024-01-28"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"        return taskList.iterator();","lastModifiedDate":"2024-01-28"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"    public String summary() {","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"        int listSize \u003d this.taskList.size();","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"        // \"task\" for singular, \"tasks\" for plural","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"        if (listSize \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"            return \"You now have \" + listSize + \" task in your list.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"            return \"You now have \" + listSize + \" tasks in your list.\";","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"dillontkh":57}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-01-20"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-01-20"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"        super(description);","lastModifiedDate":"2024-01-20"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-20"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-20"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    public String toString() {","lastModifiedDate":"2024-01-20"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-01-20"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-20"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"dillontkh":10}},{"path":"src/main/java/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    public TodoCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        if (argsList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Todo description cannot be empty!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"                    + \"Usage: todo [task description]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"        StringBuilder taskDescription \u003d new StringBuilder();","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d 1; i \u003c argsList.size(); i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"            if (i !\u003d argsList.size() - 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(argsList.get(i)).append(\" \");","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"            } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"                taskDescription.append(argsList.get(i));","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"        ToDo task \u003d new ToDo(taskDescription.toString());","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"        tasks.add(task);","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"        String message \u003d \"Alright, added:\\n\" + \"\\t\" + task + \"\\n\";","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"        message +\u003d tasks.summary();","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        ui.sendMessage(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"        storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":35}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"public class Ui {","lastModifiedDate":"2024-01-28"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    // Default length of line to be printed","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"    private static final int LINE_LENGTH \u003d 30;","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"     * Sends a welcome message upon starting the bot, with horizontal lines","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"     * printed for visual separation.","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public void sendWelcomeMessage() {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m Nollid.\\n\" + \"What can I do for you?\";","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"        sendMessage(welcomeMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"     * Formats message that the bot will send.","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"     * @param message The message for the bot to send.","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"    public void sendMessage(String message) {","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"        printHorizontalLine(LINE_LENGTH);","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"        System.out.println(message);","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"        printHorizontalLine(LINE_LENGTH);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"     * Sends a goodbye message upon exiting the bot, with horizontal lines","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"     * printed for visual separation.","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"    public void sendGoodbyeMessage() {","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"        String goodbyeMessage \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"        sendMessage(goodbyeMessage);","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"dillontkh"},"content":"     * Prints a horizontal line with unicode character U+2500.","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"dillontkh"},"content":"     *","lastModifiedDate":"2024-01-29"},{"lineNumber":39,"author":{"gitId":"dillontkh"},"content":"     * @param length Length of line in characters.","lastModifiedDate":"2024-01-29"},{"lineNumber":40,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":41,"author":{"gitId":"dillontkh"},"content":"    public void printHorizontalLine(int length) {","lastModifiedDate":"2024-01-29"},{"lineNumber":42,"author":{"gitId":"dillontkh"},"content":"        for (int i \u003d 0; i \u003c length; i++) {","lastModifiedDate":"2024-01-29"},{"lineNumber":43,"author":{"gitId":"dillontkh"},"content":"            System.out.print(\"─\");","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"dillontkh"},"content":"        System.out.println();","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"dillontkh"},"content":"    /**","lastModifiedDate":"2024-01-29"},{"lineNumber":49,"author":{"gitId":"dillontkh"},"content":"     * Returns a String of the user\u0027s input.","lastModifiedDate":"2024-01-29"},{"lineNumber":50,"author":{"gitId":"dillontkh"},"content":"     */","lastModifiedDate":"2024-01-29"},{"lineNumber":51,"author":{"gitId":"dillontkh"},"content":"    public String readCommand(Scanner scanner) {","lastModifiedDate":"2024-01-29"},{"lineNumber":52,"author":{"gitId":"dillontkh"},"content":"        return scanner.nextLine().strip();","lastModifiedDate":"2024-01-29"},{"lineNumber":53,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-28"}],"authorContributionMap":{"dillontkh":54}},{"path":"src/main/java/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-29"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2024-01-29"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"    private final ArrayList\u003cString\u003e argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"    public UnmarkCommand(ArrayList\u003cString\u003e argsList) {","lastModifiedDate":"2024-01-29"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"        this.argsList \u003d argsList;","lastModifiedDate":"2024-01-29"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"    @Override","lastModifiedDate":"2024-01-29"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws NollidException {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"        // This means that the user has not supplied any number with the command","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"        if (this.argsList.size() \u003d\u003d 1) {","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"            throw new NollidException(\"Please enter the task you wish to mark as not done!\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"                    + \"Usage: unmark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"        } else {","lastModifiedDate":"2024-01-29"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"            try {","lastModifiedDate":"2024-01-29"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"                int taskIndex \u003d Integer.parseInt(this.argsList.get(1));","lastModifiedDate":"2024-01-29"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"                tasks.setDone(taskIndex, false);","lastModifiedDate":"2024-01-29"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"                String response \u003d \"Alright, I\u0027ve marked this task as not done yet: \\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"                        + \"\\t \" + tasks.get(taskIndex - 1).toString();","lastModifiedDate":"2024-01-29"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"                ui.sendMessage(response);","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"                storage.update(tasks);","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Please enter a number for the unmark command.\\n\"","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"dillontkh"},"content":"                        + \"Usage: unmark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"dillontkh"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"                throw new NollidException(\"Are you sure that\u0027s a valid task number? (Tip: use \u0027list\u0027 to check the \"","lastModifiedDate":"2024-01-29"},{"lineNumber":31,"author":{"gitId":"dillontkh"},"content":"                        + \"number of your task!)\\n\" + \"Usage: unmark [task number]\");","lastModifiedDate":"2024-01-29"},{"lineNumber":32,"author":{"gitId":"dillontkh"},"content":"            }","lastModifiedDate":"2024-01-29"},{"lineNumber":33,"author":{"gitId":"dillontkh"},"content":"        }","lastModifiedDate":"2024-01-29"},{"lineNumber":34,"author":{"gitId":"dillontkh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":35,"author":{"gitId":"dillontkh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"dillontkh":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dillontkh"},"content":"mark","lastModifiedDate":"2024-01-22"},{"lineNumber":2,"author":{"gitId":"dillontkh"},"content":"mark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"dillontkh"},"content":"mark a","lastModifiedDate":"2024-01-22"},{"lineNumber":4,"author":{"gitId":"dillontkh"},"content":"unmark","lastModifiedDate":"2024-01-22"},{"lineNumber":5,"author":{"gitId":"dillontkh"},"content":"unmark 1","lastModifiedDate":"2024-01-22"},{"lineNumber":6,"author":{"gitId":"dillontkh"},"content":"unmark a","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"dillontkh"},"content":"todo","lastModifiedDate":"2024-01-22"},{"lineNumber":8,"author":{"gitId":"dillontkh"},"content":"todo test todo","lastModifiedDate":"2024-01-20"},{"lineNumber":9,"author":{"gitId":"dillontkh"},"content":"mark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":10,"author":{"gitId":"dillontkh"},"content":"unmark 2","lastModifiedDate":"2024-01-22"},{"lineNumber":11,"author":{"gitId":"dillontkh"},"content":"deadline test deadline","lastModifiedDate":"2024-01-22"},{"lineNumber":12,"author":{"gitId":"dillontkh"},"content":"deadline test deadline /by","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"dillontkh"},"content":"deadline test deadline /by now","lastModifiedDate":"2024-01-20"},{"lineNumber":14,"author":{"gitId":"dillontkh"},"content":"deadline test deadline /by 23/6/2022 23:33","lastModifiedDate":"2024-01-30"},{"lineNumber":15,"author":{"gitId":"dillontkh"},"content":"event","lastModifiedDate":"2024-01-22"},{"lineNumber":16,"author":{"gitId":"dillontkh"},"content":"event test event","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"dillontkh"},"content":"event test event /from now","lastModifiedDate":"2024-01-22"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"event test event /from now /to later","lastModifiedDate":"2024-01-20"},{"lineNumber":19,"author":{"gitId":"dillontkh"},"content":"event test event /from 12/12/1212 12:34 /to 2/2/2222 11:11","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"dillontkh"},"content":"mark 2","lastModifiedDate":"2024-01-20"},{"lineNumber":21,"author":{"gitId":"dillontkh"},"content":"mark 3","lastModifiedDate":"2024-01-20"},{"lineNumber":22,"author":{"gitId":"dillontkh"},"content":"list","lastModifiedDate":"2024-01-20"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"unmark 2","lastModifiedDate":"2024-01-20"},{"lineNumber":24,"author":{"gitId":"dillontkh"},"content":"unmark 3","lastModifiedDate":"2024-01-20"},{"lineNumber":25,"author":{"gitId":"dillontkh"},"content":"list","lastModifiedDate":"2024-01-20"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"help","lastModifiedDate":"2024-01-24"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"bye","lastModifiedDate":"2024-01-20"}],"authorContributionMap":{"dillontkh":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dillontkh"},"content":"java -classpath ..\\bin Nollid \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"dillontkh":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"dillontkh"},"content":"java -classpath ../bin Nollid \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"dillontkh"},"content":"#cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2024-01-20"},{"lineNumber":27,"author":{"gitId":"dillontkh"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2024-01-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"dillontkh"},"content":"diff ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2024-01-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":34,"dillontkh":4}}]
