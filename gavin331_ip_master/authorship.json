[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"checkstyle {","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"    mainClass.set(\"bartenderbob.BartenderBob\")","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    archiveBaseName \u003d \"BartenderBob\"","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"    archiveVersion \u003d \"0.2\"","lastModifiedDate":"2024-02-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"gavin331":23,"-":30}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"D | X | return book | Oct 01 2020","lastModifiedDate":"2024-02-19"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"T |   | buy bread","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"E |   | project meeting | Oct 10 2019 | Dec 12 2019","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"E |   | project meeting | Oct 08 2019 | Oct 09 2019","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"T |   | go swimming!","lastModifiedDate":"2024-02-19"}],"authorContributionMap":{"gavin331":5}},{"path":"src/main/java/bartenderbob/BartenderBob.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Represents a BartenderBob chatbot that stores tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" * @author Gavin Goh","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * @version 0.1","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class BartenderBob {","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** Name of the chatbot */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private static final String NAME \u003d \"BartenderBob\";","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    /** Save tasks to the user\u0027s hard disk */","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    private static Storage storage;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    /** Keeps track of the user tasks */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    private static TaskList tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    /** Displays the chatbot\u0027s user interface to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    private static Ui ui;","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    public BartenderBob() {","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     * Creates a BartenderBob with the specified file path.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     * @param filePath The file path of the stored tasks.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    public BartenderBob(String filePath) {","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-01-24"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"            ui.showWelcomeMessage(NAME);","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"        } catch (BartenderBobException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"            ui.showLoadingError();","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"tasks cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    String getResponse(String input) {","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        return InputHandler.handleInput(tasks, ui, input);","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":40}},{"path":"src/main/java/bartenderbob/BartenderBobException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Handles exceptions that is specific to BartenderBob chatbot.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"public class BartenderBobException extends Exception {","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    /** Displays messages to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    private static final Ui UI \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** First word of the user input */","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private String firstWord;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of BartenderBobException.","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    public BartenderBobException() {","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of BartenderBobException and initialise","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     * it with the first word of the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     * @param firstWord First word of the user input.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    public BartenderBobException(String firstWord) {","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        this.firstWord \u003d firstWord;","lastModifiedDate":"2024-01-24"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"     * Shows invalid input error message when a user","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"     * types in a command BartenderBob cannot comprehend.","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input to BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    public static String invalidInput(String userInput) {","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"        assert userInput !\u003d null : \"user input cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        return UI.showInvalidInputError(userInput);","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"     * Displays error message when a user gives an input","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * with missing parameters that is required by BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"    public String displayError() {","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"        assert firstWord !\u003d null : \"first word cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        switch (firstWord) {","lastModifiedDate":"2024-01-24"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-24"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidMarkCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-24"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidUnmarkCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-24"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidDeleteCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-24"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidTodoCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-24"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidDeadlineCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"        case \"event\":","lastModifiedDate":"2024-01-24"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"            return UI.showInvalidEventCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        default:","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"            return \"\";","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"     * Displays error message when a user specified task index","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"     * is out of bounds.","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"    public String tasksOutOfBounds() {","lastModifiedDate":"2024-02-06"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"        return UI.showOutOfBoundsCommand();","lastModifiedDate":"2024-02-06"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-24"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"    public static String showEventClashError(Event newEvent, Event existingEvent) {","lastModifiedDate":"2024-02-14"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        return UI.showClashError(newEvent, existingEvent);","lastModifiedDate":"2024-02-14"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"gavin331":72}},{"path":"src/main/java/bartenderbob/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * Represents the Deadline task that has a due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** The due date for the task */","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private LocalDate dueDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Deadline task with a description and a","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"     * due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * @throws IllegalArgumentException If \u0027by\u0027 parameter is not in yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public Deadline(String description, String by) throws IllegalArgumentException {","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        this.dueDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Deadline task with a description, due date","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"     * and whether it has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the task.","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     * @throws IllegalArgumentException If \u0027by\u0027 parameter is not in yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    public Deadline(String description, String by, boolean isDone) throws IllegalArgumentException {","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"        if (!isValidDateFormat(by)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"        this.dueDate \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-23"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"     * Verifies whether a string is of the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"     * @param by Input String.","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"     * @return Whether the string follows the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"    private boolean isValidDateFormat(String by) {","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"        assert by !\u003d null : \"String parameter \u0027by\u0027 cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"            return true;","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"            return false;","lastModifiedDate":"2024-02-02"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"     * Shows the deadline task information when the user uses the \u0027list\u0027 command.","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"     * @return Complete deadline task information as a String.","lastModifiedDate":"2024-02-02"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-23"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-01-23"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        String dateFormat \u003d this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        String byFormat \u003d \"(by: \" + dateFormat + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"        return \"[D]\" + \"[\" + status + \"]\" + \" \" + this.description + \" \" + byFormat;","lastModifiedDate":"2024-01-23"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"gavin331":73}},{"path":"src/main/java/bartenderbob/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import java.util.Collections;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"import javafx.scene.Node;","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":" * containing text from the speaker.","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    private Label dialog;","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"            fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        dialog.setText(text);","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    private void flip() {","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        this.setStyle(\"-fx-background-color: #7E5E49\"); // Lighter brown color","lastModifiedDate":"2024-02-19"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2024-02-09"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"    public static DialogBox getBotDialog(String text, Image img) {","lastModifiedDate":"2024-02-09"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-09"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        db.flip();","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"        return db;","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"    public static DialogBox getBotWelcomeDialog(String text, Image img) {","lastModifiedDate":"2024-02-19"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2024-02-19"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"        db.flip();","lastModifiedDate":"2024-02-19"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"        return db;","lastModifiedDate":"2024-02-19"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"gavin331":68}},{"path":"src/main/java/bartenderbob/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" * Represents the Event task that has a description, from date and a due date.","lastModifiedDate":"2024-02-02"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"public class Event extends Task {","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    public static final String YYYY_MM_DD \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public static final DateTimeFormatter YYYY_MM_DD_FORMAT \u003d DateTimeFormatter.ofPattern(YYYY_MM_DD);","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    public static final String MMM_DD_YYYY \u003d \"MMM dd yyyy\";","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    public static final DateTimeFormatter MMM_DD_YYYY_FORMAT \u003d DateTimeFormatter.ofPattern(MMM_DD_YYYY);","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    /** Event start date */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    private LocalDate from;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    /** Event due date */","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    private LocalDate by;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of an Event class that has a description, from date","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"     * and a by date.","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     * @param from Start date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    public Event(String description, String from, String by) {","lastModifiedDate":"2024-01-23"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-01-23"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        verifyValidDateFormat(from, by);","lastModifiedDate":"2024-02-19"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        verifyFromBeforeBy(from, by);","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"        this.from \u003d LocalDate.parse(from, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"        this.by \u003d LocalDate.parse(by, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of an Event class that has a description, from date,","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"     * by date and whether it has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"     * @param description Description of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"     * @param from Start date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the event.","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-02"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"    public Event(String description, String from, String by, boolean isDone) {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        verifyValidDateFormat(from, by);","lastModifiedDate":"2024-02-19"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        verifyFromBeforeBy(from, by);","lastModifiedDate":"2024-02-19"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        this.from \u003d LocalDate.parse(from, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"        this.by \u003d LocalDate.parse(by, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"     * Verifies whether a string is of the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"     * @param by Input String.","lastModifiedDate":"2024-02-02"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"     * @return Whether the string follows the format yyyy-MM-dd.","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"    private void verifyValidDateFormat(String from, String by) {","lastModifiedDate":"2024-02-19"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        assert from !\u003d null : \"String parameter \u0027from\u0027 cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"        assert by !\u003d null : \"String parameter \u0027by\u0027 cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(from, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"            LocalDate.parse(by, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2024-02-19"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-19"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"     * Verifies whether the from date is before the by date.","lastModifiedDate":"2024-02-19"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"     * @param from Start date of the event.","lastModifiedDate":"2024-02-19"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"     * @param by Due date of the event.","lastModifiedDate":"2024-02-19"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"    private void verifyFromBeforeBy(String from, String by) {","lastModifiedDate":"2024-02-19"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"        LocalDate fromDate \u003d LocalDate.parse(from, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"        LocalDate byDate \u003d LocalDate.parse(by, YYYY_MM_DD_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"        if (!fromDate.isBefore(byDate)) {","lastModifiedDate":"2024-02-19"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2024-02-19"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"     * Verifies whether the event task has no clash with another event task.","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"     * @param event The event task to be compared with.","lastModifiedDate":"2024-02-14"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"     * @return Whether the event task has no clash with another event task.","lastModifiedDate":"2024-02-14"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"    public boolean hasNoClash(Event event) {","lastModifiedDate":"2024-02-14"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"        return this.by.isBefore(event.from) || event.by.isBefore(this.from);","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"     * Shows the event task information when the user uses the \u0027list\u0027 command.","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"     * @return Complete event task information as a String.","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-01-23"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-23"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-01-23"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"        String fromFormat \u003d this.from.format(MMM_DD_YYYY_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"        String byFormat \u003d this.by.format(MMM_DD_YYYY_FORMAT);","lastModifiedDate":"2024-02-19"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"        String fromByFormat \u003d \"(from: \" + fromFormat + \" to: \" + byFormat + \")\";","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"        return \"[E]\" + \"[\" + status + \"]\" + \" \" + this.description + \" \" + fromByFormat;","lastModifiedDate":"2024-01-23"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-23"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-23"}],"authorContributionMap":{"gavin331":100}},{"path":"src/main/java/bartenderbob/InputHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Represents a parser that receives and handle user inputs.","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"public class InputHandler {","lastModifiedDate":"2024-01-22"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"     * Handles the user input and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"     * @param ui The UI object that handles the user interface.","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"     * @return The response to the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    public static String handleInput(TaskList taskList, Ui ui, String userInput) {","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"        assert taskList !\u003d null : \"Task list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"        assert ui !\u003d null : \"ui cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        assert userInput !\u003d null : \"user input cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        String[] stringComponents \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"        String firstWord \u003d stringComponents[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"        if (firstWord.equals(\"bye\")) {","lastModifiedDate":"2024-01-23"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"            return ui.leave();","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"        } else {","lastModifiedDate":"2024-01-23"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            try {","lastModifiedDate":"2024-01-24"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"                return processCommand(firstWord, stringComponents, userInput, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"            } catch (BartenderBobException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"                //This exception is when the index from user input is out of the TASKS bounds.","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"                return e.tasksOutOfBounds();","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"                //IndexOutOfBoundsException is for missing userInputs.","lastModifiedDate":"2024-02-14"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"                BartenderBobException error \u003d new BartenderBobException(firstWord);","lastModifiedDate":"2024-02-14"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"                return error.displayError();","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"                return ui.showInvalidDateFormat();","lastModifiedDate":"2024-02-14"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"     * Processes the user input and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * @param firstWord The first word of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     * @param stringComponents The components of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"     * @return The response to the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the user input is invalid.","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"    public static String processCommand(String firstWord,","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"                                        String[] stringComponents,","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"                                        String userInput, TaskList taskList) throws BartenderBobException {","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        switch (firstWord) {","lastModifiedDate":"2024-01-23"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"        case \"list\":","lastModifiedDate":"2024-01-23"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"            return processListCommand(taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"        case \"mark\":","lastModifiedDate":"2024-01-23"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            return processMarkCommand(stringComponents, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"        case \"unmark\":","lastModifiedDate":"2024-01-23"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"            return processUnmarkCommand(stringComponents, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"        case \"delete\":","lastModifiedDate":"2024-01-24"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"            return processDeleteCommand(stringComponents, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"        case \"find\":","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"            return processFindCommand(stringComponents, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"        case \"todo\":","lastModifiedDate":"2024-01-23"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"            return processTodoCommand(userInput, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"        case \"deadline\":","lastModifiedDate":"2024-01-23"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"            return processDeadlineCommand(userInput, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"        case \"event\":","lastModifiedDate":"2024-01-23"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"            return processEventCommand(userInput, taskList);","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"        default:","lastModifiedDate":"2024-01-24"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"            return BartenderBobException.invalidInput(userInput);","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-01-24"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027list\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027list\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"    private static String processListCommand(TaskList taskList) {","lastModifiedDate":"2024-02-14"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"        return taskList.list();","lastModifiedDate":"2024-02-14"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027mark\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"     * @param stringComponents The components of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027mark\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the user input is invalid.","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"    private static String processMarkCommand(String[] stringComponents, TaskList taskList)","lastModifiedDate":"2024-02-14"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"            throws BartenderBobException {","lastModifiedDate":"2024-02-14"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"        String index \u003d stringComponents[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"        return taskList.markDone(index);","lastModifiedDate":"2024-02-14"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027unmark\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"     * @param stringComponents The components of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027unmark\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the user input is invalid.","lastModifiedDate":"2024-02-14"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":101,"author":{"gitId":"gavin331"},"content":"    private static String processUnmarkCommand(String[] stringComponents, TaskList taskList)","lastModifiedDate":"2024-02-14"},{"lineNumber":102,"author":{"gitId":"gavin331"},"content":"            throws BartenderBobException {","lastModifiedDate":"2024-02-14"},{"lineNumber":103,"author":{"gitId":"gavin331"},"content":"        String index \u003d stringComponents[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":104,"author":{"gitId":"gavin331"},"content":"        return taskList.unmarkDone(index);","lastModifiedDate":"2024-02-14"},{"lineNumber":105,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":106,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":107,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":108,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027delete\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":109,"author":{"gitId":"gavin331"},"content":"     * @param stringComponents The components of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":110,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":111,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027delete\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":112,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the user input is invalid.","lastModifiedDate":"2024-02-14"},{"lineNumber":113,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":114,"author":{"gitId":"gavin331"},"content":"    private static String processDeleteCommand(String[] stringComponents, TaskList taskList)","lastModifiedDate":"2024-02-14"},{"lineNumber":115,"author":{"gitId":"gavin331"},"content":"            throws BartenderBobException {","lastModifiedDate":"2024-02-14"},{"lineNumber":116,"author":{"gitId":"gavin331"},"content":"        String index \u003d stringComponents[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":117,"author":{"gitId":"gavin331"},"content":"        return taskList.delete(index);","lastModifiedDate":"2024-02-14"},{"lineNumber":118,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":119,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":120,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":121,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027find\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":122,"author":{"gitId":"gavin331"},"content":"     * @param stringComponents The components of the user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":123,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":124,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027find\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":125,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":126,"author":{"gitId":"gavin331"},"content":"    private static String processFindCommand(String[] stringComponents, TaskList taskList) {","lastModifiedDate":"2024-02-14"},{"lineNumber":127,"author":{"gitId":"gavin331"},"content":"        String substring \u003d stringComponents[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":128,"author":{"gitId":"gavin331"},"content":"        return taskList.find(substring);","lastModifiedDate":"2024-02-14"},{"lineNumber":129,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":130,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":131,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":132,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027todo\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":133,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":134,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":135,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027todo\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":136,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":137,"author":{"gitId":"gavin331"},"content":"    private static String processTodoCommand(String userInput, TaskList taskList) {","lastModifiedDate":"2024-02-14"},{"lineNumber":138,"author":{"gitId":"gavin331"},"content":"        String todoPattern \u003d \"todo \";","lastModifiedDate":"2024-02-14"},{"lineNumber":139,"author":{"gitId":"gavin331"},"content":"        String str \u003d userInput.split(todoPattern)[1];","lastModifiedDate":"2024-02-14"},{"lineNumber":140,"author":{"gitId":"gavin331"},"content":"        ToDo task \u003d new ToDo(str);","lastModifiedDate":"2024-02-14"},{"lineNumber":141,"author":{"gitId":"gavin331"},"content":"        return taskList.store(task);","lastModifiedDate":"2024-02-14"},{"lineNumber":142,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":143,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":144,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027deadline\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":145,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":146,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":147,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027deadline\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":148,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":149,"author":{"gitId":"gavin331"},"content":"    private static String processDeadlineCommand(String userInput, TaskList taskList) {","lastModifiedDate":"2024-02-14"},{"lineNumber":150,"author":{"gitId":"gavin331"},"content":"        String deadlinePattern \u003d \"deadline | /by \";","lastModifiedDate":"2024-02-14"},{"lineNumber":151,"author":{"gitId":"gavin331"},"content":"        String[] deadlineComponents \u003d userInput.split(deadlinePattern);","lastModifiedDate":"2024-02-14"},{"lineNumber":152,"author":{"gitId":"gavin331"},"content":"        Deadline deadline \u003d new Deadline(deadlineComponents[1], deadlineComponents[2]);","lastModifiedDate":"2024-02-14"},{"lineNumber":153,"author":{"gitId":"gavin331"},"content":"        return taskList.store(deadline);","lastModifiedDate":"2024-02-14"},{"lineNumber":154,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":155,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":156,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-14"},{"lineNumber":157,"author":{"gitId":"gavin331"},"content":"     * Processes the \u0027event\u0027 command and returns the appropriate response.","lastModifiedDate":"2024-02-14"},{"lineNumber":158,"author":{"gitId":"gavin331"},"content":"     * @param userInput The user input.","lastModifiedDate":"2024-02-14"},{"lineNumber":159,"author":{"gitId":"gavin331"},"content":"     * @param taskList The TaskList object that stores the tasks.","lastModifiedDate":"2024-02-14"},{"lineNumber":160,"author":{"gitId":"gavin331"},"content":"     * @return The response to the \u0027event\u0027 command.","lastModifiedDate":"2024-02-14"},{"lineNumber":161,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-14"},{"lineNumber":162,"author":{"gitId":"gavin331"},"content":"    private static String processEventCommand(String userInput, TaskList taskList) {","lastModifiedDate":"2024-02-14"},{"lineNumber":163,"author":{"gitId":"gavin331"},"content":"        String eventPattern \u003d \"event | /from | /to \";","lastModifiedDate":"2024-02-14"},{"lineNumber":164,"author":{"gitId":"gavin331"},"content":"        String[] eventComponents \u003d userInput.split(eventPattern);","lastModifiedDate":"2024-02-14"},{"lineNumber":165,"author":{"gitId":"gavin331"},"content":"        Event event \u003d new Event(eventComponents[1], eventComponents[2], eventComponents[3]);","lastModifiedDate":"2024-02-14"},{"lineNumber":166,"author":{"gitId":"gavin331"},"content":"        return taskList.store(event);","lastModifiedDate":"2024-02-14"},{"lineNumber":167,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":168,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":168}},{"path":"src/main/java/bartenderbob/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-06"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2024-02-06"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class Launcher {","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"        BartenderBob bartenderBob \u003d new BartenderBob(\"./data/tasks.txt\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"gavin331":13}},{"path":"src/main/java/bartenderbob/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import javafx.application.Application;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"public class Main extends Application {","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    private BartenderBob bartenderBob \u003d new BartenderBob();","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"            stage.setScene(scene);","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setBartenderBob(bartenderBob);","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"            stage.show();","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"            e.printStackTrace();","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"gavin331":32}},{"path":"src/main/java/bartenderbob/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    private TextField userInput;","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    private Button sendButton;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    private BartenderBob bartenderBob;","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Grey_Cat.png\"));","lastModifiedDate":"2024-02-19"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    private Image bartenderBobImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bartender_Bob.png\"));","lastModifiedDate":"2024-02-19"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    public void initialize() {","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        dialogContainer.getChildren()","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"                .add(DialogBox.getBotWelcomeDialog(new Ui()","lastModifiedDate":"2024-02-19"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"                        .showWelcomeMessage(\"BartenderBob\"), bartenderBobImage));","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"        scrollPane.setStyle(\"-fx-background: #A89A90;\");","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"    public void setBartenderBob(BartenderBob d) {","lastModifiedDate":"2024-02-09"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"        bartenderBob \u003d d;","lastModifiedDate":"2024-02-09"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2024-02-09"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-09"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"    @FXML","lastModifiedDate":"2024-02-09"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"    private void handleUserInput() {","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        String response \u003d bartenderBob.getResponse(input);","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2024-02-09"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"                DialogBox.getBotDialog(response, bartenderBobImage)","lastModifiedDate":"2024-02-19"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"        );","lastModifiedDate":"2024-02-09"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"        userInput.clear();","lastModifiedDate":"2024-02-09"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"gavin331":54}},{"path":"src/main/java/bartenderbob/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Files;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Path;","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"import java.util.List;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":" * Represents the storage class to store user tasks into the hard disk.","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"public class Storage {","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    /** File path to the storage file */","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    private String filePath; //eg \"./data/tasks.txt\"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    /** Displays messages to the user */","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Storage class and initialises its file path.","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     * @param filePath File path to the storage file.","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     * Loads the tasks from the storage file into BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * @return ArrayList of tasks","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If error occurred while loading the tasks into BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    public ArrayList\u003cTask\u003e load() throws BartenderBobException {","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"            assert filePath !\u003d null : \"File path cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"            ArrayList\u003cTask\u003e taskArray \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath); //Operating system independent","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"            if (Files.exists(path)) {","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"                List\u003cString\u003e tasks \u003d Files.readAllLines(path);","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"                for (String taskString : tasks) {","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"                    Task task \u003d parseTaskFromString(taskString);","lastModifiedDate":"2024-02-14"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"                    taskArray.add(task);","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"                }","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"            } else {","lastModifiedDate":"2024-02-14"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"                //Create data directory","lastModifiedDate":"2024-02-14"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"                //if path is \"./data/tasks.txt\", then path.getParent()","lastModifiedDate":"2024-02-14"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"                //gives data.","lastModifiedDate":"2024-02-14"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"                Files.createDirectories(path.getParent());","lastModifiedDate":"2024-02-14"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"                //Create tasks.txt","lastModifiedDate":"2024-02-14"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"                Files.createFile(path);","lastModifiedDate":"2024-02-14"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"            return taskArray;","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"     * Parses a task from a string and returns the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"     * @param taskString String representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"     * @return Task","lastModifiedDate":"2024-02-19"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"    private Task parseTaskFromString(String taskString) {","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"        String[] taskStringComponents \u003d taskString.split(\" \\\\| \");","lastModifiedDate":"2024-02-02"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        String taskType \u003d taskStringComponents[0];","lastModifiedDate":"2024-02-02"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"        String taskStatus \u003d taskStringComponents[1];","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"        boolean isDone \u003d taskStatus.equals(\"X\");","lastModifiedDate":"2024-02-01"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"        String description \u003d taskStringComponents[2];","lastModifiedDate":"2024-02-02"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"        if (taskType.equals(\"T\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"            return new ToDo(description, isDone);","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"        } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"            String dueDate \u003d taskStringComponents[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"            dueDate \u003d convertDateFormat(dueDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"            return new Deadline(description, dueDate, isDone);","lastModifiedDate":"2024-02-14"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"        } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"            String fromDate \u003d taskStringComponents[3];","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"            fromDate \u003d convertDateFormat(fromDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"            String toDate \u003d taskStringComponents[4];","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"            toDate \u003d convertDateFormat(toDate);","lastModifiedDate":"2024-02-01"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"            return new Event(description, fromDate, toDate, isDone);","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"        return null;","lastModifiedDate":"2024-02-14"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"     * Saves changes to the files in the hard disk","lastModifiedDate":"2024-02-19"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"     * especially after unmarking, marking and deleting them.","lastModifiedDate":"2024-02-02"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"     * @param tasks The tasks that the user has inputted to BartenderBob.","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"    public void saveChanges(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"            assert filePath !\u003d null : \"File path cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"            assert tasks !\u003d null : \"Task cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-01"},{"lineNumber":101,"author":{"gitId":"gavin331"},"content":"            Files.write(path, \"\".getBytes(), StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2024-02-01"},{"lineNumber":102,"author":{"gitId":"gavin331"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"gavin331"},"content":"                saveTask(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":104,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":105,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":106,"author":{"gitId":"gavin331"},"content":"            ui.showSaveChangesError();","lastModifiedDate":"2024-02-02"},{"lineNumber":107,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":108,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":109,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":110,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":112,"author":{"gitId":"gavin331"},"content":"     * Converts date format from MMM dd yyyy to yyyy-MM-dd","lastModifiedDate":"2024-02-19"},{"lineNumber":113,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"gavin331"},"content":"     * @param oldDateFormat Date which is of MMM dd yyyy format.","lastModifiedDate":"2024-02-02"},{"lineNumber":115,"author":{"gitId":"gavin331"},"content":"     * @return Date which is of yyyy-MM-dd format.","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":117,"author":{"gitId":"gavin331"},"content":"    private String convertDateFormat(String oldDateFormat) {","lastModifiedDate":"2024-02-01"},{"lineNumber":118,"author":{"gitId":"gavin331"},"content":"        //The storage and show() method stores the date as \"MMM dd yyyy\"","lastModifiedDate":"2024-02-14"},{"lineNumber":119,"author":{"gitId":"gavin331"},"content":"        //however, the constructor for deadline and event takes in a date","lastModifiedDate":"2024-02-14"},{"lineNumber":120,"author":{"gitId":"gavin331"},"content":"        //as \"yyyy-MM-dd\". That\u0027s why we need this method when loading from","lastModifiedDate":"2024-02-14"},{"lineNumber":121,"author":{"gitId":"gavin331"},"content":"        //storage into the chatbot.","lastModifiedDate":"2024-02-14"},{"lineNumber":122,"author":{"gitId":"gavin331"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2024-02-01"},{"lineNumber":123,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":124,"author":{"gitId":"gavin331"},"content":"        // Parse the original string to LocalDate","lastModifiedDate":"2024-02-01"},{"lineNumber":125,"author":{"gitId":"gavin331"},"content":"        LocalDate localDate \u003d LocalDate.parse(oldDateFormat, inputFormatter);","lastModifiedDate":"2024-02-01"},{"lineNumber":126,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":127,"author":{"gitId":"gavin331"},"content":"        // Define the formatter for the output pattern","lastModifiedDate":"2024-02-01"},{"lineNumber":128,"author":{"gitId":"gavin331"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2024-02-01"},{"lineNumber":129,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":130,"author":{"gitId":"gavin331"},"content":"        // Format the LocalDate to the desired output pattern","lastModifiedDate":"2024-02-01"},{"lineNumber":131,"author":{"gitId":"gavin331"},"content":"        return localDate.format(outputFormatter);","lastModifiedDate":"2024-02-01"},{"lineNumber":132,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":133,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":134,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-02"},{"lineNumber":135,"author":{"gitId":"gavin331"},"content":"     * Saves tasks to the storage file specified by the filepath,","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"gavin331"},"content":"     * especially after adding them to the tasks list.","lastModifiedDate":"2024-02-02"},{"lineNumber":137,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-02"},{"lineNumber":138,"author":{"gitId":"gavin331"},"content":"     * @param task The task that we are saving to the storage file.","lastModifiedDate":"2024-02-02"},{"lineNumber":139,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-02"},{"lineNumber":140,"author":{"gitId":"gavin331"},"content":"    public void saveTask(Task task) {","lastModifiedDate":"2024-02-02"},{"lineNumber":141,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":142,"author":{"gitId":"gavin331"},"content":"            assert task !\u003d null : \"Task cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":143,"author":{"gitId":"gavin331"},"content":"            Path path \u003d Paths.get(filePath);","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"gavin331"},"content":"            String taskString \u003d task.show();","lastModifiedDate":"2024-02-01"},{"lineNumber":145,"author":{"gitId":"gavin331"},"content":"            String typeOfTask \u003d taskString.substring(1, 2);","lastModifiedDate":"2024-02-14"},{"lineNumber":146,"author":{"gitId":"gavin331"},"content":"            String taskStatus \u003d taskString.substring(4, 5);","lastModifiedDate":"2024-02-14"},{"lineNumber":147,"author":{"gitId":"gavin331"},"content":"            String saveEntry \u003d createSaveEntry(typeOfTask, taskString, taskStatus);","lastModifiedDate":"2024-02-14"},{"lineNumber":148,"author":{"gitId":"gavin331"},"content":"            Files.write(path, (saveEntry + System.lineSeparator()).getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2024-02-14"},{"lineNumber":149,"author":{"gitId":"gavin331"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-14"},{"lineNumber":150,"author":{"gitId":"gavin331"},"content":"            ui.showSaveTasksError();","lastModifiedDate":"2024-02-14"},{"lineNumber":151,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":152,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":153,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":154,"author":{"gitId":"gavin331"},"content":"     * Creates a save entry for the task to be saved into the storage file.","lastModifiedDate":"2024-02-19"},{"lineNumber":155,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":156,"author":{"gitId":"gavin331"},"content":"     * @param typeOfTask The type of task.","lastModifiedDate":"2024-02-19"},{"lineNumber":157,"author":{"gitId":"gavin331"},"content":"     * @param taskString The string representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":158,"author":{"gitId":"gavin331"},"content":"     * @param taskStatus The status of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":159,"author":{"gitId":"gavin331"},"content":"     * @return The save entry for the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":160,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":161,"author":{"gitId":"gavin331"},"content":"    private String createSaveEntry(String typeOfTask, String taskString, String taskStatus) {","lastModifiedDate":"2024-02-14"},{"lineNumber":162,"author":{"gitId":"gavin331"},"content":"        if (typeOfTask.equals(\"T\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":163,"author":{"gitId":"gavin331"},"content":"            return createTodoSaveEntry(taskString, taskStatus);","lastModifiedDate":"2024-02-14"},{"lineNumber":164,"author":{"gitId":"gavin331"},"content":"        } else if (typeOfTask.equals(\"D\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":165,"author":{"gitId":"gavin331"},"content":"            return createDeadlineSaveEntry(taskString, taskStatus);","lastModifiedDate":"2024-02-14"},{"lineNumber":166,"author":{"gitId":"gavin331"},"content":"        } else if (typeOfTask.equals(\"E\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":167,"author":{"gitId":"gavin331"},"content":"            return createEventSaveEntry(taskString, taskStatus);","lastModifiedDate":"2024-02-14"},{"lineNumber":168,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":169,"author":{"gitId":"gavin331"},"content":"        return null;","lastModifiedDate":"2024-02-14"},{"lineNumber":170,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":171,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":172,"author":{"gitId":"gavin331"},"content":"     * Creates a save entry for the todo task to be saved into the storage file.","lastModifiedDate":"2024-02-19"},{"lineNumber":173,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":174,"author":{"gitId":"gavin331"},"content":"     * @param taskString The string representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":175,"author":{"gitId":"gavin331"},"content":"     * @param taskStatus The status of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":176,"author":{"gitId":"gavin331"},"content":"     * @return The save entry for the todo task.","lastModifiedDate":"2024-02-19"},{"lineNumber":177,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":178,"author":{"gitId":"gavin331"},"content":"    private String createTodoSaveEntry(String taskString, String taskStatus) {","lastModifiedDate":"2024-02-14"},{"lineNumber":179,"author":{"gitId":"gavin331"},"content":"        String taskDescription \u003d taskString.substring(7);","lastModifiedDate":"2024-02-14"},{"lineNumber":180,"author":{"gitId":"gavin331"},"content":"        return \"T\" + \" | \" + taskStatus + \" | \" + taskDescription;","lastModifiedDate":"2024-02-14"},{"lineNumber":181,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":182,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":183,"author":{"gitId":"gavin331"},"content":"     * Creates a save entry for the deadline task to be saved into the storage file.","lastModifiedDate":"2024-02-19"},{"lineNumber":184,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":185,"author":{"gitId":"gavin331"},"content":"     * @param taskString The string representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":186,"author":{"gitId":"gavin331"},"content":"     * @param taskStatus The status of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":187,"author":{"gitId":"gavin331"},"content":"     * @return The save entry for the deadline task.","lastModifiedDate":"2024-02-19"},{"lineNumber":188,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":189,"author":{"gitId":"gavin331"},"content":"    private String createDeadlineSaveEntry(String taskString, String taskStatus) {","lastModifiedDate":"2024-02-14"},{"lineNumber":190,"author":{"gitId":"gavin331"},"content":"        int startIndex \u003d taskString.indexOf(\"(by: \");","lastModifiedDate":"2024-02-01"},{"lineNumber":191,"author":{"gitId":"gavin331"},"content":"        int endIndex \u003d taskString.indexOf(\")\");","lastModifiedDate":"2024-02-01"},{"lineNumber":192,"author":{"gitId":"gavin331"},"content":"        String taskDescription \u003d taskString.substring(7, startIndex - 1);","lastModifiedDate":"2024-02-14"},{"lineNumber":193,"author":{"gitId":"gavin331"},"content":"        String deadline \u003d taskString.substring(startIndex + 5, endIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":194,"author":{"gitId":"gavin331"},"content":"        return \"D\" + \" | \" + taskStatus + \" | \" + taskDescription","lastModifiedDate":"2024-02-14"},{"lineNumber":195,"author":{"gitId":"gavin331"},"content":"                + \" | \" + deadline;","lastModifiedDate":"2024-02-01"},{"lineNumber":196,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":197,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":198,"author":{"gitId":"gavin331"},"content":"     * Creates a save entry for the event task to be saved into the storage file.","lastModifiedDate":"2024-02-19"},{"lineNumber":199,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":200,"author":{"gitId":"gavin331"},"content":"     * @param taskString The string representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":201,"author":{"gitId":"gavin331"},"content":"     * @param taskStatus The status of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":202,"author":{"gitId":"gavin331"},"content":"     * @return The save entry for the event task.","lastModifiedDate":"2024-02-19"},{"lineNumber":203,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":204,"author":{"gitId":"gavin331"},"content":"    private String createEventSaveEntry(String taskString, String taskStatus) {","lastModifiedDate":"2024-02-14"},{"lineNumber":205,"author":{"gitId":"gavin331"},"content":"        int startIndex \u003d taskString.indexOf(\"(from: \");","lastModifiedDate":"2024-02-01"},{"lineNumber":206,"author":{"gitId":"gavin331"},"content":"        String taskDescription \u003d taskString.substring(7, startIndex - 1);","lastModifiedDate":"2024-02-14"},{"lineNumber":207,"author":{"gitId":"gavin331"},"content":"        int endIndex \u003d taskString.indexOf(\" to:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":208,"author":{"gitId":"gavin331"},"content":"        String fromDate \u003d taskString.substring(startIndex + 7, endIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":209,"author":{"gitId":"gavin331"},"content":"        startIndex \u003d taskString.indexOf(\")\");","lastModifiedDate":"2024-02-01"},{"lineNumber":210,"author":{"gitId":"gavin331"},"content":"        String toDate \u003d taskString.substring(endIndex + 5, startIndex);","lastModifiedDate":"2024-02-01"},{"lineNumber":211,"author":{"gitId":"gavin331"},"content":"        return \"E\" + \" | \" + taskStatus + \" | \" + taskDescription","lastModifiedDate":"2024-02-14"},{"lineNumber":212,"author":{"gitId":"gavin331"},"content":"                + \" | \" + fromDate + \" | \" + toDate;","lastModifiedDate":"2024-02-01"},{"lineNumber":213,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":214,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":214}},{"path":"src/main/java/bartenderbob/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":" * Represents a task that has a description and a status.","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"public class Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"    /** Description of the task */","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    protected String description;","lastModifiedDate":"2024-01-23"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    /** Represents whether the task has been completed */","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2024-01-23"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    /** Represents the status of the task */","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    protected String status;","lastModifiedDate":"2024-01-23"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of a Task class that has a description.","lastModifiedDate":"2024-02-19"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * @param description Represents the descriptions of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    public Task(String description) {","lastModifiedDate":"2024-01-22"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-22"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of a Task class that has a description and whether it has been completed.","lastModifiedDate":"2024-02-19"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     * @param description Represents the descriptions of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-19"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2024-01-22"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-01-22"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-01-22"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-19"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    public void mark() {","lastModifiedDate":"2024-01-22"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-01-22"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-01-22"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     * Unmarks the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-22"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-22"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"     * @return String representation of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-01-22"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"        return \"\";","lastModifiedDate":"2024-02-02"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-01-22"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"     * Returns the description of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"     * @return Description of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-02"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"        return this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-01-22"}],"authorContributionMap":{"gavin331":62}},{"path":"src/main/java/bartenderbob/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" * Represents the list of tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class TaskList {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    /** The storage of the tasks */","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    private static final Storage STORAGE \u003d new Storage(\"./data/tasks.txt\");","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    /** The list of tasks */","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    /** The user interface */","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the TaskList class.","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the TaskList class with the specified tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"     * Stores the task in the list of tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * @param task The task to be stored.","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user after storing the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"    public String store(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"        assert task !\u003d null : \"Task cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        if (task instanceof Event) {","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"            Event existingEvent \u003d getEventIfClash(task);","lastModifiedDate":"2024-02-14"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"            if (existingEvent !\u003d null) {","lastModifiedDate":"2024-02-14"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"                //TODO: Throw the exception and handle it in the input handler?","lastModifiedDate":"2024-02-14"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"                return BartenderBobException.showEventClashError((Event) task, existingEvent);","lastModifiedDate":"2024-02-14"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        STORAGE.saveTask(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"        int totalTasks \u003d tasks.size();","lastModifiedDate":"2024-02-06"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"        return ui.showStoreTasksMessage(task, totalTasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     * Returns the existing event that clashes with the new event.","lastModifiedDate":"2024-02-19"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"     * @param task The new event.","lastModifiedDate":"2024-02-19"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"     * @return The event that clashes with the new event.","lastModifiedDate":"2024-02-19"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"    public Event getEventIfClash(Task task) {","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"        for (Task existingTask : tasks) {","lastModifiedDate":"2024-02-14"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"            if (!(existingTask instanceof Event)) {","lastModifiedDate":"2024-02-14"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"                continue;","lastModifiedDate":"2024-02-14"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"            Event newEvent \u003d (Event) task;","lastModifiedDate":"2024-02-14"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"            Event existingEvent \u003d (Event) existingTask;","lastModifiedDate":"2024-02-14"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"            if (newEvent.hasNoClash(existingEvent)) {","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"                continue;","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"            return existingEvent;","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-14"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"        return null;","lastModifiedDate":"2024-02-14"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"     * @return The list of tasks.","lastModifiedDate":"2024-02-19"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"    public String list() {","lastModifiedDate":"2024-02-06"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"        stringBuilder.append(ui.showListCommandHeader()).append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-06"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"            stringBuilder.append(ui.showListElements(number, tasks, i)).append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-02-19"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2024-02-19"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user after marking the task as done.","lastModifiedDate":"2024-02-19"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the index is out of bounds.","lastModifiedDate":"2024-02-19"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"    public String markDone(String index) throws BartenderBobException {","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"            Task task \u003d tasks.get(integerIndex - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"            task.mark();","lastModifiedDate":"2024-02-02"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(tasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"            return ui.showMarkDone(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":101,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":102,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":104,"author":{"gitId":"gavin331"},"content":"     * Unmarks the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":105,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":106,"author":{"gitId":"gavin331"},"content":"     * @param index The index of the task to be unmarked.","lastModifiedDate":"2024-02-19"},{"lineNumber":107,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user after unmarking the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":108,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the index is out of bounds.","lastModifiedDate":"2024-02-19"},{"lineNumber":109,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":110,"author":{"gitId":"gavin331"},"content":"    public String unmarkDone(String index) throws BartenderBobException {","lastModifiedDate":"2024-02-06"},{"lineNumber":111,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":112,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":113,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":114,"author":{"gitId":"gavin331"},"content":"            Task task \u003d tasks.get(integerIndex - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":115,"author":{"gitId":"gavin331"},"content":"            task.unmark();","lastModifiedDate":"2024-02-02"},{"lineNumber":116,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(tasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":117,"author":{"gitId":"gavin331"},"content":"            return ui.showUnmarkDone(task);","lastModifiedDate":"2024-02-06"},{"lineNumber":118,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":119,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":120,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":121,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":122,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":123,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":124,"author":{"gitId":"gavin331"},"content":"     * Deletes the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":125,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":126,"author":{"gitId":"gavin331"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2024-02-19"},{"lineNumber":127,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user after deleting the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":128,"author":{"gitId":"gavin331"},"content":"     * @throws BartenderBobException If the index is out of bounds.","lastModifiedDate":"2024-02-19"},{"lineNumber":129,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":130,"author":{"gitId":"gavin331"},"content":"    public String delete(String index) throws BartenderBobException {","lastModifiedDate":"2024-02-06"},{"lineNumber":131,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":132,"author":{"gitId":"gavin331"},"content":"        try {","lastModifiedDate":"2024-02-02"},{"lineNumber":133,"author":{"gitId":"gavin331"},"content":"            int integerIndex \u003d Integer.parseInt(index);","lastModifiedDate":"2024-02-02"},{"lineNumber":134,"author":{"gitId":"gavin331"},"content":"            String display \u003d tasks.get(integerIndex - 1).show();","lastModifiedDate":"2024-02-06"},{"lineNumber":135,"author":{"gitId":"gavin331"},"content":"            tasks.remove(integerIndex - 1);","lastModifiedDate":"2024-02-06"},{"lineNumber":136,"author":{"gitId":"gavin331"},"content":"            STORAGE.saveChanges(tasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":137,"author":{"gitId":"gavin331"},"content":"            int totalTasks \u003d tasks.size();","lastModifiedDate":"2024-02-06"},{"lineNumber":138,"author":{"gitId":"gavin331"},"content":"            return ui.showDelete(display, totalTasks);","lastModifiedDate":"2024-02-06"},{"lineNumber":139,"author":{"gitId":"gavin331"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-02"},{"lineNumber":140,"author":{"gitId":"gavin331"},"content":"            throw new BartenderBobException();","lastModifiedDate":"2024-02-02"},{"lineNumber":141,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":142,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":143,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":144,"author":{"gitId":"gavin331"},"content":"     * Finds the tasks that contain the specified substring.","lastModifiedDate":"2024-02-19"},{"lineNumber":145,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":146,"author":{"gitId":"gavin331"},"content":"     * @param substring The substring to be found.","lastModifiedDate":"2024-02-19"},{"lineNumber":147,"author":{"gitId":"gavin331"},"content":"     * @return The tasks that contain the specified substring.","lastModifiedDate":"2024-02-19"},{"lineNumber":148,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":149,"author":{"gitId":"gavin331"},"content":"    public String find(String substring) {","lastModifiedDate":"2024-02-06"},{"lineNumber":150,"author":{"gitId":"gavin331"},"content":"        assert tasks !\u003d null : \"Tasks list cannot be null\";","lastModifiedDate":"2024-02-13"},{"lineNumber":151,"author":{"gitId":"gavin331"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-02"},{"lineNumber":152,"author":{"gitId":"gavin331"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":153,"author":{"gitId":"gavin331"},"content":"            if (task.getDescription().contains(substring)) {","lastModifiedDate":"2024-02-02"},{"lineNumber":154,"author":{"gitId":"gavin331"},"content":"                result.add(task);","lastModifiedDate":"2024-02-02"},{"lineNumber":155,"author":{"gitId":"gavin331"},"content":"            }","lastModifiedDate":"2024-02-02"},{"lineNumber":156,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":157,"author":{"gitId":"gavin331"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2024-02-06"},{"lineNumber":158,"author":{"gitId":"gavin331"},"content":"        stringBuilder.append(ui.showFindCommandHeader()).append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":159,"author":{"gitId":"gavin331"},"content":"        for (int i \u003d 0; i \u003c result.size(); i++) {","lastModifiedDate":"2024-02-02"},{"lineNumber":160,"author":{"gitId":"gavin331"},"content":"            int number \u003d i + 1;","lastModifiedDate":"2024-02-02"},{"lineNumber":161,"author":{"gitId":"gavin331"},"content":"            ui.showListElements(number, result, i);","lastModifiedDate":"2024-02-02"},{"lineNumber":162,"author":{"gitId":"gavin331"},"content":"            stringBuilder.append(ui.showListElements(number, result, i)).append(\"\\n\");","lastModifiedDate":"2024-02-06"},{"lineNumber":163,"author":{"gitId":"gavin331"},"content":"        }","lastModifiedDate":"2024-02-02"},{"lineNumber":164,"author":{"gitId":"gavin331"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":165,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":166,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":166}},{"path":"src/main/java/bartenderbob/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":" * Represents the ToDo task that has a description.","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-02"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of a ToDo class that has a description.","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"     * @param description Represents the descriptions of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"        super(description);","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of a ToDo class that has a description and whether it has been completed.","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * @param description Represents the descriptions of the task.","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     * @param isDone Represents whether the task has been completed.","lastModifiedDate":"2024-02-19"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"        super(description, isDone);","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     * Returns the string representation of the ToDo task.","lastModifiedDate":"2024-02-19"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"     * @return String representation of the ToDo task.","lastModifiedDate":"2024-02-19"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    @Override","lastModifiedDate":"2024-02-02"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    public String show() {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"        super.status \u003d isDone ? \"X\" : \" \";","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"        return \"[T]\" + \"[\" + status + \"]\" + \" \" + this.description;","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":34}},{"path":"src/main/java/bartenderbob/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"/**","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":" * Represents the user interface of the application.","lastModifiedDate":"2024-02-19"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":" */","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"public class Ui {","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"     * Creates an instance of the Ui class.","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public String leave() {","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        return \"Bye! Another round next time!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"     * Returns the welcome message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"     * @param name Name of the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"     * @return Welcome message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    public String showWelcomeMessage(String name) {","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"        return \"Welcome back! I\u0027m \" + name + \"\\nHow\u0027s it going out there?\";","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred while loading.","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    public String showLoadingError() {","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"        return \"Error occurred while loading!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the user input.","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"    public String showInvalidInputError(String userInput) {","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        return \"What? I can\u0027t understand \" + userInput + \" \u003d(\";","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the mark command.","lastModifiedDate":"2024-02-19"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":42,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":43,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":44,"author":{"gitId":"gavin331"},"content":"    public String showInvalidMarkCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"gavin331"},"content":"        return \"Hmm, please provide a valid task number to mark.\";","lastModifiedDate":"2024-02-06"},{"lineNumber":46,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":47,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":48,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the unmark command.","lastModifiedDate":"2024-02-19"},{"lineNumber":49,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":50,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":51,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":52,"author":{"gitId":"gavin331"},"content":"    public String showInvalidUnmarkCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"gavin331"},"content":"        return \"Hmm, please provide a valid task number to unmark.\";","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":55,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":56,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the delete command.","lastModifiedDate":"2024-02-19"},{"lineNumber":57,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":58,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":59,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":60,"author":{"gitId":"gavin331"},"content":"    public String showInvalidDeleteCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"gavin331"},"content":"        return \"Hmm, please provide a valid task number to delete.\";","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":63,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":64,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the todo command.","lastModifiedDate":"2024-02-19"},{"lineNumber":65,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":66,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":67,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":68,"author":{"gitId":"gavin331"},"content":"    public String showInvalidTodoCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"gavin331"},"content":"        return \"Hmm, did you add in a description for the todo?\";","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":71,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":72,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the deadline command.","lastModifiedDate":"2024-02-19"},{"lineNumber":73,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":74,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":75,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":76,"author":{"gitId":"gavin331"},"content":"    public String showInvalidDeadlineCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":77,"author":{"gitId":"gavin331"},"content":"        return \"Hey, this is an invalid format for deadline!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":79,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":80,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the input date is of the wrong format.","lastModifiedDate":"2024-02-19"},{"lineNumber":81,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":82,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":83,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":84,"author":{"gitId":"gavin331"},"content":"    public String showInvalidDateFormat() {","lastModifiedDate":"2024-02-06"},{"lineNumber":85,"author":{"gitId":"gavin331"},"content":"        return \"Check whether the date format is yyyy-MM-dd or if the dates make sense!\";","lastModifiedDate":"2024-02-19"},{"lineNumber":86,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":87,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":88,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred in the event command.","lastModifiedDate":"2024-02-19"},{"lineNumber":89,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":90,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":91,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":92,"author":{"gitId":"gavin331"},"content":"    public String showInvalidEventCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":93,"author":{"gitId":"gavin331"},"content":"        return \"Hey, this is an invalid format for event!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":95,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":96,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the user specified index is out of bounds.","lastModifiedDate":"2024-02-19"},{"lineNumber":97,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":98,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":99,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":100,"author":{"gitId":"gavin331"},"content":"    public String showOutOfBoundsCommand() {","lastModifiedDate":"2024-02-06"},{"lineNumber":101,"author":{"gitId":"gavin331"},"content":"        return \"The index is out of bounds!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":102,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":103,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":104,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred while saving changes to the storage.","lastModifiedDate":"2024-02-19"},{"lineNumber":105,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":106,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":107,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":108,"author":{"gitId":"gavin331"},"content":"    public String showSaveChangesError() {","lastModifiedDate":"2024-02-06"},{"lineNumber":109,"author":{"gitId":"gavin331"},"content":"        return \"Something went wrong while saving changes!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":110,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":111,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":112,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an error occurred while saving tasks to the storage.","lastModifiedDate":"2024-02-19"},{"lineNumber":113,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":114,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":115,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":116,"author":{"gitId":"gavin331"},"content":"    public String showSaveTasksError() {","lastModifiedDate":"2024-02-06"},{"lineNumber":117,"author":{"gitId":"gavin331"},"content":"        return \"Something went wrong while saving tasks!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":118,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":119,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":120,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the task is stored in the storage.","lastModifiedDate":"2024-02-19"},{"lineNumber":121,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":122,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":123,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":124,"author":{"gitId":"gavin331"},"content":"    public String showStoreTasksMessage(Task task, int totalTasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":125,"author":{"gitId":"gavin331"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + task.show() + \"\\nNow you have \" + totalTasks","lastModifiedDate":"2024-02-06"},{"lineNumber":126,"author":{"gitId":"gavin331"},"content":"                + \" tasks in the list.\";","lastModifiedDate":"2024-02-06"},{"lineNumber":127,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":128,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":129,"author":{"gitId":"gavin331"},"content":"     * Returns the header message to the user when the list of tasks is shown.","lastModifiedDate":"2024-02-19"},{"lineNumber":130,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":131,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":132,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":133,"author":{"gitId":"gavin331"},"content":"    public String showListCommandHeader() {","lastModifiedDate":"2024-02-06"},{"lineNumber":134,"author":{"gitId":"gavin331"},"content":"        return \"Here are the tasks in your list!\";","lastModifiedDate":"2024-02-06"},{"lineNumber":135,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":136,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":137,"author":{"gitId":"gavin331"},"content":"     * Displays the list of tasks to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":138,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":139,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":140,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":141,"author":{"gitId":"gavin331"},"content":"    public String showListElements(int number, ArrayList\u003cTask\u003e tasks, int i) {","lastModifiedDate":"2024-02-06"},{"lineNumber":142,"author":{"gitId":"gavin331"},"content":"        return number + \".\" + tasks.get(i).show();","lastModifiedDate":"2024-02-06"},{"lineNumber":143,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":144,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":145,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the task is marked as done.","lastModifiedDate":"2024-02-19"},{"lineNumber":146,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":147,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":148,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":149,"author":{"gitId":"gavin331"},"content":"    public String showMarkDone(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":150,"author":{"gitId":"gavin331"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.show();","lastModifiedDate":"2024-02-06"},{"lineNumber":151,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":152,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":153,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the task is unmarked.","lastModifiedDate":"2024-02-19"},{"lineNumber":154,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":155,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":156,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":157,"author":{"gitId":"gavin331"},"content":"    public String showUnmarkDone(Task task) {","lastModifiedDate":"2024-02-06"},{"lineNumber":158,"author":{"gitId":"gavin331"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\" + task.show();","lastModifiedDate":"2024-02-06"},{"lineNumber":159,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":160,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":161,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when the task is deleted.","lastModifiedDate":"2024-02-19"},{"lineNumber":162,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":163,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":164,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":165,"author":{"gitId":"gavin331"},"content":"    public String showDelete(String display, int totalTasks) {","lastModifiedDate":"2024-02-06"},{"lineNumber":166,"author":{"gitId":"gavin331"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + display","lastModifiedDate":"2024-02-06"},{"lineNumber":167,"author":{"gitId":"gavin331"},"content":"                + \"\\nNow you have \" + totalTasks + \" tasks in the list.\";","lastModifiedDate":"2024-02-06"},{"lineNumber":168,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":169,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":170,"author":{"gitId":"gavin331"},"content":"     * Returns the header message to the user when the task is found.","lastModifiedDate":"2024-02-19"},{"lineNumber":171,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":172,"author":{"gitId":"gavin331"},"content":"     * @return Message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":173,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":174,"author":{"gitId":"gavin331"},"content":"    public String showFindCommandHeader() {","lastModifiedDate":"2024-02-06"},{"lineNumber":175,"author":{"gitId":"gavin331"},"content":"        return \"Here are the matching tasks in your list:\";","lastModifiedDate":"2024-02-06"},{"lineNumber":176,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":177,"author":{"gitId":"gavin331"},"content":"    /**","lastModifiedDate":"2024-02-19"},{"lineNumber":178,"author":{"gitId":"gavin331"},"content":"     * Returns the message to the user when an event date clashes with an existing event.","lastModifiedDate":"2024-02-19"},{"lineNumber":179,"author":{"gitId":"gavin331"},"content":"     *","lastModifiedDate":"2024-02-19"},{"lineNumber":180,"author":{"gitId":"gavin331"},"content":"     * @return Error message to the user.","lastModifiedDate":"2024-02-19"},{"lineNumber":181,"author":{"gitId":"gavin331"},"content":"     */","lastModifiedDate":"2024-02-19"},{"lineNumber":182,"author":{"gitId":"gavin331"},"content":"    public String showClashError(Event newEvent, Event existingEvent) {","lastModifiedDate":"2024-02-14"},{"lineNumber":183,"author":{"gitId":"gavin331"},"content":"        return \"Hey, this event clashes with another event!\\n\" + newEvent.show()","lastModifiedDate":"2024-02-14"},{"lineNumber":184,"author":{"gitId":"gavin331"},"content":"                + \"\\nClashes with existing event:\\n\" + existingEvent.show();","lastModifiedDate":"2024-02-14"},{"lineNumber":185,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":186,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"gavin331":186}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #C39B77;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"            \u003cFont name\u003d\"Berlin Sans FB\" size\u003d\"12.0\" /\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"            \u003cclip\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"                \u003cCircle centerX\u003d\"49.5\" centerY\u003d\"49.5\" radius\u003d\"35.5\" /\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"            \u003c/clip\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"gavin331":28}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.geometry.Point3D?\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/21\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"bartenderbob.MainWindow\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter command here!\" AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"        \u003cButton fx:id\u003d\"sendButton\" graphicTextGap\u003d\"0.0\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #C39B77;\" text\u003d\"Send\"\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"         \u003cfont\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"            \u003cFont name\u003d\"Lucida Fax Regular\" size\u003d\"18.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" spacing\u003d\"10.0\" /\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"            \u003c/content\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"         \u003crotationAxis\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"            \u003cPoint3D /\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"         \u003c/rotationAxis\u003e","lastModifiedDate":"2024-02-19"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    \u003c/children\u003e","lastModifiedDate":"2024-02-09"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"gavin331":27}},{"path":"src/test/java/bartenderbob/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-05"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"public class DeadlineTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"    public void deadline_invalidString_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"Tuesday\");","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"    public void deadline_invalidMonth_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-10\");","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"    public void deadline_dayExceedBounds_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-40\");","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":29,"author":{"gitId":"gavin331"},"content":"    public void deadline_dayEqualZero_exceptionThrown() {","lastModifiedDate":"2024-02-05"},{"lineNumber":30,"author":{"gitId":"gavin331"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e {","lastModifiedDate":"2024-02-02"},{"lineNumber":31,"author":{"gitId":"gavin331"},"content":"            new Deadline(\"Testing!\", \"2019-13-0\");","lastModifiedDate":"2024-02-02"},{"lineNumber":32,"author":{"gitId":"gavin331"},"content":"        });","lastModifiedDate":"2024-02-02"},{"lineNumber":33,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":34,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":35,"author":{"gitId":"gavin331"},"content":"    public void deadline_validString_classCreated() {","lastModifiedDate":"2024-02-05"},{"lineNumber":36,"author":{"gitId":"gavin331"},"content":"        Deadline test \u003d new Deadline(\"Testing!\", \"2019-10-10\");","lastModifiedDate":"2024-02-02"},{"lineNumber":37,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"Deadline instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":38,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[D][ ] Testing! (by: Oct 10 2019)\");","lastModifiedDate":"2024-02-02"},{"lineNumber":39,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":40,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"},{"lineNumber":41,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":41}},{"path":"src/test/java/bartenderbob/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"package bartenderbob;","lastModifiedDate":"2024-02-02"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2024-02-02"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2024-02-02"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"public class ToDoTest {","lastModifiedDate":"2024-02-02"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"    public void toDo_withoutIsDoneParameter_blankStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][ ] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"    public void toDo_trueIsDoneParameter_blankStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\", true);","lastModifiedDate":"2024-02-02"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][X] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":21,"author":{"gitId":"gavin331"},"content":"    @Test","lastModifiedDate":"2024-02-02"},{"lineNumber":22,"author":{"gitId":"gavin331"},"content":"    public void toDo_falseIsDoneParameter_blankStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"gavin331"},"content":"        ToDo test \u003d new ToDo(\"Testing!\", false);","lastModifiedDate":"2024-02-02"},{"lineNumber":24,"author":{"gitId":"gavin331"},"content":"        assertNotNull(test, \"ToDo instance should not be null\");","lastModifiedDate":"2024-02-02"},{"lineNumber":25,"author":{"gitId":"gavin331"},"content":"        assertEquals(test.show(), \"[T][ ] Testing!\");","lastModifiedDate":"2024-02-02"},{"lineNumber":26,"author":{"gitId":"gavin331"},"content":"    }","lastModifiedDate":"2024-02-02"},{"lineNumber":27,"author":{"gitId":"gavin331"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":28,"author":{"gitId":"gavin331"},"content":"}","lastModifiedDate":"2024-02-02"}],"authorContributionMap":{"gavin331":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"gavin331"},"content":"todo buy bread","lastModifiedDate":"2024-01-24"},{"lineNumber":2,"author":{"gitId":"gavin331"},"content":"deadline return book /by June 6th","lastModifiedDate":"2024-01-24"},{"lineNumber":3,"author":{"gitId":"gavin331"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2024-01-24"},{"lineNumber":4,"author":{"gitId":"gavin331"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":5,"author":{"gitId":"gavin331"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2024-01-24"},{"lineNumber":6,"author":{"gitId":"gavin331"},"content":"mark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":7,"author":{"gitId":"gavin331"},"content":"mark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":8,"author":{"gitId":"gavin331"},"content":"unmark 1","lastModifiedDate":"2024-01-24"},{"lineNumber":9,"author":{"gitId":"gavin331"},"content":"list","lastModifiedDate":"2024-01-24"},{"lineNumber":10,"author":{"gitId":"gavin331"},"content":"unmark 4","lastModifiedDate":"2024-01-24"},{"lineNumber":11,"author":{"gitId":"gavin331"},"content":"mark","lastModifiedDate":"2024-01-24"},{"lineNumber":12,"author":{"gitId":"gavin331"},"content":"unmark","lastModifiedDate":"2024-01-24"},{"lineNumber":13,"author":{"gitId":"gavin331"},"content":"delete","lastModifiedDate":"2024-01-24"},{"lineNumber":14,"author":{"gitId":"gavin331"},"content":"todo","lastModifiedDate":"2024-01-24"},{"lineNumber":15,"author":{"gitId":"gavin331"},"content":"deadline","lastModifiedDate":"2024-01-24"},{"lineNumber":16,"author":{"gitId":"gavin331"},"content":"event","lastModifiedDate":"2024-01-24"},{"lineNumber":17,"author":{"gitId":"gavin331"},"content":"mark 5","lastModifiedDate":"2024-01-24"},{"lineNumber":18,"author":{"gitId":"gavin331"},"content":"mark 0","lastModifiedDate":"2024-01-24"},{"lineNumber":19,"author":{"gitId":"gavin331"},"content":"blah","lastModifiedDate":"2024-01-24"},{"lineNumber":20,"author":{"gitId":"gavin331"},"content":"bye","lastModifiedDate":"2024-01-24"}],"authorContributionMap":{"gavin331":20}}]
